
labo_asp.elf:     file format elf32-littlearm


Disassembly of section .text:

80000000 <__do_global_dtors_aux>:
80000000:	e59f3010 	ldr	r3, [pc, #16]	; 80000018 <__do_global_dtors_aux+0x18>
80000004:	e5d32000 	ldrb	r2, [r3]
80000008:	e3520000 	cmp	r2, #0
8000000c:	03a02001 	moveq	r2, #1
80000010:	05c32000 	strbeq	r2, [r3]
80000014:	e12fff1e 	bx	lr
80000018:	8001274c 	.word	0x8001274c

8000001c <frame_dummy>:
8000001c:	e59f0024 	ldr	r0, [pc, #36]	; 80000048 <frame_dummy+0x2c>
80000020:	e92d4008 	push	{r3, lr}
80000024:	e5903000 	ldr	r3, [r0]
80000028:	e3530000 	cmp	r3, #0
8000002c:	0a000003 	beq	80000040 <frame_dummy+0x24>
80000030:	e59f3014 	ldr	r3, [pc, #20]	; 8000004c <frame_dummy+0x30>
80000034:	e3530000 	cmp	r3, #0
80000038:	11a0e00f 	movne	lr, pc
8000003c:	112fff13 	bxne	r3
80000040:	e8bd4008 	pop	{r3, lr}
80000044:	e12fff1e 	bx	lr
80000048:	80011d6c 	.word	0x80011d6c
8000004c:	00000000 	.word	0x00000000

80000050 <start>:

    /* Set stack pointer to end of AppStack and jump to main:
	 */
start:

  ldr sp, =(AppStack_svr + APPSTACKSIZE - 4)
80000050:	e59fd024 	ldr	sp, [pc, #36]	; 8000007c <start+0x2c>

  mrs r1,cpsr
80000054:	e10f1000 	mrs	r1, CPSR
  bic r1,r1,#0x1f
80000058:	e3c1101f 	bic	r1, r1, #31
  orr r1,r1,#0x12
8000005c:	e3811012 	orr	r1, r1, #18
  msr cpsr_c,r1
80000060:	e121f001 	msr	CPSR_c, r1

  ldr sp, =(AppStack_irq + APPSTACKSIZE - 4)
80000064:	e59fd014 	ldr	sp, [pc, #20]	; 80000080 <start+0x30>

  mrs r1,cpsr
80000068:	e10f1000 	mrs	r1, CPSR
  bic r1,r1,#0x1f
8000006c:	e3c1101f 	bic	r1, r1, #31
  orr r1,r1,#0x13
80000070:	e3811013 	orr	r1, r1, #19
  msr cpsr_c,r1
80000074:	e121f001 	msr	CPSR_c, r1

  bl main
80000078:	eb0005d7 	bl	800017dc <main>
8000007c:	800167d4 	.word	0x800167d4
80000080:	800147d4 	.word	0x800147d4

80000084 <SetOutput>:
80000084:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80000088:	e28db000 	add	fp, sp, #0
8000008c:	e24dd00c 	sub	sp, sp, #12
80000090:	e1a03000 	mov	r3, r0
80000094:	e50b100c 	str	r1, [fp, #-12]
80000098:	e54b3005 	strb	r3, [fp, #-5]
8000009c:	e55b3005 	ldrb	r3, [fp, #-5]
800000a0:	e2433001 	sub	r3, r3, #1
800000a4:	e3530005 	cmp	r3, #5
800000a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
800000ac:	ea00001d 	b	80000128 <SetOutput+0xa4>
800000b0:	800000c8 	.word	0x800000c8
800000b4:	800000d8 	.word	0x800000d8
800000b8:	800000e8 	.word	0x800000e8
800000bc:	800000f8 	.word	0x800000f8
800000c0:	80000108 	.word	0x80000108
800000c4:	80000118 	.word	0x80000118
800000c8:	e59f3064 	ldr	r3, [pc, #100]	; 80000134 <SetOutput+0xb0>
800000cc:	e51b200c 	ldr	r2, [fp, #-12]
800000d0:	e5832000 	str	r2, [r3]
800000d4:	ea000013 	b	80000128 <SetOutput+0xa4>
800000d8:	e59f3058 	ldr	r3, [pc, #88]	; 80000138 <SetOutput+0xb4>
800000dc:	e51b200c 	ldr	r2, [fp, #-12]
800000e0:	e5832000 	str	r2, [r3]
800000e4:	ea00000f 	b	80000128 <SetOutput+0xa4>
800000e8:	e59f304c 	ldr	r3, [pc, #76]	; 8000013c <SetOutput+0xb8>
800000ec:	e51b200c 	ldr	r2, [fp, #-12]
800000f0:	e5832000 	str	r2, [r3]
800000f4:	ea00000b 	b	80000128 <SetOutput+0xa4>
800000f8:	e59f3040 	ldr	r3, [pc, #64]	; 80000140 <SetOutput+0xbc>
800000fc:	e51b200c 	ldr	r2, [fp, #-12]
80000100:	e5832000 	str	r2, [r3]
80000104:	ea000007 	b	80000128 <SetOutput+0xa4>
80000108:	e59f3034 	ldr	r3, [pc, #52]	; 80000144 <SetOutput+0xc0>
8000010c:	e51b200c 	ldr	r2, [fp, #-12]
80000110:	e5832000 	str	r2, [r3]
80000114:	ea000003 	b	80000128 <SetOutput+0xa4>
80000118:	e59f3028 	ldr	r3, [pc, #40]	; 80000148 <SetOutput+0xc4>
8000011c:	e51b200c 	ldr	r2, [fp, #-12]
80000120:	e5832000 	str	r2, [r3]
80000124:	e1a00000 	nop			; (mov r0, r0)
80000128:	e28bd000 	add	sp, fp, #0
8000012c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80000130:	e12fff1e 	bx	lr
80000134:	48310094 	.word	0x48310094
80000138:	49050094 	.word	0x49050094
8000013c:	49052094 	.word	0x49052094
80000140:	49054094 	.word	0x49054094
80000144:	49056094 	.word	0x49056094
80000148:	49058094 	.word	0x49058094

8000014c <ClearOutput>:
8000014c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80000150:	e28db000 	add	fp, sp, #0
80000154:	e24dd00c 	sub	sp, sp, #12
80000158:	e1a03000 	mov	r3, r0
8000015c:	e50b100c 	str	r1, [fp, #-12]
80000160:	e54b3005 	strb	r3, [fp, #-5]
80000164:	e55b3005 	ldrb	r3, [fp, #-5]
80000168:	e2433001 	sub	r3, r3, #1
8000016c:	e3530005 	cmp	r3, #5
80000170:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
80000174:	ea00001d 	b	800001f0 <ClearOutput+0xa4>
80000178:	80000190 	.word	0x80000190
8000017c:	800001a0 	.word	0x800001a0
80000180:	800001b0 	.word	0x800001b0
80000184:	800001c0 	.word	0x800001c0
80000188:	800001d0 	.word	0x800001d0
8000018c:	800001e0 	.word	0x800001e0
80000190:	e59f3064 	ldr	r3, [pc, #100]	; 800001fc <ClearOutput+0xb0>
80000194:	e51b200c 	ldr	r2, [fp, #-12]
80000198:	e5832000 	str	r2, [r3]
8000019c:	ea000013 	b	800001f0 <ClearOutput+0xa4>
800001a0:	e59f3058 	ldr	r3, [pc, #88]	; 80000200 <ClearOutput+0xb4>
800001a4:	e51b200c 	ldr	r2, [fp, #-12]
800001a8:	e5832000 	str	r2, [r3]
800001ac:	ea00000f 	b	800001f0 <ClearOutput+0xa4>
800001b0:	e59f304c 	ldr	r3, [pc, #76]	; 80000204 <ClearOutput+0xb8>
800001b4:	e51b200c 	ldr	r2, [fp, #-12]
800001b8:	e5832000 	str	r2, [r3]
800001bc:	ea00000b 	b	800001f0 <ClearOutput+0xa4>
800001c0:	e59f3040 	ldr	r3, [pc, #64]	; 80000208 <ClearOutput+0xbc>
800001c4:	e51b200c 	ldr	r2, [fp, #-12]
800001c8:	e5832000 	str	r2, [r3]
800001cc:	ea000007 	b	800001f0 <ClearOutput+0xa4>
800001d0:	e59f3034 	ldr	r3, [pc, #52]	; 8000020c <ClearOutput+0xc0>
800001d4:	e51b200c 	ldr	r2, [fp, #-12]
800001d8:	e5832000 	str	r2, [r3]
800001dc:	ea000003 	b	800001f0 <ClearOutput+0xa4>
800001e0:	e59f3028 	ldr	r3, [pc, #40]	; 80000210 <ClearOutput+0xc4>
800001e4:	e51b200c 	ldr	r2, [fp, #-12]
800001e8:	e5832000 	str	r2, [r3]
800001ec:	e1a00000 	nop			; (mov r0, r0)
800001f0:	e28bd000 	add	sp, fp, #0
800001f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800001f8:	e12fff1e 	bx	lr
800001fc:	48310090 	.word	0x48310090
80000200:	49050090 	.word	0x49050090
80000204:	49052090 	.word	0x49052090
80000208:	49054090 	.word	0x49054090
8000020c:	49056090 	.word	0x49056090
80000210:	49058090 	.word	0x49058090

80000214 <ReadInput>:
80000214:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80000218:	e28db000 	add	fp, sp, #0
8000021c:	e24dd014 	sub	sp, sp, #20
80000220:	e1a03000 	mov	r3, r0
80000224:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
80000228:	e54b300d 	strb	r3, [fp, #-13]
8000022c:	e55b300d 	ldrb	r3, [fp, #-13]
80000230:	e2433001 	sub	r3, r3, #1
80000234:	e3530005 	cmp	r3, #5
80000238:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
8000023c:	ea000029 	b	800002e8 <ReadInput+0xd4>
80000240:	80000258 	.word	0x80000258
80000244:	80000270 	.word	0x80000270
80000248:	80000288 	.word	0x80000288
8000024c:	800002a0 	.word	0x800002a0
80000250:	800002b8 	.word	0x800002b8
80000254:	800002d0 	.word	0x800002d0
80000258:	e59f30b0 	ldr	r3, [pc, #176]	; 80000310 <ReadInput+0xfc>
8000025c:	e5932000 	ldr	r2, [r3]
80000260:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80000264:	e0023003 	and	r3, r2, r3
80000268:	e50b3008 	str	r3, [fp, #-8]
8000026c:	ea00001d 	b	800002e8 <ReadInput+0xd4>
80000270:	e59f309c 	ldr	r3, [pc, #156]	; 80000314 <ReadInput+0x100>
80000274:	e5932000 	ldr	r2, [r3]
80000278:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
8000027c:	e0023003 	and	r3, r2, r3
80000280:	e50b3008 	str	r3, [fp, #-8]
80000284:	ea000017 	b	800002e8 <ReadInput+0xd4>
80000288:	e59f3088 	ldr	r3, [pc, #136]	; 80000318 <ReadInput+0x104>
8000028c:	e5932000 	ldr	r2, [r3]
80000290:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80000294:	e0023003 	and	r3, r2, r3
80000298:	e50b3008 	str	r3, [fp, #-8]
8000029c:	ea000011 	b	800002e8 <ReadInput+0xd4>
800002a0:	e59f3074 	ldr	r3, [pc, #116]	; 8000031c <ReadInput+0x108>
800002a4:	e5932000 	ldr	r2, [r3]
800002a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800002ac:	e0023003 	and	r3, r2, r3
800002b0:	e50b3008 	str	r3, [fp, #-8]
800002b4:	ea00000b 	b	800002e8 <ReadInput+0xd4>
800002b8:	e59f3060 	ldr	r3, [pc, #96]	; 80000320 <ReadInput+0x10c>
800002bc:	e5932000 	ldr	r2, [r3]
800002c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800002c4:	e0023003 	and	r3, r2, r3
800002c8:	e50b3008 	str	r3, [fp, #-8]
800002cc:	ea000005 	b	800002e8 <ReadInput+0xd4>
800002d0:	e59f304c 	ldr	r3, [pc, #76]	; 80000324 <ReadInput+0x110>
800002d4:	e5932000 	ldr	r2, [r3]
800002d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800002dc:	e0023003 	and	r3, r2, r3
800002e0:	e50b3008 	str	r3, [fp, #-8]
800002e4:	e1a00000 	nop			; (mov r0, r0)
800002e8:	e51b3008 	ldr	r3, [fp, #-8]
800002ec:	e3530000 	cmp	r3, #0
800002f0:	1a000001 	bne	800002fc <ReadInput+0xe8>
800002f4:	e3a03000 	mov	r3, #0
800002f8:	ea000000 	b	80000300 <ReadInput+0xec>
800002fc:	e3a03001 	mov	r3, #1
80000300:	e1a00003 	mov	r0, r3
80000304:	e28bd000 	add	sp, fp, #0
80000308:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
8000030c:	e12fff1e 	bx	lr
80000310:	48310038 	.word	0x48310038
80000314:	49050038 	.word	0x49050038
80000318:	49052038 	.word	0x49052038
8000031c:	49054038 	.word	0x49054038
80000320:	49056038 	.word	0x49056038
80000324:	49058038 	.word	0x49058038

80000328 <ToggleOutput>:
80000328:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
8000032c:	e28db000 	add	fp, sp, #0
80000330:	e24dd00c 	sub	sp, sp, #12
80000334:	e1a03000 	mov	r3, r0
80000338:	e50b100c 	str	r1, [fp, #-12]
8000033c:	e54b3005 	strb	r3, [fp, #-5]
80000340:	e55b3005 	ldrb	r3, [fp, #-5]
80000344:	e2433001 	sub	r3, r3, #1
80000348:	e3530005 	cmp	r3, #5
8000034c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
80000350:	ea00002f 	b	80000414 <ToggleOutput+0xec>
80000354:	8000036c 	.word	0x8000036c
80000358:	80000388 	.word	0x80000388
8000035c:	800003a4 	.word	0x800003a4
80000360:	800003c0 	.word	0x800003c0
80000364:	800003dc 	.word	0x800003dc
80000368:	800003f8 	.word	0x800003f8
8000036c:	e59f30ac 	ldr	r3, [pc, #172]	; 80000420 <ToggleOutput+0xf8>
80000370:	e59f20a8 	ldr	r2, [pc, #168]	; 80000420 <ToggleOutput+0xf8>
80000374:	e5921000 	ldr	r1, [r2]
80000378:	e51b200c 	ldr	r2, [fp, #-12]
8000037c:	e0212002 	eor	r2, r1, r2
80000380:	e5832000 	str	r2, [r3]
80000384:	ea000022 	b	80000414 <ToggleOutput+0xec>
80000388:	e59f3094 	ldr	r3, [pc, #148]	; 80000424 <ToggleOutput+0xfc>
8000038c:	e59f2090 	ldr	r2, [pc, #144]	; 80000424 <ToggleOutput+0xfc>
80000390:	e5921000 	ldr	r1, [r2]
80000394:	e51b200c 	ldr	r2, [fp, #-12]
80000398:	e0212002 	eor	r2, r1, r2
8000039c:	e5832000 	str	r2, [r3]
800003a0:	ea00001b 	b	80000414 <ToggleOutput+0xec>
800003a4:	e59f307c 	ldr	r3, [pc, #124]	; 80000428 <ToggleOutput+0x100>
800003a8:	e59f2078 	ldr	r2, [pc, #120]	; 80000428 <ToggleOutput+0x100>
800003ac:	e5921000 	ldr	r1, [r2]
800003b0:	e51b200c 	ldr	r2, [fp, #-12]
800003b4:	e0212002 	eor	r2, r1, r2
800003b8:	e5832000 	str	r2, [r3]
800003bc:	ea000014 	b	80000414 <ToggleOutput+0xec>
800003c0:	e59f3064 	ldr	r3, [pc, #100]	; 8000042c <ToggleOutput+0x104>
800003c4:	e59f2060 	ldr	r2, [pc, #96]	; 8000042c <ToggleOutput+0x104>
800003c8:	e5921000 	ldr	r1, [r2]
800003cc:	e51b200c 	ldr	r2, [fp, #-12]
800003d0:	e0212002 	eor	r2, r1, r2
800003d4:	e5832000 	str	r2, [r3]
800003d8:	ea00000d 	b	80000414 <ToggleOutput+0xec>
800003dc:	e59f304c 	ldr	r3, [pc, #76]	; 80000430 <ToggleOutput+0x108>
800003e0:	e59f2048 	ldr	r2, [pc, #72]	; 80000430 <ToggleOutput+0x108>
800003e4:	e5921000 	ldr	r1, [r2]
800003e8:	e51b200c 	ldr	r2, [fp, #-12]
800003ec:	e0212002 	eor	r2, r1, r2
800003f0:	e5832000 	str	r2, [r3]
800003f4:	ea000006 	b	80000414 <ToggleOutput+0xec>
800003f8:	e59f3034 	ldr	r3, [pc, #52]	; 80000434 <ToggleOutput+0x10c>
800003fc:	e59f2030 	ldr	r2, [pc, #48]	; 80000434 <ToggleOutput+0x10c>
80000400:	e5921000 	ldr	r1, [r2]
80000404:	e51b200c 	ldr	r2, [fp, #-12]
80000408:	e0212002 	eor	r2, r1, r2
8000040c:	e5832000 	str	r2, [r3]
80000410:	e1a00000 	nop			; (mov r0, r0)
80000414:	e28bd000 	add	sp, fp, #0
80000418:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
8000041c:	e12fff1e 	bx	lr
80000420:	4831003c 	.word	0x4831003c
80000424:	4905003c 	.word	0x4905003c
80000428:	4905203c 	.word	0x4905203c
8000042c:	4905403c 	.word	0x4905403c
80000430:	4905603c 	.word	0x4905603c
80000434:	4905803c 	.word	0x4905803c

80000438 <UnmaskIRQ>:
80000438:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
8000043c:	e28db000 	add	fp, sp, #0
80000440:	e24dd00c 	sub	sp, sp, #12
80000444:	e1a03000 	mov	r3, r0
80000448:	e50b100c 	str	r1, [fp, #-12]
8000044c:	e54b3005 	strb	r3, [fp, #-5]
80000450:	e55b3005 	ldrb	r3, [fp, #-5]
80000454:	e2433001 	sub	r3, r3, #1
80000458:	e3530005 	cmp	r3, #5
8000045c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
80000460:	ea00001d 	b	800004dc <UnmaskIRQ+0xa4>
80000464:	8000047c 	.word	0x8000047c
80000468:	8000048c 	.word	0x8000048c
8000046c:	8000049c 	.word	0x8000049c
80000470:	800004ac 	.word	0x800004ac
80000474:	800004bc 	.word	0x800004bc
80000478:	800004cc 	.word	0x800004cc
8000047c:	e59f3064 	ldr	r3, [pc, #100]	; 800004e8 <UnmaskIRQ+0xb0>
80000480:	e51b200c 	ldr	r2, [fp, #-12]
80000484:	e5832000 	str	r2, [r3]
80000488:	ea000013 	b	800004dc <UnmaskIRQ+0xa4>
8000048c:	e59f3058 	ldr	r3, [pc, #88]	; 800004ec <UnmaskIRQ+0xb4>
80000490:	e51b200c 	ldr	r2, [fp, #-12]
80000494:	e5832000 	str	r2, [r3]
80000498:	ea00000f 	b	800004dc <UnmaskIRQ+0xa4>
8000049c:	e59f304c 	ldr	r3, [pc, #76]	; 800004f0 <UnmaskIRQ+0xb8>
800004a0:	e51b200c 	ldr	r2, [fp, #-12]
800004a4:	e5832000 	str	r2, [r3]
800004a8:	ea00000b 	b	800004dc <UnmaskIRQ+0xa4>
800004ac:	e59f3040 	ldr	r3, [pc, #64]	; 800004f4 <UnmaskIRQ+0xbc>
800004b0:	e51b200c 	ldr	r2, [fp, #-12]
800004b4:	e5832000 	str	r2, [r3]
800004b8:	ea000007 	b	800004dc <UnmaskIRQ+0xa4>
800004bc:	e59f3034 	ldr	r3, [pc, #52]	; 800004f8 <UnmaskIRQ+0xc0>
800004c0:	e51b200c 	ldr	r2, [fp, #-12]
800004c4:	e5832000 	str	r2, [r3]
800004c8:	ea000003 	b	800004dc <UnmaskIRQ+0xa4>
800004cc:	e59f3028 	ldr	r3, [pc, #40]	; 800004fc <UnmaskIRQ+0xc4>
800004d0:	e51b200c 	ldr	r2, [fp, #-12]
800004d4:	e5832000 	str	r2, [r3]
800004d8:	e1a00000 	nop			; (mov r0, r0)
800004dc:	e28bd000 	add	sp, fp, #0
800004e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800004e4:	e12fff1e 	bx	lr
800004e8:	48310064 	.word	0x48310064
800004ec:	49050064 	.word	0x49050064
800004f0:	49052064 	.word	0x49052064
800004f4:	49054064 	.word	0x49054064
800004f8:	49056064 	.word	0x49056064
800004fc:	49058064 	.word	0x49058064

80000500 <MaskIRQ>:
80000500:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80000504:	e28db000 	add	fp, sp, #0
80000508:	e24dd00c 	sub	sp, sp, #12
8000050c:	e1a03000 	mov	r3, r0
80000510:	e50b100c 	str	r1, [fp, #-12]
80000514:	e54b3005 	strb	r3, [fp, #-5]
80000518:	e55b3005 	ldrb	r3, [fp, #-5]
8000051c:	e2433001 	sub	r3, r3, #1
80000520:	e3530005 	cmp	r3, #5
80000524:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
80000528:	ea00001d 	b	800005a4 <MaskIRQ+0xa4>
8000052c:	80000544 	.word	0x80000544
80000530:	80000554 	.word	0x80000554
80000534:	80000564 	.word	0x80000564
80000538:	80000574 	.word	0x80000574
8000053c:	80000584 	.word	0x80000584
80000540:	80000594 	.word	0x80000594
80000544:	e59f3064 	ldr	r3, [pc, #100]	; 800005b0 <MaskIRQ+0xb0>
80000548:	e51b200c 	ldr	r2, [fp, #-12]
8000054c:	e5832000 	str	r2, [r3]
80000550:	ea000013 	b	800005a4 <MaskIRQ+0xa4>
80000554:	e59f3058 	ldr	r3, [pc, #88]	; 800005b4 <MaskIRQ+0xb4>
80000558:	e51b200c 	ldr	r2, [fp, #-12]
8000055c:	e5832000 	str	r2, [r3]
80000560:	ea00000f 	b	800005a4 <MaskIRQ+0xa4>
80000564:	e59f304c 	ldr	r3, [pc, #76]	; 800005b8 <MaskIRQ+0xb8>
80000568:	e51b200c 	ldr	r2, [fp, #-12]
8000056c:	e5832000 	str	r2, [r3]
80000570:	ea00000b 	b	800005a4 <MaskIRQ+0xa4>
80000574:	e59f3040 	ldr	r3, [pc, #64]	; 800005bc <MaskIRQ+0xbc>
80000578:	e51b200c 	ldr	r2, [fp, #-12]
8000057c:	e5832000 	str	r2, [r3]
80000580:	ea000007 	b	800005a4 <MaskIRQ+0xa4>
80000584:	e59f3034 	ldr	r3, [pc, #52]	; 800005c0 <MaskIRQ+0xc0>
80000588:	e51b200c 	ldr	r2, [fp, #-12]
8000058c:	e5832000 	str	r2, [r3]
80000590:	ea000003 	b	800005a4 <MaskIRQ+0xa4>
80000594:	e59f3028 	ldr	r3, [pc, #40]	; 800005c4 <MaskIRQ+0xc4>
80000598:	e51b200c 	ldr	r2, [fp, #-12]
8000059c:	e5832000 	str	r2, [r3]
800005a0:	e1a00000 	nop			; (mov r0, r0)
800005a4:	e28bd000 	add	sp, fp, #0
800005a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800005ac:	e12fff1e 	bx	lr
800005b0:	48310060 	.word	0x48310060
800005b4:	49050060 	.word	0x49050060
800005b8:	49052060 	.word	0x49052060
800005bc:	49054060 	.word	0x49054060
800005c0:	49056060 	.word	0x49056060
800005c4:	49058060 	.word	0x49058060

800005c8 <GPIO_init>:
vulong PadConfValSW1=0;		// GPIO_140

vulong PadConfVal=0;


void GPIO_init(){
800005c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
800005cc:	e28db000 	add	fp, sp, #0
	// initialization sequence: software reset
	GPIO5_REG(OMAP_GPIO_SYSCONFIG) |= BIT1;
800005d0:	e59f3228 	ldr	r3, [pc, #552]	; 80000800 <GPIO_init+0x238>
800005d4:	e59f2224 	ldr	r2, [pc, #548]	; 80000800 <GPIO_init+0x238>
800005d8:	e5922000 	ldr	r2, [r2]
800005dc:	e3822002 	orr	r2, r2, #2
800005e0:	e5832000 	str	r2, [r3]
	while ((GPIO5_REG(OMAP_GPIO_SYSSTATUS)&BIT0)==0);
800005e4:	e1a00000 	nop			; (mov r0, r0)
800005e8:	e59f3214 	ldr	r3, [pc, #532]	; 80000804 <GPIO_init+0x23c>
800005ec:	e5933000 	ldr	r3, [r3]
800005f0:	e2033001 	and	r3, r3, #1
800005f4:	e3530000 	cmp	r3, #0
800005f8:	0afffffa 	beq	800005e8 <GPIO_init+0x20>

	// initialization sequence: software reset
	GPIO4_REG(OMAP_GPIO_SYSCONFIG) |= BIT1;
800005fc:	e59f3204 	ldr	r3, [pc, #516]	; 80000808 <GPIO_init+0x240>
80000600:	e59f2200 	ldr	r2, [pc, #512]	; 80000808 <GPIO_init+0x240>
80000604:	e5922000 	ldr	r2, [r2]
80000608:	e3822002 	orr	r2, r2, #2
8000060c:	e5832000 	str	r2, [r3]
	while ((GPIO4_REG(OMAP_GPIO_SYSSTATUS)&BIT0)==0);
80000610:	e1a00000 	nop			; (mov r0, r0)
80000614:	e59f31f0 	ldr	r3, [pc, #496]	; 8000080c <GPIO_init+0x244>
80000618:	e5933000 	ldr	r3, [r3]
8000061c:	e2033001 	and	r3, r3, #1
80000620:	e3530000 	cmp	r3, #0
80000624:	0afffffa 	beq	80000614 <GPIO_init+0x4c>

	// initialization sequence: software reset
	GPIO6_REG(OMAP_GPIO_SYSCONFIG) |= BIT1;
80000628:	e59f31e0 	ldr	r3, [pc, #480]	; 80000810 <GPIO_init+0x248>
8000062c:	e59f21dc 	ldr	r2, [pc, #476]	; 80000810 <GPIO_init+0x248>
80000630:	e5922000 	ldr	r2, [r2]
80000634:	e3822002 	orr	r2, r2, #2
80000638:	e5832000 	str	r2, [r3]
	while ((GPIO6_REG(OMAP_GPIO_SYSSTATUS)&BIT0)==0);
8000063c:	e1a00000 	nop			; (mov r0, r0)
80000640:	e59f31cc 	ldr	r3, [pc, #460]	; 80000814 <GPIO_init+0x24c>
80000644:	e5933000 	ldr	r3, [r3]
80000648:	e2033001 	and	r3, r3, #1
8000064c:	e3530000 	cmp	r3, #0
80000650:	0afffffa 	beq	80000640 <GPIO_init+0x78>

	/* OUTPUTS */

	/* GPIOs configured as outputs */
	/* LED1 - D3 - GPIO_141 - PIN 67 */
	GPIO5_REG(OMAP_GPIO_OE) &= ~LED1;
80000654:	e59f31bc 	ldr	r3, [pc, #444]	; 80000818 <GPIO_init+0x250>
80000658:	e59f21b8 	ldr	r2, [pc, #440]	; 80000818 <GPIO_init+0x250>
8000065c:	e5922000 	ldr	r2, [r2]
80000660:	e3c22a02 	bic	r2, r2, #8192	; 0x2000
80000664:	e5832000 	str	r2, [r3]
	/* LED0 - D2 - GPIO_143 - PIN 71 */
	GPIO5_REG(OMAP_GPIO_OE) &= ~LED0;
80000668:	e59f31a8 	ldr	r3, [pc, #424]	; 80000818 <GPIO_init+0x250>
8000066c:	e59f21a4 	ldr	r2, [pc, #420]	; 80000818 <GPIO_init+0x250>
80000670:	e5922000 	ldr	r2, [r2]
80000674:	e3c22902 	bic	r2, r2, #32768	; 0x8000
80000678:	e5832000 	str	r2, [r3]

	/* INPUTS */

	/* GPIOs configured as inputs */
	/* SW0 - GPIO_140 - PIN 65 */
	GPIO5_REG(OMAP_GPIO_OE) |= SW0;
8000067c:	e59f3194 	ldr	r3, [pc, #404]	; 80000818 <GPIO_init+0x250>
80000680:	e59f2190 	ldr	r2, [pc, #400]	; 80000818 <GPIO_init+0x250>
80000684:	e5922000 	ldr	r2, [r2]
80000688:	e3822a01 	orr	r2, r2, #4096	; 0x1000
8000068c:	e5832000 	str	r2, [r3]
	/* SW1 - GPIO_142 - PIN 69 */
	GPIO5_REG(OMAP_GPIO_OE) |= SW1;
80000690:	e59f3180 	ldr	r3, [pc, #384]	; 80000818 <GPIO_init+0x250>
80000694:	e59f217c 	ldr	r2, [pc, #380]	; 80000818 <GPIO_init+0x250>
80000698:	e5922000 	ldr	r2, [r2]
8000069c:	e3822901 	orr	r2, r2, #16384	; 0x4000
800006a0:	e5832000 	str	r2, [r3]
	/* SW2 - GPIO_167 - PIN 57 */
	GPIO6_REG(OMAP_GPIO_OE) |= SW2;
800006a4:	e59f3170 	ldr	r3, [pc, #368]	; 8000081c <GPIO_init+0x254>
800006a8:	e59f216c 	ldr	r2, [pc, #364]	; 8000081c <GPIO_init+0x254>
800006ac:	e5922000 	ldr	r2, [r2]
800006b0:	e3822080 	orr	r2, r2, #128	; 0x80
800006b4:	e5832000 	str	r2, [r3]
	/* SW3 - GPIO_97 - PIN 59 */
	GPIO4_REG(OMAP_GPIO_OE) |= SW3;
800006b8:	e59f3160 	ldr	r3, [pc, #352]	; 80000820 <GPIO_init+0x258>
800006bc:	e59f215c 	ldr	r2, [pc, #348]	; 80000820 <GPIO_init+0x258>
800006c0:	e5922000 	ldr	r2, [r2]
800006c4:	e3822002 	orr	r2, r2, #2
800006c8:	e5832000 	str	r2, [r3]
	/* SW4 - GPIO_126 - PIN 62 */
	GPIO4_REG(OMAP_GPIO_OE) |= SW4;
800006cc:	e59f314c 	ldr	r3, [pc, #332]	; 80000820 <GPIO_init+0x258>
800006d0:	e59f2148 	ldr	r2, [pc, #328]	; 80000820 <GPIO_init+0x258>
800006d4:	e5922000 	ldr	r2, [r2]
800006d8:	e3822101 	orr	r2, r2, #1073741824	; 0x40000000
800006dc:	e5832000 	str	r2, [r3]

	/* System Control Module: PAD Configuration */

	/* GPIOs 140 and 141 */

	PadConfValLED0=0;
800006e0:	e59f313c 	ldr	r3, [pc, #316]	; 80000824 <GPIO_init+0x25c>
800006e4:	e3a02000 	mov	r2, #0
800006e8:	e5832000 	str	r2, [r3]

	PadConfValLED0=	MXMode4
800006ec:	e59f3130 	ldr	r3, [pc, #304]	; 80000824 <GPIO_init+0x25c>
800006f0:	e59f2130 	ldr	r2, [pc, #304]	; 80000828 <GPIO_init+0x260>
800006f4:	e5832000 	str	r2, [r3]
					|OFFOUTVALUE_HI
					|OFFPULLUDENABLE_OFF
					|OFFPULLTYPESELECT_UP
					|WAKEUPENABLE_OFF;

	PadConfValSW1=0;
800006f8:	e59f312c 	ldr	r3, [pc, #300]	; 8000082c <GPIO_init+0x264>
800006fc:	e3a02000 	mov	r2, #0
80000700:	e5832000 	str	r2, [r3]

	PadConfValSW1=	MXMode4
80000704:	e59f3120 	ldr	r3, [pc, #288]	; 8000082c <GPIO_init+0x264>
80000708:	e59f2120 	ldr	r2, [pc, #288]	; 80000830 <GPIO_init+0x268>
8000070c:	e5832000 	str	r2, [r3]
					|OFFPULLUDENABLE_ON
					|OFFPULLTYPESELECT_DWN
					|WAKEUPENABLE_OFF;


	SET_REG32(CONTROL_PADCONF_MCBSP3_DX)=PadConfValSW1|(PadConfValLED0<<16);
80000710:	e59f311c 	ldr	r3, [pc, #284]	; 80000834 <GPIO_init+0x26c>
80000714:	e59f2108 	ldr	r2, [pc, #264]	; 80000824 <GPIO_init+0x25c>
80000718:	e5922000 	ldr	r2, [r2]
8000071c:	e1a01802 	lsl	r1, r2, #16
80000720:	e59f2104 	ldr	r2, [pc, #260]	; 8000082c <GPIO_init+0x264>
80000724:	e5922000 	ldr	r2, [r2]
80000728:	e1812002 	orr	r2, r1, r2
8000072c:	e5832000 	str	r2, [r3]

	
	/* GPIOs 142 and 143 */

	PadConfValLED1=0;
80000730:	e59f3100 	ldr	r3, [pc, #256]	; 80000838 <GPIO_init+0x270>
80000734:	e3a02000 	mov	r2, #0
80000738:	e5832000 	str	r2, [r3]

	PadConfValLED1=	MXMode4
8000073c:	e59f30f4 	ldr	r3, [pc, #244]	; 80000838 <GPIO_init+0x270>
80000740:	e59f20e0 	ldr	r2, [pc, #224]	; 80000828 <GPIO_init+0x260>
80000744:	e5832000 	str	r2, [r3]
						|OFFOUTENABLE_OUT
						|OFFOUTVALUE_HI
						|OFFPULLUDENABLE_OFF
						|OFFPULLTYPESELECT_UP
						|WAKEUPENABLE_OFF;
	PadConfValSW0=0;
80000748:	e59f30ec 	ldr	r3, [pc, #236]	; 8000083c <GPIO_init+0x274>
8000074c:	e3a02000 	mov	r2, #0
80000750:	e5832000 	str	r2, [r3]

	PadConfValSW0=	MXMode4
80000754:	e59f30e0 	ldr	r3, [pc, #224]	; 8000083c <GPIO_init+0x274>
80000758:	e59f20d0 	ldr	r2, [pc, #208]	; 80000830 <GPIO_init+0x268>
8000075c:	e5832000 	str	r2, [r3]
						|OFFOUTVALUE_HI
						|OFFPULLUDENABLE_ON
						|OFFPULLTYPESELECT_DWN
						|WAKEUPENABLE_OFF;

	SET_REG32(CONTROL_PADCONF_MCBSP3_CLKX)=PadConfValSW0|(PadConfValLED1<<16);
80000760:	e59f30d8 	ldr	r3, [pc, #216]	; 80000840 <GPIO_init+0x278>
80000764:	e59f20cc 	ldr	r2, [pc, #204]	; 80000838 <GPIO_init+0x270>
80000768:	e5922000 	ldr	r2, [r2]
8000076c:	e1a01802 	lsl	r1, r2, #16
80000770:	e59f20c4 	ldr	r2, [pc, #196]	; 8000083c <GPIO_init+0x274>
80000774:	e5922000 	ldr	r2, [r2]
80000778:	e1812002 	orr	r2, r1, r2
8000077c:	e5832000 	str	r2, [r3]

	// MMC1_WP: input, pull-up on the REPTAR board, GPIO_129
	PadConfValSW0=0;
80000780:	e59f30b4 	ldr	r3, [pc, #180]	; 8000083c <GPIO_init+0x274>
80000784:	e3a02000 	mov	r2, #0
80000788:	e5832000 	str	r2, [r3]

	PadConfValSW0=	MXMode4 |PULLUDENABLE_OFF
8000078c:	e59f30a8 	ldr	r3, [pc, #168]	; 8000083c <GPIO_init+0x274>
80000790:	e59f20ac 	ldr	r2, [pc, #172]	; 80000844 <GPIO_init+0x27c>
80000794:	e5832000 	str	r2, [r3]
						|OFFOUTVALUE_HI
						|OFFPULLUDENABLE_OFF
						|OFFPULLTYPESELECT_UP
						|WAKEUPENABLE_OFF;

	SET_REG32(CONTROL_PADCONF_GPIO128)|=(PadConfValSW0<<16);
80000798:	e59f30a8 	ldr	r3, [pc, #168]	; 80000848 <GPIO_init+0x280>
8000079c:	e59f20a4 	ldr	r2, [pc, #164]	; 80000848 <GPIO_init+0x280>
800007a0:	e5921000 	ldr	r1, [r2]
800007a4:	e59f2090 	ldr	r2, [pc, #144]	; 8000083c <GPIO_init+0x274>
800007a8:	e5922000 	ldr	r2, [r2]
800007ac:	e1a02802 	lsl	r2, r2, #16
800007b0:	e1812002 	orr	r2, r1, r2
800007b4:	e5832000 	str	r2, [r3]

	GPIO5_REG(OMAP_GPIO_OE) |= MMC1_WP;
800007b8:	e59f3058 	ldr	r3, [pc, #88]	; 80000818 <GPIO_init+0x250>
800007bc:	e59f2054 	ldr	r2, [pc, #84]	; 80000818 <GPIO_init+0x250>
800007c0:	e5922000 	ldr	r2, [r2]
800007c4:	e3822002 	orr	r2, r2, #2
800007c8:	e5832000 	str	r2, [r3]
	/* GPIO_126 SW3 */
	SET_REG32(CONTROL_PADCONF_GPIO127)   |= MXMode4 << 16;
800007cc:	e59f3078 	ldr	r3, [pc, #120]	; 8000084c <GPIO_init+0x284>
800007d0:	e59f2074 	ldr	r2, [pc, #116]	; 8000084c <GPIO_init+0x284>
800007d4:	e5922000 	ldr	r2, [r2]
800007d8:	e3822701 	orr	r2, r2, #262144	; 0x40000
800007dc:	e5832000 	str	r2, [r3]
	/* GPIO_97 SW2 */
	SET_REG32(CONTROL_PADCONF_CAM_XCLKA) |= MXMode4 << 16;
800007e0:	e59f3068 	ldr	r3, [pc, #104]	; 80000850 <GPIO_init+0x288>
800007e4:	e59f2064 	ldr	r2, [pc, #100]	; 80000850 <GPIO_init+0x288>
800007e8:	e5922000 	ldr	r2, [r2]
800007ec:	e3822701 	orr	r2, r2, #262144	; 0x40000
800007f0:	e5832000 	str	r2, [r3]



}
800007f4:	e28bd000 	add	sp, fp, #0
800007f8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800007fc:	e12fff1e 	bx	lr
80000800:	49056010 	.word	0x49056010
80000804:	49056014 	.word	0x49056014
80000808:	49054010 	.word	0x49054010
8000080c:	49054014 	.word	0x49054014
80000810:	49058010 	.word	0x49058010
80000814:	49058014 	.word	0x49058014
80000818:	49056034 	.word	0x49056034
8000081c:	49058034 	.word	0x49058034
80000820:	49054034 	.word	0x49054034
80000824:	80012750 	.word	0x80012750
80000828:	00002a14 	.word	0x00002a14
8000082c:	8001275c 	.word	0x8001275c
80000830:	00001f0c 	.word	0x00001f0c
80000834:	4800216c 	.word	0x4800216c
80000838:	80012754 	.word	0x80012754
8000083c:	80012758 	.word	0x80012758
80000840:	48002170 	.word	0x48002170
80000844:	00002f14 	.word	0x00002f14
80000848:	48002a58 	.word	0x48002a58
8000084c:	48002a54 	.word	0x48002a54
80000850:	48002110 	.word	0x48002110

80000854 <lcd_init>:

void lcd_init(){
80000854:	e92d4800 	push	{fp, lr}
80000858:	e28db004 	add	fp, sp, #4

	lcd_off();
8000085c:	eb00044c 	bl	80001994 <lcd_off>

	/* Clock configuration */
	// select DSS1_ALWON_FCLK frequency: DPLL4 divided by 2
	DSS_CM_REG(CM_CLKSEL)&=~DDS1_FIELD_MSK;
80000860:	e59f3384 	ldr	r3, [pc, #900]	; 80000bec <lcd_init+0x398>
80000864:	e59f2380 	ldr	r2, [pc, #896]	; 80000bec <lcd_init+0x398>
80000868:	e5922000 	ldr	r2, [r2]
8000086c:	e3c2203f 	bic	r2, r2, #63	; 0x3f
80000870:	e5832000 	str	r2, [r3]
	DSS_CM_REG(CM_CLKSEL)|=PER_M4X2;
80000874:	e59f3370 	ldr	r3, [pc, #880]	; 80000bec <lcd_init+0x398>
80000878:	e59f236c 	ldr	r2, [pc, #876]	; 80000bec <lcd_init+0x398>
8000087c:	e5922000 	ldr	r2, [r2]
80000880:	e3822002 	orr	r2, r2, #2
80000884:	e5832000 	str	r2, [r3]
	// enable functional clock
	DSS_CM_REG(CM_FCLKEN)|= BIT0;
80000888:	e59f3360 	ldr	r3, [pc, #864]	; 80000bf0 <lcd_init+0x39c>
8000088c:	e59f235c 	ldr	r2, [pc, #860]	; 80000bf0 <lcd_init+0x39c>
80000890:	e5922000 	ldr	r2, [r2]
80000894:	e3822001 	orr	r2, r2, #1
80000898:	e5832000 	str	r2, [r3]
	// enable interfaces clocks (L3 and L4)  (must always be enable for access to the config registers)
	DSS_CM_REG(CM_ICLKEN)|= BIT0;
8000089c:	e59f3350 	ldr	r3, [pc, #848]	; 80000bf4 <lcd_init+0x3a0>
800008a0:	e59f234c 	ldr	r2, [pc, #844]	; 80000bf4 <lcd_init+0x3a0>
800008a4:	e5922000 	ldr	r2, [r2]
800008a8:	e3822001 	orr	r2, r2, #1
800008ac:	e5832000 	str	r2, [r3]


	/* System Control Module: PAD Configuration */

	// OUTPUT CONFIGURATION
	PadConfVal=0;
800008b0:	e59f3340 	ldr	r3, [pc, #832]	; 80000bf8 <lcd_init+0x3a4>
800008b4:	e3a02000 	mov	r2, #0
800008b8:	e5832000 	str	r2, [r3]

	PadConfVal	=	MXMode0
800008bc:	e59f3334 	ldr	r3, [pc, #820]	; 80000bf8 <lcd_init+0x3a4>
800008c0:	e59f2334 	ldr	r2, [pc, #820]	; 80000bfc <lcd_init+0x3a8>
800008c4:	e5832000 	str	r2, [r3]
					|OFFPULLUDENABLE_OFF
					|OFFPULLTYPESELECT_UP
					|WAKEUPENABLE_OFF;

	/* DSS_PCLK (15:0) and HSYNC (31:16) */
	SET_REG32(CONTROL_PADCONF_DSS_PCLK)=PadConfVal|(PadConfVal<<16);
800008c8:	e59f3330 	ldr	r3, [pc, #816]	; 80000c00 <lcd_init+0x3ac>
800008cc:	e59f2324 	ldr	r2, [pc, #804]	; 80000bf8 <lcd_init+0x3a4>
800008d0:	e5922000 	ldr	r2, [r2]
800008d4:	e1a01802 	lsl	r1, r2, #16
800008d8:	e59f2318 	ldr	r2, [pc, #792]	; 80000bf8 <lcd_init+0x3a4>
800008dc:	e5922000 	ldr	r2, [r2]
800008e0:	e1812002 	orr	r2, r1, r2
800008e4:	e5832000 	str	r2, [r3]
	/* VSYNC (15:0) and ACBIAS (31:16) */
	SET_REG32(CONTROL_PADCONF_DSS_VSYNC)=PadConfVal|(PadConfVal<<16);
800008e8:	e59f3314 	ldr	r3, [pc, #788]	; 80000c04 <lcd_init+0x3b0>
800008ec:	e59f2304 	ldr	r2, [pc, #772]	; 80000bf8 <lcd_init+0x3a4>
800008f0:	e5922000 	ldr	r2, [r2]
800008f4:	e1a01802 	lsl	r1, r2, #16
800008f8:	e59f22f8 	ldr	r2, [pc, #760]	; 80000bf8 <lcd_init+0x3a4>
800008fc:	e5922000 	ldr	r2, [r2]
80000900:	e1812002 	orr	r2, r1, r2
80000904:	e5832000 	str	r2, [r3]
	/* DSS_DATA0 (15:0) and DSS_DATA1 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA0)=PadConfVal|(PadConfVal<<16);
80000908:	e59f32f8 	ldr	r3, [pc, #760]	; 80000c08 <lcd_init+0x3b4>
8000090c:	e59f22e4 	ldr	r2, [pc, #740]	; 80000bf8 <lcd_init+0x3a4>
80000910:	e5922000 	ldr	r2, [r2]
80000914:	e1a01802 	lsl	r1, r2, #16
80000918:	e59f22d8 	ldr	r2, [pc, #728]	; 80000bf8 <lcd_init+0x3a4>
8000091c:	e5922000 	ldr	r2, [r2]
80000920:	e1812002 	orr	r2, r1, r2
80000924:	e5832000 	str	r2, [r3]
	/* DSS_DATA2 (15:0) and DSS_DATA3 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA2)=PadConfVal|(PadConfVal<<16);
80000928:	e59f32dc 	ldr	r3, [pc, #732]	; 80000c0c <lcd_init+0x3b8>
8000092c:	e59f22c4 	ldr	r2, [pc, #708]	; 80000bf8 <lcd_init+0x3a4>
80000930:	e5922000 	ldr	r2, [r2]
80000934:	e1a01802 	lsl	r1, r2, #16
80000938:	e59f22b8 	ldr	r2, [pc, #696]	; 80000bf8 <lcd_init+0x3a4>
8000093c:	e5922000 	ldr	r2, [r2]
80000940:	e1812002 	orr	r2, r1, r2
80000944:	e5832000 	str	r2, [r3]
	/* DSS_DATA4 (15:0) and DSS_DATA5 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA4)=PadConfVal|(PadConfVal<<16);
80000948:	e59f32c0 	ldr	r3, [pc, #704]	; 80000c10 <lcd_init+0x3bc>
8000094c:	e59f22a4 	ldr	r2, [pc, #676]	; 80000bf8 <lcd_init+0x3a4>
80000950:	e5922000 	ldr	r2, [r2]
80000954:	e1a01802 	lsl	r1, r2, #16
80000958:	e59f2298 	ldr	r2, [pc, #664]	; 80000bf8 <lcd_init+0x3a4>
8000095c:	e5922000 	ldr	r2, [r2]
80000960:	e1812002 	orr	r2, r1, r2
80000964:	e5832000 	str	r2, [r3]
	/* DSS_DATA6 (15:0) and DSS_DATA7 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA6)=PadConfVal|(PadConfVal<<16);
80000968:	e59f32a4 	ldr	r3, [pc, #676]	; 80000c14 <lcd_init+0x3c0>
8000096c:	e59f2284 	ldr	r2, [pc, #644]	; 80000bf8 <lcd_init+0x3a4>
80000970:	e5922000 	ldr	r2, [r2]
80000974:	e1a01802 	lsl	r1, r2, #16
80000978:	e59f2278 	ldr	r2, [pc, #632]	; 80000bf8 <lcd_init+0x3a4>
8000097c:	e5922000 	ldr	r2, [r2]
80000980:	e1812002 	orr	r2, r1, r2
80000984:	e5832000 	str	r2, [r3]
	/* DSS_DATA8 (15:0) and DSS_DATA9 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA8)=PadConfVal|(PadConfVal<<16);
80000988:	e59f3288 	ldr	r3, [pc, #648]	; 80000c18 <lcd_init+0x3c4>
8000098c:	e59f2264 	ldr	r2, [pc, #612]	; 80000bf8 <lcd_init+0x3a4>
80000990:	e5922000 	ldr	r2, [r2]
80000994:	e1a01802 	lsl	r1, r2, #16
80000998:	e59f2258 	ldr	r2, [pc, #600]	; 80000bf8 <lcd_init+0x3a4>
8000099c:	e5922000 	ldr	r2, [r2]
800009a0:	e1812002 	orr	r2, r1, r2
800009a4:	e5832000 	str	r2, [r3]
	/* DSS_DATA10 (15:0) and DSS_DATA11 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA10)=PadConfVal|(PadConfVal<<16);
800009a8:	e59f326c 	ldr	r3, [pc, #620]	; 80000c1c <lcd_init+0x3c8>
800009ac:	e59f2244 	ldr	r2, [pc, #580]	; 80000bf8 <lcd_init+0x3a4>
800009b0:	e5922000 	ldr	r2, [r2]
800009b4:	e1a01802 	lsl	r1, r2, #16
800009b8:	e59f2238 	ldr	r2, [pc, #568]	; 80000bf8 <lcd_init+0x3a4>
800009bc:	e5922000 	ldr	r2, [r2]
800009c0:	e1812002 	orr	r2, r1, r2
800009c4:	e5832000 	str	r2, [r3]
	/* DSS_DATA12 (15:0) and DSS_DATA13 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA12)=PadConfVal|(PadConfVal<<16);
800009c8:	e59f3250 	ldr	r3, [pc, #592]	; 80000c20 <lcd_init+0x3cc>
800009cc:	e59f2224 	ldr	r2, [pc, #548]	; 80000bf8 <lcd_init+0x3a4>
800009d0:	e5922000 	ldr	r2, [r2]
800009d4:	e1a01802 	lsl	r1, r2, #16
800009d8:	e59f2218 	ldr	r2, [pc, #536]	; 80000bf8 <lcd_init+0x3a4>
800009dc:	e5922000 	ldr	r2, [r2]
800009e0:	e1812002 	orr	r2, r1, r2
800009e4:	e5832000 	str	r2, [r3]
	/* DSS_DATA14 (15:0) and DSS_DATA15 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA14)=PadConfVal|(PadConfVal<<16);
800009e8:	e59f3234 	ldr	r3, [pc, #564]	; 80000c24 <lcd_init+0x3d0>
800009ec:	e59f2204 	ldr	r2, [pc, #516]	; 80000bf8 <lcd_init+0x3a4>
800009f0:	e5922000 	ldr	r2, [r2]
800009f4:	e1a01802 	lsl	r1, r2, #16
800009f8:	e59f21f8 	ldr	r2, [pc, #504]	; 80000bf8 <lcd_init+0x3a4>
800009fc:	e5922000 	ldr	r2, [r2]
80000a00:	e1812002 	orr	r2, r1, r2
80000a04:	e5832000 	str	r2, [r3]
	/* DSS_DATA16 (15:0) and DSS_DATA17 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA16)=PadConfVal|(PadConfVal<<16);
80000a08:	e59f3218 	ldr	r3, [pc, #536]	; 80000c28 <lcd_init+0x3d4>
80000a0c:	e59f21e4 	ldr	r2, [pc, #484]	; 80000bf8 <lcd_init+0x3a4>
80000a10:	e5922000 	ldr	r2, [r2]
80000a14:	e1a01802 	lsl	r1, r2, #16
80000a18:	e59f21d8 	ldr	r2, [pc, #472]	; 80000bf8 <lcd_init+0x3a4>
80000a1c:	e5922000 	ldr	r2, [r2]
80000a20:	e1812002 	orr	r2, r1, r2
80000a24:	e5832000 	str	r2, [r3]
	/* DSS_DATA18 (15:0) and DSS_DATA19 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA18)=PadConfVal|(PadConfVal<<16);
80000a28:	e59f31fc 	ldr	r3, [pc, #508]	; 80000c2c <lcd_init+0x3d8>
80000a2c:	e59f21c4 	ldr	r2, [pc, #452]	; 80000bf8 <lcd_init+0x3a4>
80000a30:	e5922000 	ldr	r2, [r2]
80000a34:	e1a01802 	lsl	r1, r2, #16
80000a38:	e59f21b8 	ldr	r2, [pc, #440]	; 80000bf8 <lcd_init+0x3a4>
80000a3c:	e5922000 	ldr	r2, [r2]
80000a40:	e1812002 	orr	r2, r1, r2
80000a44:	e5832000 	str	r2, [r3]
	/* DSS_DATA20 (15:0) and DSS_DATA21 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA20)=PadConfVal|(PadConfVal<<16);
80000a48:	e59f31e0 	ldr	r3, [pc, #480]	; 80000c30 <lcd_init+0x3dc>
80000a4c:	e59f21a4 	ldr	r2, [pc, #420]	; 80000bf8 <lcd_init+0x3a4>
80000a50:	e5922000 	ldr	r2, [r2]
80000a54:	e1a01802 	lsl	r1, r2, #16
80000a58:	e59f2198 	ldr	r2, [pc, #408]	; 80000bf8 <lcd_init+0x3a4>
80000a5c:	e5922000 	ldr	r2, [r2]
80000a60:	e1812002 	orr	r2, r1, r2
80000a64:	e5832000 	str	r2, [r3]
	/* DSS_DATA22 (15:0) and DSS_DATA23 (31:16) */
	SET_REG32(CONTROL_PADCONF_DATA22)=PadConfVal|(PadConfVal<<16);
80000a68:	e59f31c4 	ldr	r3, [pc, #452]	; 80000c34 <lcd_init+0x3e0>
80000a6c:	e59f2184 	ldr	r2, [pc, #388]	; 80000bf8 <lcd_init+0x3a4>
80000a70:	e5922000 	ldr	r2, [r2]
80000a74:	e1a01802 	lsl	r1, r2, #16
80000a78:	e59f2178 	ldr	r2, [pc, #376]	; 80000bf8 <lcd_init+0x3a4>
80000a7c:	e5922000 	ldr	r2, [r2]
80000a80:	e1812002 	orr	r2, r1, r2
80000a84:	e5832000 	str	r2, [r3]

	/* Display Subsystem (DSS) Configuration */
	DSS_REG(SYSCONFIG)|=BIT1;	// software reset
80000a88:	e59f31a8 	ldr	r3, [pc, #424]	; 80000c38 <lcd_init+0x3e4>
80000a8c:	e59f21a4 	ldr	r2, [pc, #420]	; 80000c38 <lcd_init+0x3e4>
80000a90:	e5922000 	ldr	r2, [r2]
80000a94:	e3822002 	orr	r2, r2, #2
80000a98:	e5832000 	str	r2, [r3]
	while ((DSS_REG(SYSSTATUS)&BIT0)==0); // WAIT FOR RESET DONE
80000a9c:	e1a00000 	nop			; (mov r0, r0)
80000aa0:	e59f3194 	ldr	r3, [pc, #404]	; 80000c3c <lcd_init+0x3e8>
80000aa4:	e5933000 	ldr	r3, [r3]
80000aa8:	e2033001 	and	r3, r3, #1
80000aac:	e3530000 	cmp	r3, #0
80000ab0:	0afffffa 	beq	80000aa0 <lcd_init+0x24c>

	// capacitive display parameters
	LCD_REG(timing_h)=0x0090097F; /* Horizontal timing */
80000ab4:	e59f3184 	ldr	r3, [pc, #388]	; 80000c40 <lcd_init+0x3ec>
80000ab8:	e59f2184 	ldr	r2, [pc, #388]	; 80000c44 <lcd_init+0x3f0>
80000abc:	e5832000 	str	r2, [r3]
	LCD_REG(timing_v)=0x00B00401; /* Vertical timing */
80000ac0:	e59f3180 	ldr	r3, [pc, #384]	; 80000c48 <lcd_init+0x3f4>
80000ac4:	e59f2180 	ldr	r2, [pc, #384]	; 80000c4c <lcd_init+0x3f8>
80000ac8:	e5832000 	str	r2, [r3]
	LCD_REG(pol_freq)=0x00003000; /* Pol Freq */
80000acc:	e59f317c 	ldr	r3, [pc, #380]	; 80000c50 <lcd_init+0x3fc>
80000ad0:	e3a02a03 	mov	r2, #12288	; 0x3000
80000ad4:	e5832000 	str	r2, [r3]

	LCD_REG(divisor)=0x00010002; /* 33Mhz Pixel Clock */
80000ad8:	e59f3174 	ldr	r3, [pc, #372]	; 80000c54 <lcd_init+0x400>
80000adc:	e59f2174 	ldr	r2, [pc, #372]	; 80000c58 <lcd_init+0x404>
80000ae0:	e5832000 	str	r2, [r3]
	LCD_REG(size_lcd)=0x01df031f; /* 800x480 */
80000ae4:	e59f3170 	ldr	r3, [pc, #368]	; 80000c5c <lcd_init+0x408>
80000ae8:	e59f2170 	ldr	r2, [pc, #368]	; 80000c60 <lcd_init+0x40c>
80000aec:	e5832000 	str	r2, [r3]
	LCD_REG(control)|= (0x01<<TFTSTN_SHIFT); /* panel_type: TFT */
80000af0:	e59f316c 	ldr	r3, [pc, #364]	; 80000c64 <lcd_init+0x410>
80000af4:	e59f2168 	ldr	r2, [pc, #360]	; 80000c64 <lcd_init+0x410>
80000af8:	e5922000 	ldr	r2, [r2]
80000afc:	e3822008 	orr	r2, r2, #8
80000b00:	e5832000 	str	r2, [r3]
	LCD_REG(control)|= (0x03<<DATALINES_SHIFT); /* data_lines: 24 Bit RGB */
80000b04:	e59f3158 	ldr	r3, [pc, #344]	; 80000c64 <lcd_init+0x410>
80000b08:	e59f2154 	ldr	r2, [pc, #340]	; 80000c64 <lcd_init+0x410>
80000b0c:	e5922000 	ldr	r2, [r2]
80000b10:	e3822c03 	orr	r2, r2, #768	; 0x300
80000b14:	e5832000 	str	r2, [r3]
	/* GPOUT0 AND GPOUT1: bypass mode */
	LCD_REG(control)|= BIT16;	// GPOUT1
80000b18:	e59f3144 	ldr	r3, [pc, #324]	; 80000c64 <lcd_init+0x410>
80000b1c:	e59f2140 	ldr	r2, [pc, #320]	; 80000c64 <lcd_init+0x410>
80000b20:	e5922000 	ldr	r2, [r2]
80000b24:	e3822801 	orr	r2, r2, #65536	; 0x10000
80000b28:	e5832000 	str	r2, [r3]
	LCD_REG(control)|= BIT15;	// GPOUT0
80000b2c:	e59f3130 	ldr	r3, [pc, #304]	; 80000c64 <lcd_init+0x410>
80000b30:	e59f212c 	ldr	r2, [pc, #300]	; 80000c64 <lcd_init+0x410>
80000b34:	e5922000 	ldr	r2, [r2]
80000b38:	e3822902 	orr	r2, r2, #32768	; 0x8000
80000b3c:	e5832000 	str	r2, [r3]
	LCD_REG(config)= (0x02<<FRAME_MODE_SHIFT); /* load_mode: Frame Mode */
80000b40:	e59f3120 	ldr	r3, [pc, #288]	; 80000c68 <lcd_init+0x414>
80000b44:	e3a02004 	mov	r2, #4
80000b48:	e5832000 	str	r2, [r3]
	LCD_REG(default_color0)=SPLASH_SOLID_COLOR;  /* ORANGE */
80000b4c:	e59f3118 	ldr	r3, [pc, #280]	; 80000c6c <lcd_init+0x418>
80000b50:	e59f2118 	ldr	r2, [pc, #280]	; 80000c70 <lcd_init+0x41c>
80000b54:	e5832000 	str	r2, [r3]
	LCD_REG(gfx_attributes)|= (0x6<<GFX_FORMAT_SHIFT); /* GRAPHICS FORMAT: RGB16 */
80000b58:	e59f3114 	ldr	r3, [pc, #276]	; 80000c74 <lcd_init+0x420>
80000b5c:	e59f2110 	ldr	r2, [pc, #272]	; 80000c74 <lcd_init+0x420>
80000b60:	e5922000 	ldr	r2, [r2]
80000b64:	e382200c 	orr	r2, r2, #12
80000b68:	e5832000 	str	r2, [r3]
	LCD_REG(gfx_preload)=0x60;	// preload for TFT display
80000b6c:	e59f3104 	ldr	r3, [pc, #260]	; 80000c78 <lcd_init+0x424>
80000b70:	e3a02060 	mov	r2, #96	; 0x60
80000b74:	e5832000 	str	r2, [r3]
	LCD_REG(gfx_ba0)=FRAME_BUFFER_ADDR;	// graphics base address
80000b78:	e59f30fc 	ldr	r3, [pc, #252]	; 80000c7c <lcd_init+0x428>
80000b7c:	e59f20fc 	ldr	r2, [pc, #252]	; 80000c80 <lcd_init+0x42c>
80000b80:	e5832000 	str	r2, [r3]
	LCD_REG(gfx_size)|= (479<<GFX_SIZEY_SHIFT); /* number of lines of the graphics window */
80000b84:	e59f20f8 	ldr	r2, [pc, #248]	; 80000c84 <lcd_init+0x430>
80000b88:	e59f30f4 	ldr	r3, [pc, #244]	; 80000c84 <lcd_init+0x430>
80000b8c:	e5933000 	ldr	r3, [r3]
80000b90:	e3833777 	orr	r3, r3, #31195136	; 0x1dc0000
80000b94:	e3833803 	orr	r3, r3, #196608	; 0x30000
80000b98:	e5823000 	str	r3, [r2]
	LCD_REG(gfx_size)|= 799; /* number of pixels per line of the graphics window */
80000b9c:	e59f20e0 	ldr	r2, [pc, #224]	; 80000c84 <lcd_init+0x430>
80000ba0:	e59f30dc 	ldr	r3, [pc, #220]	; 80000c84 <lcd_init+0x430>
80000ba4:	e5933000 	ldr	r3, [r3]
80000ba8:	e3833fc7 	orr	r3, r3, #796	; 0x31c
80000bac:	e3833003 	orr	r3, r3, #3
80000bb0:	e5823000 	str	r3, [r2]
	LCD_REG(gfx_attributes)|= BIT0;	//graphics layer enable
80000bb4:	e59f30b8 	ldr	r3, [pc, #184]	; 80000c74 <lcd_init+0x420>
80000bb8:	e59f20b4 	ldr	r2, [pc, #180]	; 80000c74 <lcd_init+0x420>
80000bbc:	e5922000 	ldr	r2, [r2]
80000bc0:	e3822001 	orr	r2, r2, #1
80000bc4:	e5832000 	str	r2, [r3]
	LCD_REG(control)|= BIT5;	// go LCD -> the HW can update the internal registers
80000bc8:	e59f3094 	ldr	r3, [pc, #148]	; 80000c64 <lcd_init+0x410>
80000bcc:	e59f2090 	ldr	r2, [pc, #144]	; 80000c64 <lcd_init+0x410>
80000bd0:	e5922000 	ldr	r2, [r2]
80000bd4:	e3822020 	orr	r2, r2, #32
80000bd8:	e5832000 	str	r2, [r3]

	lcd_on();
80000bdc:	eb000350 	bl	80001924 <lcd_on>

}
80000be0:	e24bd004 	sub	sp, fp, #4
80000be4:	e8bd4800 	pop	{fp, lr}
80000be8:	e12fff1e 	bx	lr
80000bec:	48004e40 	.word	0x48004e40
80000bf0:	48004e00 	.word	0x48004e00
80000bf4:	48004e10 	.word	0x48004e10
80000bf8:	80012760 	.word	0x80012760
80000bfc:	00002210 	.word	0x00002210
80000c00:	480020d4 	.word	0x480020d4
80000c04:	480020d8 	.word	0x480020d8
80000c08:	480020dc 	.word	0x480020dc
80000c0c:	480020e0 	.word	0x480020e0
80000c10:	480020e4 	.word	0x480020e4
80000c14:	480020e8 	.word	0x480020e8
80000c18:	480020ec 	.word	0x480020ec
80000c1c:	480020f0 	.word	0x480020f0
80000c20:	480020f4 	.word	0x480020f4
80000c24:	480020f8 	.word	0x480020f8
80000c28:	480020fc 	.word	0x480020fc
80000c2c:	48002100 	.word	0x48002100
80000c30:	48002104 	.word	0x48002104
80000c34:	48002108 	.word	0x48002108
80000c38:	48050010 	.word	0x48050010
80000c3c:	48050014 	.word	0x48050014
80000c40:	48050464 	.word	0x48050464
80000c44:	0090097f 	.word	0x0090097f
80000c48:	48050468 	.word	0x48050468
80000c4c:	00b00401 	.word	0x00b00401
80000c50:	4805046c 	.word	0x4805046c
80000c54:	48050470 	.word	0x48050470
80000c58:	00010002 	.word	0x00010002
80000c5c:	4805047c 	.word	0x4805047c
80000c60:	01df031f 	.word	0x01df031f
80000c64:	48050440 	.word	0x48050440
80000c68:	48050444 	.word	0x48050444
80000c6c:	4805044c 	.word	0x4805044c
80000c70:	00ff00f8 	.word	0x00ff00f8
80000c74:	480504a0 	.word	0x480504a0
80000c78:	4805062c 	.word	0x4805062c
80000c7c:	48050480 	.word	0x48050480
80000c80:	80500000 	.word	0x80500000
80000c84:	4805048c 	.word	0x4805048c

80000c88 <isr_handler>:

void isr_handler(void)
{
80000c88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80000c8c:	e28db000 	add	fp, sp, #0

}
80000c90:	e28bd000 	add	sp, fp, #0
80000c94:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80000c98:	e12fff1e 	bx	lr

80000c9c <showMenu>:
 * Global value menuPreselect preselects item in menu before calling showMenu,
 *                      if menuPreselect = -1 then this option is disabled
 *
 *
*/
void showMenu(menu_t *menu) {
80000c9c:	e92d4800 	push	{fp, lr}
80000ca0:	e28db004 	add	fp, sp, #4
80000ca4:	e24dd020 	sub	sp, sp, #32
80000ca8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        unsigned char menuItemNb = 0;
80000cac:	e3a03000 	mov	r3, #0
80000cb0:	e54b3005 	strb	r3, [fp, #-5]
        unsigned char lastmenuItemNb = 255;
80000cb4:	e3e03000 	mvn	r3, #0
80000cb8:	e54b3006 	strb	r3, [fp, #-6]
        unsigned char cursorTopPos = 0;
80000cbc:	e3a03000 	mov	r3, #0
80000cc0:	e54b3007 	strb	r3, [fp, #-7]
        unsigned char menuTopPos = 0;
80000cc4:	e3a03000 	mov	r3, #0
80000cc8:	e54b3008 	strb	r3, [fp, #-8]
        uchar refresh_all=1;
80000ccc:	e3a03001 	mov	r3, #1
80000cd0:	e54b3009 	strb	r3, [fp, #-9]
        item_t *iList = menu->items;
80000cd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80000cd8:	e5933008 	ldr	r3, [r3, #8]
80000cdc:	e50b3010 	str	r3, [fp, #-16]
        //unsigned char buffer[20];

        //
        // Get number of items in menu, search for the first NULL
        //
        int len = 0;
80000ce0:	e3a03000 	mov	r3, #0
80000ce4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        for (; iList->title != 0; iList++)
80000ce8:	ea000005 	b	80000d04 <showMenu+0x68>
          len++;
80000cec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80000cf0:	e2833001 	add	r3, r3, #1
80000cf4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        //
        // Get number of items in menu, search for the first NULL
        //
        int len = 0;
        for (; iList->title != 0; iList++)
80000cf8:	e51b3010 	ldr	r3, [fp, #-16]
80000cfc:	e2833010 	add	r3, r3, #16
80000d00:	e50b3010 	str	r3, [fp, #-16]
80000d04:	e51b3010 	ldr	r3, [fp, #-16]
80000d08:	e5933000 	ldr	r3, [r3]
80000d0c:	e3530000 	cmp	r3, #0
80000d10:	1afffff5 	bne	80000cec <showMenu+0x50>
          len++;

        // iList points to the top of the items list
        iList = menu->items;
80000d14:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80000d18:	e5933008 	ldr	r3, [r3, #8]
80000d1c:	e50b3010 	str	r3, [fp, #-16]

        // Functional :)
        // menuItemNb, menuTopPos, cursorTopPos
        if(menuPreselect != -1)
80000d20:	e59f34c4 	ldr	r3, [pc, #1220]	; 800011ec <showMenu+0x550>
80000d24:	e5933000 	ldr	r3, [r3]
80000d28:	e3730001 	cmn	r3, #1
80000d2c:	0a000017 	beq	80000d90 <showMenu+0xf4>
        {
          // If item on the first screen
          if(menuPreselect < MENU_LINES)
80000d30:	e59f34b4 	ldr	r3, [pc, #1204]	; 800011ec <showMenu+0x550>
80000d34:	e5933000 	ldr	r3, [r3]
80000d38:	e3530019 	cmp	r3, #25
80000d3c:	ca000008 	bgt	80000d64 <showMenu+0xc8>
          {
                  menuItemNb = menuPreselect;
80000d40:	e59f34a4 	ldr	r3, [pc, #1188]	; 800011ec <showMenu+0x550>
80000d44:	e5933000 	ldr	r3, [r3]
80000d48:	e54b3005 	strb	r3, [fp, #-5]
                  cursorTopPos = menuPreselect;
80000d4c:	e59f3498 	ldr	r3, [pc, #1176]	; 800011ec <showMenu+0x550>
80000d50:	e5933000 	ldr	r3, [r3]
80000d54:	e54b3007 	strb	r3, [fp, #-7]
                  menuTopPos = 0;
80000d58:	e3a03000 	mov	r3, #0
80000d5c:	e54b3008 	strb	r3, [fp, #-8]
80000d60:	ea00000a 	b	80000d90 <showMenu+0xf4>
          } else {
                 // Item is on other screen
                  menuItemNb = menuPreselect;
80000d64:	e59f3480 	ldr	r3, [pc, #1152]	; 800011ec <showMenu+0x550>
80000d68:	e5933000 	ldr	r3, [r3]
80000d6c:	e54b3005 	strb	r3, [fp, #-5]
                  cursorTopPos = MENU_LINES - 1;
80000d70:	e3a03019 	mov	r3, #25
80000d74:	e54b3007 	strb	r3, [fp, #-7]
                  menuTopPos = menuPreselect - cursorTopPos;
80000d78:	e59f346c 	ldr	r3, [pc, #1132]	; 800011ec <showMenu+0x550>
80000d7c:	e5933000 	ldr	r3, [r3]
80000d80:	e20320ff 	and	r2, r3, #255	; 0xff
80000d84:	e55b3007 	ldrb	r3, [fp, #-7]
80000d88:	e0633002 	rsb	r3, r3, r2
80000d8c:	e54b3008 	strb	r3, [fp, #-8]
                // If your system allows idle mode
                #ifdef SLEEP
                        SysCtlSleep();
                #endif

               if(keyPress) {
80000d90:	e59f3458 	ldr	r3, [pc, #1112]	; 800011f0 <showMenu+0x554>
80000d94:	e5d33000 	ldrb	r3, [r3]
80000d98:	e3530000 	cmp	r3, #0
80000d9c:	0a000095 	beq	80000ff8 <showMenu+0x35c>
                        
                  //
                  // Down
                  //
                if(keyPress == BTN_DOWN)
80000da0:	e59f3448 	ldr	r3, [pc, #1096]	; 800011f0 <showMenu+0x554>
80000da4:	e5d33000 	ldrb	r3, [r3]
80000da8:	e3530001 	cmp	r3, #1
80000dac:	1a000018 	bne	80000e14 <showMenu+0x178>
                  {
                        if(menuItemNb != len-1)
80000db0:	e55b2005 	ldrb	r2, [fp, #-5]
80000db4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80000db8:	e2433001 	sub	r3, r3, #1
80000dbc:	e1520003 	cmp	r2, r3
80000dc0:	0a00000d 	beq	80000dfc <showMenu+0x160>
                        {
                        menuItemNb++;
80000dc4:	e55b3005 	ldrb	r3, [fp, #-5]
80000dc8:	e2833001 	add	r3, r3, #1
80000dcc:	e54b3005 	strb	r3, [fp, #-5]

                        if(cursorTopPos >= MENU_LINES-1)
80000dd0:	e55b3007 	ldrb	r3, [fp, #-7]
80000dd4:	e3530018 	cmp	r3, #24
80000dd8:	9a000003 	bls	80000dec <showMenu+0x150>
                          menuTopPos++;
80000ddc:	e55b3008 	ldrb	r3, [fp, #-8]
80000de0:	e2833001 	add	r3, r3, #1
80000de4:	e54b3008 	strb	r3, [fp, #-8]
80000de8:	ea000009 	b	80000e14 <showMenu+0x178>
                        else
                          cursorTopPos++;
80000dec:	e55b3007 	ldrb	r3, [fp, #-7]
80000df0:	e2833001 	add	r3, r3, #1
80000df4:	e54b3007 	strb	r3, [fp, #-7]
80000df8:	ea000005 	b	80000e14 <showMenu+0x178>

                        } else {
                                menuItemNb = 0;
80000dfc:	e3a03000 	mov	r3, #0
80000e00:	e54b3005 	strb	r3, [fp, #-5]
                                cursorTopPos = 0;
80000e04:	e3a03000 	mov	r3, #0
80000e08:	e54b3007 	strb	r3, [fp, #-7]
                                menuTopPos = 0;
80000e0c:	e3a03000 	mov	r3, #0
80000e10:	e54b3008 	strb	r3, [fp, #-8]
                  }

                  //
                  // Up
                  //
                 if(keyPress == BTN_UP)
80000e14:	e59f33d4 	ldr	r3, [pc, #980]	; 800011f0 <showMenu+0x554>
80000e18:	e5d33000 	ldrb	r3, [r3]
80000e1c:	e3530002 	cmp	r3, #2
80000e20:	1a00002c 	bne	80000ed8 <showMenu+0x23c>
                  {
                        if(menuItemNb != 0)
80000e24:	e55b3005 	ldrb	r3, [fp, #-5]
80000e28:	e3530000 	cmp	r3, #0
80000e2c:	0a00000d 	beq	80000e68 <showMenu+0x1cc>
                        {
                        menuItemNb--;
80000e30:	e55b3005 	ldrb	r3, [fp, #-5]
80000e34:	e2433001 	sub	r3, r3, #1
80000e38:	e54b3005 	strb	r3, [fp, #-5]

                        if(cursorTopPos > 0)
80000e3c:	e55b3007 	ldrb	r3, [fp, #-7]
80000e40:	e3530000 	cmp	r3, #0
80000e44:	0a000003 	beq	80000e58 <showMenu+0x1bc>
                          cursorTopPos--;
80000e48:	e55b3007 	ldrb	r3, [fp, #-7]
80000e4c:	e2433001 	sub	r3, r3, #1
80000e50:	e54b3007 	strb	r3, [fp, #-7]
80000e54:	ea00001f 	b	80000ed8 <showMenu+0x23c>
                        else
                          menuTopPos--;
80000e58:	e55b3008 	ldrb	r3, [fp, #-8]
80000e5c:	e2433001 	sub	r3, r3, #1
80000e60:	e54b3008 	strb	r3, [fp, #-8]
80000e64:	ea00001b 	b	80000ed8 <showMenu+0x23c>
                          } else {
                                menuItemNb = len-1;
80000e68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80000e6c:	e20330ff 	and	r3, r3, #255	; 0xff
80000e70:	e2433001 	sub	r3, r3, #1
80000e74:	e54b3005 	strb	r3, [fp, #-5]

                                if(len <= MENU_LINES)
80000e78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80000e7c:	e353001a 	cmp	r3, #26
80000e80:	ca000002 	bgt	80000e90 <showMenu+0x1f4>
                                {
                                        menuTopPos = 0;
80000e84:	e3a03000 	mov	r3, #0
80000e88:	e54b3008 	strb	r3, [fp, #-8]
80000e8c:	ea000001 	b	80000e98 <showMenu+0x1fc>
                                } else {
                                        menuTopPos = menuItemNb;
80000e90:	e55b3005 	ldrb	r3, [fp, #-5]
80000e94:	e54b3008 	strb	r3, [fp, #-8]
                                }
                                if(menuTopPos > len - MENU_LINES && len >= MENU_LINES)
80000e98:	e55b2008 	ldrb	r2, [fp, #-8]
80000e9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80000ea0:	e243301a 	sub	r3, r3, #26
80000ea4:	e1520003 	cmp	r2, r3
80000ea8:	da000006 	ble	80000ec8 <showMenu+0x22c>
80000eac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80000eb0:	e3530019 	cmp	r3, #25
80000eb4:	da000003 	ble	80000ec8 <showMenu+0x22c>
                                {
                                        menuTopPos = len - MENU_LINES;
80000eb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80000ebc:	e20330ff 	and	r3, r3, #255	; 0xff
80000ec0:	e243301a 	sub	r3, r3, #26
80000ec4:	e54b3008 	strb	r3, [fp, #-8]
                                }

                                cursorTopPos = menuItemNb - menuTopPos;
80000ec8:	e55b2005 	ldrb	r2, [fp, #-5]
80000ecc:	e55b3008 	ldrb	r3, [fp, #-8]
80000ed0:	e0633002 	rsb	r3, r3, r2
80000ed4:	e54b3007 	strb	r3, [fp, #-7]


                  //
                  // Enter
                  //
                 if(keyPress == BTN_ENTER || keyPress == BTN_RIGHT)
80000ed8:	e59f3310 	ldr	r3, [pc, #784]	; 800011f0 <showMenu+0x554>
80000edc:	e5d33000 	ldrb	r3, [r3]
80000ee0:	e3530004 	cmp	r3, #4
80000ee4:	0a000003 	beq	80000ef8 <showMenu+0x25c>
80000ee8:	e59f3300 	ldr	r3, [pc, #768]	; 800011f0 <showMenu+0x554>
80000eec:	e5d33000 	ldrb	r3, [r3]
80000ef0:	e3530005 	cmp	r3, #5
80000ef4:	1a00002a 	bne	80000fa4 <showMenu+0x308>
                  {
                        keyPress = 0;
80000ef8:	e59f32f0 	ldr	r3, [pc, #752]	; 800011f0 <showMenu+0x554>
80000efc:	e3a02000 	mov	r2, #0
80000f00:	e5c32000 	strb	r2, [r3]
                        menuPreselect = -1;
80000f04:	e59f32e0 	ldr	r3, [pc, #736]	; 800011ec <showMenu+0x550>
80000f08:	e3e02000 	mvn	r2, #0
80000f0c:	e5832000 	str	r2, [r3]
                        // enter to the sub-menu
                        if ( iList[menuItemNb].submenu != 0)
80000f10:	e55b3005 	ldrb	r3, [fp, #-5]
80000f14:	e1a03203 	lsl	r3, r3, #4
80000f18:	e51b2010 	ldr	r2, [fp, #-16]
80000f1c:	e0823003 	add	r3, r2, r3
80000f20:	e5933004 	ldr	r3, [r3, #4]
80000f24:	e3530000 	cmp	r3, #0
80000f28:	0a000007 	beq	80000f4c <showMenu+0x2b0>
                        	showMenu(iList[menuItemNb].submenu);
80000f2c:	e55b3005 	ldrb	r3, [fp, #-5]
80000f30:	e1a03203 	lsl	r3, r3, #4
80000f34:	e51b2010 	ldr	r2, [fp, #-16]
80000f38:	e0823003 	add	r3, r2, r3
80000f3c:	e5933004 	ldr	r3, [r3, #4]
80000f40:	e1a00003 	mov	r0, r3
80000f44:	ebffff54 	bl	80000c9c <showMenu>
80000f48:	ea000015 	b	80000fa4 <showMenu+0x308>
                        else if ( iList[menuItemNb].function_ptr != 0)
80000f4c:	e55b3005 	ldrb	r3, [fp, #-5]
80000f50:	e1a03203 	lsl	r3, r3, #4
80000f54:	e51b2010 	ldr	r2, [fp, #-16]
80000f58:	e0823003 	add	r3, r2, r3
80000f5c:	e5933008 	ldr	r3, [r3, #8]
80000f60:	e3530000 	cmp	r3, #0
80000f64:	0a00000e 	beq	80000fa4 <showMenu+0x308>
                        {
                         	(iList[menuItemNb].function_ptr)(iList[menuItemNb].data);
80000f68:	e55b3005 	ldrb	r3, [fp, #-5]
80000f6c:	e1a03203 	lsl	r3, r3, #4
80000f70:	e51b2010 	ldr	r2, [fp, #-16]
80000f74:	e0823003 	add	r3, r2, r3
80000f78:	e5933008 	ldr	r3, [r3, #8]
80000f7c:	e55b2005 	ldrb	r2, [fp, #-5]
80000f80:	e1a02202 	lsl	r2, r2, #4
80000f84:	e51b1010 	ldr	r1, [fp, #-16]
80000f88:	e0812002 	add	r2, r1, r2
80000f8c:	e592200c 	ldr	r2, [r2, #12]
80000f90:	e1a00002 	mov	r0, r2
80000f94:	e1a0e00f 	mov	lr, pc
80000f98:	e12fff13 	bx	r3
                         	refresh_all = 1;
80000f9c:	e3a03001 	mov	r3, #1
80000fa0:	e54b3009 	strb	r3, [fp, #-9]


                  //
                  // Left - back
                  //
                  if(keyPress == BTN_LEFT)
80000fa4:	e59f3244 	ldr	r3, [pc, #580]	; 800011f0 <showMenu+0x554>
80000fa8:	e5d33000 	ldrb	r3, [r3]
80000fac:	e3530003 	cmp	r3, #3
80000fb0:	1a00000d 	bne	80000fec <showMenu+0x350>
                  {
                        keyPress = 0;
80000fb4:	e59f3234 	ldr	r3, [pc, #564]	; 800011f0 <showMenu+0x554>
80000fb8:	e3a02000 	mov	r2, #0
80000fbc:	e5c32000 	strb	r2, [r3]
                        menuPreselect = -1;
80000fc0:	e59f3224 	ldr	r3, [pc, #548]	; 800011ec <showMenu+0x550>
80000fc4:	e3e02000 	mvn	r2, #0
80000fc8:	e5832000 	str	r2, [r3]
                        // back to the parent menu
                        if (menu->parent != 0)
80000fcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80000fd0:	e5933004 	ldr	r3, [r3, #4]
80000fd4:	e3530000 	cmp	r3, #0
80000fd8:	0a00007f 	beq	800011dc <showMenu+0x540>
                         	showMenu(menu->parent);
80000fdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80000fe0:	e5933004 	ldr	r3, [r3, #4]
80000fe4:	e1a00003 	mov	r0, r3
80000fe8:	ebffff2b 	bl	80000c9c <showMenu>
                        // main menu: exit
                        	return;

                  }

                                keyPress = 0;
80000fec:	e59f31fc 	ldr	r3, [pc, #508]	; 800011f0 <showMenu+0x554>
80000ff0:	e3a02000 	mov	r2, #0
80000ff4:	e5c32000 	strb	r2, [r3]
                        } // if(keyPress)

                //
                // If menu item changed -> refresh screen
                //
                if(lastmenuItemNb != menuItemNb)
80000ff8:	e55b2006 	ldrb	r2, [fp, #-6]
80000ffc:	e55b3005 	ldrb	r3, [fp, #-5]
80001000:	e1520003 	cmp	r2, r3
80001004:	0a00006e 	beq	800011c4 <showMenu+0x528>
                {
                	if (refresh_all == 1)
80001008:	e55b3009 	ldrb	r3, [fp, #-9]
8000100c:	e3530001 	cmp	r3, #1
80001010:	1a000009 	bne	8000103c <showMenu+0x3a0>
                	{
                		displayClear();
80001014:	eb000323 	bl	80001ca8 <clear_screen>
                		display_sd_info();
80001018:	eb000996 	bl	80003678 <display_sd_info>
                		displayString(menu->title,0,0);
8000101c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80001020:	e5932000 	ldr	r2, [r3]
80001024:	e59f31c8 	ldr	r3, [pc, #456]	; 800011f4 <showMenu+0x558>
80001028:	e5d33000 	ldrb	r3, [r3]
8000102c:	e1a00002 	mov	r0, r2
80001030:	e3a01000 	mov	r1, #0
80001034:	e3a02064 	mov	r2, #100	; 0x64
80001038:	eb0002f2 	bl	80001c08 <fb_print_string>
                	}


                  i = 0;
8000103c:	e3a03000 	mov	r3, #0
80001040:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                  while((i + menuTopPos) < len &&   i < MENU_LINES)
80001044:	ea000051 	b	80001190 <showMenu+0x4f4>
                  {
                        if((menuItemNb == i + menuTopPos) && (MENU_LINES > 1))
80001048:	e55b2005 	ldrb	r2, [fp, #-5]
8000104c:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
80001050:	e55b3008 	ldrb	r3, [fp, #-8]
80001054:	e0813003 	add	r3, r1, r3
80001058:	e1520003 	cmp	r2, r3
8000105c:	1a000034 	bne	80001134 <showMenu+0x498>
                        {
                        	/* clear arrow on the previous line */
                        	if (i==0)
80001060:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80001064:	e3530000 	cmp	r3, #0
80001068:	1a000009 	bne	80001094 <showMenu+0x3f8>
                        		clearString(ARROW_SYMBOL, 0, ROW(len));
8000106c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80001070:	e1a03203 	lsl	r3, r3, #4
80001074:	e2833064 	add	r3, r3, #100	; 0x64
80001078:	e1a02003 	mov	r2, r3
8000107c:	e59f3174 	ldr	r3, [pc, #372]	; 800011f8 <showMenu+0x55c>
80001080:	e5d33000 	ldrb	r3, [r3]
80001084:	e59f0170 	ldr	r0, [pc, #368]	; 800011fc <showMenu+0x560>
80001088:	e3a01000 	mov	r1, #0
8000108c:	eb0002dd 	bl	80001c08 <fb_print_string>
80001090:	ea00000e 	b	800010d0 <showMenu+0x434>
                        	else
                        		clearString(ARROW_SYMBOL, 0, ROW((i-1)%len+1));
80001094:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80001098:	e2433001 	sub	r3, r3, #1
8000109c:	e1a00003 	mov	r0, r3
800010a0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
800010a4:	eb001e86 	bl	80008ac4 <__aeabi_idivmod>
800010a8:	e1a03001 	mov	r3, r1
800010ac:	e2833001 	add	r3, r3, #1
800010b0:	e1a03203 	lsl	r3, r3, #4
800010b4:	e2833064 	add	r3, r3, #100	; 0x64
800010b8:	e1a02003 	mov	r2, r3
800010bc:	e59f3134 	ldr	r3, [pc, #308]	; 800011f8 <showMenu+0x55c>
800010c0:	e5d33000 	ldrb	r3, [r3]
800010c4:	e59f0130 	ldr	r0, [pc, #304]	; 800011fc <showMenu+0x560>
800010c8:	e3a01000 	mov	r1, #0
800010cc:	eb0002cd 	bl	80001c08 <fb_print_string>
                        	/* clear arrow on the next line */
                        	clearString(ARROW_SYMBOL, 0, ROW((i+1)%len+1));
800010d0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
800010d4:	e2833001 	add	r3, r3, #1
800010d8:	e1a00003 	mov	r0, r3
800010dc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
800010e0:	eb001e77 	bl	80008ac4 <__aeabi_idivmod>
800010e4:	e1a03001 	mov	r3, r1
800010e8:	e2833001 	add	r3, r3, #1
800010ec:	e1a03203 	lsl	r3, r3, #4
800010f0:	e2833064 	add	r3, r3, #100	; 0x64
800010f4:	e1a02003 	mov	r2, r3
800010f8:	e59f30f8 	ldr	r3, [pc, #248]	; 800011f8 <showMenu+0x55c>
800010fc:	e5d33000 	ldrb	r3, [r3]
80001100:	e59f00f4 	ldr	r0, [pc, #244]	; 800011fc <showMenu+0x560>
80001104:	e3a01000 	mov	r1, #0
80001108:	eb0002be 	bl	80001c08 <fb_print_string>
                        	/* draw arrow on the current line */
                            displayString(ARROW_SYMBOL, 0, ROW(i+1));
8000110c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80001110:	e2833001 	add	r3, r3, #1
80001114:	e1a03203 	lsl	r3, r3, #4
80001118:	e2833064 	add	r3, r3, #100	; 0x64
8000111c:	e1a02003 	mov	r2, r3
80001120:	e59f30cc 	ldr	r3, [pc, #204]	; 800011f4 <showMenu+0x558>
80001124:	e5d33000 	ldrb	r3, [r3]
80001128:	e59f00cc 	ldr	r0, [pc, #204]	; 800011fc <showMenu+0x560>
8000112c:	e3a01000 	mov	r1, #0
80001130:	eb0002b4 	bl	80001c08 <fb_print_string>
                        }

                        if (refresh_all == 1)
80001134:	e55b3009 	ldrb	r3, [fp, #-9]
80001138:	e3530001 	cmp	r3, #1
8000113c:	1a000010 	bne	80001184 <showMenu+0x4e8>
                        {
                        	if(MENU_LINES > 1)
                        	  displayString(iList[menuTopPos + i].title, COL(1+ARROW_GAP), ROW(i+1));
80001140:	e55b2008 	ldrb	r2, [fp, #-8]
80001144:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80001148:	e0823003 	add	r3, r2, r3
8000114c:	e1a03203 	lsl	r3, r3, #4
80001150:	e51b2010 	ldr	r2, [fp, #-16]
80001154:	e0823003 	add	r3, r2, r3
80001158:	e5931000 	ldr	r1, [r3]
8000115c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80001160:	e2833001 	add	r3, r3, #1
80001164:	e1a03203 	lsl	r3, r3, #4
80001168:	e2833064 	add	r3, r3, #100	; 0x64
8000116c:	e1a02003 	mov	r2, r3
80001170:	e59f307c 	ldr	r3, [pc, #124]	; 800011f4 <showMenu+0x558>
80001174:	e5d33000 	ldrb	r3, [r3]
80001178:	e1a00001 	mov	r0, r1
8000117c:	e3a01010 	mov	r1, #16
80001180:	eb0002a0 	bl	80001c08 <fb_print_string>
                        	else
                        	  displayString(iList[menuTopPos + i].title, COL(0), ROW(i+1));
                        }
                        i++;
80001184:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80001188:	e2833001 	add	r3, r3, #1
8000118c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                		displayString(menu->title,0,0);
                	}


                  i = 0;
                  while((i + menuTopPos) < len &&   i < MENU_LINES)
80001190:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
80001194:	e55b3008 	ldrb	r3, [fp, #-8]
80001198:	e0822003 	add	r2, r2, r3
8000119c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800011a0:	e1520003 	cmp	r2, r3
800011a4:	aa000002 	bge	800011b4 <showMenu+0x518>
800011a8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
800011ac:	e3530019 	cmp	r3, #25
800011b0:	9affffa4 	bls	80001048 <showMenu+0x3ac>

                        #ifdef displayDraw
                          displayDraw();
                        #endif

                  lastmenuItemNb = menuItemNb;
800011b4:	e55b3005 	ldrb	r3, [fp, #-5]
800011b8:	e54b3006 	strb	r3, [fp, #-6]
                  refresh_all = 0;
800011bc:	e3a03000 	mov	r3, #0
800011c0:	e54b3009 	strb	r3, [fp, #-9]
                }

                /* wait for a button to be pressed */
                keyPress = sw_polling();
800011c4:	eb000029 	bl	80001270 <sw_polling>
800011c8:	e1a03000 	mov	r3, r0
800011cc:	e1a02003 	mov	r2, r3
800011d0:	e59f3018 	ldr	r3, [pc, #24]	; 800011f0 <showMenu+0x554>
800011d4:	e5c32000 	strb	r2, [r3]

                        
        }   
800011d8:	eafffeec 	b	80000d90 <showMenu+0xf4>
                  {
                        keyPress = 0;
                        menuPreselect = -1;
                        // back to the parent menu
                        if (menu->parent != 0)
                         	showMenu(menu->parent);
800011dc:	e1a00000 	nop			; (mov r0, r0)
                keyPress = sw_polling();

                        
        }   
        
}
800011e0:	e24bd004 	sub	sp, fp, #4
800011e4:	e8bd4800 	pop	{fp, lr}
800011e8:	e12fff1e 	bx	lr
800011ec:	8001148c 	.word	0x8001148c
800011f0:	80012765 	.word	0x80012765
800011f4:	80011496 	.word	0x80011496
800011f8:	80011495 	.word	0x80011495
800011fc:	80011da0 	.word	0x80011da0

80001200 <menuMsgBox>:

//
// Shows text on screen and wait for any keypress
//
int8_t menuMsgBox(const char *str)
{
80001200:	e92d4800 	push	{fp, lr}
80001204:	e28db004 	add	fp, sp, #4
80001208:	e24dd008 	sub	sp, sp, #8
8000120c:	e50b0008 	str	r0, [fp, #-8]
        displayClear();
80001210:	eb0002a4 	bl	80001ca8 <clear_screen>
        displayString(str,0,0);
80001214:	e59f304c 	ldr	r3, [pc, #76]	; 80001268 <menuMsgBox+0x68>
80001218:	e5d33000 	ldrb	r3, [r3]
8000121c:	e51b0008 	ldr	r0, [fp, #-8]
80001220:	e3a01000 	mov	r1, #0
80001224:	e3a02064 	mov	r2, #100	; 0x64
80001228:	eb000276 	bl	80001c08 <fb_print_string>
#ifdef displayDraw
        displayDraw();
#endif

        while(keyPress == 0);
8000122c:	e1a00000 	nop			; (mov r0, r0)
80001230:	e59f3034 	ldr	r3, [pc, #52]	; 8000126c <menuMsgBox+0x6c>
80001234:	e5d33000 	ldrb	r3, [r3]
80001238:	e3530000 	cmp	r3, #0
8000123c:	0afffffb 	beq	80001230 <menuMsgBox+0x30>
        keyPress = 0;
80001240:	e59f3024 	ldr	r3, [pc, #36]	; 8000126c <menuMsgBox+0x6c>
80001244:	e3a02000 	mov	r2, #0
80001248:	e5c32000 	strb	r2, [r3]

        return 1;
8000124c:	e3a03001 	mov	r3, #1
80001250:	e1a03803 	lsl	r3, r3, #16
80001254:	e1a03843 	asr	r3, r3, #16

}
80001258:	e1a00003 	mov	r0, r3
8000125c:	e24bd004 	sub	sp, fp, #4
80001260:	e8bd4800 	pop	{fp, lr}
80001264:	e12fff1e 	bx	lr
80001268:	80011496 	.word	0x80011496
8000126c:	80012765 	.word	0x80012765

80001270 <sw_polling>:

/* polling of buttons: use the return to set the variable keyPress */
button_t sw_polling()
{
80001270:	e92d4800 	push	{fp, lr}
80001274:	e28db004 	add	fp, sp, #4
	if (readSW0())
80001278:	e3a00005 	mov	r0, #5
8000127c:	e3a01a01 	mov	r1, #4096	; 0x1000
80001280:	ebfffbe3 	bl	80000214 <ReadInput>
80001284:	e1a03000 	mov	r3, r0
80001288:	e3530000 	cmp	r3, #0
8000128c:	0a000008 	beq	800012b4 <sw_polling+0x44>
	{
		while(readSW0());
80001290:	e1a00000 	nop			; (mov r0, r0)
80001294:	e3a00005 	mov	r0, #5
80001298:	e3a01a01 	mov	r1, #4096	; 0x1000
8000129c:	ebfffbdc 	bl	80000214 <ReadInput>
800012a0:	e1a03000 	mov	r3, r0
800012a4:	e3530000 	cmp	r3, #0
800012a8:	1afffff9 	bne	80001294 <sw_polling+0x24>
		return BTN_DOWN;
800012ac:	e3a03001 	mov	r3, #1
800012b0:	ea00002d 	b	8000136c <sw_polling+0xfc>
	}
	if (readSW1())
800012b4:	e3a00005 	mov	r0, #5
800012b8:	e3a01901 	mov	r1, #16384	; 0x4000
800012bc:	ebfffbd4 	bl	80000214 <ReadInput>
800012c0:	e1a03000 	mov	r3, r0
800012c4:	e3530000 	cmp	r3, #0
800012c8:	0a000008 	beq	800012f0 <sw_polling+0x80>
	{
		while(readSW1());
800012cc:	e1a00000 	nop			; (mov r0, r0)
800012d0:	e3a00005 	mov	r0, #5
800012d4:	e3a01901 	mov	r1, #16384	; 0x4000
800012d8:	ebfffbcd 	bl	80000214 <ReadInput>
800012dc:	e1a03000 	mov	r3, r0
800012e0:	e3530000 	cmp	r3, #0
800012e4:	1afffff9 	bne	800012d0 <sw_polling+0x60>
		return BTN_UP;
800012e8:	e3a03002 	mov	r3, #2
800012ec:	ea00001e 	b	8000136c <sw_polling+0xfc>
	}
	if (readSW2())
800012f0:	e3a00006 	mov	r0, #6
800012f4:	e3a01080 	mov	r1, #128	; 0x80
800012f8:	ebfffbc5 	bl	80000214 <ReadInput>
800012fc:	e1a03000 	mov	r3, r0
80001300:	e3530000 	cmp	r3, #0
80001304:	0a000008 	beq	8000132c <sw_polling+0xbc>
	{
		while(readSW2());
80001308:	e1a00000 	nop			; (mov r0, r0)
8000130c:	e3a00006 	mov	r0, #6
80001310:	e3a01080 	mov	r1, #128	; 0x80
80001314:	ebfffbbe 	bl	80000214 <ReadInput>
80001318:	e1a03000 	mov	r3, r0
8000131c:	e3530000 	cmp	r3, #0
80001320:	1afffff9 	bne	8000130c <sw_polling+0x9c>
		return BTN_ENTER;
80001324:	e3a03004 	mov	r3, #4
80001328:	ea00000f 	b	8000136c <sw_polling+0xfc>
	}
	if (readSW3())
8000132c:	e3a00004 	mov	r0, #4
80001330:	e3a01002 	mov	r1, #2
80001334:	ebfffbb6 	bl	80000214 <ReadInput>
80001338:	e1a03000 	mov	r3, r0
8000133c:	e3530000 	cmp	r3, #0
80001340:	0a000008 	beq	80001368 <sw_polling+0xf8>
	{
		while(readSW3());
80001344:	e1a00000 	nop			; (mov r0, r0)
80001348:	e3a00004 	mov	r0, #4
8000134c:	e3a01002 	mov	r1, #2
80001350:	ebfffbaf 	bl	80000214 <ReadInput>
80001354:	e1a03000 	mov	r3, r0
80001358:	e3530000 	cmp	r3, #0
8000135c:	1afffff9 	bne	80001348 <sw_polling+0xd8>
		return BTN_LEFT;
80001360:	e3a03003 	mov	r3, #3
80001364:	ea000000 	b	8000136c <sw_polling+0xfc>
	}

	return BTN_NULL;
80001368:	e3a03000 	mov	r3, #0
}
8000136c:	e1a00003 	mov	r0, r3
80001370:	e24bd004 	sub	sp, fp, #4
80001374:	e8bd4800 	pop	{fp, lr}
80001378:	e12fff1e 	bx	lr

8000137c <__get_MSP>:

char *__env[1] = { 0 };
char **environ = __env;

unsigned int __get_MSP(void)
{
8000137c:	e92d0810 	push	{r4, fp}
80001380:	e28db004 	add	fp, sp, #4
80001384:	e24dd008 	sub	sp, sp, #8
	unsigned int sp_add;
	asm("mov %0,sp\n":"=r"(sp_add));
80001388:	e1a0400d 	mov	r4, sp
8000138c:	e50b4008 	str	r4, [fp, #-8]
	return sp_add;
80001390:	e51b3008 	ldr	r3, [fp, #-8]
}
80001394:	e1a00003 	mov	r0, r3
80001398:	e24bd004 	sub	sp, fp, #4
8000139c:	e8bd0810 	pop	{r4, fp}
800013a0:	e12fff1e 	bx	lr

800013a4 <_exit>:

int _write(int file, char *ptr, int len);

void _exit(int status) {
800013a4:	e92d4800 	push	{fp, lr}
800013a8:	e28db004 	add	fp, sp, #4
800013ac:	e24dd008 	sub	sp, sp, #8
800013b0:	e50b0008 	str	r0, [fp, #-8]
    _write(1, "exit", 4);
800013b4:	e3a00001 	mov	r0, #1
800013b8:	e59f1008 	ldr	r1, [pc, #8]	; 800013c8 <_exit+0x24>
800013bc:	e3a02004 	mov	r2, #4
800013c0:	eb0000e3 	bl	80001754 <_write>
    while (1) {
        ;
    }
800013c4:	eafffffe 	b	800013c4 <_exit+0x20>
800013c8:	80011da4 	.word	0x80011da4

800013cc <_close>:
}

int _close(int file) {
800013cc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
800013d0:	e28db000 	add	fp, sp, #0
800013d4:	e24dd00c 	sub	sp, sp, #12
800013d8:	e50b0008 	str	r0, [fp, #-8]
    return -1;
800013dc:	e3e03000 	mvn	r3, #0
}
800013e0:	e1a00003 	mov	r0, r3
800013e4:	e28bd000 	add	sp, fp, #0
800013e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800013ec:	e12fff1e 	bx	lr

800013f0 <_execve>:
/*
 execve
 Transfer control to a new process. Minimal implementation (for a system without processes):
 */
int _execve(char *name, char **argv, char **env) {
800013f0:	e92d4800 	push	{fp, lr}
800013f4:	e28db004 	add	fp, sp, #4
800013f8:	e24dd010 	sub	sp, sp, #16
800013fc:	e50b0008 	str	r0, [fp, #-8]
80001400:	e50b100c 	str	r1, [fp, #-12]
80001404:	e50b2010 	str	r2, [fp, #-16]
    errno = ENOMEM;
80001408:	eb001db6 	bl	80008ae8 <__errno>
8000140c:	e1a03000 	mov	r3, r0
80001410:	e3a0200c 	mov	r2, #12
80001414:	e5832000 	str	r2, [r3]
    return -1;
80001418:	e3e03000 	mvn	r3, #0
}
8000141c:	e1a00003 	mov	r0, r3
80001420:	e24bd004 	sub	sp, fp, #4
80001424:	e8bd4800 	pop	{fp, lr}
80001428:	e12fff1e 	bx	lr

8000142c <_fork>:
/*
 fork
 Create a new process. Minimal implementation (for a system without processes):
 */

int _fork() {
8000142c:	e92d4800 	push	{fp, lr}
80001430:	e28db004 	add	fp, sp, #4
    errno = EAGAIN;
80001434:	eb001dab 	bl	80008ae8 <__errno>
80001438:	e1a03000 	mov	r3, r0
8000143c:	e3a0200b 	mov	r2, #11
80001440:	e5832000 	str	r2, [r3]
    return -1;
80001444:	e3e03000 	mvn	r3, #0
}
80001448:	e1a00003 	mov	r0, r3
8000144c:	e24bd004 	sub	sp, fp, #4
80001450:	e8bd4800 	pop	{fp, lr}
80001454:	e12fff1e 	bx	lr

80001458 <_fstat>:
 fstat
 Status of an open file. For consistency with other minimal implementations in these examples,
 all files are regarded as character special devices.
 The `sys/stat.h' header file required is distributed in the `include' subdirectory for this C library.
 */
int _fstat(int file, struct stat *st) {
80001458:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
8000145c:	e28db000 	add	fp, sp, #0
80001460:	e24dd00c 	sub	sp, sp, #12
80001464:	e50b0008 	str	r0, [fp, #-8]
80001468:	e50b100c 	str	r1, [fp, #-12]
    st->st_mode = S_IFCHR;
8000146c:	e51b300c 	ldr	r3, [fp, #-12]
80001470:	e3a02a02 	mov	r2, #8192	; 0x2000
80001474:	e5832004 	str	r2, [r3, #4]
    return 0;
80001478:	e3a03000 	mov	r3, #0
}
8000147c:	e1a00003 	mov	r0, r3
80001480:	e28bd000 	add	sp, fp, #0
80001484:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80001488:	e12fff1e 	bx	lr

8000148c <_getpid>:
/*
 getpid
 Process-ID; this is sometimes used to generate strings unlikely to conflict with other processes. Minimal implementation, for a system without processes:
 */

int _getpid() {
8000148c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80001490:	e28db000 	add	fp, sp, #0
    return 1;
80001494:	e3a03001 	mov	r3, #1
}
80001498:	e1a00003 	mov	r0, r3
8000149c:	e28bd000 	add	sp, fp, #0
800014a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800014a4:	e12fff1e 	bx	lr

800014a8 <_isatty>:

/*
 isatty
 Query whether output stream is a terminal. For consistency with the other minimal implementations,
 */
int _isatty(int file) {
800014a8:	e92d4800 	push	{fp, lr}
800014ac:	e28db004 	add	fp, sp, #4
800014b0:	e24dd008 	sub	sp, sp, #8
800014b4:	e50b0008 	str	r0, [fp, #-8]
    switch (file){
800014b8:	e51b3008 	ldr	r3, [fp, #-8]
800014bc:	e2833000 	add	r3, r3, #0
800014c0:	e3530002 	cmp	r3, #2
800014c4:	8a000001 	bhi	800014d0 <_isatty+0x28>
    case STDOUT_FILENO:
    case STDERR_FILENO:
    case STDIN_FILENO:
        return 1;
800014c8:	e3a03001 	mov	r3, #1
800014cc:	ea000004 	b	800014e4 <_isatty+0x3c>
    default:
        //errno = ENOTTY;
        errno = EBADF;
800014d0:	eb001d84 	bl	80008ae8 <__errno>
800014d4:	e1a03000 	mov	r3, r0
800014d8:	e3a02009 	mov	r2, #9
800014dc:	e5832000 	str	r2, [r3]
        return 0;
800014e0:	e3a03000 	mov	r3, #0
    }
}
800014e4:	e1a00003 	mov	r0, r3
800014e8:	e24bd004 	sub	sp, fp, #4
800014ec:	e8bd4800 	pop	{fp, lr}
800014f0:	e12fff1e 	bx	lr

800014f4 <_kill>:

/*
 kill
 Send a signal. Minimal implementation:
 */
int _kill(int pid, int sig) {
800014f4:	e92d4800 	push	{fp, lr}
800014f8:	e28db004 	add	fp, sp, #4
800014fc:	e24dd008 	sub	sp, sp, #8
80001500:	e50b0008 	str	r0, [fp, #-8]
80001504:	e50b100c 	str	r1, [fp, #-12]
    errno = EINVAL;
80001508:	eb001d76 	bl	80008ae8 <__errno>
8000150c:	e1a03000 	mov	r3, r0
80001510:	e3a02016 	mov	r2, #22
80001514:	e5832000 	str	r2, [r3]
    return (-1);
80001518:	e3e03000 	mvn	r3, #0
}
8000151c:	e1a00003 	mov	r0, r3
80001520:	e24bd004 	sub	sp, fp, #4
80001524:	e8bd4800 	pop	{fp, lr}
80001528:	e12fff1e 	bx	lr

8000152c <_link>:
/*
 link
 Establish a new name for an existing file. Minimal implementation:
 */

int _link(char *old, char *new) {
8000152c:	e92d4800 	push	{fp, lr}
80001530:	e28db004 	add	fp, sp, #4
80001534:	e24dd008 	sub	sp, sp, #8
80001538:	e50b0008 	str	r0, [fp, #-8]
8000153c:	e50b100c 	str	r1, [fp, #-12]
    errno = EMLINK;
80001540:	eb001d68 	bl	80008ae8 <__errno>
80001544:	e1a03000 	mov	r3, r0
80001548:	e3a0201f 	mov	r2, #31
8000154c:	e5832000 	str	r2, [r3]
    return -1;
80001550:	e3e03000 	mvn	r3, #0
}
80001554:	e1a00003 	mov	r0, r3
80001558:	e24bd004 	sub	sp, fp, #4
8000155c:	e8bd4800 	pop	{fp, lr}
80001560:	e12fff1e 	bx	lr

80001564 <_lseek>:

/*
 lseek
 Set position in a file. Minimal implementation:
 */
int _lseek(int file, int ptr, int dir) {
80001564:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80001568:	e28db000 	add	fp, sp, #0
8000156c:	e24dd014 	sub	sp, sp, #20
80001570:	e50b0008 	str	r0, [fp, #-8]
80001574:	e50b100c 	str	r1, [fp, #-12]
80001578:	e50b2010 	str	r2, [fp, #-16]
    return 0;
8000157c:	e3a03000 	mov	r3, #0
}
80001580:	e1a00003 	mov	r0, r3
80001584:	e28bd000 	add	sp, fp, #0
80001588:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
8000158c:	e12fff1e 	bx	lr

80001590 <_sbrk>:
/*
 sbrk
 Increase program data space.
 Malloc and related functions depend on this
 */
caddr_t _sbrk(int incr) {
80001590:	e92d4800 	push	{fp, lr}
80001594:	e28db004 	add	fp, sp, #4
80001598:	e24dd010 	sub	sp, sp, #16
8000159c:	e50b0010 	str	r0, [fp, #-16]

    extern char _ebss; // Defined by the linker
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == 0) {
800015a0:	e59f309c 	ldr	r3, [pc, #156]	; 80001644 <_sbrk+0xb4>
800015a4:	e5933000 	ldr	r3, [r3]
800015a8:	e3530000 	cmp	r3, #0
800015ac:	1a000002 	bne	800015bc <_sbrk+0x2c>
        heap_end = &_ebss;
800015b0:	e59f308c 	ldr	r3, [pc, #140]	; 80001644 <_sbrk+0xb4>
800015b4:	e59f208c 	ldr	r2, [pc, #140]	; 80001648 <_sbrk+0xb8>
800015b8:	e5832000 	str	r2, [r3]
    }
    prev_heap_end = heap_end;
800015bc:	e59f3080 	ldr	r3, [pc, #128]	; 80001644 <_sbrk+0xb4>
800015c0:	e5933000 	ldr	r3, [r3]
800015c4:	e50b3008 	str	r3, [fp, #-8]

char * stack = (char*) __get_MSP();
800015c8:	ebffff6b 	bl	8000137c <__get_MSP>
800015cc:	e1a03000 	mov	r3, r0
800015d0:	e50b300c 	str	r3, [fp, #-12]
     if (heap_end + incr >  stack)
800015d4:	e59f3068 	ldr	r3, [pc, #104]	; 80001644 <_sbrk+0xb4>
800015d8:	e5932000 	ldr	r2, [r3]
800015dc:	e51b3010 	ldr	r3, [fp, #-16]
800015e0:	e0822003 	add	r2, r2, r3
800015e4:	e51b300c 	ldr	r3, [fp, #-12]
800015e8:	e1520003 	cmp	r2, r3
800015ec:	9a000009 	bls	80001618 <_sbrk+0x88>
     {
         _write (STDERR_FILENO, "Heap and stack collision\n", 25);
800015f0:	e3a00002 	mov	r0, #2
800015f4:	e59f1050 	ldr	r1, [pc, #80]	; 8000164c <_sbrk+0xbc>
800015f8:	e3a02019 	mov	r2, #25
800015fc:	eb000054 	bl	80001754 <_write>
         errno = ENOMEM;
80001600:	eb001d38 	bl	80008ae8 <__errno>
80001604:	e1a03000 	mov	r3, r0
80001608:	e3a0200c 	mov	r2, #12
8000160c:	e5832000 	str	r2, [r3]
         return  (caddr_t) -1;
80001610:	e3e03000 	mvn	r3, #0
80001614:	ea000006 	b	80001634 <_sbrk+0xa4>
         //abort ();
     }

    heap_end += incr;
80001618:	e59f3024 	ldr	r3, [pc, #36]	; 80001644 <_sbrk+0xb4>
8000161c:	e5932000 	ldr	r2, [r3]
80001620:	e51b3010 	ldr	r3, [fp, #-16]
80001624:	e0822003 	add	r2, r2, r3
80001628:	e59f3014 	ldr	r3, [pc, #20]	; 80001644 <_sbrk+0xb4>
8000162c:	e5832000 	str	r2, [r3]
    return (caddr_t) prev_heap_end;
80001630:	e51b3008 	ldr	r3, [fp, #-8]

}
80001634:	e1a00003 	mov	r0, r3
80001638:	e24bd004 	sub	sp, fp, #4
8000163c:	e8bd4800 	pop	{fp, lr}
80001640:	e12fff1e 	bx	lr
80001644:	8001276c 	.word	0x8001276c
80001648:	80021f0c 	.word	0x80021f0c
8000164c:	80011dac 	.word	0x80011dac

80001650 <_read>:
 Read a character to a file. `libc' subroutines will use this system routine for input from all files, including stdin
 Returns -1 on error or blocks until the number of characters have been read.
 */


int _read(int file, char *ptr, int len) {
80001650:	e92d4800 	push	{fp, lr}
80001654:	e28db004 	add	fp, sp, #4
80001658:	e24dd018 	sub	sp, sp, #24
8000165c:	e50b0010 	str	r0, [fp, #-16]
80001660:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
80001664:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
//    int n;
    int num = 0;
80001668:	e3a03000 	mov	r3, #0
8000166c:	e50b3008 	str	r3, [fp, #-8]
//            *ptr++ = c;
//            num++;
//        }
//        break;
    default:
        errno = EBADF;
80001670:	eb001d1c 	bl	80008ae8 <__errno>
80001674:	e1a03000 	mov	r3, r0
80001678:	e3a02009 	mov	r2, #9
8000167c:	e5832000 	str	r2, [r3]
        return -1;
80001680:	e3e03000 	mvn	r3, #0
    }
    return num;
}
80001684:	e1a00003 	mov	r0, r3
80001688:	e24bd004 	sub	sp, fp, #4
8000168c:	e8bd4800 	pop	{fp, lr}
80001690:	e12fff1e 	bx	lr

80001694 <_stat>:
 stat
 Status of a file (by name). Minimal implementation:
 int    _EXFUN(stat,( const char *__path, struct stat *__sbuf ));
 */

int _stat(const char *filepath, struct stat *st) {
80001694:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80001698:	e28db000 	add	fp, sp, #0
8000169c:	e24dd00c 	sub	sp, sp, #12
800016a0:	e50b0008 	str	r0, [fp, #-8]
800016a4:	e50b100c 	str	r1, [fp, #-12]
    st->st_mode = S_IFCHR;
800016a8:	e51b300c 	ldr	r3, [fp, #-12]
800016ac:	e3a02a02 	mov	r2, #8192	; 0x2000
800016b0:	e5832004 	str	r2, [r3, #4]
    return 0;
800016b4:	e3a03000 	mov	r3, #0
}
800016b8:	e1a00003 	mov	r0, r3
800016bc:	e28bd000 	add	sp, fp, #0
800016c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800016c4:	e12fff1e 	bx	lr

800016c8 <_times>:
/*
 times
 Timing information for current process. Minimal implementation:
 */

clock_t _times(struct tms *buf) {
800016c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
800016cc:	e28db000 	add	fp, sp, #0
800016d0:	e24dd00c 	sub	sp, sp, #12
800016d4:	e50b0008 	str	r0, [fp, #-8]
    return -1;
800016d8:	e3e03000 	mvn	r3, #0
}
800016dc:	e1a00003 	mov	r0, r3
800016e0:	e28bd000 	add	sp, fp, #0
800016e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800016e8:	e12fff1e 	bx	lr

800016ec <_unlink>:

/*
 unlink
 Remove a file's directory entry. Minimal implementation:
 */
int _unlink(char *name) {
800016ec:	e92d4800 	push	{fp, lr}
800016f0:	e28db004 	add	fp, sp, #4
800016f4:	e24dd008 	sub	sp, sp, #8
800016f8:	e50b0008 	str	r0, [fp, #-8]
    errno = ENOENT;
800016fc:	eb001cf9 	bl	80008ae8 <__errno>
80001700:	e1a03000 	mov	r3, r0
80001704:	e3a02002 	mov	r2, #2
80001708:	e5832000 	str	r2, [r3]
    return -1;
8000170c:	e3e03000 	mvn	r3, #0
}
80001710:	e1a00003 	mov	r0, r3
80001714:	e24bd004 	sub	sp, fp, #4
80001718:	e8bd4800 	pop	{fp, lr}
8000171c:	e12fff1e 	bx	lr

80001720 <_wait>:

/*
 wait
 Wait for a child process. Minimal implementation:
 */
int _wait(int *status) {
80001720:	e92d4800 	push	{fp, lr}
80001724:	e28db004 	add	fp, sp, #4
80001728:	e24dd008 	sub	sp, sp, #8
8000172c:	e50b0008 	str	r0, [fp, #-8]
    errno = ECHILD;
80001730:	eb001cec 	bl	80008ae8 <__errno>
80001734:	e1a03000 	mov	r3, r0
80001738:	e3a0200a 	mov	r2, #10
8000173c:	e5832000 	str	r2, [r3]
    return -1;
80001740:	e3e03000 	mvn	r3, #0
}
80001744:	e1a00003 	mov	r0, r3
80001748:	e24bd004 	sub	sp, fp, #4
8000174c:	e8bd4800 	pop	{fp, lr}
80001750:	e12fff1e 	bx	lr

80001754 <_write>:
/*
 write
 Write a character to a file. `libc' subroutines will use this system routine for output to all files, including stdout
 Returns -1 on error or number of bytes sent
 */
int _write(int file, char *ptr, int len) {
80001754:	e92d4800 	push	{fp, lr}
80001758:	e28db004 	add	fp, sp, #4
8000175c:	e24dd018 	sub	sp, sp, #24
80001760:	e50b0010 	str	r0, [fp, #-16]
80001764:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
80001768:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int n;
    switch (file) {
8000176c:	e51b3010 	ldr	r3, [fp, #-16]
80001770:	e3530001 	cmp	r3, #1
80001774:	0a000012 	beq	800017c4 <_write+0x70>
80001778:	e3530002 	cmp	r3, #2
8000177c:	1a00000a 	bne	800017ac <_write+0x58>
    case STDOUT_FILENO: /*stdout*/
    	// TODO: insert the function to write a message to the LCD
        break;
    case STDERR_FILENO: /* stderr */
        for (n = 0; n < len; n++) {
80001780:	e3a03000 	mov	r3, #0
80001784:	e50b3008 	str	r3, [fp, #-8]
80001788:	ea000002 	b	80001798 <_write+0x44>
8000178c:	e51b3008 	ldr	r3, [fp, #-8]
80001790:	e2833001 	add	r3, r3, #1
80001794:	e50b3008 	str	r3, [fp, #-8]
80001798:	e51b2008 	ldr	r2, [fp, #-8]
8000179c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800017a0:	e1520003 	cmp	r2, r3
800017a4:	bafffff8 	blt	8000178c <_write+0x38>
#elif  STDERR_USART == 3
            while ((USART3->SR & USART_FLAG_TC) == (uint16_t)RESET) {}
            USART3->DR = (*ptr++ & (uint16_t)0x01FF);
#endif
        }
        break;
800017a8:	ea000006 	b	800017c8 <_write+0x74>
    default:
        errno = EBADF;
800017ac:	eb001ccd 	bl	80008ae8 <__errno>
800017b0:	e1a03000 	mov	r3, r0
800017b4:	e3a02009 	mov	r2, #9
800017b8:	e5832000 	str	r2, [r3]
        return -1;
800017bc:	e3e03000 	mvn	r3, #0
800017c0:	ea000001 	b	800017cc <_write+0x78>
int _write(int file, char *ptr, int len) {
    int n;
    switch (file) {
    case STDOUT_FILENO: /*stdout*/
    	// TODO: insert the function to write a message to the LCD
        break;
800017c4:	e1a00000 	nop			; (mov r0, r0)
        break;
    default:
        errno = EBADF;
        return -1;
    }
    return len;
800017c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
800017cc:	e1a00003 	mov	r0, r3
800017d0:	e24bd004 	sub	sp, fp, #4
800017d4:	e8bd4800 	pop	{fp, lr}
800017d8:	e12fff1e 	bx	lr

800017dc <main>:

void general_init();

/* main */
int main(void)
{
800017dc:	e92d4800 	push	{fp, lr}
800017e0:	e28db004 	add	fp, sp, #4
800017e4:	e24dd068 	sub	sp, sp, #104	; 0x68
	const char s[] = "Les fleurs d'oranger au parfum d'orient.\n\t\tCette douleur que j'ai en mangeant de l'origan.\rtest";
800017e8:	e59f30bc 	ldr	r3, [pc, #188]	; 800018ac <main+0xd0>
800017ec:	e24b1068 	sub	r1, fp, #104	; 0x68
800017f0:	e1a02003 	mov	r2, r3
800017f4:	e3a03060 	mov	r3, #96	; 0x60
800017f8:	e1a00001 	mov	r0, r1
800017fc:	e1a01002 	mov	r1, r2
80001800:	e1a02003 	mov	r2, r3
80001804:	eb001ce5 	bl	80008ba0 <memcpy>
	general_init();
80001808:	eb000028 	bl	800018b0 <general_init>
	clear_screen();
8000180c:	eb000125 	bl	80001ca8 <clear_screen>

	//jeuDeReaction();

	fb_set_pixel(50, 50, 3);
80001810:	e3a00032 	mov	r0, #50	; 0x32
80001814:	e3a01032 	mov	r1, #50	; 0x32
80001818:	e3a02003 	mov	r2, #3
8000181c:	eb000085 	bl	80001a38 <fb_set_pixel>
	fb_set_pixel(51, 50, 3);
80001820:	e3a00033 	mov	r0, #51	; 0x33
80001824:	e3a01032 	mov	r1, #50	; 0x32
80001828:	e3a02003 	mov	r2, #3
8000182c:	eb000081 	bl	80001a38 <fb_set_pixel>
	fb_set_pixel(50, 51, 3);
80001830:	e3a00032 	mov	r0, #50	; 0x32
80001834:	e3a01033 	mov	r1, #51	; 0x33
80001838:	e3a02003 	mov	r2, #3
8000183c:	eb00007d 	bl	80001a38 <fb_set_pixel>
	fb_set_pixel(51, 51, 3);
80001840:	e3a00033 	mov	r0, #51	; 0x33
80001844:	e3a01033 	mov	r1, #51	; 0x33
80001848:	e3a02003 	mov	r2, #3
8000184c:	eb000079 	bl	80001a38 <fb_set_pixel>


	fb_print_char('K', 100, 100, 15);
80001850:	e3a0004b 	mov	r0, #75	; 0x4b
80001854:	e3a01064 	mov	r1, #100	; 0x64
80001858:	e3a02064 	mov	r2, #100	; 0x64
8000185c:	e3a0300f 	mov	r3, #15
80001860:	eb00009c 	bl	80001ad8 <fb_print_char>
	fb_print_char('F', 100, 300, 15);
80001864:	e3a00046 	mov	r0, #70	; 0x46
80001868:	e3a01064 	mov	r1, #100	; 0x64
8000186c:	e3a02f4b 	mov	r2, #300	; 0x12c
80001870:	e3a0300f 	mov	r3, #15
80001874:	eb000097 	bl	80001ad8 <fb_print_char>

	fb_print_string((uchar*)s, 700, 200, 15);
80001878:	e24b3068 	sub	r3, fp, #104	; 0x68
8000187c:	e1a00003 	mov	r0, r3
80001880:	e3a01faf 	mov	r1, #700	; 0x2bc
80001884:	e3a020c8 	mov	r2, #200	; 0xc8
80001888:	e3a0300f 	mov	r3, #15
8000188c:	eb0000dd 	bl	80001c08 <fb_print_string>

	// allumer led 0
	uchar module = 5;
80001890:	e3a03005 	mov	r3, #5
80001894:	e54b3005 	strb	r3, [fp, #-5]
	ClearOutput(module, 0xffffffff);
80001898:	e55b3005 	ldrb	r3, [fp, #-5]
8000189c:	e1a00003 	mov	r0, r3
800018a0:	e3e01000 	mvn	r1, #0
800018a4:	ebfffa28 	bl	8000014c <ClearOutput>
		else
			ResetLed(1);*/

		//sprintf(s, "%d", timerValueWhenInterrupt);
		//fb_print_string(s, 200, 300, 15);
	}
800018a8:	eafffffe 	b	800018a8 <main+0xcc>
800018ac:	80011dc8 	.word	0x80011dc8

800018b0 <general_init>:

	return(0);
}

void general_init()
{
800018b0:	e92d4800 	push	{fp, lr}
800018b4:	e28db004 	add	fp, sp, #4
	lcd_off();
800018b8:	eb000035 	bl	80001994 <lcd_off>
	lcd_init();
800018bc:	ebfffbe4 	bl	80000854 <lcd_init>
	lcd_on();
800018c0:	eb000017 	bl	80001924 <lcd_on>

	// pour etape 2 - GPIO
	GPIO_init();
800018c4:	ebfffb3f 	bl	800005c8 <GPIO_init>
}
800018c8:	e24bd004 	sub	sp, fp, #4
800018cc:	e8bd4800 	pop	{fp, lr}
800018d0:	e12fff1e 	bx	lr

800018d4 <udelay>:
800018d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
800018d8:	e28db000 	add	fp, sp, #0
800018dc:	e24dd014 	sub	sp, sp, #20
800018e0:	e50b0010 	str	r0, [fp, #-16]
800018e4:	e51b2010 	ldr	r2, [fp, #-16]
800018e8:	e1a03002 	mov	r3, r2
800018ec:	e1a03103 	lsl	r3, r3, #2
800018f0:	e0833002 	add	r3, r3, r2
800018f4:	e1a03083 	lsl	r3, r3, #1
800018f8:	e50b3008 	str	r3, [fp, #-8]
800018fc:	ea000002 	b	8000190c <udelay+0x38>
80001900:	e51b3008 	ldr	r3, [fp, #-8]
80001904:	e2433001 	sub	r3, r3, #1
80001908:	e50b3008 	str	r3, [fp, #-8]
8000190c:	e51b3008 	ldr	r3, [fp, #-8]
80001910:	e3530000 	cmp	r3, #0
80001914:	1afffff9 	bne	80001900 <udelay+0x2c>
80001918:	e28bd000 	add	sp, fp, #0
8000191c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80001920:	e12fff1e 	bx	lr

80001924 <lcd_on>:
80001924:	e92d4800 	push	{fp, lr}
80001928:	e28db004 	add	fp, sp, #4
8000192c:	e59f3050 	ldr	r3, [pc, #80]	; 80001984 <lcd_on+0x60>
80001930:	e59f204c 	ldr	r2, [pc, #76]	; 80001984 <lcd_on+0x60>
80001934:	e5922000 	ldr	r2, [r2]
80001938:	e3822001 	orr	r2, r2, #1
8000193c:	e5832000 	str	r2, [r3]
80001940:	e59f3040 	ldr	r3, [pc, #64]	; 80001988 <lcd_on+0x64>
80001944:	e59f203c 	ldr	r2, [pc, #60]	; 80001988 <lcd_on+0x64>
80001948:	e5922000 	ldr	r2, [r2]
8000194c:	e3822001 	orr	r2, r2, #1
80001950:	e5832000 	str	r2, [r3]
80001954:	e59f0030 	ldr	r0, [pc, #48]	; 8000198c <lcd_on+0x68>
80001958:	ebffffdd 	bl	800018d4 <udelay>
8000195c:	e59f302c 	ldr	r3, [pc, #44]	; 80001990 <lcd_on+0x6c>
80001960:	e59f2028 	ldr	r2, [pc, #40]	; 80001990 <lcd_on+0x6c>
80001964:	e5922000 	ldr	r2, [r2]
80001968:	e3822001 	orr	r2, r2, #1
8000196c:	e5832000 	str	r2, [r3]
80001970:	e59f0014 	ldr	r0, [pc, #20]	; 8000198c <lcd_on+0x68>
80001974:	ebffffd6 	bl	800018d4 <udelay>
80001978:	e24bd004 	sub	sp, fp, #4
8000197c:	e8bd4800 	pop	{fp, lr}
80001980:	e12fff1e 	bx	lr
80001984:	48004e00 	.word	0x48004e00
80001988:	48004e10 	.word	0x48004e10
8000198c:	00002710 	.word	0x00002710
80001990:	48050440 	.word	0x48050440

80001994 <lcd_off>:
80001994:	e92d4800 	push	{fp, lr}
80001998:	e28db004 	add	fp, sp, #4
8000199c:	e59f003c 	ldr	r0, [pc, #60]	; 800019e0 <lcd_off+0x4c>
800019a0:	ebffffcb 	bl	800018d4 <udelay>
800019a4:	e59f3038 	ldr	r3, [pc, #56]	; 800019e4 <lcd_off+0x50>
800019a8:	e59f2034 	ldr	r2, [pc, #52]	; 800019e4 <lcd_off+0x50>
800019ac:	e5922000 	ldr	r2, [r2]
800019b0:	e3c22002 	bic	r2, r2, #2
800019b4:	e5832000 	str	r2, [r3]
800019b8:	e59f3024 	ldr	r3, [pc, #36]	; 800019e4 <lcd_off+0x50>
800019bc:	e59f2020 	ldr	r2, [pc, #32]	; 800019e4 <lcd_off+0x50>
800019c0:	e5922000 	ldr	r2, [r2]
800019c4:	e3c22001 	bic	r2, r2, #1
800019c8:	e5832000 	str	r2, [r3]
800019cc:	e59f000c 	ldr	r0, [pc, #12]	; 800019e0 <lcd_off+0x4c>
800019d0:	ebffffbf 	bl	800018d4 <udelay>
800019d4:	e24bd004 	sub	sp, fp, #4
800019d8:	e8bd4800 	pop	{fp, lr}
800019dc:	e12fff1e 	bx	lr
800019e0:	00002710 	.word	0x00002710
800019e4:	48050440 	.word	0x48050440

800019e8 <get_pixel_add>:
800019e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
800019ec:	e28db000 	add	fp, sp, #0
800019f0:	e24dd00c 	sub	sp, sp, #12
800019f4:	e50b0008 	str	r0, [fp, #-8]
800019f8:	e50b100c 	str	r1, [fp, #-12]
800019fc:	e51b200c 	ldr	r2, [fp, #-12]
80001a00:	e1a03002 	mov	r3, r2
80001a04:	e1a03103 	lsl	r3, r3, #2
80001a08:	e0833002 	add	r3, r3, r2
80001a0c:	e1a02103 	lsl	r2, r3, #2
80001a10:	e0833002 	add	r3, r3, r2
80001a14:	e1a03283 	lsl	r3, r3, #5
80001a18:	e1a02003 	mov	r2, r3
80001a1c:	e51b3008 	ldr	r3, [fp, #-8]
80001a20:	e0823003 	add	r3, r2, r3
80001a24:	e1a03083 	lsl	r3, r3, #1
80001a28:	e1a00003 	mov	r0, r3
80001a2c:	e28bd000 	add	sp, fp, #0
80001a30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80001a34:	e12fff1e 	bx	lr

80001a38 <fb_set_pixel>:
80001a38:	e92d4800 	push	{fp, lr}
80001a3c:	e28db004 	add	fp, sp, #4
80001a40:	e24dd018 	sub	sp, sp, #24
80001a44:	e50b0010 	str	r0, [fp, #-16]
80001a48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
80001a4c:	e1a03002 	mov	r3, r2
80001a50:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
80001a54:	e3a03000 	mov	r3, #0
80001a58:	e50b3008 	str	r3, [fp, #-8]
80001a5c:	e51b2010 	ldr	r2, [fp, #-16]
80001a60:	e59f3064 	ldr	r3, [pc, #100]	; 80001acc <fb_set_pixel+0x94>
80001a64:	e1520003 	cmp	r2, r3
80001a68:	9a000001 	bls	80001a74 <fb_set_pixel+0x3c>
80001a6c:	e59f3058 	ldr	r3, [pc, #88]	; 80001acc <fb_set_pixel+0x94>
80001a70:	e50b3010 	str	r3, [fp, #-16]
80001a74:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80001a78:	e59f3050 	ldr	r3, [pc, #80]	; 80001ad0 <fb_set_pixel+0x98>
80001a7c:	e1520003 	cmp	r2, r3
80001a80:	9a000001 	bls	80001a8c <fb_set_pixel+0x54>
80001a84:	e59f3044 	ldr	r3, [pc, #68]	; 80001ad0 <fb_set_pixel+0x98>
80001a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
80001a8c:	e51b0010 	ldr	r0, [fp, #-16]
80001a90:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
80001a94:	ebffffd3 	bl	800019e8 <get_pixel_add>
80001a98:	e50b0008 	str	r0, [fp, #-8]
80001a9c:	e51b3008 	ldr	r3, [fp, #-8]
80001aa0:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
80001aa4:	e2833605 	add	r3, r3, #5242880	; 0x500000
80001aa8:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
80001aac:	e59f1020 	ldr	r1, [pc, #32]	; 80001ad4 <fb_set_pixel+0x9c>
80001ab0:	e1a02082 	lsl	r2, r2, #1
80001ab4:	e0812002 	add	r2, r1, r2
80001ab8:	e1d220b0 	ldrh	r2, [r2]
80001abc:	e1c320b0 	strh	r2, [r3]
80001ac0:	e24bd004 	sub	sp, fp, #4
80001ac4:	e8bd4800 	pop	{fp, lr}
80001ac8:	e12fff1e 	bx	lr
80001acc:	0000031f 	.word	0x0000031f
80001ad0:	000001df 	.word	0x000001df
80001ad4:	80011e28 	.word	0x80011e28

80001ad8 <fb_print_char>:
80001ad8:	e92d4800 	push	{fp, lr}
80001adc:	e28db004 	add	fp, sp, #4
80001ae0:	e24dd020 	sub	sp, sp, #32
80001ae4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
80001ae8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
80001aec:	e1a02000 	mov	r2, r0
80001af0:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
80001af4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
80001af8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
80001afc:	e353001f 	cmp	r3, #31
80001b00:	9a000038 	bls	80001be8 <fb_print_char+0x110>
80001b04:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
80001b08:	e1a03c03 	lsl	r3, r3, #24
80001b0c:	e1a03c43 	asr	r3, r3, #24
80001b10:	e3530000 	cmp	r3, #0
80001b14:	ba000035 	blt	80001bf0 <fb_print_char+0x118>
80001b18:	e3a03000 	mov	r3, #0
80001b1c:	e50b3008 	str	r3, [fp, #-8]
80001b20:	ea00002c 	b	80001bd8 <fb_print_char+0x100>
80001b24:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
80001b28:	e2433020 	sub	r3, r3, #32
80001b2c:	e59f20cc 	ldr	r2, [pc, #204]	; 80001c00 <fb_print_char+0x128>
80001b30:	e1a01203 	lsl	r1, r3, #4
80001b34:	e51b3008 	ldr	r3, [fp, #-8]
80001b38:	e0813003 	add	r3, r1, r3
80001b3c:	e0823003 	add	r3, r2, r3
80001b40:	e5d33000 	ldrb	r3, [r3]
80001b44:	e54b300d 	strb	r3, [fp, #-13]
80001b48:	e3a03000 	mov	r3, #0
80001b4c:	e50b300c 	str	r3, [fp, #-12]
80001b50:	ea00001a 	b	80001bc0 <fb_print_char+0xe8>
80001b54:	e55b200d 	ldrb	r2, [fp, #-13]
80001b58:	e51b300c 	ldr	r3, [fp, #-12]
80001b5c:	e2633007 	rsb	r3, r3, #7
80001b60:	e1a03352 	asr	r3, r2, r3
80001b64:	e2033001 	and	r3, r3, #1
80001b68:	e20330ff 	and	r3, r3, #255	; 0xff
80001b6c:	e3530000 	cmp	r3, #0
80001b70:	0a000001 	beq	80001b7c <fb_print_char+0xa4>
80001b74:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
80001b78:	ea000001 	b	80001b84 <fb_print_char+0xac>
80001b7c:	e59f3080 	ldr	r3, [pc, #128]	; 80001c04 <fb_print_char+0x12c>
80001b80:	e5d33000 	ldrb	r3, [r3]
80001b84:	e54b300e 	strb	r3, [fp, #-14]
80001b88:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
80001b8c:	e51b300c 	ldr	r3, [fp, #-12]
80001b90:	e0821003 	add	r1, r2, r3
80001b94:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80001b98:	e51b3008 	ldr	r3, [fp, #-8]
80001b9c:	e0822003 	add	r2, r2, r3
80001ba0:	e55b300e 	ldrb	r3, [fp, #-14]
80001ba4:	e1a00001 	mov	r0, r1
80001ba8:	e1a01002 	mov	r1, r2
80001bac:	e1a02003 	mov	r2, r3
80001bb0:	ebffffa0 	bl	80001a38 <fb_set_pixel>
80001bb4:	e51b300c 	ldr	r3, [fp, #-12]
80001bb8:	e2833001 	add	r3, r3, #1
80001bbc:	e50b300c 	str	r3, [fp, #-12]
80001bc0:	e51b300c 	ldr	r3, [fp, #-12]
80001bc4:	e3530007 	cmp	r3, #7
80001bc8:	9affffe1 	bls	80001b54 <fb_print_char+0x7c>
80001bcc:	e51b3008 	ldr	r3, [fp, #-8]
80001bd0:	e2833001 	add	r3, r3, #1
80001bd4:	e50b3008 	str	r3, [fp, #-8]
80001bd8:	e51b3008 	ldr	r3, [fp, #-8]
80001bdc:	e353000f 	cmp	r3, #15
80001be0:	9affffcf 	bls	80001b24 <fb_print_char+0x4c>
80001be4:	ea000002 	b	80001bf4 <fb_print_char+0x11c>
80001be8:	e1a00000 	nop			; (mov r0, r0)
80001bec:	ea000000 	b	80001bf4 <fb_print_char+0x11c>
80001bf0:	e1a00000 	nop			; (mov r0, r0)
80001bf4:	e24bd004 	sub	sp, fp, #4
80001bf8:	e8bd4800 	pop	{fp, lr}
80001bfc:	e12fff1e 	bx	lr
80001c00:	80011e48 	.word	0x80011e48
80001c04:	80011495 	.word	0x80011495

80001c08 <fb_print_string>:
80001c08:	e92d4800 	push	{fp, lr}
80001c0c:	e28db004 	add	fp, sp, #4
80001c10:	e24dd018 	sub	sp, sp, #24
80001c14:	e50b0010 	str	r0, [fp, #-16]
80001c18:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
80001c1c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
80001c20:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
80001c24:	e3a03000 	mov	r3, #0
80001c28:	e50b3008 	str	r3, [fp, #-8]
80001c2c:	ea00000f 	b	80001c70 <fb_print_string+0x68>
80001c30:	e51b3010 	ldr	r3, [fp, #-16]
80001c34:	e5d32000 	ldrb	r2, [r3]
80001c38:	e51b3010 	ldr	r3, [fp, #-16]
80001c3c:	e2833001 	add	r3, r3, #1
80001c40:	e50b3010 	str	r3, [fp, #-16]
80001c44:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
80001c48:	e1a00002 	mov	r0, r2
80001c4c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
80001c50:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80001c54:	ebffff9f 	bl	80001ad8 <fb_print_char>
80001c58:	e51b3008 	ldr	r3, [fp, #-8]
80001c5c:	e2833001 	add	r3, r3, #1
80001c60:	e50b3008 	str	r3, [fp, #-8]
80001c64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80001c68:	e2833008 	add	r3, r3, #8
80001c6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
80001c70:	e51b3010 	ldr	r3, [fp, #-16]
80001c74:	e5d33000 	ldrb	r3, [r3]
80001c78:	e3530000 	cmp	r3, #0
80001c7c:	0a000003 	beq	80001c90 <fb_print_string+0x88>
80001c80:	e51b3010 	ldr	r3, [fp, #-16]
80001c84:	e5d33000 	ldrb	r3, [r3]
80001c88:	e353000d 	cmp	r3, #13
80001c8c:	1affffe7 	bne	80001c30 <fb_print_string+0x28>
80001c90:	e51b3008 	ldr	r3, [fp, #-8]
80001c94:	e2833001 	add	r3, r3, #1
80001c98:	e1a00003 	mov	r0, r3
80001c9c:	e24bd004 	sub	sp, fp, #4
80001ca0:	e8bd4800 	pop	{fp, lr}
80001ca4:	e12fff1e 	bx	lr

80001ca8 <clear_screen>:
80001ca8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80001cac:	e28db000 	add	fp, sp, #0
80001cb0:	e24dd00c 	sub	sp, sp, #12
80001cb4:	e59f3068 	ldr	r3, [pc, #104]	; 80001d24 <clear_screen+0x7c>
80001cb8:	e5d33000 	ldrb	r3, [r3]
80001cbc:	e59f2064 	ldr	r2, [pc, #100]	; 80001d28 <clear_screen+0x80>
80001cc0:	e1a03083 	lsl	r3, r3, #1
80001cc4:	e0823003 	add	r3, r2, r3
80001cc8:	e1d330b0 	ldrh	r3, [r3]
80001ccc:	e14b30ba 	strh	r3, [fp, #-10]
80001cd0:	e3a03000 	mov	r3, #0
80001cd4:	e50b3008 	str	r3, [fp, #-8]
80001cd8:	ea000007 	b	80001cfc <clear_screen+0x54>
80001cdc:	e51b3008 	ldr	r3, [fp, #-8]
80001ce0:	e2833102 	add	r3, r3, #-2147483648	; 0x80000000
80001ce4:	e2833605 	add	r3, r3, #5242880	; 0x500000
80001ce8:	e15b20ba 	ldrh	r2, [fp, #-10]
80001cec:	e1c320b0 	strh	r2, [r3]
80001cf0:	e51b3008 	ldr	r3, [fp, #-8]
80001cf4:	e2833002 	add	r3, r3, #2
80001cf8:	e50b3008 	str	r3, [fp, #-8]
80001cfc:	e51b2008 	ldr	r2, [fp, #-8]
80001d00:	e59f3024 	ldr	r3, [pc, #36]	; 80001d2c <clear_screen+0x84>
80001d04:	e1520003 	cmp	r2, r3
80001d08:	dafffff3 	ble	80001cdc <clear_screen+0x34>
80001d0c:	e59f301c 	ldr	r3, [pc, #28]	; 80001d30 <clear_screen+0x88>
80001d10:	e3a02001 	mov	r2, #1
80001d14:	e5832000 	str	r2, [r3]
80001d18:	e28bd000 	add	sp, fp, #0
80001d1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80001d20:	e12fff1e 	bx	lr
80001d24:	80011495 	.word	0x80011495
80001d28:	80011e28 	.word	0x80011e28
80001d2c:	000bb7ff 	.word	0x000bb7ff
80001d30:	8001683c 	.word	0x8001683c

80001d34 <fill_frame>:
80001d34:	e92d4800 	push	{fp, lr}
80001d38:	e28db004 	add	fp, sp, #4
80001d3c:	e24dd018 	sub	sp, sp, #24
80001d40:	e50b0010 	str	r0, [fp, #-16]
80001d44:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
80001d48:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
80001d4c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
80001d50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80001d54:	e50b300c 	str	r3, [fp, #-12]
80001d58:	ea000014 	b	80001db0 <fill_frame+0x7c>
80001d5c:	e51b3010 	ldr	r3, [fp, #-16]
80001d60:	e50b3008 	str	r3, [fp, #-8]
80001d64:	ea00000a 	b	80001d94 <fill_frame+0x60>
80001d68:	e51b1008 	ldr	r1, [fp, #-8]
80001d6c:	e51b200c 	ldr	r2, [fp, #-12]
80001d70:	e59b3004 	ldr	r3, [fp, #4]
80001d74:	e20330ff 	and	r3, r3, #255	; 0xff
80001d78:	e1a00001 	mov	r0, r1
80001d7c:	e1a01002 	mov	r1, r2
80001d80:	e1a02003 	mov	r2, r3
80001d84:	ebffff2b 	bl	80001a38 <fb_set_pixel>
80001d88:	e51b3008 	ldr	r3, [fp, #-8]
80001d8c:	e2833001 	add	r3, r3, #1
80001d90:	e50b3008 	str	r3, [fp, #-8]
80001d94:	e51b2008 	ldr	r2, [fp, #-8]
80001d98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80001d9c:	e1520003 	cmp	r2, r3
80001da0:	bafffff0 	blt	80001d68 <fill_frame+0x34>
80001da4:	e51b300c 	ldr	r3, [fp, #-12]
80001da8:	e2833001 	add	r3, r3, #1
80001dac:	e50b300c 	str	r3, [fp, #-12]
80001db0:	e51b200c 	ldr	r2, [fp, #-12]
80001db4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80001db8:	e1520003 	cmp	r2, r3
80001dbc:	baffffe6 	blt	80001d5c <fill_frame+0x28>
80001dc0:	e24bd004 	sub	sp, fp, #4
80001dc4:	e8bd4800 	pop	{fp, lr}
80001dc8:	e12fff1e 	bx	lr

80001dcc <fb_draw_line>:
80001dcc:	e92d4800 	push	{fp, lr}
80001dd0:	e28db004 	add	fp, sp, #4
80001dd4:	e24dd028 	sub	sp, sp, #40	; 0x28
80001dd8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
80001ddc:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
80001de0:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
80001de4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
80001de8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
80001dec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80001df0:	e1520003 	cmp	r2, r3
80001df4:	da000003 	ble	80001e08 <fb_draw_line+0x3c>
80001df8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
80001dfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80001e00:	e0633002 	rsb	r3, r3, r2
80001e04:	ea000002 	b	80001e14 <fb_draw_line+0x48>
80001e08:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80001e0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80001e10:	e0633002 	rsb	r3, r3, r2
80001e14:	e50b3010 	str	r3, [fp, #-16]
80001e18:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
80001e1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80001e20:	e0633002 	rsb	r3, r3, r2
80001e24:	e3530000 	cmp	r3, #0
80001e28:	da000001 	ble	80001e34 <fb_draw_line+0x68>
80001e2c:	e3a03001 	mov	r3, #1
80001e30:	ea000000 	b	80001e38 <fb_draw_line+0x6c>
80001e34:	e3e03000 	mvn	r3, #0
80001e38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
80001e3c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
80001e40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80001e44:	e1520003 	cmp	r2, r3
80001e48:	da000003 	ble	80001e5c <fb_draw_line+0x90>
80001e4c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
80001e50:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80001e54:	e0633002 	rsb	r3, r3, r2
80001e58:	ea000002 	b	80001e68 <fb_draw_line+0x9c>
80001e5c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80001e60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
80001e64:	e0633002 	rsb	r3, r3, r2
80001e68:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
80001e6c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
80001e70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80001e74:	e0633002 	rsb	r3, r3, r2
80001e78:	e3530000 	cmp	r3, #0
80001e7c:	da000001 	ble	80001e88 <fb_draw_line+0xbc>
80001e80:	e3a03001 	mov	r3, #1
80001e84:	ea000000 	b	80001e8c <fb_draw_line+0xc0>
80001e88:	e3e03000 	mvn	r3, #0
80001e8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
80001e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80001e94:	e1a02083 	lsl	r2, r3, #1
80001e98:	e51b3010 	ldr	r3, [fp, #-16]
80001e9c:	e0633002 	rsb	r3, r3, r2
80001ea0:	e50b300c 	str	r3, [fp, #-12]
80001ea4:	e51b3010 	ldr	r3, [fp, #-16]
80001ea8:	e3530000 	cmp	r3, #0
80001eac:	1a000015 	bne	80001f08 <fb_draw_line+0x13c>
80001eb0:	e3a03000 	mov	r3, #0
80001eb4:	e50b3008 	str	r3, [fp, #-8]
80001eb8:	ea00000d 	b	80001ef4 <fb_draw_line+0x128>
80001ebc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
80001ec0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80001ec4:	e5db3004 	ldrb	r3, [fp, #4]
80001ec8:	e1a00001 	mov	r0, r1
80001ecc:	e1a01002 	mov	r1, r2
80001ed0:	e1a02003 	mov	r2, r3
80001ed4:	ebfffed7 	bl	80001a38 <fb_set_pixel>
80001ed8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80001edc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80001ee0:	e0823003 	add	r3, r2, r3
80001ee4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
80001ee8:	e51b3008 	ldr	r3, [fp, #-8]
80001eec:	e2833001 	add	r3, r3, #1
80001ef0:	e50b3008 	str	r3, [fp, #-8]
80001ef4:	e51b2008 	ldr	r2, [fp, #-8]
80001ef8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80001efc:	e1520003 	cmp	r2, r3
80001f00:	baffffed 	blt	80001ebc <fb_draw_line+0xf0>
80001f04:	ea00003f 	b	80002008 <fb_draw_line+0x23c>
80001f08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80001f0c:	e3530000 	cmp	r3, #0
80001f10:	1a000015 	bne	80001f6c <fb_draw_line+0x1a0>
80001f14:	e3a03000 	mov	r3, #0
80001f18:	e50b3008 	str	r3, [fp, #-8]
80001f1c:	ea00000d 	b	80001f58 <fb_draw_line+0x18c>
80001f20:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
80001f24:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80001f28:	e5db3004 	ldrb	r3, [fp, #4]
80001f2c:	e1a00001 	mov	r0, r1
80001f30:	e1a01002 	mov	r1, r2
80001f34:	e1a02003 	mov	r2, r3
80001f38:	ebfffebe 	bl	80001a38 <fb_set_pixel>
80001f3c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80001f40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80001f44:	e0823003 	add	r3, r2, r3
80001f48:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
80001f4c:	e51b3008 	ldr	r3, [fp, #-8]
80001f50:	e2833001 	add	r3, r3, #1
80001f54:	e50b3008 	str	r3, [fp, #-8]
80001f58:	e51b2008 	ldr	r2, [fp, #-8]
80001f5c:	e51b3010 	ldr	r3, [fp, #-16]
80001f60:	e1520003 	cmp	r2, r3
80001f64:	baffffed 	blt	80001f20 <fb_draw_line+0x154>
80001f68:	ea000026 	b	80002008 <fb_draw_line+0x23c>
80001f6c:	e3a03000 	mov	r3, #0
80001f70:	e50b3008 	str	r3, [fp, #-8]
80001f74:	ea00001f 	b	80001ff8 <fb_draw_line+0x22c>
80001f78:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
80001f7c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80001f80:	e5db3004 	ldrb	r3, [fp, #4]
80001f84:	e1a00001 	mov	r0, r1
80001f88:	e1a01002 	mov	r1, r2
80001f8c:	e1a02003 	mov	r2, r3
80001f90:	ebfffea8 	bl	80001a38 <fb_set_pixel>
80001f94:	ea000008 	b	80001fbc <fb_draw_line+0x1f0>
80001f98:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80001f9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80001fa0:	e0823003 	add	r3, r2, r3
80001fa4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
80001fa8:	e51b3010 	ldr	r3, [fp, #-16]
80001fac:	e1a03083 	lsl	r3, r3, #1
80001fb0:	e51b200c 	ldr	r2, [fp, #-12]
80001fb4:	e0633002 	rsb	r3, r3, r2
80001fb8:	e50b300c 	str	r3, [fp, #-12]
80001fbc:	e51b300c 	ldr	r3, [fp, #-12]
80001fc0:	e3530000 	cmp	r3, #0
80001fc4:	aafffff3 	bge	80001f98 <fb_draw_line+0x1cc>
80001fc8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80001fcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80001fd0:	e0823003 	add	r3, r2, r3
80001fd4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
80001fd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80001fdc:	e1a03083 	lsl	r3, r3, #1
80001fe0:	e51b200c 	ldr	r2, [fp, #-12]
80001fe4:	e0823003 	add	r3, r2, r3
80001fe8:	e50b300c 	str	r3, [fp, #-12]
80001fec:	e51b3008 	ldr	r3, [fp, #-8]
80001ff0:	e2833001 	add	r3, r3, #1
80001ff4:	e50b3008 	str	r3, [fp, #-8]
80001ff8:	e51b2008 	ldr	r2, [fp, #-8]
80001ffc:	e51b3010 	ldr	r3, [fp, #-16]
80002000:	e1520003 	cmp	r2, r3
80002004:	baffffdb 	blt	80001f78 <fb_draw_line+0x1ac>
80002008:	e24bd004 	sub	sp, fp, #4
8000200c:	e8bd4800 	pop	{fp, lr}
80002010:	e12fff1e 	bx	lr

80002014 <fb_draw_frame>:
80002014:	e92d4800 	push	{fp, lr}
80002018:	e28db004 	add	fp, sp, #4
8000201c:	e24dd018 	sub	sp, sp, #24
80002020:	e50b0008 	str	r0, [fp, #-8]
80002024:	e50b100c 	str	r1, [fp, #-12]
80002028:	e50b2010 	str	r2, [fp, #-16]
8000202c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
80002030:	e5db3004 	ldrb	r3, [fp, #4]
80002034:	e58d3000 	str	r3, [sp]
80002038:	e51b0008 	ldr	r0, [fp, #-8]
8000203c:	e51b100c 	ldr	r1, [fp, #-12]
80002040:	e51b2010 	ldr	r2, [fp, #-16]
80002044:	e51b300c 	ldr	r3, [fp, #-12]
80002048:	ebffff5f 	bl	80001dcc <fb_draw_line>
8000204c:	e5db3004 	ldrb	r3, [fp, #4]
80002050:	e58d3000 	str	r3, [sp]
80002054:	e51b0008 	ldr	r0, [fp, #-8]
80002058:	e51b100c 	ldr	r1, [fp, #-12]
8000205c:	e51b2008 	ldr	r2, [fp, #-8]
80002060:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80002064:	ebffff58 	bl	80001dcc <fb_draw_line>
80002068:	e5db3004 	ldrb	r3, [fp, #4]
8000206c:	e58d3000 	str	r3, [sp]
80002070:	e51b0008 	ldr	r0, [fp, #-8]
80002074:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
80002078:	e51b2010 	ldr	r2, [fp, #-16]
8000207c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80002080:	ebffff51 	bl	80001dcc <fb_draw_line>
80002084:	e5db3004 	ldrb	r3, [fp, #4]
80002088:	e58d3000 	str	r3, [sp]
8000208c:	e51b0010 	ldr	r0, [fp, #-16]
80002090:	e51b100c 	ldr	r1, [fp, #-12]
80002094:	e51b2010 	ldr	r2, [fp, #-16]
80002098:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
8000209c:	ebffff4a 	bl	80001dcc <fb_draw_line>
800020a0:	e51b1010 	ldr	r1, [fp, #-16]
800020a4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
800020a8:	e5db3004 	ldrb	r3, [fp, #4]
800020ac:	e1a00001 	mov	r0, r1
800020b0:	e1a01002 	mov	r1, r2
800020b4:	e1a02003 	mov	r2, r3
800020b8:	ebfffe5e 	bl	80001a38 <fb_set_pixel>
800020bc:	e24bd004 	sub	sp, fp, #4
800020c0:	e8bd4800 	pop	{fp, lr}
800020c4:	e12fff1e 	bx	lr

800020c8 <get_current_y>:
800020c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
800020cc:	e28db000 	add	fp, sp, #0
800020d0:	e59f3014 	ldr	r3, [pc, #20]	; 800020ec <get_current_y+0x24>
800020d4:	e5933000 	ldr	r3, [r3]
800020d8:	e1a03203 	lsl	r3, r3, #4
800020dc:	e1a00003 	mov	r0, r3
800020e0:	e28bd000 	add	sp, fp, #0
800020e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800020e8:	e12fff1e 	bx	lr
800020ec:	8001683c 	.word	0x8001683c

800020f0 <clear_line_nb>:
800020f0:	e92d4800 	push	{fp, lr}
800020f4:	e28db004 	add	fp, sp, #4
800020f8:	e24dd018 	sub	sp, sp, #24
800020fc:	e50b0010 	str	r0, [fp, #-16]
80002100:	e59f3044 	ldr	r3, [pc, #68]	; 8000214c <clear_line_nb+0x5c>
80002104:	e3a02008 	mov	r2, #8
80002108:	e5c32000 	strb	r2, [r3]
8000210c:	e51b0010 	ldr	r0, [fp, #-16]
80002110:	ebffffec 	bl	800020c8 <get_current_y>
80002114:	e50b0008 	str	r0, [fp, #-8]
80002118:	e51b2008 	ldr	r2, [fp, #-8]
8000211c:	e51b3008 	ldr	r3, [fp, #-8]
80002120:	e2833010 	add	r3, r3, #16
80002124:	e59f1020 	ldr	r1, [pc, #32]	; 8000214c <clear_line_nb+0x5c>
80002128:	e5d11000 	ldrb	r1, [r1]
8000212c:	e58d1000 	str	r1, [sp]
80002130:	e3a00014 	mov	r0, #20
80002134:	e1a01002 	mov	r1, r2
80002138:	e59f2010 	ldr	r2, [pc, #16]	; 80002150 <clear_line_nb+0x60>
8000213c:	ebfffefc 	bl	80001d34 <fill_frame>
80002140:	e24bd004 	sub	sp, fp, #4
80002144:	e8bd4800 	pop	{fp, lr}
80002148:	e12fff1e 	bx	lr
8000214c:	80011495 	.word	0x80011495
80002150:	000001f3 	.word	0x000001f3

80002154 <fb_clear_line>:
80002154:	e92d4800 	push	{fp, lr}
80002158:	e28db004 	add	fp, sp, #4
8000215c:	e24dd070 	sub	sp, sp, #112	; 0x70
80002160:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
80002164:	e51b3070 	ldr	r3, [fp, #-112]	; 0xffffff90
80002168:	e353001e 	cmp	r3, #30
8000216c:	8a000017 	bhi	800021d0 <fb_clear_line+0x7c>
80002170:	e3a03000 	mov	r3, #0
80002174:	e50b3008 	str	r3, [fp, #-8]
80002178:	ea000009 	b	800021a4 <fb_clear_line+0x50>
8000217c:	e3e03067 	mvn	r3, #103	; 0x67
80002180:	e51b2008 	ldr	r2, [fp, #-8]
80002184:	e24b1004 	sub	r1, fp, #4
80002188:	e0812002 	add	r2, r1, r2
8000218c:	e0823003 	add	r3, r2, r3
80002190:	e3a02020 	mov	r2, #32
80002194:	e5c32000 	strb	r2, [r3]
80002198:	e51b3008 	ldr	r3, [fp, #-8]
8000219c:	e2833001 	add	r3, r3, #1
800021a0:	e50b3008 	str	r3, [fp, #-8]
800021a4:	e51b3008 	ldr	r3, [fp, #-8]
800021a8:	e3530063 	cmp	r3, #99	; 0x63
800021ac:	dafffff2 	ble	8000217c <fb_clear_line+0x28>
800021b0:	e51b3070 	ldr	r3, [fp, #-112]	; 0xffffff90
800021b4:	e1a02203 	lsl	r2, r3, #4
800021b8:	e59f301c 	ldr	r3, [pc, #28]	; 800021dc <fb_clear_line+0x88>
800021bc:	e5d33000 	ldrb	r3, [r3]
800021c0:	e24b106c 	sub	r1, fp, #108	; 0x6c
800021c4:	e1a00001 	mov	r0, r1
800021c8:	e3a01000 	mov	r1, #0
800021cc:	ebfffe8d 	bl	80001c08 <fb_print_string>
800021d0:	e24bd004 	sub	sp, fp, #4
800021d4:	e8bd4800 	pop	{fp, lr}
800021d8:	e12fff1e 	bx	lr
800021dc:	80011495 	.word	0x80011495

800021e0 <fill_lcd_line>:
800021e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
800021e4:	e28db000 	add	fp, sp, #0
800021e8:	e24dd014 	sub	sp, sp, #20
800021ec:	e1a03000 	mov	r3, r0
800021f0:	e54b300d 	strb	r3, [fp, #-13]
800021f4:	e3a03014 	mov	r3, #20
800021f8:	e50b3008 	str	r3, [fp, #-8]
800021fc:	ea000007 	b	80002220 <fill_lcd_line+0x40>
80002200:	e51b3008 	ldr	r3, [fp, #-8]
80002204:	e2433014 	sub	r3, r3, #20
80002208:	e59f2040 	ldr	r2, [pc, #64]	; 80002250 <fill_lcd_line+0x70>
8000220c:	e55b100d 	ldrb	r1, [fp, #-13]
80002210:	e7c21003 	strb	r1, [r2, r3]
80002214:	e51b3008 	ldr	r3, [fp, #-8]
80002218:	e2833001 	add	r3, r3, #1
8000221c:	e50b3008 	str	r3, [fp, #-8]
80002220:	e51b2008 	ldr	r2, [fp, #-8]
80002224:	e59f3028 	ldr	r3, [pc, #40]	; 80002254 <fill_lcd_line+0x74>
80002228:	e1520003 	cmp	r2, r3
8000222c:	dafffff3 	ble	80002200 <fill_lcd_line+0x20>
80002230:	e59f2018 	ldr	r2, [pc, #24]	; 80002250 <fill_lcd_line+0x70>
80002234:	e51b3008 	ldr	r3, [fp, #-8]
80002238:	e0823003 	add	r3, r2, r3
8000223c:	e3a02000 	mov	r2, #0
80002240:	e5c32000 	strb	r2, [r3]
80002244:	e28bd000 	add	sp, fp, #0
80002248:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
8000224c:	e12fff1e 	bx	lr
80002250:	800167d8 	.word	0x800167d8
80002254:	0000030a 	.word	0x0000030a

80002258 <fb_print_buffer>:
80002258:	e92d4800 	push	{fp, lr}
8000225c:	e28db004 	add	fp, sp, #4
80002260:	e24dd018 	sub	sp, sp, #24
80002264:	e50b0010 	str	r0, [fp, #-16]
80002268:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
8000226c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
80002270:	ea00001f 	b	800022f4 <fb_print_buffer+0x9c>
80002274:	e51b3010 	ldr	r3, [fp, #-16]
80002278:	e2832001 	add	r2, r3, #1
8000227c:	e59f3088 	ldr	r3, [pc, #136]	; 8000230c <fb_print_buffer+0xb4>
80002280:	e0831392 	umull	r1, r3, r2, r3
80002284:	e1a01223 	lsr	r1, r3, #4
80002288:	e1a03001 	mov	r3, r1
8000228c:	e1a03203 	lsl	r3, r3, #4
80002290:	e0613003 	rsb	r3, r1, r3
80002294:	e1a03083 	lsl	r3, r3, #1
80002298:	e0633002 	rsb	r3, r3, r2
8000229c:	e50b3010 	str	r3, [fp, #-16]
800022a0:	e51b3010 	ldr	r3, [fp, #-16]
800022a4:	e3530000 	cmp	r3, #0
800022a8:	1a000000 	bne	800022b0 <fb_print_buffer+0x58>
800022ac:	ebfffe7d 	bl	80001ca8 <clear_screen>
800022b0:	ebffff84 	bl	800020c8 <get_current_y>
800022b4:	e50b0008 	str	r0, [fp, #-8]
800022b8:	e59f3050 	ldr	r3, [pc, #80]	; 80002310 <fb_print_buffer+0xb8>
800022bc:	e5d33000 	ldrb	r3, [r3]
800022c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
800022c4:	e3a01000 	mov	r1, #0
800022c8:	e51b2008 	ldr	r2, [fp, #-8]
800022cc:	ebfffe4d 	bl	80001c08 <fb_print_string>
800022d0:	e50b000c 	str	r0, [fp, #-12]
800022d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
800022d8:	e51b300c 	ldr	r3, [fp, #-12]
800022dc:	e0823003 	add	r3, r2, r3
800022e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
800022e4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
800022e8:	e51b300c 	ldr	r3, [fp, #-12]
800022ec:	e0633002 	rsb	r3, r3, r2
800022f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
800022f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800022f8:	e3530000 	cmp	r3, #0
800022fc:	caffffdc 	bgt	80002274 <fb_print_buffer+0x1c>
80002300:	e24bd004 	sub	sp, fp, #4
80002304:	e8bd4800 	pop	{fp, lr}
80002308:	e12fff1e 	bx	lr
8000230c:	88888889 	.word	0x88888889
80002310:	80011496 	.word	0x80011496

80002314 <isr>:
.global isr
.extern isr_handler

isr:
	stmfd	R13!, {r0-r12, LR}
80002314:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}

	bl		isr_handler
80002318:	ebfffa5a 	bl	80000c88 <isr_handler>

	ldmfd	sp!, {r0-r12, LR}
8000231c:	e8bd5fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	subs	pc, lr, #4
80002320:	e25ef004 	subs	pc, lr, #4

80002324 <wait>:

vulong cid_reg[4], rca, csd_reg[4], scr_reg[2];
vulong buffer_data[1024];	// 8 512-byte blocks

int wait(int delay)
{
80002324:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80002328:	e28db000 	add	fp, sp, #0
8000232c:	e24dd014 	sub	sp, sp, #20
80002330:	e50b0010 	str	r0, [fp, #-16]
  int i;

  for (i = 0; i < delay; i++) ;
80002334:	e3a03000 	mov	r3, #0
80002338:	e50b3008 	str	r3, [fp, #-8]
8000233c:	ea000002 	b	8000234c <wait+0x28>
80002340:	e51b3008 	ldr	r3, [fp, #-8]
80002344:	e2833001 	add	r3, r3, #1
80002348:	e50b3008 	str	r3, [fp, #-8]
8000234c:	e51b2008 	ldr	r2, [fp, #-8]
80002350:	e51b3010 	ldr	r3, [fp, #-16]
80002354:	e1520003 	cmp	r2, r3
80002358:	bafffff8 	blt	80002340 <wait+0x1c>
  return 0;
8000235c:	e3a03000 	mov	r3, #0
}
80002360:	e1a00003 	mov	r0, r3
80002364:	e28bd000 	add	sp, fp, #0
80002368:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
8000236c:	e12fff1e 	bx	lr

80002370 <mmchs_is_card_write_protected>:
 * \return   0  if the card is not write protected
 *           1  if the card is write protected
 **/

int mmchs_is_card_write_protected()
{
80002370:	e92d4800 	push	{fp, lr}
80002374:	e28db004 	add	fp, sp, #4
	return ReadInput(GPIO_MOD5, MMC1_WP);
80002378:	e3a00005 	mov	r0, #5
8000237c:	e3a01002 	mov	r1, #2
80002380:	ebfff7a3 	bl	80000214 <ReadInput>
80002384:	e1a03000 	mov	r3, r0
}
80002388:	e1a00003 	mov	r0, r3
8000238c:	e24bd004 	sub	sp, fp, #4
80002390:	e8bd4800 	pop	{fp, lr}
80002394:	e12fff1e 	bx	lr

80002398 <mmchs_send_command>:
 * \note: multiple block transfer not supported
 *
 * \return   none
 **/
void mmchs_send_command(ulong cmdindx,ulong cmdarg, uchar acmd, uchar nblocks)
{
80002398:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
8000239c:	e28db000 	add	fp, sp, #0
800023a0:	e24dd01c 	sub	sp, sp, #28
800023a4:	e50b0010 	str	r0, [fp, #-16]
800023a8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
800023ac:	e54b2015 	strb	r2, [fp, #-21]	; 0xffffffeb
800023b0:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
	ulong cmd;

	// set command index
	cmd = 0;
800023b4:	e3a03000 	mov	r3, #0
800023b8:	e50b3008 	str	r3, [fp, #-8]
	cmd |= cmdindx << MMCHS_CMD_INDX_SHIFT;
800023bc:	e51b3010 	ldr	r3, [fp, #-16]
800023c0:	e1a03c03 	lsl	r3, r3, #24
800023c4:	e51b2008 	ldr	r2, [fp, #-8]
800023c8:	e1823003 	orr	r3, r2, r3
800023cc:	e50b3008 	str	r3, [fp, #-8]

	// if command is read_single/multiple block or write single/multiple block or send_scr
    if (cmdindx == 17 || cmdindx == 25 || cmdindx == 18 ||cmdindx == 24 || cmdindx == 51 || (cmdindx == 6 && acmd == 0))
800023d0:	e51b3010 	ldr	r3, [fp, #-16]
800023d4:	e3530011 	cmp	r3, #17
800023d8:	0a000011 	beq	80002424 <mmchs_send_command+0x8c>
800023dc:	e51b3010 	ldr	r3, [fp, #-16]
800023e0:	e3530019 	cmp	r3, #25
800023e4:	0a00000e 	beq	80002424 <mmchs_send_command+0x8c>
800023e8:	e51b3010 	ldr	r3, [fp, #-16]
800023ec:	e3530012 	cmp	r3, #18
800023f0:	0a00000b 	beq	80002424 <mmchs_send_command+0x8c>
800023f4:	e51b3010 	ldr	r3, [fp, #-16]
800023f8:	e3530018 	cmp	r3, #24
800023fc:	0a000008 	beq	80002424 <mmchs_send_command+0x8c>
80002400:	e51b3010 	ldr	r3, [fp, #-16]
80002404:	e3530033 	cmp	r3, #51	; 0x33
80002408:	0a000005 	beq	80002424 <mmchs_send_command+0x8c>
8000240c:	e51b3010 	ldr	r3, [fp, #-16]
80002410:	e3530006 	cmp	r3, #6
80002414:	1a000031 	bne	800024e0 <mmchs_send_command+0x148>
80002418:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
8000241c:	e3530000 	cmp	r3, #0
80002420:	1a00002e 	bne	800024e0 <mmchs_send_command+0x148>
    {
    	// block size
    	MMCHS1_REG(MMCHS_BLK) = MMCHS_BLK_BLEN_512BYTESLEN;
80002424:	e59f326c 	ldr	r3, [pc, #620]	; 80002698 <mmchs_send_command+0x300>
80002428:	e3a02c02 	mov	r2, #512	; 0x200
8000242c:	e5832000 	str	r2, [r3]
    	// data present
        cmd |= (MMCHS_CMD_DP_DATA);
80002430:	e51b3008 	ldr	r3, [fp, #-8]
80002434:	e3833602 	orr	r3, r3, #2097152	; 0x200000
80002438:	e50b3008 	str	r3, [fp, #-8]
    	// set timeout to the max value possible
    	MMCHS1_REG(MMCHS_SYSCTL)&=~MMCHS_SYSCTL_DTO;
8000243c:	e59f3258 	ldr	r3, [pc, #600]	; 8000269c <mmchs_send_command+0x304>
80002440:	e59f2254 	ldr	r2, [pc, #596]	; 8000269c <mmchs_send_command+0x304>
80002444:	e5922000 	ldr	r2, [r2]
80002448:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
8000244c:	e5832000 	str	r2, [r3]
    	MMCHS1_REG(MMCHS_SYSCTL)|=MMCHS_SYSCTL_DTO_TCF27;
80002450:	e59f3244 	ldr	r3, [pc, #580]	; 8000269c <mmchs_send_command+0x304>
80002454:	e59f2240 	ldr	r2, [pc, #576]	; 8000269c <mmchs_send_command+0x304>
80002458:	e5922000 	ldr	r2, [r2]
8000245c:	e382280e 	orr	r2, r2, #917504	; 0xe0000
80002460:	e5832000 	str	r2, [r3]

    	// multiple blocks
    	if (nblocks > 1)
80002464:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
80002468:	e3530001 	cmp	r3, #1
8000246c:	9a000009 	bls	80002498 <mmchs_send_command+0x100>
    	{
        	// number of blocks
        	MMCHS1_REG(MMCHS_BLK) |= ((ulong)nblocks << MMCHS_BLK_NBLK_SHIFT);
80002470:	e59f3220 	ldr	r3, [pc, #544]	; 80002698 <mmchs_send_command+0x300>
80002474:	e59f221c 	ldr	r2, [pc, #540]	; 80002698 <mmchs_send_command+0x300>
80002478:	e5921000 	ldr	r1, [r2]
8000247c:	e55b2016 	ldrb	r2, [fp, #-22]	; 0xffffffea
80002480:	e1a02802 	lsl	r2, r2, #16
80002484:	e1812002 	orr	r2, r1, r2
80002488:	e5832000 	str	r2, [r3]
        	// command flags: multiple blocks and block count enable
        	cmd |= (MMCHS_CMD_MSBS|MMCHS_CMD_BCE);
8000248c:	e51b3008 	ldr	r3, [fp, #-8]
80002490:	e3833022 	orr	r3, r3, #34	; 0x22
80002494:	e50b3008 	str	r3, [fp, #-8]
    	}

        // set data direction
        if (cmdindx == 17 || cmdindx == 18 || cmdindx == 51 || (cmdindx == 6 && acmd == 0))
80002498:	e51b3010 	ldr	r3, [fp, #-16]
8000249c:	e3530011 	cmp	r3, #17
800024a0:	0a00000b 	beq	800024d4 <mmchs_send_command+0x13c>
800024a4:	e51b3010 	ldr	r3, [fp, #-16]
800024a8:	e3530012 	cmp	r3, #18
800024ac:	0a000008 	beq	800024d4 <mmchs_send_command+0x13c>
800024b0:	e51b3010 	ldr	r3, [fp, #-16]
800024b4:	e3530033 	cmp	r3, #51	; 0x33
800024b8:	0a000005 	beq	800024d4 <mmchs_send_command+0x13c>
800024bc:	e51b3010 	ldr	r3, [fp, #-16]
800024c0:	e3530006 	cmp	r3, #6
800024c4:	1a000005 	bne	800024e0 <mmchs_send_command+0x148>
800024c8:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
800024cc:	e3530000 	cmp	r3, #0
800024d0:	1a000002 	bne	800024e0 <mmchs_send_command+0x148>
        	cmd |= MMCHS_CMD_DDIR_READ;
800024d4:	e51b3008 	ldr	r3, [fp, #-8]
800024d8:	e3833010 	orr	r3, r3, #16
800024dc:	e50b3008 	str	r3, [fp, #-8]
    }

    switch (cmdindx)
800024e0:	e51b3010 	ldr	r3, [fp, #-16]
800024e4:	e2433002 	sub	r3, r3, #2
800024e8:	e3530035 	cmp	r3, #53	; 0x35
800024ec:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
800024f0:	ea00004f 	b	80002634 <mmchs_send_command+0x29c>
800024f4:	80002614 	.word	0x80002614
800024f8:	800025dc 	.word	0x800025dc
800024fc:	80002634 	.word	0x80002634
80002500:	80002634 	.word	0x80002634
80002504:	800025dc 	.word	0x800025dc
80002508:	800025f8 	.word	0x800025f8
8000250c:	800025dc 	.word	0x800025dc
80002510:	80002614 	.word	0x80002614
80002514:	80002614 	.word	0x80002614
80002518:	80002634 	.word	0x80002634
8000251c:	800025f8 	.word	0x800025f8
80002520:	800025dc 	.word	0x800025dc
80002524:	80002634 	.word	0x80002634
80002528:	80002634 	.word	0x80002634
8000252c:	80002634 	.word	0x80002634
80002530:	800025dc 	.word	0x800025dc
80002534:	800025dc 	.word	0x800025dc
80002538:	80002634 	.word	0x80002634
8000253c:	80002634 	.word	0x80002634
80002540:	80002634 	.word	0x80002634
80002544:	80002634 	.word	0x80002634
80002548:	800025dc 	.word	0x800025dc
8000254c:	800025dc 	.word	0x800025dc
80002550:	800025dc 	.word	0x800025dc
80002554:	80002634 	.word	0x80002634
80002558:	80002634 	.word	0x80002634
8000255c:	80002634 	.word	0x80002634
80002560:	80002634 	.word	0x80002634
80002564:	80002634 	.word	0x80002634
80002568:	80002634 	.word	0x80002634
8000256c:	80002634 	.word	0x80002634
80002570:	80002634 	.word	0x80002634
80002574:	80002634 	.word	0x80002634
80002578:	80002634 	.word	0x80002634
8000257c:	80002634 	.word	0x80002634
80002580:	80002634 	.word	0x80002634
80002584:	80002634 	.word	0x80002634
80002588:	80002634 	.word	0x80002634
8000258c:	80002634 	.word	0x80002634
80002590:	800025cc 	.word	0x800025cc
80002594:	80002634 	.word	0x80002634
80002598:	80002634 	.word	0x80002634
8000259c:	80002634 	.word	0x80002634
800025a0:	80002634 	.word	0x80002634
800025a4:	80002634 	.word	0x80002634
800025a8:	80002634 	.word	0x80002634
800025ac:	80002634 	.word	0x80002634
800025b0:	80002634 	.word	0x80002634
800025b4:	80002634 	.word	0x80002634
800025b8:	800025dc 	.word	0x800025dc
800025bc:	80002634 	.word	0x80002634
800025c0:	80002634 	.word	0x80002634
800025c4:	80002634 	.word	0x80002634
800025c8:	800025dc 	.word	0x800025dc
    {
    	// R3
    	case 41:  cmd |= MMCHS_CMD_RSP_TYPE_48BITS;
800025cc:	e51b3008 	ldr	r3, [fp, #-8]
800025d0:	e3833802 	orr	r3, r3, #131072	; 0x20000
800025d4:	e50b3008 	str	r3, [fp, #-8]
		  	  	  break;
800025d8:	ea000014 	b	80002630 <mmchs_send_command+0x298>
    	case 24:
    	case 25:
    	case 6:
    	case 13:
    	case 51:
    	case 55: cmd |= MMCHS_CMD_RSP_TYPE_48BITS;
800025dc:	e51b3008 	ldr	r3, [fp, #-8]
800025e0:	e3833802 	orr	r3, r3, #131072	; 0x20000
800025e4:	e50b3008 	str	r3, [fp, #-8]
    			  /* set index and CRC check enable */
    	    	  cmd |= (MMCHS_CMD_CICE_CHECK|MMCHS_CMD_CCCE_CHECK);
800025e8:	e51b3008 	ldr	r3, [fp, #-8]
800025ec:	e3833706 	orr	r3, r3, #1572864	; 0x180000
800025f0:	e50b3008 	str	r3, [fp, #-8]
    			  break;
800025f4:	ea00000d 	b	80002630 <mmchs_send_command+0x298>
    	// R1b
    	case 7:
    	case 12:  cmd |= MMCHS_CMD_RSP_TYPE_48BITS_BUSY;
800025f8:	e51b3008 	ldr	r3, [fp, #-8]
800025fc:	e3833803 	orr	r3, r3, #196608	; 0x30000
80002600:	e50b3008 	str	r3, [fp, #-8]
    			  /* set index and CRC check enable */
    	    	  cmd |= (MMCHS_CMD_CICE_CHECK|MMCHS_CMD_CCCE_CHECK);
80002604:	e51b3008 	ldr	r3, [fp, #-8]
80002608:	e3833706 	orr	r3, r3, #1572864	; 0x180000
8000260c:	e50b3008 	str	r3, [fp, #-8]
    	    	  break;
80002610:	ea000006 	b	80002630 <mmchs_send_command+0x298>
    	// R2
    	case 2:
    	case 10:
    	case 9:  cmd |= MMCHS_CMD_RSP_TYPE_136BITS;
80002614:	e51b3008 	ldr	r3, [fp, #-8]
80002618:	e3833801 	orr	r3, r3, #65536	; 0x10000
8000261c:	e50b3008 	str	r3, [fp, #-8]
    			  /* set CRC check enable */
    	    	  cmd |= MMCHS_CMD_CCCE_CHECK;
80002620:	e51b3008 	ldr	r3, [fp, #-8]
80002624:	e3833702 	orr	r3, r3, #524288	; 0x80000
80002628:	e50b3008 	str	r3, [fp, #-8]
	  	  	  	  break;
8000262c:	e1a00000 	nop			; (mov r0, r0)
    }


    /* wait for the command line mmc1_cmd availability */
    while ((MMCHS1_REG(MMCHS_PSTATE) & MMCHS_PSTATE_CMDI) == MMCHS_PSTATE_CMDI_CMDDIS);
80002630:	ea000000 	b	80002638 <mmchs_send_command+0x2a0>
80002634:	e1a00000 	nop			; (mov r0, r0)
80002638:	e59f3060 	ldr	r3, [pc, #96]	; 800026a0 <mmchs_send_command+0x308>
8000263c:	e5933000 	ldr	r3, [r3]
80002640:	e2033001 	and	r3, r3, #1
80002644:	e20330ff 	and	r3, r3, #255	; 0xff
80002648:	e3530000 	cmp	r3, #0
8000264c:	1afffff9 	bne	80002638 <mmchs_send_command+0x2a0>

    /* Set the command/command argument */
    MMCHS1_REG(MMCHS_ARG) = cmdarg;
80002650:	e59f304c 	ldr	r3, [pc, #76]	; 800026a4 <mmchs_send_command+0x30c>
80002654:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80002658:	e5832000 	str	r2, [r3]
    MMCHS1_REG(MMCHS_CMD) = cmd;
8000265c:	e59f3044 	ldr	r3, [pc, #68]	; 800026a8 <mmchs_send_command+0x310>
80002660:	e51b2008 	ldr	r2, [fp, #-8]
80002664:	e5832000 	str	r2, [r3]

    /* polls the CC bit of STAT waiting for the command completion */
    while ((MMCHS1_REG(MMCHS_STAT) & MMCHS_STAT_CC)==0);
80002668:	e1a00000 	nop			; (mov r0, r0)
8000266c:	e59f3038 	ldr	r3, [pc, #56]	; 800026ac <mmchs_send_command+0x314>
80002670:	e5933000 	ldr	r3, [r3]
80002674:	e2033001 	and	r3, r3, #1
80002678:	e3530000 	cmp	r3, #0
8000267c:	0afffffa 	beq	8000266c <mmchs_send_command+0x2d4>

	// clear status CC bit
	MMCHS1_REG(MMCHS_STAT) = MMCHS_STAT_CC;
80002680:	e59f3024 	ldr	r3, [pc, #36]	; 800026ac <mmchs_send_command+0x314>
80002684:	e3a02001 	mov	r2, #1
80002688:	e5832000 	str	r2, [r3]

}
8000268c:	e28bd000 	add	sp, fp, #0
80002690:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80002694:	e12fff1e 	bx	lr
80002698:	4809c104 	.word	0x4809c104
8000269c:	4809c12c 	.word	0x4809c12c
800026a0:	4809c124 	.word	0x4809c124
800026a4:	4809c108 	.word	0x4809c108
800026a8:	4809c10c 	.word	0x4809c10c
800026ac:	4809c130 	.word	0x4809c130

800026b0 <mmc1_pad_conf>:

void mmc1_pad_conf()
{
800026b0:	e92d4800 	push	{fp, lr}
800026b4:	e28db004 	add	fp, sp, #4
800026b8:	e24dd008 	sub	sp, sp, #8
	vulong PadConfVal1=0;
800026bc:	e3a03000 	mov	r3, #0
800026c0:	e50b3008 	str	r3, [fp, #-8]

	/* PBIAS cells and power MIC programming */

	// power down the pins before changing the voltage (PBIAS0 cell, mmc1 pins)
	SET_REG32(CONTROL_PBIAS_LITE) &= ~PBIASLITEPWRDNZ0;
800026c4:	e59f3178 	ldr	r3, [pc, #376]	; 80002844 <mmc1_pad_conf+0x194>
800026c8:	e59f2174 	ldr	r2, [pc, #372]	; 80002844 <mmc1_pad_conf+0x194>
800026cc:	e5922000 	ldr	r2, [r2]
800026d0:	e3c22002 	bic	r2, r2, #2
800026d4:	e5832000 	str	r2, [r3]
	// power down the pins before changing the voltage (PBIAS1 cell, gpio_126 et gpio_129)
	SET_REG32(CONTROL_PBIAS_LITE) &= ~PBIASLITEPWRDNZ1;
800026d8:	e59f3164 	ldr	r3, [pc, #356]	; 80002844 <mmc1_pad_conf+0x194>
800026dc:	e59f2160 	ldr	r2, [pc, #352]	; 80002844 <mmc1_pad_conf+0x194>
800026e0:	e5922000 	ldr	r2, [r2]
800026e4:	e3c22c02 	bic	r2, r2, #512	; 0x200
800026e8:	e5832000 	str	r2, [r3]
	SET_REG32(CONTROL_WKUP_CTRL) &= ~GPIO_IO_PWRDNZ;
800026ec:	e59f3154 	ldr	r3, [pc, #340]	; 80002848 <mmc1_pad_conf+0x198>
800026f0:	e59f2150 	ldr	r2, [pc, #336]	; 80002848 <mmc1_pad_conf+0x198>
800026f4:	e5922000 	ldr	r2, [r2]
800026f8:	e3c22040 	bic	r2, r2, #64	; 0x40
800026fc:	e5832000 	str	r2, [r3]

	// set PBIAS0 VMODE to 3.0 V
	SET_REG32(CONTROL_PBIAS_LITE) |= PBIASLITEVMODE0;
80002700:	e59f313c 	ldr	r3, [pc, #316]	; 80002844 <mmc1_pad_conf+0x194>
80002704:	e59f2138 	ldr	r2, [pc, #312]	; 80002844 <mmc1_pad_conf+0x194>
80002708:	e5922000 	ldr	r2, [r2]
8000270c:	e3822001 	orr	r2, r2, #1
80002710:	e5832000 	str	r2, [r3]
	// set PBIAS1 VMODE to 1.8 V
	SET_REG32(CONTROL_PBIAS_LITE) &= ~PBIASLITEVMODE1;
80002714:	e59f3128 	ldr	r3, [pc, #296]	; 80002844 <mmc1_pad_conf+0x194>
80002718:	e59f2124 	ldr	r2, [pc, #292]	; 80002844 <mmc1_pad_conf+0x194>
8000271c:	e5922000 	ldr	r2, [r2]
80002720:	e3c22c01 	bic	r2, r2, #256	; 0x100
80002724:	e5832000 	str	r2, [r3]

	// change SIM_VDDS to 1.8 V (write PMIC registers)

	// change SDMMC1_VDDS to 3.0 V (write PMIC registers)
	twl4030_power_mmc_init();
80002728:	eb00046f 	bl	800038ec <twl4030_power_mmc_init>
	// wait until SDMMC1_VDDS reach 3.0 V
	wait(5000);
8000272c:	e59f0118 	ldr	r0, [pc, #280]	; 8000284c <mmc1_pad_conf+0x19c>
80002730:	ebfffefb 	bl	80002324 <wait>
	// power up the pins
	SET_REG32(CONTROL_PBIAS_LITE) |= PBIASLITEPWRDNZ0;
80002734:	e59f3108 	ldr	r3, [pc, #264]	; 80002844 <mmc1_pad_conf+0x194>
80002738:	e59f2104 	ldr	r2, [pc, #260]	; 80002844 <mmc1_pad_conf+0x194>
8000273c:	e5922000 	ldr	r2, [r2]
80002740:	e3822002 	orr	r2, r2, #2
80002744:	e5832000 	str	r2, [r3]
	SET_REG32(CONTROL_PBIAS_LITE) |= PBIASLITEPWRDNZ1;
80002748:	e59f30f4 	ldr	r3, [pc, #244]	; 80002844 <mmc1_pad_conf+0x194>
8000274c:	e59f20f0 	ldr	r2, [pc, #240]	; 80002844 <mmc1_pad_conf+0x194>
80002750:	e5922000 	ldr	r2, [r2]
80002754:	e3822c02 	orr	r2, r2, #512	; 0x200
80002758:	e5832000 	str	r2, [r3]
	SET_REG32(CONTROL_WKUP_CTRL)  |= GPIO_IO_PWRDNZ;
8000275c:	e59f30e4 	ldr	r3, [pc, #228]	; 80002848 <mmc1_pad_conf+0x198>
80002760:	e59f20e0 	ldr	r2, [pc, #224]	; 80002848 <mmc1_pad_conf+0x198>
80002764:	e5922000 	ldr	r2, [r2]
80002768:	e3822040 	orr	r2, r2, #64	; 0x40
8000276c:	e5832000 	str	r2, [r3]
	wait(5000);
80002770:	e59f00d4 	ldr	r0, [pc, #212]	; 8000284c <mmc1_pad_conf+0x19c>
80002774:	ebfffeea 	bl	80002324 <wait>
	// verify the power on the pins
	if((SET_REG32(CONTROL_PBIAS_LITE) & PBIASLITESUPPLYHIGH0) == 0)
80002778:	e59f30c4 	ldr	r3, [pc, #196]	; 80002844 <mmc1_pad_conf+0x194>
8000277c:	e5933000 	ldr	r3, [r3]
80002780:	e2033080 	and	r3, r3, #128	; 0x80
80002784:	e3530000 	cmp	r3, #0
80002788:	1a000005 	bne	800027a4 <mmc1_pad_conf+0xf4>
	{
		// the power is still 1.8 V: power down pins
		SET_REG32(CONTROL_PBIAS_LITE) &= ~PBIASLITEPWRDNZ0;
8000278c:	e59f30b0 	ldr	r3, [pc, #176]	; 80002844 <mmc1_pad_conf+0x194>
80002790:	e59f20ac 	ldr	r2, [pc, #172]	; 80002844 <mmc1_pad_conf+0x194>
80002794:	e5922000 	ldr	r2, [r2]
80002798:	e3c22002 	bic	r2, r2, #2
8000279c:	e5832000 	str	r2, [r3]
		while(1);
800027a0:	eafffffe 	b	800027a0 <mmc1_pad_conf+0xf0>
	}

	if(SET_REG32(CONTROL_PBIAS_LITE) & PBIASLITESUPPLYHIGH1)
800027a4:	e59f3098 	ldr	r3, [pc, #152]	; 80002844 <mmc1_pad_conf+0x194>
800027a8:	e5933000 	ldr	r3, [r3]
800027ac:	e2033902 	and	r3, r3, #32768	; 0x8000
800027b0:	e3530000 	cmp	r3, #0
800027b4:	0a000009 	beq	800027e0 <mmc1_pad_conf+0x130>
	{
		// the power is still 3.0 V: power down pins
		SET_REG32(CONTROL_PBIAS_LITE) &= ~PBIASLITEPWRDNZ1;
800027b8:	e59f3084 	ldr	r3, [pc, #132]	; 80002844 <mmc1_pad_conf+0x194>
800027bc:	e59f2080 	ldr	r2, [pc, #128]	; 80002844 <mmc1_pad_conf+0x194>
800027c0:	e5922000 	ldr	r2, [r2]
800027c4:	e3c22c02 	bic	r2, r2, #512	; 0x200
800027c8:	e5832000 	str	r2, [r3]
		SET_REG32(CONTROL_WKUP_CTRL) &= ~GPIO_IO_PWRDNZ;
800027cc:	e59f3074 	ldr	r3, [pc, #116]	; 80002848 <mmc1_pad_conf+0x198>
800027d0:	e59f2070 	ldr	r2, [pc, #112]	; 80002848 <mmc1_pad_conf+0x198>
800027d4:	e5922000 	ldr	r2, [r2]
800027d8:	e3c22040 	bic	r2, r2, #64	; 0x40
800027dc:	e5832000 	str	r2, [r3]


	/* System Control Module: PAD Configuration */


		PadConfVal1=0;
800027e0:	e3a03000 	mov	r3, #0
800027e4:	e50b3008 	str	r3, [fp, #-8]

		PadConfVal1=	MXMode0	|PULLUDENABLE_OFF
800027e8:	e59f3060 	ldr	r3, [pc, #96]	; 80002850 <mmc1_pad_conf+0x1a0>
800027ec:	e50b3008 	str	r3, [fp, #-8]
							|WAKEUPENABLE_OFF;

		// MMC1_CLK:  enable the input buffer of the clock output
		// MMC1_CMD:  input / output (response received on these lines!)

		SET_REG32(CONTROL_PADCONF_MMC1_CLK)=PadConfVal1|(PadConfVal1<<16);
800027f0:	e59f305c 	ldr	r3, [pc, #92]	; 80002854 <mmc1_pad_conf+0x1a4>
800027f4:	e51b2008 	ldr	r2, [fp, #-8]
800027f8:	e1a01802 	lsl	r1, r2, #16
800027fc:	e51b2008 	ldr	r2, [fp, #-8]
80002800:	e1812002 	orr	r2, r1, r2
80002804:	e5832000 	str	r2, [r3]

		// MMC1_DAT0 and MMC1_DAT1:  input/output, pull-ups on the REPTAR board
		SET_REG32(CONTROL_PADCONF_MMC1_DAT0)=PadConfVal1|(PadConfVal1<<16);
80002808:	e59f3048 	ldr	r3, [pc, #72]	; 80002858 <mmc1_pad_conf+0x1a8>
8000280c:	e51b2008 	ldr	r2, [fp, #-8]
80002810:	e1a01802 	lsl	r1, r2, #16
80002814:	e51b2008 	ldr	r2, [fp, #-8]
80002818:	e1812002 	orr	r2, r1, r2
8000281c:	e5832000 	str	r2, [r3]

		// MMC1_DAT2 and MMC1_DAT3:  input/output, pull-ups on the REPTAR board
		SET_REG32(CONTROL_PADCONF_MMC1_DAT2)=PadConfVal1|(PadConfVal1<<16);
80002820:	e59f3034 	ldr	r3, [pc, #52]	; 8000285c <mmc1_pad_conf+0x1ac>
80002824:	e51b2008 	ldr	r2, [fp, #-8]
80002828:	e1a01802 	lsl	r1, r2, #16
8000282c:	e51b2008 	ldr	r2, [fp, #-8]
80002830:	e1812002 	orr	r2, r1, r2
80002834:	e5832000 	str	r2, [r3]

		// MMC1_WP: input, pull-up on the REPTAR board, GPIO_129
		// done in the GPIO_init() function

}
80002838:	e24bd004 	sub	sp, fp, #4
8000283c:	e8bd4800 	pop	{fp, lr}
80002840:	e12fff1e 	bx	lr
80002844:	48002520 	.word	0x48002520
80002848:	48002a5c 	.word	0x48002a5c
8000284c:	00001388 	.word	0x00001388
80002850:	00002110 	.word	0x00002110
80002854:	48002144 	.word	0x48002144
80002858:	48002148 	.word	0x48002148
8000285c:	4800214c 	.word	0x4800214c

80002860 <change_frequency>:

void change_frequency(ulong clkd)
{
80002860:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80002864:	e28db000 	add	fp, sp, #0
80002868:	e24dd014 	sub	sp, sp, #20
8000286c:	e50b0010 	str	r0, [fp, #-16]
	ulong sysctl;

	// clock disable output
	MMCHS1_REG(MMCHS_SYSCTL) &= ~MMCHS_SYSCTL_CEN;
80002870:	e59f307c 	ldr	r3, [pc, #124]	; 800028f4 <change_frequency+0x94>
80002874:	e59f2078 	ldr	r2, [pc, #120]	; 800028f4 <change_frequency+0x94>
80002878:	e5922000 	ldr	r2, [r2]
8000287c:	e3c22004 	bic	r2, r2, #4
80002880:	e5832000 	str	r2, [r3]

	// clkd configuration
	sysctl = MMCHS1_REG(MMCHS_SYSCTL);
80002884:	e59f3068 	ldr	r3, [pc, #104]	; 800028f4 <change_frequency+0x94>
80002888:	e5933000 	ldr	r3, [r3]
8000288c:	e50b3008 	str	r3, [fp, #-8]
	sysctl &= ~MMCHS_SYSCTL_CLKD;
80002890:	e51b3008 	ldr	r3, [fp, #-8]
80002894:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
80002898:	e3c330c0 	bic	r3, r3, #192	; 0xc0
8000289c:	e50b3008 	str	r3, [fp, #-8]
	sysctl |= clkd;
800028a0:	e51b2008 	ldr	r2, [fp, #-8]
800028a4:	e51b3010 	ldr	r3, [fp, #-16]
800028a8:	e1823003 	orr	r3, r2, r3
800028ac:	e50b3008 	str	r3, [fp, #-8]
	MMCHS1_REG(MMCHS_SYSCTL) = sysctl;
800028b0:	e59f303c 	ldr	r3, [pc, #60]	; 800028f4 <change_frequency+0x94>
800028b4:	e51b2008 	ldr	r2, [fp, #-8]
800028b8:	e5832000 	str	r2, [r3]

	// wait for the clock stability
	while ((MMCHS1_REG(MMCHS_SYSCTL) & MMCHS_SYSCTL_ICS_READY)==0);
800028bc:	e1a00000 	nop			; (mov r0, r0)
800028c0:	e59f302c 	ldr	r3, [pc, #44]	; 800028f4 <change_frequency+0x94>
800028c4:	e5933000 	ldr	r3, [r3]
800028c8:	e2033002 	and	r3, r3, #2
800028cc:	e3530000 	cmp	r3, #0
800028d0:	0afffffa 	beq	800028c0 <change_frequency+0x60>
	// clock enable output
	MMCHS1_REG(MMCHS_SYSCTL) |= MMCHS_SYSCTL_CEN_ENABLE;
800028d4:	e59f3018 	ldr	r3, [pc, #24]	; 800028f4 <change_frequency+0x94>
800028d8:	e59f2014 	ldr	r2, [pc, #20]	; 800028f4 <change_frequency+0x94>
800028dc:	e5922000 	ldr	r2, [r2]
800028e0:	e3822004 	orr	r2, r2, #4
800028e4:	e5832000 	str	r2, [r3]

}
800028e8:	e28bd000 	add	sp, fp, #0
800028ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
800028f0:	e12fff1e 	bx	lr
800028f4:	4809c12c 	.word	0x4809c12c

800028f8 <mmchs1_conf>:

void mmchs1_conf()
{
800028f8:	e92d4800 	push	{fp, lr}
800028fc:	e28db004 	add	fp, sp, #4
	// enable the interface clock for the mmchs1 controller
	CORE_CM_REG(CM_ICLKEN)|=BIT24;
80002900:	e59f3184 	ldr	r3, [pc, #388]	; 80002a8c <mmchs1_conf+0x194>
80002904:	e59f2180 	ldr	r2, [pc, #384]	; 80002a8c <mmchs1_conf+0x194>
80002908:	e5922000 	ldr	r2, [r2]
8000290c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
80002910:	e5832000 	str	r2, [r3]
	// enable the functional clock for the mmchs1 controller
	CORE_CM_REG(CM_FCLKEN)|=BIT24;
80002914:	e59f3174 	ldr	r3, [pc, #372]	; 80002a90 <mmchs1_conf+0x198>
80002918:	e59f2170 	ldr	r2, [pc, #368]	; 80002a90 <mmchs1_conf+0x198>
8000291c:	e5922000 	ldr	r2, [r2]
80002920:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
80002924:	e5832000 	str	r2, [r3]
	// software reset
	MMCHS1_REG(MMCHS_SYSCONFIG) |= MMCHS_SYSCONFIG_SOFTRESET_ONRESET;
80002928:	e59f3164 	ldr	r3, [pc, #356]	; 80002a94 <mmchs1_conf+0x19c>
8000292c:	e59f2160 	ldr	r2, [pc, #352]	; 80002a94 <mmchs1_conf+0x19c>
80002930:	e5922000 	ldr	r2, [r2]
80002934:	e3822002 	orr	r2, r2, #2
80002938:	e5832000 	str	r2, [r3]
	while ((MMCHS1_REG(MMCHS_SYSSTATUS)&MMCHS_SYSSTATUS_RESETDONE_DONE)==0);
8000293c:	e1a00000 	nop			; (mov r0, r0)
80002940:	e59f3150 	ldr	r3, [pc, #336]	; 80002a98 <mmchs1_conf+0x1a0>
80002944:	e5933000 	ldr	r3, [r3]
80002948:	e2033001 	and	r3, r3, #1
8000294c:	e3530000 	cmp	r3, #0
80002950:	0afffffa 	beq	80002940 <mmchs1_conf+0x48>
	// reset the mmc lines
	MMCHS1_REG(MMCHS_SYSCTL) |= MMCHS_SYSCTL_SRA_RSTFORALLDESIGN;
80002954:	e59f3140 	ldr	r3, [pc, #320]	; 80002a9c <mmchs1_conf+0x1a4>
80002958:	e59f213c 	ldr	r2, [pc, #316]	; 80002a9c <mmchs1_conf+0x1a4>
8000295c:	e5922000 	ldr	r2, [r2]
80002960:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
80002964:	e5832000 	str	r2, [r3]
	while ((MMCHS1_REG(MMCHS_SYSCTL) & MMCHS_SYSCTL_SRA) == MMCHS_SYSCTL_SRA_RSTFORALLDESIGN);
80002968:	e1a00000 	nop			; (mov r0, r0)
8000296c:	e59f3128 	ldr	r3, [pc, #296]	; 80002a9c <mmchs1_conf+0x1a4>
80002970:	e5933000 	ldr	r3, [r3]
80002974:	e2033401 	and	r3, r3, #16777216	; 0x1000000
80002978:	e3530000 	cmp	r3, #0
8000297c:	1afffffa 	bne	8000296c <mmchs1_conf+0x74>

	// voltage capabilities initialization: only 3.0V, see REPTAR schematics
	MMCHS1_REG(MMCHS_CAPA)|= (MMCHS_CAPA_VS33_3V3_SUP);
80002980:	e59f3118 	ldr	r3, [pc, #280]	; 80002aa0 <mmchs1_conf+0x1a8>
80002984:	e59f2114 	ldr	r2, [pc, #276]	; 80002aa0 <mmchs1_conf+0x1a8>
80002988:	e5922000 	ldr	r2, [r2]
8000298c:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
80002990:	e5832000 	str	r2, [r3]
	// SD bus voltage select
	MMCHS1_REG(MMCHS_HCTL) &= ~MMCHS_HCTL_SDVS;
80002994:	e59f3108 	ldr	r3, [pc, #264]	; 80002aa4 <mmchs1_conf+0x1ac>
80002998:	e59f2104 	ldr	r2, [pc, #260]	; 80002aa4 <mmchs1_conf+0x1ac>
8000299c:	e5922000 	ldr	r2, [r2]
800029a0:	e3c22c0e 	bic	r2, r2, #3584	; 0xe00
800029a4:	e5832000 	str	r2, [r3]
	MMCHS1_REG(MMCHS_HCTL)|= MMCHS_HCTL_SDVS_3V3;
800029a8:	e59f30f4 	ldr	r3, [pc, #244]	; 80002aa4 <mmchs1_conf+0x1ac>
800029ac:	e59f20f0 	ldr	r2, [pc, #240]	; 80002aa4 <mmchs1_conf+0x1ac>
800029b0:	e5922000 	ldr	r2, [r2]
800029b4:	e3822c0e 	orr	r2, r2, #3584	; 0xe00
800029b8:	e5832000 	str	r2, [r3]
	// power on the SD bus
	MMCHS1_REG(MMCHS_HCTL)|= MMCHS_HCTL_SDBP_PWRON;
800029bc:	e59f30e0 	ldr	r3, [pc, #224]	; 80002aa4 <mmchs1_conf+0x1ac>
800029c0:	e59f20dc 	ldr	r2, [pc, #220]	; 80002aa4 <mmchs1_conf+0x1ac>
800029c4:	e5922000 	ldr	r2, [r2]
800029c8:	e3822c01 	orr	r2, r2, #256	; 0x100
800029cc:	e5832000 	str	r2, [r3]
	// enable internal clock
	MMCHS1_REG(MMCHS_SYSCTL) |= MMCHS_SYSCTL_ICE_OSCILLATE;
800029d0:	e59f30c4 	ldr	r3, [pc, #196]	; 80002a9c <mmchs1_conf+0x1a4>
800029d4:	e59f20c0 	ldr	r2, [pc, #192]	; 80002a9c <mmchs1_conf+0x1a4>
800029d8:	e5922000 	ldr	r2, [r2]
800029dc:	e3822001 	orr	r2, r2, #1
800029e0:	e5832000 	str	r2, [r3]

//	// configure clock frequency: 80kHz is impossible, set 94kHz
//	change_frequency((ulong) MMCHS_SYSCTL_CLKD_DIV1023);

	// configure clock frequency: 200kHz (initialization mode) 100<f<400
	change_frequency((ulong) MMCHS_SYSCTL_CLKD_DIV480);
800029e4:	e3a00c1e 	mov	r0, #7680	; 0x1e00
800029e8:	ebffff9c 	bl	80002860 <change_frequency>


	// behavior of module in idle mode
	MMCHS1_REG(MMCHS_SYSCONFIG)|= MMCHS_SYSCONFIG_CLOCKACTIVITY_BOTH;
800029ec:	e59f30a0 	ldr	r3, [pc, #160]	; 80002a94 <mmchs1_conf+0x19c>
800029f0:	e59f209c 	ldr	r2, [pc, #156]	; 80002a94 <mmchs1_conf+0x19c>
800029f4:	e5922000 	ldr	r2, [r2]
800029f8:	e3822c03 	orr	r2, r2, #768	; 0x300
800029fc:	e5832000 	str	r2, [r3]
	MMCHS1_REG(MMCHS_SYSCONFIG)&=~MMCHS_SYSCONFIG_SIDLEMODE;
80002a00:	e59f308c 	ldr	r3, [pc, #140]	; 80002a94 <mmchs1_conf+0x19c>
80002a04:	e59f2088 	ldr	r2, [pc, #136]	; 80002a94 <mmchs1_conf+0x19c>
80002a08:	e5922000 	ldr	r2, [r2]
80002a0c:	e3c22018 	bic	r2, r2, #24
80002a10:	e5832000 	str	r2, [r3]
	MMCHS1_REG(MMCHS_SYSCONFIG)|= MMCHS_SYSCONFIG_SIDLEMODE_NOIDLE;
80002a14:	e59f3078 	ldr	r3, [pc, #120]	; 80002a94 <mmchs1_conf+0x19c>
80002a18:	e59f2074 	ldr	r2, [pc, #116]	; 80002a94 <mmchs1_conf+0x19c>
80002a1c:	e5922000 	ldr	r2, [r2]
80002a20:	e3822008 	orr	r2, r2, #8
80002a24:	e5832000 	str	r2, [r3]
	MMCHS1_REG(MMCHS_SYSCONFIG)&= ~MMCHS_SYSCONFIG_ENAWAKEUP_ENABLED;
80002a28:	e59f3064 	ldr	r3, [pc, #100]	; 80002a94 <mmchs1_conf+0x19c>
80002a2c:	e59f2060 	ldr	r2, [pc, #96]	; 80002a94 <mmchs1_conf+0x19c>
80002a30:	e5922000 	ldr	r2, [r2]
80002a34:	e3c22004 	bic	r2, r2, #4
80002a38:	e5832000 	str	r2, [r3]
	MMCHS1_REG(MMCHS_SYSCONFIG)&= ~MMCHS_SYSCONFIG_AUTOIDLE_ON;
80002a3c:	e59f3050 	ldr	r3, [pc, #80]	; 80002a94 <mmchs1_conf+0x19c>
80002a40:	e59f204c 	ldr	r2, [pc, #76]	; 80002a94 <mmchs1_conf+0x19c>
80002a44:	e5922000 	ldr	r2, [r2]
80002a48:	e3c22001 	bic	r2, r2, #1
80002a4c:	e5832000 	str	r2, [r3]

	// enable to set flag concerning command events in the STAT register
	MMCHS1_REG(MMCHS_IE) |= (MMCHS_IE_CTO_ENABLE|MMCHS_IE_CC_ENABLE|MMCHS_IE_CCRC_ENABLE
80002a50:	e59f2050 	ldr	r2, [pc, #80]	; 80002aa8 <mmchs1_conf+0x1b0>
80002a54:	e59f304c 	ldr	r3, [pc, #76]	; 80002aa8 <mmchs1_conf+0x1b0>
80002a58:	e5933000 	ldr	r3, [r3]
80002a5c:	e383380f 	orr	r3, r3, #983040	; 0xf0000
80002a60:	e3833001 	orr	r3, r3, #1
80002a64:	e5823000 	str	r3, [r2]
							|MMCHS_IE_CIE_ENABLE|MMCHS_IE_CEB_ENABLE);

	// enable to set flag concerning data events in the STAT register
	MMCHS1_REG(MMCHS_IE) |= (MMCHS_IE_DTO_ENABLE|MMCHS_IE_BRR_ENABLE|MMCHS_IE_TC_ENABLE
80002a68:	e59f2038 	ldr	r2, [pc, #56]	; 80002aa8 <mmchs1_conf+0x1b0>
80002a6c:	e59f3034 	ldr	r3, [pc, #52]	; 80002aa8 <mmchs1_conf+0x1b0>
80002a70:	e5931000 	ldr	r1, [r3]
80002a74:	e59f3030 	ldr	r3, [pc, #48]	; 80002aac <mmchs1_conf+0x1b4>
80002a78:	e1813003 	orr	r3, r1, r3
80002a7c:	e5823000 	str	r3, [r2]
								|MMCHS_IE_DEB_ENABLE|MMCHS_IE_BADA_ENABLE
								|MMCHS_IE_CERR_ENABLE|MMCHS_IE_DCRC_ENABLE);


}
80002a80:	e24bd004 	sub	sp, fp, #4
80002a84:	e8bd4800 	pop	{fp, lr}
80002a88:	e12fff1e 	bx	lr
80002a8c:	48004a10 	.word	0x48004a10
80002a90:	48004a00 	.word	0x48004a00
80002a94:	4809c010 	.word	0x4809c010
80002a98:	4809c014 	.word	0x4809c014
80002a9c:	4809c12c 	.word	0x4809c12c
80002aa0:	4809c140 	.word	0x4809c140
80002aa4:	4809c128 	.word	0x4809c128
80002aa8:	4809c134 	.word	0x4809c134
80002aac:	30700022 	.word	0x30700022

80002ab0 <sdhc_init>:
 * \returns  0 - Initialization is successful.
 *           1 - Initialization is failed.
 **/

int sdhc_init()
{
80002ab0:	e92d4800 	push	{fp, lr}
80002ab4:	e28db004 	add	fp, sp, #4
80002ab8:	e24dd008 	sub	sp, sp, #8
	ulong arg;
	int i;

	// send an initialization stream
	MMCHS1_REG(MMCHS_CON) |= MMCHS_CON_INIT_INITSTREAM;
80002abc:	e59f33f4 	ldr	r3, [pc, #1012]	; 80002eb8 <sdhc_init+0x408>
80002ac0:	e59f23f0 	ldr	r2, [pc, #1008]	; 80002eb8 <sdhc_init+0x408>
80002ac4:	e5922000 	ldr	r2, [r2]
80002ac8:	e3822002 	orr	r2, r2, #2
80002acc:	e5832000 	str	r2, [r3]
	MMCHS1_REG(MMCHS_CMD)= 0x00000000;
80002ad0:	e59f33e4 	ldr	r3, [pc, #996]	; 80002ebc <sdhc_init+0x40c>
80002ad4:	e3a02000 	mov	r2, #0
80002ad8:	e5832000 	str	r2, [r3]
	// wait for the end of the initialization (about 1ms)
	wait(1000);
80002adc:	e3a00ffa 	mov	r0, #1000	; 0x3e8
80002ae0:	ebfffe0f 	bl	80002324 <wait>
	while ((MMCHS1_REG(MMCHS_STAT) & MMCHS_STAT_CC)==0);
80002ae4:	e1a00000 	nop			; (mov r0, r0)
80002ae8:	e59f33d0 	ldr	r3, [pc, #976]	; 80002ec0 <sdhc_init+0x410>
80002aec:	e5933000 	ldr	r3, [r3]
80002af0:	e2033001 	and	r3, r3, #1
80002af4:	e3530000 	cmp	r3, #0
80002af8:	0afffffa 	beq	80002ae8 <sdhc_init+0x38>
	// clear the CC flag
	MMCHS1_REG(MMCHS_STAT) = MMCHS_STAT_CC;
80002afc:	e59f33bc 	ldr	r3, [pc, #956]	; 80002ec0 <sdhc_init+0x410>
80002b00:	e3a02001 	mov	r2, #1
80002b04:	e5832000 	str	r2, [r3]
	// end the initialization sequence
	MMCHS1_REG(MMCHS_CON) &= ~MMCHS_CON_INIT;
80002b08:	e59f33a8 	ldr	r3, [pc, #936]	; 80002eb8 <sdhc_init+0x408>
80002b0c:	e59f23a4 	ldr	r2, [pc, #932]	; 80002eb8 <sdhc_init+0x408>
80002b10:	e5922000 	ldr	r2, [r2]
80002b14:	e3c22002 	bic	r2, r2, #2
80002b18:	e5832000 	str	r2, [r3]
	// clear STATUS register
	MMCHS1_REG(MMCHS_STAT)=0xFFFFFFFF;
80002b1c:	e59f339c 	ldr	r3, [pc, #924]	; 80002ec0 <sdhc_init+0x410>
80002b20:	e3e02000 	mvn	r2, #0
80002b24:	e5832000 	str	r2, [r3]

//	// configure clock frequency: 200kHz (initialization mode) 100<f<400
//	change_frequency((ulong) MMCHS_SYSCTL_CLKD_DIV480);

	// send CMD0: go to idle state
	mmchs_send_command((ulong) 0,(ulong) 0, 0, 0);
80002b28:	e3a00000 	mov	r0, #0
80002b2c:	e3a01000 	mov	r1, #0
80002b30:	e3a02000 	mov	r2, #0
80002b34:	e3a03000 	mov	r3, #0
80002b38:	ebfffe16 	bl	80002398 <mmchs_send_command>

	// send CMD8: send interface condition, voltage host supplied 2.7-3.6V
	arg=(ulong)(SD_VOLT_2P7_3P6|SD_CHECK_PATTERN);
80002b3c:	e59f3380 	ldr	r3, [pc, #896]	; 80002ec4 <sdhc_init+0x414>
80002b40:	e50b3008 	str	r3, [fp, #-8]
	mmchs_send_command((ulong) 8, arg, 0, 0);
80002b44:	e3a00008 	mov	r0, #8
80002b48:	e51b1008 	ldr	r1, [fp, #-8]
80002b4c:	e3a02000 	mov	r2, #0
80002b50:	e3a03000 	mov	r3, #0
80002b54:	ebfffe0f 	bl	80002398 <mmchs_send_command>
	// verify response (type R7), check pattern and voltage
	if (MMCHS1_REG(MMCHS_RSP10)!= arg) return 1;
80002b58:	e59f3368 	ldr	r3, [pc, #872]	; 80002ec8 <sdhc_init+0x418>
80002b5c:	e5932000 	ldr	r2, [r3]
80002b60:	e51b3008 	ldr	r3, [fp, #-8]
80002b64:	e1520003 	cmp	r2, r3
80002b68:	0a000001 	beq	80002b74 <sdhc_init+0xc4>
80002b6c:	e3a03001 	mov	r3, #1
80002b70:	ea0000cc 	b	80002ea8 <sdhc_init+0x3f8>

	// Send CMD55 before ACMD41
	arg=0;
80002b74:	e3a03000 	mov	r3, #0
80002b78:	e50b3008 	str	r3, [fp, #-8]
	mmchs_send_command((ulong) 55, arg, 0, 0);
80002b7c:	e3a00037 	mov	r0, #55	; 0x37
80002b80:	e51b1008 	ldr	r1, [fp, #-8]
80002b84:	e3a02000 	mov	r2, #0
80002b88:	e3a03000 	mov	r3, #0
80002b8c:	ebfffe01 	bl	80002398 <mmchs_send_command>

	// send ACMD41: initialization command
	arg=(ulong)(SD_OCR_HIGH_CAPACITY|SD_OCR_VDD_WILDCARD);
80002b90:	e59f3334 	ldr	r3, [pc, #820]	; 80002ecc <sdhc_init+0x41c>
80002b94:	e50b3008 	str	r3, [fp, #-8]
	mmchs_send_command((ulong) 41, arg, 1, 0);
80002b98:	e3a00029 	mov	r0, #41	; 0x29
80002b9c:	e51b1008 	ldr	r1, [fp, #-8]
80002ba0:	e3a02001 	mov	r2, #1
80002ba4:	e3a03000 	mov	r3, #0
80002ba8:	ebfffdfa 	bl	80002398 <mmchs_send_command>
	// wait until initialization is completed (poll bit 31 of the response, type R3)
	while ((MMCHS1_REG(MMCHS_RSP10) & SD_OCR_CCS_BUSY)==0)
80002bac:	ea00000f 	b	80002bf0 <sdhc_init+0x140>
	{
	// card returns busy: re-send ACMD41
		wait(1000);
80002bb0:	e3a00ffa 	mov	r0, #1000	; 0x3e8
80002bb4:	ebfffdda 	bl	80002324 <wait>
		// Send CMD55 before ACMD41
		arg=0;
80002bb8:	e3a03000 	mov	r3, #0
80002bbc:	e50b3008 	str	r3, [fp, #-8]
		mmchs_send_command((ulong) 55, arg, 0, 0);
80002bc0:	e3a00037 	mov	r0, #55	; 0x37
80002bc4:	e51b1008 	ldr	r1, [fp, #-8]
80002bc8:	e3a02000 	mov	r2, #0
80002bcc:	e3a03000 	mov	r3, #0
80002bd0:	ebfffdf0 	bl	80002398 <mmchs_send_command>

		// send ACMD41
		arg=(ulong)(SD_OCR_HIGH_CAPACITY|SD_OCR_VDD_WILDCARD);
80002bd4:	e59f32f0 	ldr	r3, [pc, #752]	; 80002ecc <sdhc_init+0x41c>
80002bd8:	e50b3008 	str	r3, [fp, #-8]
		mmchs_send_command((ulong) 41, arg, 1, 0);
80002bdc:	e3a00029 	mov	r0, #41	; 0x29
80002be0:	e51b1008 	ldr	r1, [fp, #-8]
80002be4:	e3a02001 	mov	r2, #1
80002be8:	e3a03000 	mov	r3, #0
80002bec:	ebfffde9 	bl	80002398 <mmchs_send_command>

	// send ACMD41: initialization command
	arg=(ulong)(SD_OCR_HIGH_CAPACITY|SD_OCR_VDD_WILDCARD);
	mmchs_send_command((ulong) 41, arg, 1, 0);
	// wait until initialization is completed (poll bit 31 of the response, type R3)
	while ((MMCHS1_REG(MMCHS_RSP10) & SD_OCR_CCS_BUSY)==0)
80002bf0:	e59f32d0 	ldr	r3, [pc, #720]	; 80002ec8 <sdhc_init+0x418>
80002bf4:	e5933000 	ldr	r3, [r3]
80002bf8:	e3530000 	cmp	r3, #0
80002bfc:	aaffffeb 	bge	80002bb0 <sdhc_init+0x100>
		arg=(ulong)(SD_OCR_HIGH_CAPACITY|SD_OCR_VDD_WILDCARD);
		mmchs_send_command((ulong) 41, arg, 1, 0);
	}

	// verify card capacity (only High Capacity is supported)
	if ((MMCHS1_REG(MMCHS_RSP10) & SD_OCR_HIGH_CAPACITY) == 0) return 1;
80002c00:	e59f32c0 	ldr	r3, [pc, #704]	; 80002ec8 <sdhc_init+0x418>
80002c04:	e5933000 	ldr	r3, [r3]
80002c08:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
80002c0c:	e3530000 	cmp	r3, #0
80002c10:	1a000001 	bne	80002c1c <sdhc_init+0x16c>
80002c14:	e3a03001 	mov	r3, #1
80002c18:	ea0000a2 	b	80002ea8 <sdhc_init+0x3f8>

	// Send CMD2, to enter in ident state
	mmchs_send_command((ulong) 2, arg, 0, 0);
80002c1c:	e3a00002 	mov	r0, #2
80002c20:	e51b1008 	ldr	r1, [fp, #-8]
80002c24:	e3a02000 	mov	r2, #0
80002c28:	e3a03000 	mov	r3, #0
80002c2c:	ebfffdd9 	bl	80002398 <mmchs_send_command>

	// Send CMD3, to get the card relative address (enter data transfer mode)
	mmchs_send_command((ulong) 3, arg, 0, 0);
80002c30:	e3a00003 	mov	r0, #3
80002c34:	e51b1008 	ldr	r1, [fp, #-8]
80002c38:	e3a02000 	mov	r2, #0
80002c3c:	e3a03000 	mov	r3, #0
80002c40:	ebfffdd4 	bl	80002398 <mmchs_send_command>
	// Get the card address from the response (type R6)
	rca = SD_RCA_ADDR(MMCHS1_REG(MMCHS_RSP10));
80002c44:	e59f327c 	ldr	r3, [pc, #636]	; 80002ec8 <sdhc_init+0x418>
80002c48:	e5933000 	ldr	r3, [r3]
80002c4c:	e1a02823 	lsr	r2, r3, #16
80002c50:	e59f3278 	ldr	r3, [pc, #632]	; 80002ed0 <sdhc_init+0x420>
80002c54:	e5832000 	str	r2, [r3]
	// If RCA is 0, assign a new RCA (0 is reserved for de-selection, see CMD7 description)
	if (rca==0)
80002c58:	e59f3270 	ldr	r3, [pc, #624]	; 80002ed0 <sdhc_init+0x420>
80002c5c:	e5933000 	ldr	r3, [r3]
80002c60:	e3530000 	cmp	r3, #0
80002c64:	1a000006 	bne	80002c84 <sdhc_init+0x1d4>
	{
		// Send CMD3, to set new card relative address=0x01
		arg=(ulong)(0x01)<<16;
80002c68:	e3a03801 	mov	r3, #65536	; 0x10000
80002c6c:	e50b3008 	str	r3, [fp, #-8]
		mmchs_send_command((ulong) 3, arg, 0, 0);
80002c70:	e3a00003 	mov	r0, #3
80002c74:	e51b1008 	ldr	r1, [fp, #-8]
80002c78:	e3a02000 	mov	r2, #0
80002c7c:	e3a03000 	mov	r3, #0
80002c80:	ebfffdc4 	bl	80002398 <mmchs_send_command>
	}
	arg=rca<<16;
80002c84:	e59f3244 	ldr	r3, [pc, #580]	; 80002ed0 <sdhc_init+0x420>
80002c88:	e5933000 	ldr	r3, [r3]
80002c8c:	e1a03803 	lsl	r3, r3, #16
80002c90:	e50b3008 	str	r3, [fp, #-8]
    
	/////////////////////////////////////////////////

	/* switch frequency clock to 24 MHz (fpp max = 25 MHz) */

	change_frequency((ulong) MMCHS_SYSCTL_CLKD_DIV4);
80002c94:	e3a00c01 	mov	r0, #256	; 0x100
80002c98:	ebfffef0 	bl	80002860 <change_frequency>

	// Send CMD7: Select the card and go to transfer state
	mmchs_send_command((ulong) 7, arg, 0, 0);
80002c9c:	e3a00007 	mov	r0, #7
80002ca0:	e51b1008 	ldr	r1, [fp, #-8]
80002ca4:	e3a02000 	mov	r2, #0
80002ca8:	e3a03000 	mov	r3, #0
80002cac:	ebfffdb9 	bl	80002398 <mmchs_send_command>

	// clear STATUS register
	MMCHS1_REG(MMCHS_STAT)=0xFFFFFFFF;
80002cb0:	e59f3208 	ldr	r3, [pc, #520]	; 80002ec0 <sdhc_init+0x410>
80002cb4:	e3e02000 	mvn	r2, #0
80002cb8:	e5832000 	str	r2, [r3]


	/* Send ACMD51 to get the SCR register */

	// Send CMD55 before ACMD51
	arg=rca<<16;
80002cbc:	e59f320c 	ldr	r3, [pc, #524]	; 80002ed0 <sdhc_init+0x420>
80002cc0:	e5933000 	ldr	r3, [r3]
80002cc4:	e1a03803 	lsl	r3, r3, #16
80002cc8:	e50b3008 	str	r3, [fp, #-8]
	mmchs_send_command((ulong) 55, arg, 0, 0);
80002ccc:	e3a00037 	mov	r0, #55	; 0x37
80002cd0:	e51b1008 	ldr	r1, [fp, #-8]
80002cd4:	e3a02000 	mov	r2, #0
80002cd8:	e3a03000 	mov	r3, #0
80002cdc:	ebfffdad 	bl	80002398 <mmchs_send_command>
	// send ACMD51
	mmchs_send_command((ulong) 51, arg, 1, 0);
80002ce0:	e3a00033 	mov	r0, #51	; 0x33
80002ce4:	e51b1008 	ldr	r1, [fp, #-8]
80002ce8:	e3a02001 	mov	r2, #1
80002cec:	e3a03000 	mov	r3, #0
80002cf0:	ebfffda8 	bl	80002398 <mmchs_send_command>

	// wait for buffer read ready
		while ((MMCHS1_REG(MMCHS_STAT) & MMCHS_STAT_BRR) == MMCHS_STAT_BRR_NOTREADY)
80002cf4:	ea000001 	b	80002d00 <sdhc_init+0x250>
			wait(1000);
80002cf8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
80002cfc:	ebfffd88 	bl	80002324 <wait>
	mmchs_send_command((ulong) 55, arg, 0, 0);
	// send ACMD51
	mmchs_send_command((ulong) 51, arg, 1, 0);

	// wait for buffer read ready
		while ((MMCHS1_REG(MMCHS_STAT) & MMCHS_STAT_BRR) == MMCHS_STAT_BRR_NOTREADY)
80002d00:	e59f31b8 	ldr	r3, [pc, #440]	; 80002ec0 <sdhc_init+0x410>
80002d04:	e5933000 	ldr	r3, [r3]
80002d08:	e2033020 	and	r3, r3, #32
80002d0c:	e3530000 	cmp	r3, #0
80002d10:	0afffff8 	beq	80002cf8 <sdhc_init+0x248>
			wait(1000);
	// clear flag
		MMCHS1_REG(MMCHS_STAT) = MMCHS_STAT_BRR;
80002d14:	e59f31a4 	ldr	r3, [pc, #420]	; 80002ec0 <sdhc_init+0x410>
80002d18:	e3a02020 	mov	r2, #32
80002d1c:	e5832000 	str	r2, [r3]
	// read first 4 bytes from the buffer
		scr_reg[1] = MMCHS1_REG(MMCHS_DATA);
80002d20:	e59f31ac 	ldr	r3, [pc, #428]	; 80002ed4 <sdhc_init+0x424>
80002d24:	e5932000 	ldr	r2, [r3]
80002d28:	e59f31a8 	ldr	r3, [pc, #424]	; 80002ed8 <sdhc_init+0x428>
80002d2c:	e5832004 	str	r2, [r3, #4]
		scr_reg[0] = MMCHS1_REG(MMCHS_DATA);
80002d30:	e59f319c 	ldr	r3, [pc, #412]	; 80002ed4 <sdhc_init+0x424>
80002d34:	e5932000 	ldr	r2, [r3]
80002d38:	e59f3198 	ldr	r3, [pc, #408]	; 80002ed8 <sdhc_init+0x428>
80002d3c:	e5832000 	str	r2, [r3]
	// read the rest of the buffer
	for (i=0;i<126;i++)
80002d40:	e3a03000 	mov	r3, #0
80002d44:	e50b300c 	str	r3, [fp, #-12]
80002d48:	ea000007 	b	80002d6c <sdhc_init+0x2bc>
	{
		buffer_data[i]=MMCHS1_REG(MMCHS_DATA);
80002d4c:	e59f3180 	ldr	r3, [pc, #384]	; 80002ed4 <sdhc_init+0x424>
80002d50:	e5931000 	ldr	r1, [r3]
80002d54:	e59f3180 	ldr	r3, [pc, #384]	; 80002edc <sdhc_init+0x42c>
80002d58:	e51b200c 	ldr	r2, [fp, #-12]
80002d5c:	e7831102 	str	r1, [r3, r2, lsl #2]
		MMCHS1_REG(MMCHS_STAT) = MMCHS_STAT_BRR;
	// read first 4 bytes from the buffer
		scr_reg[1] = MMCHS1_REG(MMCHS_DATA);
		scr_reg[0] = MMCHS1_REG(MMCHS_DATA);
	// read the rest of the buffer
	for (i=0;i<126;i++)
80002d60:	e51b300c 	ldr	r3, [fp, #-12]
80002d64:	e2833001 	add	r3, r3, #1
80002d68:	e50b300c 	str	r3, [fp, #-12]
80002d6c:	e51b300c 	ldr	r3, [fp, #-12]
80002d70:	e353007d 	cmp	r3, #125	; 0x7d
80002d74:	dafffff4 	ble	80002d4c <sdhc_init+0x29c>
	{
		buffer_data[i]=MMCHS1_REG(MMCHS_DATA);
	}
	// wait for transfer complete
	while ((MMCHS1_REG(MMCHS_STAT) & MMCHS_STAT_TC) == 0)
80002d78:	ea000001 	b	80002d84 <sdhc_init+0x2d4>
			wait(1000);
80002d7c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
80002d80:	ebfffd67 	bl	80002324 <wait>
	for (i=0;i<126;i++)
	{
		buffer_data[i]=MMCHS1_REG(MMCHS_DATA);
	}
	// wait for transfer complete
	while ((MMCHS1_REG(MMCHS_STAT) & MMCHS_STAT_TC) == 0)
80002d84:	e59f3134 	ldr	r3, [pc, #308]	; 80002ec0 <sdhc_init+0x410>
80002d88:	e5933000 	ldr	r3, [r3]
80002d8c:	e2033002 	and	r3, r3, #2
80002d90:	e3530000 	cmp	r3, #0
80002d94:	0afffff8 	beq	80002d7c <sdhc_init+0x2cc>
			wait(1000);

	// clear status
	MMCHS1_REG(MMCHS_STAT) = 0XFFFFFFFF;
80002d98:	e59f3120 	ldr	r3, [pc, #288]	; 80002ec0 <sdhc_init+0x410>
80002d9c:	e3e02000 	mvn	r2, #0
80002da0:	e5832000 	str	r2, [r3]


	// Send CMD55 before ACMD6
	arg=rca<<16;
80002da4:	e59f3124 	ldr	r3, [pc, #292]	; 80002ed0 <sdhc_init+0x420>
80002da8:	e5933000 	ldr	r3, [r3]
80002dac:	e1a03803 	lsl	r3, r3, #16
80002db0:	e50b3008 	str	r3, [fp, #-8]
	mmchs_send_command((ulong) 55, arg, 0, 0);
80002db4:	e3a00037 	mov	r0, #55	; 0x37
80002db8:	e51b1008 	ldr	r1, [fp, #-8]
80002dbc:	e3a02000 	mov	r2, #0
80002dc0:	e3a03000 	mov	r3, #0
80002dc4:	ebfffd73 	bl	80002398 <mmchs_send_command>

	// Send ACMD6 command to set the data bus width to 4 bits
	arg=(ulong)SD_BUS_WIDTH_4BIT;
80002dc8:	e3a03002 	mov	r3, #2
80002dcc:	e50b3008 	str	r3, [fp, #-8]
	mmchs_send_command((ulong) 6, arg, 1, 0);
80002dd0:	e3a00006 	mov	r0, #6
80002dd4:	e51b1008 	ldr	r1, [fp, #-8]
80002dd8:	e3a02001 	mov	r2, #1
80002ddc:	e3a03000 	mov	r3, #0
80002de0:	ebfffd6c 	bl	80002398 <mmchs_send_command>
	// set data transfer width in the controller
	MMCHS1_REG(MMCHS_HCTL) |= MMCHS_HCTL_DTW_4_BITMODE;
80002de4:	e59f30f4 	ldr	r3, [pc, #244]	; 80002ee0 <sdhc_init+0x430>
80002de8:	e59f20f0 	ldr	r2, [pc, #240]	; 80002ee0 <sdhc_init+0x430>
80002dec:	e5922000 	ldr	r2, [r2]
80002df0:	e3822002 	orr	r2, r2, #2
80002df4:	e5832000 	str	r2, [r3]

	// send CMD6 to switch to high speed mode
	//arg = (ulong)((SD_SWITCH_MODE & SD_CMD6_GRP1_SEL) | (SD_CMD6_GRP1_HS));
	arg = (ulong)0xfffff1;
80002df8:	e59f30e4 	ldr	r3, [pc, #228]	; 80002ee4 <sdhc_init+0x434>
80002dfc:	e50b3008 	str	r3, [fp, #-8]
	mmchs_send_command((ulong) 6, arg, 0, 0);
80002e00:	e3a00006 	mov	r0, #6
80002e04:	e51b1008 	ldr	r1, [fp, #-8]
80002e08:	e3a02000 	mov	r2, #0
80002e0c:	e3a03000 	mov	r3, #0
80002e10:	ebfffd60 	bl	80002398 <mmchs_send_command>
	wait(1000000);
80002e14:	e59f00cc 	ldr	r0, [pc, #204]	; 80002ee8 <sdhc_init+0x438>
80002e18:	ebfffd41 	bl	80002324 <wait>

	// wait for buffer read ready
	while ((MMCHS1_REG(MMCHS_STAT) & MMCHS_STAT_BRR) == MMCHS_STAT_BRR_NOTREADY);
80002e1c:	e1a00000 	nop			; (mov r0, r0)
80002e20:	e59f3098 	ldr	r3, [pc, #152]	; 80002ec0 <sdhc_init+0x410>
80002e24:	e5933000 	ldr	r3, [r3]
80002e28:	e2033020 	and	r3, r3, #32
80002e2c:	e3530000 	cmp	r3, #0
80002e30:	0afffffa 	beq	80002e20 <sdhc_init+0x370>
	// clear flag
	MMCHS1_REG(MMCHS_STAT) = MMCHS_STAT_BRR;
80002e34:	e59f3084 	ldr	r3, [pc, #132]	; 80002ec0 <sdhc_init+0x410>
80002e38:	e3a02020 	mov	r2, #32
80002e3c:	e5832000 	str	r2, [r3]
	for (i=0;i<128;i++)
80002e40:	e3a03000 	mov	r3, #0
80002e44:	e50b300c 	str	r3, [fp, #-12]
80002e48:	ea000007 	b	80002e6c <sdhc_init+0x3bc>
	{
	// read next 4 bytes from the buffer
		buffer_data[i] = MMCHS1_REG(MMCHS_DATA);
80002e4c:	e59f3080 	ldr	r3, [pc, #128]	; 80002ed4 <sdhc_init+0x424>
80002e50:	e5931000 	ldr	r1, [r3]
80002e54:	e59f3080 	ldr	r3, [pc, #128]	; 80002edc <sdhc_init+0x42c>
80002e58:	e51b200c 	ldr	r2, [fp, #-12]
80002e5c:	e7831102 	str	r1, [r3, r2, lsl #2]

	// wait for buffer read ready
	while ((MMCHS1_REG(MMCHS_STAT) & MMCHS_STAT_BRR) == MMCHS_STAT_BRR_NOTREADY);
	// clear flag
	MMCHS1_REG(MMCHS_STAT) = MMCHS_STAT_BRR;
	for (i=0;i<128;i++)
80002e60:	e51b300c 	ldr	r3, [fp, #-12]
80002e64:	e2833001 	add	r3, r3, #1
80002e68:	e50b300c 	str	r3, [fp, #-12]
80002e6c:	e51b300c 	ldr	r3, [fp, #-12]
80002e70:	e353007f 	cmp	r3, #127	; 0x7f
80002e74:	dafffff4 	ble	80002e4c <sdhc_init+0x39c>
	{
	// read next 4 bytes from the buffer
		buffer_data[i] = MMCHS1_REG(MMCHS_DATA);
	}
	// wait for transfer complete
	while ((MMCHS1_REG(MMCHS_STAT) & MMCHS_STAT_TC) == 0);
80002e78:	e1a00000 	nop			; (mov r0, r0)
80002e7c:	e59f303c 	ldr	r3, [pc, #60]	; 80002ec0 <sdhc_init+0x410>
80002e80:	e5933000 	ldr	r3, [r3]
80002e84:	e2033002 	and	r3, r3, #2
80002e88:	e3530000 	cmp	r3, #0
80002e8c:	0afffffa 	beq	80002e7c <sdhc_init+0x3cc>
	// clear STAT
	MMCHS1_REG(MMCHS_STAT) = 0XFFFFFFFF;
80002e90:	e59f3028 	ldr	r3, [pc, #40]	; 80002ec0 <sdhc_init+0x410>
80002e94:	e3e02000 	mvn	r2, #0
80002e98:	e5832000 	str	r2, [r3]


	wait(10000);
80002e9c:	e59f0048 	ldr	r0, [pc, #72]	; 80002eec <sdhc_init+0x43c>
80002ea0:	ebfffd1f 	bl	80002324 <wait>

	return 0;
80002ea4:	e3a03000 	mov	r3, #0

}
80002ea8:	e1a00003 	mov	r0, r3
80002eac:	e24bd004 	sub	sp, fp, #4
80002eb0:	e8bd4800 	pop	{fp, lr}
80002eb4:	e12fff1e 	bx	lr
80002eb8:	4809c02c 	.word	0x4809c02c
80002ebc:	4809c10c 	.word	0x4809c10c
80002ec0:	4809c130 	.word	0x4809c130
80002ec4:	000001aa 	.word	0x000001aa
80002ec8:	4809c110 	.word	0x4809c110
80002ecc:	40ff8000 	.word	0x40ff8000
80002ed0:	80016858 	.word	0x80016858
80002ed4:	4809c120 	.word	0x4809c120
80002ed8:	80016850 	.word	0x80016850
80002edc:	8001686c 	.word	0x8001686c
80002ee0:	4809c128 	.word	0x4809c128
80002ee4:	00fffff1 	.word	0x00fffff1
80002ee8:	000f4240 	.word	0x000f4240
80002eec:	00002710 	.word	0x00002710

80002ef0 <mmc1_init>:
 *
 * \returns  0 - Initialization is successful.
 *           1 - Initialization is failed.
 **/
int mmc1_init()
{
80002ef0:	e92d4800 	push	{fp, lr}
80002ef4:	e28db004 	add	fp, sp, #4
80002ef8:	e24dd008 	sub	sp, sp, #8
	int status;

	/* configure i2c1 for interface the TPS65930 (to power the MMC controller) */
	i2c1_init();
80002efc:	eb001491 	bl	80008148 <i2c1_init>

	/* pad configuration */
	mmc1_pad_conf();
80002f00:	ebfffdea 	bl	800026b0 <mmc1_pad_conf>

	/* MMC/SD CONTROLLER BUS CONFIGURATION */
	mmchs1_conf();
80002f04:	ebfffe7b 	bl	800028f8 <mmchs1_conf>

	/* card initialization: identification and selection */
	status = sdhc_init();
80002f08:	ebfffee8 	bl	80002ab0 <sdhc_init>
80002f0c:	e50b0008 	str	r0, [fp, #-8]

	return status;
80002f10:	e51b3008 	ldr	r3, [fp, #-8]
}
80002f14:	e1a00003 	mov	r0, r3
80002f18:	e24bd004 	sub	sp, fp, #4
80002f1c:	e8bd4800 	pop	{fp, lr}
80002f20:	e12fff1e 	bx	lr

80002f24 <mmchs_write_block>:
 *
 * \returns  0 - successful written of data.
 *           1 - failure to write the data.
 **/
int mmchs_write_block(const vulong *data, ulong block)
{
80002f24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80002f28:	e28db000 	add	fp, sp, #0
80002f2c:	e24dd00c 	sub	sp, sp, #12
80002f30:	e50b0008 	str	r0, [fp, #-8]
80002f34:	e50b100c 	str	r1, [fp, #-12]
	

	return 0;
80002f38:	e3a03000 	mov	r3, #0
}
80002f3c:	e1a00003 	mov	r0, r3
80002f40:	e28bd000 	add	sp, fp, #0
80002f44:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80002f48:	e12fff1e 	bx	lr

80002f4c <mmchs_read_block>:
 *
 * \returns  0 - successful written of data.
 *           1 - failure to write the data.
 **/
int mmchs_read_block(const vulong *data, ulong block)
{
80002f4c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80002f50:	e28db000 	add	fp, sp, #0
80002f54:	e24dd00c 	sub	sp, sp, #12
80002f58:	e50b0008 	str	r0, [fp, #-8]
80002f5c:	e50b100c 	str	r1, [fp, #-12]
	


	return 0;
80002f60:	e3a03000 	mov	r3, #0
}
80002f64:	e1a00003 	mov	r0, r3
80002f68:	e28bd000 	add	sp, fp, #0
80002f6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80002f70:	e12fff1e 	bx	lr

80002f74 <mmchs_write_multiple_block>:
 *
 * \returns  0 - successful written of data.
 *           1 - failure to write the data.
 **/
int mmchs_write_multiple_block(const uchar *data, ulong block, uchar nblocks)
{
80002f74:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80002f78:	e28db000 	add	fp, sp, #0
80002f7c:	e24dd014 	sub	sp, sp, #20
80002f80:	e50b0008 	str	r0, [fp, #-8]
80002f84:	e50b100c 	str	r1, [fp, #-12]
80002f88:	e1a03002 	mov	r3, r2
80002f8c:	e54b300d 	strb	r3, [fp, #-13]
	

	return 0;
80002f90:	e3a03000 	mov	r3, #0
}
80002f94:	e1a00003 	mov	r0, r3
80002f98:	e28bd000 	add	sp, fp, #0
80002f9c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80002fa0:	e12fff1e 	bx	lr

80002fa4 <mmchs_read_multiple_block>:
 *
 * \returns  0 - successful written of data.
 *           1 - failure to write the data.
 **/
int mmchs_read_multiple_block(uchar *data, ulong block, uchar nblocks)
{
80002fa4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80002fa8:	e28db000 	add	fp, sp, #0
80002fac:	e24dd014 	sub	sp, sp, #20
80002fb0:	e50b0008 	str	r0, [fp, #-8]
80002fb4:	e50b100c 	str	r1, [fp, #-12]
80002fb8:	e1a03002 	mov	r3, r2
80002fbc:	e54b300d 	strb	r3, [fp, #-13]
	

	return 0;
80002fc0:	e3a03000 	mov	r3, #0
}
80002fc4:	e1a00003 	mov	r0, r3
80002fc8:	e28bd000 	add	sp, fp, #0
80002fcc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80002fd0:	e12fff1e 	bx	lr

80002fd4 <read_card_size>:
 *
 * \returns  card size in number of K bytes
 *
 **/
ulong read_card_size()
{
80002fd4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80002fd8:	e28db000 	add	fp, sp, #0
80002fdc:	e24dd00c 	sub	sp, sp, #12
	//return card size in number of K bytes
	ulong size;

	//Completer le code ici
	size = 0;
80002fe0:	e3a03000 	mov	r3, #0
80002fe4:	e50b3008 	str	r3, [fp, #-8]

	return size;
80002fe8:	e51b3008 	ldr	r3, [fp, #-8]
}
80002fec:	e1a00003 	mov	r0, r3
80002ff0:	e28bd000 	add	sp, fp, #0
80002ff4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80002ff8:	e12fff1e 	bx	lr

80002ffc <read_productname>:
/**
 * \brief   This function returns product name.
 *
 **/
void read_productname(uchar * name)
{
80002ffc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80003000:	e28db000 	add	fp, sp, #0
80003004:	e24dd00c 	sub	sp, sp, #12
80003008:	e50b0008 	str	r0, [fp, #-8]

	//Modifier le code ici
	name[0]= 0x00;
8000300c:	e51b3008 	ldr	r3, [fp, #-8]
80003010:	e3a02000 	mov	r2, #0
80003014:	e5c32000 	strb	r2, [r3]
	name[1]= 0x00;
80003018:	e51b3008 	ldr	r3, [fp, #-8]
8000301c:	e2833001 	add	r3, r3, #1
80003020:	e3a02000 	mov	r2, #0
80003024:	e5c32000 	strb	r2, [r3]
	name[2]= 0x00;
80003028:	e51b3008 	ldr	r3, [fp, #-8]
8000302c:	e2833002 	add	r3, r3, #2
80003030:	e3a02000 	mov	r2, #0
80003034:	e5c32000 	strb	r2, [r3]
	name[3]= 0x00;
80003038:	e51b3008 	ldr	r3, [fp, #-8]
8000303c:	e2833003 	add	r3, r3, #3
80003040:	e3a02000 	mov	r2, #0
80003044:	e5c32000 	strb	r2, [r3]
	name[4]= 0x00;
80003048:	e51b3008 	ldr	r3, [fp, #-8]
8000304c:	e2833004 	add	r3, r3, #4
80003050:	e3a02000 	mov	r2, #0
80003054:	e5c32000 	strb	r2, [r3]
	name[5]= '\0';
80003058:	e51b3008 	ldr	r3, [fp, #-8]
8000305c:	e2833005 	add	r3, r3, #5
80003060:	e3a02000 	mov	r2, #0
80003064:	e5c32000 	strb	r2, [r3]

}
80003068:	e28bd000 	add	sp, fp, #0
8000306c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80003070:	e12fff1e 	bx	lr

80003074 <initMenusTree>:
menu_t mainMenu = {"Picomon - Files on the SD card",0, mainMenuItems};
menu_t subMenu[10];


void initMenusTree()
{
80003074:	e92d4800 	push	{fp, lr}
80003078:	e28db004 	add	fp, sp, #4
8000307c:	e24dd038 	sub	sp, sp, #56	; 0x38
	   FILINFO finfo;
	    DIR dirs;
	    char* path="";
80003080:	e59f35c0 	ldr	r3, [pc, #1472]	; 80003648 <initMenusTree+0x5d4>
80003084:	e50b3008 	str	r3, [fp, #-8]
	    int i=0;
80003088:	e3a03000 	mov	r3, #0
8000308c:	e50b300c 	str	r3, [fp, #-12]
	    // le nom de chaque fichier par la variable suivante : &finfo.fname[0]
	    //
	    ///////////////////////////////////////////////////
	    {
	        	/* Main menu item title = file name */
	        	memcpy(&fileNames[i][0],&finfo.fname[0],sizeof(fileNames[i]));
80003090:	e51b200c 	ldr	r2, [fp, #-12]
80003094:	e1a03002 	mov	r3, r2
80003098:	e1a03083 	lsl	r3, r3, #1
8000309c:	e0833002 	add	r3, r3, r2
800030a0:	e1a03103 	lsl	r3, r3, #2
800030a4:	e1a02003 	mov	r2, r3
800030a8:	e59f359c 	ldr	r3, [pc, #1436]	; 8000364c <initMenusTree+0x5d8>
800030ac:	e0822003 	add	r2, r2, r3
800030b0:	e24b3024 	sub	r3, fp, #36	; 0x24
800030b4:	e2833009 	add	r3, r3, #9
800030b8:	e1a00002 	mov	r0, r2
800030bc:	e1a01003 	mov	r1, r3
800030c0:	e3a0200c 	mov	r2, #12
800030c4:	eb0016b5 	bl	80008ba0 <memcpy>
	        	mainMenuItems[i].title = &fileNames[i][0];
800030c8:	e59f157c 	ldr	r1, [pc, #1404]	; 8000364c <initMenusTree+0x5d8>
800030cc:	e51b200c 	ldr	r2, [fp, #-12]
800030d0:	e1a03002 	mov	r3, r2
800030d4:	e1a03083 	lsl	r3, r3, #1
800030d8:	e0833002 	add	r3, r3, r2
800030dc:	e1a03103 	lsl	r3, r3, #2
800030e0:	e0811003 	add	r1, r1, r3
800030e4:	e59f3564 	ldr	r3, [pc, #1380]	; 80003650 <initMenusTree+0x5dc>
800030e8:	e51b200c 	ldr	r2, [fp, #-12]
800030ec:	e7831202 	str	r1, [r3, r2, lsl #4]
	        	/* Main menu sub-menu: choice between read or show file info */
	        	mainMenuItems[i].submenu = &subMenu[i];
800030f0:	e51b200c 	ldr	r2, [fp, #-12]
800030f4:	e1a03002 	mov	r3, r2
800030f8:	e1a03083 	lsl	r3, r3, #1
800030fc:	e0833002 	add	r3, r3, r2
80003100:	e1a03103 	lsl	r3, r3, #2
80003104:	e1a02003 	mov	r2, r3
80003108:	e59f3544 	ldr	r3, [pc, #1348]	; 80003654 <initMenusTree+0x5e0>
8000310c:	e0822003 	add	r2, r2, r3
80003110:	e59f0538 	ldr	r0, [pc, #1336]	; 80003650 <initMenusTree+0x5dc>
80003114:	e51b100c 	ldr	r1, [fp, #-12]
80003118:	e3a03004 	mov	r3, #4
8000311c:	e1a01201 	lsl	r1, r1, #4
80003120:	e0801001 	add	r1, r0, r1
80003124:	e0813003 	add	r3, r1, r3
80003128:	e5832000 	str	r2, [r3]
	        	/* Main menu function and data pointers for each item = NULL */
	        	mainMenuItems[i].function_ptr = 0;
8000312c:	e59f151c 	ldr	r1, [pc, #1308]	; 80003650 <initMenusTree+0x5dc>
80003130:	e51b200c 	ldr	r2, [fp, #-12]
80003134:	e3a03008 	mov	r3, #8
80003138:	e1a02202 	lsl	r2, r2, #4
8000313c:	e0812002 	add	r2, r1, r2
80003140:	e0823003 	add	r3, r2, r3
80003144:	e3a02000 	mov	r2, #0
80003148:	e5832000 	str	r2, [r3]
	        	mainMenuItems[i].data = 0;
8000314c:	e59f14fc 	ldr	r1, [pc, #1276]	; 80003650 <initMenusTree+0x5dc>
80003150:	e51b200c 	ldr	r2, [fp, #-12]
80003154:	e3a0300c 	mov	r3, #12
80003158:	e1a02202 	lsl	r2, r2, #4
8000315c:	e0812002 	add	r2, r1, r2
80003160:	e0823003 	add	r3, r2, r3
80003164:	e3a02000 	mov	r2, #0
80003168:	e5832000 	str	r2, [r3]
	        	/* sub-menu title = file name */
	        	subMenu[i].title = &fileNames[i][0];
8000316c:	e59f14d8 	ldr	r1, [pc, #1240]	; 8000364c <initMenusTree+0x5d8>
80003170:	e51b200c 	ldr	r2, [fp, #-12]
80003174:	e1a03002 	mov	r3, r2
80003178:	e1a03083 	lsl	r3, r3, #1
8000317c:	e0833002 	add	r3, r3, r2
80003180:	e1a03103 	lsl	r3, r3, #2
80003184:	e0811003 	add	r1, r1, r3
80003188:	e59f04c4 	ldr	r0, [pc, #1220]	; 80003654 <initMenusTree+0x5e0>
8000318c:	e51b200c 	ldr	r2, [fp, #-12]
80003190:	e1a03002 	mov	r3, r2
80003194:	e1a03083 	lsl	r3, r3, #1
80003198:	e0833002 	add	r3, r3, r2
8000319c:	e1a03103 	lsl	r3, r3, #2
800031a0:	e0803003 	add	r3, r0, r3
800031a4:	e5831000 	str	r1, [r3]
	        	subMenu[i].parent = &mainMenu;
800031a8:	e59f04a4 	ldr	r0, [pc, #1188]	; 80003654 <initMenusTree+0x5e0>
800031ac:	e51b200c 	ldr	r2, [fp, #-12]
800031b0:	e3a01004 	mov	r1, #4
800031b4:	e1a03002 	mov	r3, r2
800031b8:	e1a03083 	lsl	r3, r3, #1
800031bc:	e0833002 	add	r3, r3, r2
800031c0:	e1a03103 	lsl	r3, r3, #2
800031c4:	e0803003 	add	r3, r0, r3
800031c8:	e0833001 	add	r3, r3, r1
800031cc:	e59f2484 	ldr	r2, [pc, #1156]	; 80003658 <initMenusTree+0x5e4>
800031d0:	e5832000 	str	r2, [r3]
	        	/* sub-menu items tables: choice between read or show file info */
	        	subMenu[i].items = subMenuItems[i];
800031d4:	e59f2480 	ldr	r2, [pc, #1152]	; 8000365c <initMenusTree+0x5e8>
800031d8:	e51b300c 	ldr	r3, [fp, #-12]
800031dc:	e1a03303 	lsl	r3, r3, #6
800031e0:	e0821003 	add	r1, r2, r3
800031e4:	e59fc468 	ldr	ip, [pc, #1128]	; 80003654 <initMenusTree+0x5e0>
800031e8:	e51b200c 	ldr	r2, [fp, #-12]
800031ec:	e3a00008 	mov	r0, #8
800031f0:	e1a03002 	mov	r3, r2
800031f4:	e1a03083 	lsl	r3, r3, #1
800031f8:	e0833002 	add	r3, r3, r2
800031fc:	e1a03103 	lsl	r3, r3, #2
80003200:	e08c3003 	add	r3, ip, r3
80003204:	e0833000 	add	r3, r3, r0
80003208:	e5831000 	str	r1, [r3]
	    		/* Sub-menu i: title, function and data pointers for each item */
	        	/* read file */
	        	subMenuItems[i][0].title = "Read file";
8000320c:	e59f3448 	ldr	r3, [pc, #1096]	; 8000365c <initMenusTree+0x5e8>
80003210:	e51b200c 	ldr	r2, [fp, #-12]
80003214:	e59f1444 	ldr	r1, [pc, #1092]	; 80003660 <initMenusTree+0x5ec>
80003218:	e7831302 	str	r1, [r3, r2, lsl #6]
	        	subMenuItems[i][0].function_ptr = (function_t) read_file;
8000321c:	e59f2440 	ldr	r2, [pc, #1088]	; 80003664 <initMenusTree+0x5f0>
80003220:	e59f0434 	ldr	r0, [pc, #1076]	; 8000365c <initMenusTree+0x5e8>
80003224:	e51b100c 	ldr	r1, [fp, #-12]
80003228:	e3a03008 	mov	r3, #8
8000322c:	e1a01301 	lsl	r1, r1, #6
80003230:	e0801001 	add	r1, r0, r1
80003234:	e0813003 	add	r3, r1, r3
80003238:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][0].data = &fileNames[i][0];
8000323c:	e51b200c 	ldr	r2, [fp, #-12]
80003240:	e1a03002 	mov	r3, r2
80003244:	e1a03083 	lsl	r3, r3, #1
80003248:	e0833002 	add	r3, r3, r2
8000324c:	e1a03103 	lsl	r3, r3, #2
80003250:	e1a02003 	mov	r2, r3
80003254:	e59f33f0 	ldr	r3, [pc, #1008]	; 8000364c <initMenusTree+0x5d8>
80003258:	e0822003 	add	r2, r2, r3
8000325c:	e59f03f8 	ldr	r0, [pc, #1016]	; 8000365c <initMenusTree+0x5e8>
80003260:	e51b100c 	ldr	r1, [fp, #-12]
80003264:	e3a0300c 	mov	r3, #12
80003268:	e1a01301 	lsl	r1, r1, #6
8000326c:	e0801001 	add	r1, r0, r1
80003270:	e0813003 	add	r3, r1, r3
80003274:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][0].submenu = 0;
80003278:	e59f13dc 	ldr	r1, [pc, #988]	; 8000365c <initMenusTree+0x5e8>
8000327c:	e51b200c 	ldr	r2, [fp, #-12]
80003280:	e3a03004 	mov	r3, #4
80003284:	e1a02302 	lsl	r2, r2, #6
80003288:	e0812002 	add	r2, r1, r2
8000328c:	e0823003 	add	r3, r2, r3
80003290:	e3a02000 	mov	r2, #0
80003294:	e5832000 	str	r2, [r3]
	        	/* show info */
	        	subMenuItems[i][1].title = "Show File information";
80003298:	e59f13bc 	ldr	r1, [pc, #956]	; 8000365c <initMenusTree+0x5e8>
8000329c:	e51b200c 	ldr	r2, [fp, #-12]
800032a0:	e3a03010 	mov	r3, #16
800032a4:	e1a02302 	lsl	r2, r2, #6
800032a8:	e0812002 	add	r2, r1, r2
800032ac:	e0823003 	add	r3, r2, r3
800032b0:	e59f23b0 	ldr	r2, [pc, #944]	; 80003668 <initMenusTree+0x5f4>
800032b4:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][1].function_ptr = (function_t) print_file_info;
800032b8:	e59f23ac 	ldr	r2, [pc, #940]	; 8000366c <initMenusTree+0x5f8>
800032bc:	e59f0398 	ldr	r0, [pc, #920]	; 8000365c <initMenusTree+0x5e8>
800032c0:	e51b100c 	ldr	r1, [fp, #-12]
800032c4:	e3a03018 	mov	r3, #24
800032c8:	e1a01301 	lsl	r1, r1, #6
800032cc:	e0801001 	add	r1, r0, r1
800032d0:	e0813003 	add	r3, r1, r3
800032d4:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][1].data = &fileNames[i][0];
800032d8:	e51b200c 	ldr	r2, [fp, #-12]
800032dc:	e1a03002 	mov	r3, r2
800032e0:	e1a03083 	lsl	r3, r3, #1
800032e4:	e0833002 	add	r3, r3, r2
800032e8:	e1a03103 	lsl	r3, r3, #2
800032ec:	e1a02003 	mov	r2, r3
800032f0:	e59f3354 	ldr	r3, [pc, #852]	; 8000364c <initMenusTree+0x5d8>
800032f4:	e0822003 	add	r2, r2, r3
800032f8:	e59f035c 	ldr	r0, [pc, #860]	; 8000365c <initMenusTree+0x5e8>
800032fc:	e51b100c 	ldr	r1, [fp, #-12]
80003300:	e3a0301c 	mov	r3, #28
80003304:	e1a01301 	lsl	r1, r1, #6
80003308:	e0801001 	add	r1, r0, r1
8000330c:	e0813003 	add	r3, r1, r3
80003310:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][1].submenu = 0;
80003314:	e59f1340 	ldr	r1, [pc, #832]	; 8000365c <initMenusTree+0x5e8>
80003318:	e51b200c 	ldr	r2, [fp, #-12]
8000331c:	e3a03014 	mov	r3, #20
80003320:	e1a02302 	lsl	r2, r2, #6
80003324:	e0812002 	add	r2, r1, r2
80003328:	e0823003 	add	r3, r2, r3
8000332c:	e3a02000 	mov	r2, #0
80003330:	e5832000 	str	r2, [r3]
	        	/* run application */
	        	subMenuItems[i][2].title = "Load and run ELF application";
80003334:	e59f1320 	ldr	r1, [pc, #800]	; 8000365c <initMenusTree+0x5e8>
80003338:	e51b200c 	ldr	r2, [fp, #-12]
8000333c:	e3a03020 	mov	r3, #32
80003340:	e1a02302 	lsl	r2, r2, #6
80003344:	e0812002 	add	r2, r1, r2
80003348:	e0823003 	add	r3, r2, r3
8000334c:	e59f231c 	ldr	r2, [pc, #796]	; 80003670 <initMenusTree+0x5fc>
80003350:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][2].function_ptr = (function_t) run_app;
80003354:	e59f2318 	ldr	r2, [pc, #792]	; 80003674 <initMenusTree+0x600>
80003358:	e59f02fc 	ldr	r0, [pc, #764]	; 8000365c <initMenusTree+0x5e8>
8000335c:	e51b100c 	ldr	r1, [fp, #-12]
80003360:	e3a03028 	mov	r3, #40	; 0x28
80003364:	e1a01301 	lsl	r1, r1, #6
80003368:	e0801001 	add	r1, r0, r1
8000336c:	e0813003 	add	r3, r1, r3
80003370:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][2].data = &fileNames[i][0];
80003374:	e51b200c 	ldr	r2, [fp, #-12]
80003378:	e1a03002 	mov	r3, r2
8000337c:	e1a03083 	lsl	r3, r3, #1
80003380:	e0833002 	add	r3, r3, r2
80003384:	e1a03103 	lsl	r3, r3, #2
80003388:	e1a02003 	mov	r2, r3
8000338c:	e59f32b8 	ldr	r3, [pc, #696]	; 8000364c <initMenusTree+0x5d8>
80003390:	e0822003 	add	r2, r2, r3
80003394:	e59f02c0 	ldr	r0, [pc, #704]	; 8000365c <initMenusTree+0x5e8>
80003398:	e51b100c 	ldr	r1, [fp, #-12]
8000339c:	e3a0302c 	mov	r3, #44	; 0x2c
800033a0:	e1a01301 	lsl	r1, r1, #6
800033a4:	e0801001 	add	r1, r0, r1
800033a8:	e0813003 	add	r3, r1, r3
800033ac:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][2].submenu = 0;
800033b0:	e59f12a4 	ldr	r1, [pc, #676]	; 8000365c <initMenusTree+0x5e8>
800033b4:	e51b200c 	ldr	r2, [fp, #-12]
800033b8:	e3a03024 	mov	r3, #36	; 0x24
800033bc:	e1a02302 	lsl	r2, r2, #6
800033c0:	e0812002 	add	r2, r1, r2
800033c4:	e0823003 	add	r3, r2, r3
800033c8:	e3a02000 	mov	r2, #0
800033cc:	e5832000 	str	r2, [r3]

	        	/* last item */
	        	subMenuItems[i][3].title = 0;
800033d0:	e59f1284 	ldr	r1, [pc, #644]	; 8000365c <initMenusTree+0x5e8>
800033d4:	e51b200c 	ldr	r2, [fp, #-12]
800033d8:	e3a03030 	mov	r3, #48	; 0x30
800033dc:	e1a02302 	lsl	r2, r2, #6
800033e0:	e0812002 	add	r2, r1, r2
800033e4:	e0823003 	add	r3, r2, r3
800033e8:	e3a02000 	mov	r2, #0
800033ec:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][3].function_ptr = 0;
800033f0:	e59f1264 	ldr	r1, [pc, #612]	; 8000365c <initMenusTree+0x5e8>
800033f4:	e51b200c 	ldr	r2, [fp, #-12]
800033f8:	e3a03038 	mov	r3, #56	; 0x38
800033fc:	e1a02302 	lsl	r2, r2, #6
80003400:	e0812002 	add	r2, r1, r2
80003404:	e0823003 	add	r3, r2, r3
80003408:	e3a02000 	mov	r2, #0
8000340c:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][3].data = 0;
80003410:	e59f1244 	ldr	r1, [pc, #580]	; 8000365c <initMenusTree+0x5e8>
80003414:	e51b200c 	ldr	r2, [fp, #-12]
80003418:	e3a0303c 	mov	r3, #60	; 0x3c
8000341c:	e1a02302 	lsl	r2, r2, #6
80003420:	e0812002 	add	r2, r1, r2
80003424:	e0823003 	add	r3, r2, r3
80003428:	e3a02000 	mov	r2, #0
8000342c:	e5832000 	str	r2, [r3]
	        	subMenuItems[i][3].submenu = 0;
80003430:	e59f1224 	ldr	r1, [pc, #548]	; 8000365c <initMenusTree+0x5e8>
80003434:	e51b200c 	ldr	r2, [fp, #-12]
80003438:	e3a03034 	mov	r3, #52	; 0x34
8000343c:	e1a02302 	lsl	r2, r2, #6
80003440:	e0812002 	add	r2, r1, r2
80003444:	e0823003 	add	r3, r2, r3
80003448:	e3a02000 	mov	r2, #0
8000344c:	e5832000 	str	r2, [r3]

	        	i++;
80003450:	e51b300c 	ldr	r3, [fp, #-12]
80003454:	e2833001 	add	r3, r3, #1
80003458:	e50b300c 	str	r3, [fp, #-12]
	    }

	    /* initialize last items to NULL */

    	/* Main menu item title = file name */
    	mainMenuItems[i].title = 0;
8000345c:	e59f31ec 	ldr	r3, [pc, #492]	; 80003650 <initMenusTree+0x5dc>
80003460:	e51b200c 	ldr	r2, [fp, #-12]
80003464:	e3a01000 	mov	r1, #0
80003468:	e7831202 	str	r1, [r3, r2, lsl #4]
    	/* Main menu sub-menu: choice between read or show file info */
    	mainMenuItems[i].submenu = 0;
8000346c:	e59f11dc 	ldr	r1, [pc, #476]	; 80003650 <initMenusTree+0x5dc>
80003470:	e51b200c 	ldr	r2, [fp, #-12]
80003474:	e3a03004 	mov	r3, #4
80003478:	e1a02202 	lsl	r2, r2, #4
8000347c:	e0812002 	add	r2, r1, r2
80003480:	e0823003 	add	r3, r2, r3
80003484:	e3a02000 	mov	r2, #0
80003488:	e5832000 	str	r2, [r3]
    	/* Main menu function and data pointers for each item = NULL */
    	mainMenuItems[i].function_ptr = 0;
8000348c:	e59f11bc 	ldr	r1, [pc, #444]	; 80003650 <initMenusTree+0x5dc>
80003490:	e51b200c 	ldr	r2, [fp, #-12]
80003494:	e3a03008 	mov	r3, #8
80003498:	e1a02202 	lsl	r2, r2, #4
8000349c:	e0812002 	add	r2, r1, r2
800034a0:	e0823003 	add	r3, r2, r3
800034a4:	e3a02000 	mov	r2, #0
800034a8:	e5832000 	str	r2, [r3]
    	mainMenuItems[i].data = 0;
800034ac:	e59f119c 	ldr	r1, [pc, #412]	; 80003650 <initMenusTree+0x5dc>
800034b0:	e51b200c 	ldr	r2, [fp, #-12]
800034b4:	e3a0300c 	mov	r3, #12
800034b8:	e1a02202 	lsl	r2, r2, #4
800034bc:	e0812002 	add	r2, r1, r2
800034c0:	e0823003 	add	r3, r2, r3
800034c4:	e3a02000 	mov	r2, #0
800034c8:	e5832000 	str	r2, [r3]

    	/* read file */
    	subMenuItems[i][0].title = 0;
800034cc:	e59f3188 	ldr	r3, [pc, #392]	; 8000365c <initMenusTree+0x5e8>
800034d0:	e51b200c 	ldr	r2, [fp, #-12]
800034d4:	e3a01000 	mov	r1, #0
800034d8:	e7831302 	str	r1, [r3, r2, lsl #6]
    	subMenuItems[i][0].function_ptr = 0;
800034dc:	e59f1178 	ldr	r1, [pc, #376]	; 8000365c <initMenusTree+0x5e8>
800034e0:	e51b200c 	ldr	r2, [fp, #-12]
800034e4:	e3a03008 	mov	r3, #8
800034e8:	e1a02302 	lsl	r2, r2, #6
800034ec:	e0812002 	add	r2, r1, r2
800034f0:	e0823003 	add	r3, r2, r3
800034f4:	e3a02000 	mov	r2, #0
800034f8:	e5832000 	str	r2, [r3]
    	subMenuItems[i][0].data = 0;
800034fc:	e59f1158 	ldr	r1, [pc, #344]	; 8000365c <initMenusTree+0x5e8>
80003500:	e51b200c 	ldr	r2, [fp, #-12]
80003504:	e3a0300c 	mov	r3, #12
80003508:	e1a02302 	lsl	r2, r2, #6
8000350c:	e0812002 	add	r2, r1, r2
80003510:	e0823003 	add	r3, r2, r3
80003514:	e3a02000 	mov	r2, #0
80003518:	e5832000 	str	r2, [r3]
    	subMenuItems[i][0].submenu = 0;
8000351c:	e59f1138 	ldr	r1, [pc, #312]	; 8000365c <initMenusTree+0x5e8>
80003520:	e51b200c 	ldr	r2, [fp, #-12]
80003524:	e3a03004 	mov	r3, #4
80003528:	e1a02302 	lsl	r2, r2, #6
8000352c:	e0812002 	add	r2, r1, r2
80003530:	e0823003 	add	r3, r2, r3
80003534:	e3a02000 	mov	r2, #0
80003538:	e5832000 	str	r2, [r3]
    	/* show info */
    	subMenuItems[i][1].title = 0;
8000353c:	e59f1118 	ldr	r1, [pc, #280]	; 8000365c <initMenusTree+0x5e8>
80003540:	e51b200c 	ldr	r2, [fp, #-12]
80003544:	e3a03010 	mov	r3, #16
80003548:	e1a02302 	lsl	r2, r2, #6
8000354c:	e0812002 	add	r2, r1, r2
80003550:	e0823003 	add	r3, r2, r3
80003554:	e3a02000 	mov	r2, #0
80003558:	e5832000 	str	r2, [r3]
    	subMenuItems[i][1].function_ptr = 0;
8000355c:	e59f10f8 	ldr	r1, [pc, #248]	; 8000365c <initMenusTree+0x5e8>
80003560:	e51b200c 	ldr	r2, [fp, #-12]
80003564:	e3a03018 	mov	r3, #24
80003568:	e1a02302 	lsl	r2, r2, #6
8000356c:	e0812002 	add	r2, r1, r2
80003570:	e0823003 	add	r3, r2, r3
80003574:	e3a02000 	mov	r2, #0
80003578:	e5832000 	str	r2, [r3]
    	subMenuItems[i][1].data = 0;
8000357c:	e59f10d8 	ldr	r1, [pc, #216]	; 8000365c <initMenusTree+0x5e8>
80003580:	e51b200c 	ldr	r2, [fp, #-12]
80003584:	e3a0301c 	mov	r3, #28
80003588:	e1a02302 	lsl	r2, r2, #6
8000358c:	e0812002 	add	r2, r1, r2
80003590:	e0823003 	add	r3, r2, r3
80003594:	e3a02000 	mov	r2, #0
80003598:	e5832000 	str	r2, [r3]
    	subMenuItems[i][1].submenu = 0;
8000359c:	e59f10b8 	ldr	r1, [pc, #184]	; 8000365c <initMenusTree+0x5e8>
800035a0:	e51b200c 	ldr	r2, [fp, #-12]
800035a4:	e3a03014 	mov	r3, #20
800035a8:	e1a02302 	lsl	r2, r2, #6
800035ac:	e0812002 	add	r2, r1, r2
800035b0:	e0823003 	add	r3, r2, r3
800035b4:	e3a02000 	mov	r2, #0
800035b8:	e5832000 	str	r2, [r3]
    	/* last item */
    	subMenuItems[i][2].title = 0;
800035bc:	e59f1098 	ldr	r1, [pc, #152]	; 8000365c <initMenusTree+0x5e8>
800035c0:	e51b200c 	ldr	r2, [fp, #-12]
800035c4:	e3a03020 	mov	r3, #32
800035c8:	e1a02302 	lsl	r2, r2, #6
800035cc:	e0812002 	add	r2, r1, r2
800035d0:	e0823003 	add	r3, r2, r3
800035d4:	e3a02000 	mov	r2, #0
800035d8:	e5832000 	str	r2, [r3]
    	subMenuItems[i][2].function_ptr = 0;
800035dc:	e59f1078 	ldr	r1, [pc, #120]	; 8000365c <initMenusTree+0x5e8>
800035e0:	e51b200c 	ldr	r2, [fp, #-12]
800035e4:	e3a03028 	mov	r3, #40	; 0x28
800035e8:	e1a02302 	lsl	r2, r2, #6
800035ec:	e0812002 	add	r2, r1, r2
800035f0:	e0823003 	add	r3, r2, r3
800035f4:	e3a02000 	mov	r2, #0
800035f8:	e5832000 	str	r2, [r3]
    	subMenuItems[i][2].data = 0;
800035fc:	e59f1058 	ldr	r1, [pc, #88]	; 8000365c <initMenusTree+0x5e8>
80003600:	e51b200c 	ldr	r2, [fp, #-12]
80003604:	e3a0302c 	mov	r3, #44	; 0x2c
80003608:	e1a02302 	lsl	r2, r2, #6
8000360c:	e0812002 	add	r2, r1, r2
80003610:	e0823003 	add	r3, r2, r3
80003614:	e3a02000 	mov	r2, #0
80003618:	e5832000 	str	r2, [r3]
    	subMenuItems[i][2].submenu = 0;
8000361c:	e59f1038 	ldr	r1, [pc, #56]	; 8000365c <initMenusTree+0x5e8>
80003620:	e51b200c 	ldr	r2, [fp, #-12]
80003624:	e3a03024 	mov	r3, #36	; 0x24
80003628:	e1a02302 	lsl	r2, r2, #6
8000362c:	e0812002 	add	r2, r1, r2
80003630:	e0823003 	add	r3, r2, r3
80003634:	e3a02000 	mov	r2, #0
80003638:	e5832000 	str	r2, [r3]
}
8000363c:	e24bd004 	sub	sp, fp, #4
80003640:	e8bd4800 	pop	{fp, lr}
80003644:	e12fff1e 	bx	lr
80003648:	80012468 	.word	0x80012468
8000364c:	80017e80 	.word	0x80017e80
80003650:	80017dd0 	.word	0x80017dd0
80003654:	80017d58 	.word	0x80017d58
80003658:	80011498 	.word	0x80011498
8000365c:	8001786c 	.word	0x8001786c
80003660:	8001246c 	.word	0x8001246c
80003664:	80003970 	.word	0x80003970
80003668:	80012478 	.word	0x80012478
8000366c:	800039b8 	.word	0x800039b8
80003670:	80012490 	.word	0x80012490
80003674:	80003a00 	.word	0x80003a00

80003678 <display_sd_info>:

void display_sd_info()
{
80003678:	e92d4800 	push	{fp, lr}
8000367c:	e28db004 	add	fp, sp, #4
80003680:	e24dd010 	sub	sp, sp, #16
	int sdcard_size;
	uchar name_pnm[6];

	// Print info
	sprintf((char *)lcd_line, "**** SD card info ****");
80003684:	e59f00e0 	ldr	r0, [pc, #224]	; 8000376c <display_sd_info+0xf4>
80003688:	e59f10e0 	ldr	r1, [pc, #224]	; 80003770 <display_sd_info+0xf8>
8000368c:	e3a02017 	mov	r2, #23
80003690:	eb001542 	bl	80008ba0 <memcpy>
	fb_print_string(lcd_line,0, get_current_y(), lcd_fg_color);
80003694:	ebfffa8b 	bl	800020c8 <get_current_y>
80003698:	e1a02000 	mov	r2, r0
8000369c:	e59f30d0 	ldr	r3, [pc, #208]	; 80003774 <display_sd_info+0xfc>
800036a0:	e5d33000 	ldrb	r3, [r3]
800036a4:	e59f00c0 	ldr	r0, [pc, #192]	; 8000376c <display_sd_info+0xf4>
800036a8:	e3a01000 	mov	r1, #0
800036ac:	ebfff955 	bl	80001c08 <fb_print_string>
	line_nb++;
800036b0:	e59f30c0 	ldr	r3, [pc, #192]	; 80003778 <display_sd_info+0x100>
800036b4:	e5933000 	ldr	r3, [r3]
800036b8:	e2832001 	add	r2, r3, #1
800036bc:	e59f30b4 	ldr	r3, [pc, #180]	; 80003778 <display_sd_info+0x100>
800036c0:	e5832000 	str	r2, [r3]

	// Print name
	read_productname(name_pnm);
800036c4:	e24b3010 	sub	r3, fp, #16
800036c8:	e1a00003 	mov	r0, r3
800036cc:	ebfffe4a 	bl	80002ffc <read_productname>
	sprintf((char *)lcd_line, "Card name : %s", name_pnm);
800036d0:	e24b3010 	sub	r3, fp, #16
800036d4:	e59f0090 	ldr	r0, [pc, #144]	; 8000376c <display_sd_info+0xf4>
800036d8:	e59f109c 	ldr	r1, [pc, #156]	; 8000377c <display_sd_info+0x104>
800036dc:	e1a02003 	mov	r2, r3
800036e0:	eb0015f8 	bl	80008ec8 <sprintf>
	fb_print_string(lcd_line,0, get_current_y(), lcd_fg_color);
800036e4:	ebfffa77 	bl	800020c8 <get_current_y>
800036e8:	e1a02000 	mov	r2, r0
800036ec:	e59f3080 	ldr	r3, [pc, #128]	; 80003774 <display_sd_info+0xfc>
800036f0:	e5d33000 	ldrb	r3, [r3]
800036f4:	e59f0070 	ldr	r0, [pc, #112]	; 8000376c <display_sd_info+0xf4>
800036f8:	e3a01000 	mov	r1, #0
800036fc:	ebfff941 	bl	80001c08 <fb_print_string>
	line_nb++;
80003700:	e59f3070 	ldr	r3, [pc, #112]	; 80003778 <display_sd_info+0x100>
80003704:	e5933000 	ldr	r3, [r3]
80003708:	e2832001 	add	r2, r3, #1
8000370c:	e59f3064 	ldr	r3, [pc, #100]	; 80003778 <display_sd_info+0x100>
80003710:	e5832000 	str	r2, [r3]

	// Print size
	sdcard_size=read_card_size();
80003714:	ebfffe2e 	bl	80002fd4 <read_card_size>
80003718:	e1a03000 	mov	r3, r0
8000371c:	e50b3008 	str	r3, [fp, #-8]
	sprintf((char *)lcd_line, "Card size = %d KB", sdcard_size);
80003720:	e59f0044 	ldr	r0, [pc, #68]	; 8000376c <display_sd_info+0xf4>
80003724:	e59f1054 	ldr	r1, [pc, #84]	; 80003780 <display_sd_info+0x108>
80003728:	e51b2008 	ldr	r2, [fp, #-8]
8000372c:	eb0015e5 	bl	80008ec8 <sprintf>
	fb_print_string(lcd_line,0, get_current_y(), lcd_fg_color);
80003730:	ebfffa64 	bl	800020c8 <get_current_y>
80003734:	e1a02000 	mov	r2, r0
80003738:	e59f3034 	ldr	r3, [pc, #52]	; 80003774 <display_sd_info+0xfc>
8000373c:	e5d33000 	ldrb	r3, [r3]
80003740:	e59f0024 	ldr	r0, [pc, #36]	; 8000376c <display_sd_info+0xf4>
80003744:	e3a01000 	mov	r1, #0
80003748:	ebfff92e 	bl	80001c08 <fb_print_string>
	line_nb++;
8000374c:	e59f3024 	ldr	r3, [pc, #36]	; 80003778 <display_sd_info+0x100>
80003750:	e5933000 	ldr	r3, [r3]
80003754:	e2832001 	add	r2, r3, #1
80003758:	e59f3018 	ldr	r3, [pc, #24]	; 80003778 <display_sd_info+0x100>
8000375c:	e5832000 	str	r2, [r3]
}
80003760:	e24bd004 	sub	sp, fp, #4
80003764:	e8bd4800 	pop	{fp, lr}
80003768:	e12fff1e 	bx	lr
8000376c:	800167d8 	.word	0x800167d8
80003770:	800124b0 	.word	0x800124b0
80003774:	80011496 	.word	0x80011496
80003778:	8001683c 	.word	0x8001683c
8000377c:	800124c8 	.word	0x800124c8
80003780:	800124d8 	.word	0x800124d8

80003784 <test_menu>:


int test_menu(void){
80003784:	e92d4800 	push	{fp, lr}
80003788:	e28db004 	add	fp, sp, #4
	// GPIO initialization
	GPIO_init();
8000378c:	ebfff38d 	bl	800005c8 <GPIO_init>
	turnOffLed0();
80003790:	e3a00005 	mov	r0, #5
80003794:	e3a01902 	mov	r1, #32768	; 0x8000
80003798:	ebfff26b 	bl	8000014c <ClearOutput>
	turnOffLed1();
8000379c:	e3a00005 	mov	r0, #5
800037a0:	e3a01a02 	mov	r1, #8192	; 0x2000
800037a4:	ebfff268 	bl	8000014c <ClearOutput>

	//clear LCD
	clear_screen();
800037a8:	ebfff93e 	bl	80001ca8 <clear_screen>

    // Register a work area to logical drive 0
    f_mount(0, &fs);
800037ac:	e3a00000 	mov	r0, #0
800037b0:	e59f102c 	ldr	r1, [pc, #44]	; 800037e4 <test_menu+0x60>
800037b4:	eb0008cc 	bl	80005aec <f_mount>

    // Menu initialization
    initMenusTree();
800037b8:	ebfffe2d 	bl	80003074 <initMenusTree>

    // show main menu
    showMenu(&mainMenu);
800037bc:	e59f0024 	ldr	r0, [pc, #36]	; 800037e8 <test_menu+0x64>
800037c0:	ebfff535 	bl	80000c9c <showMenu>

    // Unregister a work area before discard it
    f_mount(0, NULL);
800037c4:	e3a00000 	mov	r0, #0
800037c8:	e3a01000 	mov	r1, #0
800037cc:	eb0008c6 	bl	80005aec <f_mount>

	return 0;
800037d0:	e3a03000 	mov	r3, #0
}
800037d4:	e1a00003 	mov	r0, r3
800037d8:	e24bd004 	sub	sp, fp, #4
800037dc:	e8bd4800 	pop	{fp, lr}
800037e0:	e12fff1e 	bx	lr
800037e4:	80017b2c 	.word	0x80017b2c
800037e8:	80011498 	.word	0x80011498

800037ec <twl4030_pmrecv_vsel_cfg>:
/*
 * Set Device Group and Voltage
 */
void twl4030_pmrecv_vsel_cfg(ushort vsel_reg, ushort vsel_val,
                                ushort dev_grp_reg, ushort dev_grp_val)
{
800037ec:	e92d4800 	push	{fp, lr}
800037f0:	e28db004 	add	fp, sp, #4
800037f4:	e24dd008 	sub	sp, sp, #8
800037f8:	e14b00b6 	strh	r0, [fp, #-6]
800037fc:	e14b10b8 	strh	r1, [fp, #-8]
80003800:	e14b20ba 	strh	r2, [fp, #-10]
80003804:	e14b30bc 	strh	r3, [fp, #-12]
        /* Select the Voltage */
        if (i2c1_write_byte(TWL4030_CHIP_PM_RECEIVER,vsel_reg,vsel_val))
80003808:	e15b20b6 	ldrh	r2, [fp, #-6]
8000380c:	e15b30b8 	ldrh	r3, [fp, #-8]
80003810:	e3a0004b 	mov	r0, #75	; 0x4b
80003814:	e1a01002 	mov	r1, r2
80003818:	e1a02003 	mov	r2, r3
8000381c:	eb00133e 	bl	8000851c <i2c1_write_byte>
80003820:	e1a03000 	mov	r3, r0
80003824:	e3530000 	cmp	r3, #0
80003828:	0a000007 	beq	8000384c <twl4030_pmrecv_vsel_cfg+0x60>
        {        	// retry
        	wait(1000);
8000382c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
80003830:	ebfffabb 	bl	80002324 <wait>
        	i2c1_write_byte(TWL4030_CHIP_PM_RECEIVER,vsel_reg,vsel_val);
80003834:	e15b20b6 	ldrh	r2, [fp, #-6]
80003838:	e15b30b8 	ldrh	r3, [fp, #-8]
8000383c:	e3a0004b 	mov	r0, #75	; 0x4b
80003840:	e1a01002 	mov	r1, r2
80003844:	e1a02003 	mov	r2, r3
80003848:	eb001333 	bl	8000851c <i2c1_write_byte>
        }

        /* Select the Device Group (enable the supply if dev_grp_sel != 0) */
        if (i2c1_write_byte(TWL4030_CHIP_PM_RECEIVER,dev_grp_reg,dev_grp_val))
8000384c:	e15b20ba 	ldrh	r2, [fp, #-10]
80003850:	e15b30bc 	ldrh	r3, [fp, #-12]
80003854:	e3a0004b 	mov	r0, #75	; 0x4b
80003858:	e1a01002 	mov	r1, r2
8000385c:	e1a02003 	mov	r2, r3
80003860:	eb00132d 	bl	8000851c <i2c1_write_byte>
80003864:	e1a03000 	mov	r3, r0
80003868:	e3530000 	cmp	r3, #0
8000386c:	0a000007 	beq	80003890 <twl4030_pmrecv_vsel_cfg+0xa4>
        {        	// retry
             wait(1000);
80003870:	e3a00ffa 	mov	r0, #1000	; 0x3e8
80003874:	ebfffaaa 	bl	80002324 <wait>
             i2c1_write_byte(TWL4030_CHIP_PM_RECEIVER,dev_grp_reg,dev_grp_val);
80003878:	e15b20ba 	ldrh	r2, [fp, #-10]
8000387c:	e15b30bc 	ldrh	r3, [fp, #-12]
80003880:	e3a0004b 	mov	r0, #75	; 0x4b
80003884:	e1a01002 	mov	r1, r2
80003888:	e1a02003 	mov	r2, r3
8000388c:	eb001322 	bl	8000851c <i2c1_write_byte>
        }
}
80003890:	e24bd004 	sub	sp, fp, #4
80003894:	e8bd4800 	pop	{fp, lr}
80003898:	e12fff1e 	bx	lr

8000389c <twl4030_power_init>:

void twl4030_power_init(void)
{
8000389c:	e92d4800 	push	{fp, lr}
800038a0:	e28db004 	add	fp, sp, #4
        /* set VAUX3 to 2.8V */
        twl4030_pmrecv_vsel_cfg(TWL4030_PM_RECEIVER_VAUX3_DEDICATED,
800038a4:	e3a0007d 	mov	r0, #125	; 0x7d
800038a8:	e3a01003 	mov	r1, #3
800038ac:	e3a0207a 	mov	r2, #122	; 0x7a
800038b0:	e3a03020 	mov	r3, #32
800038b4:	ebffffcc 	bl	800037ec <twl4030_pmrecv_vsel_cfg>
                                TWL4030_PM_RECEIVER_VAUX3_VSEL_28,
                                TWL4030_PM_RECEIVER_VAUX3_DEV_GRP,
                                TWL4030_PM_RECEIVER_DEV_GRP_P1);

        /* set VPLL2 to 1.8V */
        twl4030_pmrecv_vsel_cfg(TWL4030_PM_RECEIVER_VPLL2_DEDICATED,
800038b8:	e3a00091 	mov	r0, #145	; 0x91
800038bc:	e3a01005 	mov	r1, #5
800038c0:	e3a0208e 	mov	r2, #142	; 0x8e
800038c4:	e3a030e0 	mov	r3, #224	; 0xe0
800038c8:	ebffffc7 	bl	800037ec <twl4030_pmrecv_vsel_cfg>
                                TWL4030_PM_RECEIVER_VPLL2_VSEL_18,
                                TWL4030_PM_RECEIVER_VPLL2_DEV_GRP,
                                TWL4030_PM_RECEIVER_DEV_GRP_ALL);

        /* set VDAC to 1.8V */
        twl4030_pmrecv_vsel_cfg(TWL4030_PM_RECEIVER_VDAC_DEDICATED,
800038cc:	e3a00099 	mov	r0, #153	; 0x99
800038d0:	e3a01003 	mov	r1, #3
800038d4:	e3a02096 	mov	r2, #150	; 0x96
800038d8:	e3a03020 	mov	r3, #32
800038dc:	ebffffc2 	bl	800037ec <twl4030_pmrecv_vsel_cfg>
                                TWL4030_PM_RECEIVER_VDAC_VSEL_18,
                                TWL4030_PM_RECEIVER_VDAC_DEV_GRP,
                                TWL4030_PM_RECEIVER_DEV_GRP_P1);
}
800038e0:	e24bd004 	sub	sp, fp, #4
800038e4:	e8bd4800 	pop	{fp, lr}
800038e8:	e12fff1e 	bx	lr

800038ec <twl4030_power_mmc_init>:

void twl4030_power_mmc_init(void)
{
800038ec:	e92d4800 	push	{fp, lr}
800038f0:	e28db004 	add	fp, sp, #4
    	/* Set VSIM to 1.8 Volts */
    	twl4030_pmrecv_vsel_cfg(TWL4030_PM_RECEIVER_VSIM_DEDICATED,
800038f4:	e3a00095 	mov	r0, #149	; 0x95
800038f8:	e3a01003 	mov	r1, #3
800038fc:	e3a02092 	mov	r2, #146	; 0x92
80003900:	e3a03020 	mov	r3, #32
80003904:	ebffffb8 	bl	800037ec <twl4030_pmrecv_vsel_cfg>
                            TWL4030_PM_RECEIVER_VSIM_VSEL_18,
                            TWL4030_PM_RECEIVER_VSIM_DEV_GRP,
                            TWL4030_PM_RECEIVER_DEV_GRP_P1);

        /* Set VMMC1 to 3.15 Volts */
        twl4030_pmrecv_vsel_cfg(TWL4030_PM_RECEIVER_VMMC1_DEDICATED,
80003908:	e3a00085 	mov	r0, #133	; 0x85
8000390c:	e3a01003 	mov	r1, #3
80003910:	e3a02082 	mov	r2, #130	; 0x82
80003914:	e3a03020 	mov	r3, #32
80003918:	ebffffb3 	bl	800037ec <twl4030_pmrecv_vsel_cfg>
                                TWL4030_PM_RECEIVER_VMMC1_VSEL_32,
                                TWL4030_PM_RECEIVER_VMMC1_DEV_GRP,
                                TWL4030_PM_RECEIVER_DEV_GRP_P1);

}
8000391c:	e24bd004 	sub	sp, fp, #4
80003920:	e8bd4800 	pop	{fp, lr}
80003924:	e12fff1e 	bx	lr

80003928 <create_file>:
/* data buffer, size : 10 clusters, 1 cluster = 8 blocks of 512 B */
uchar buff[MAX_FILE_SIZE];


int create_file(char *file_name,uchar *data,ulong nbyte)
{
80003928:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
8000392c:	e28db000 	add	fp, sp, #0
80003930:	e24dd014 	sub	sp, sp, #20
80003934:	e50b0008 	str	r0, [fp, #-8]
80003938:	e50b100c 	str	r1, [fp, #-12]
8000393c:	e50b2010 	str	r2, [fp, #-16]

	return 0;
80003940:	e3a03000 	mov	r3, #0
}
80003944:	e1a00003 	mov	r0, r3
80003948:	e28bd000 	add	sp, fp, #0
8000394c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80003950:	e12fff1e 	bx	lr

80003954 <scan_files>:



/* path is "" for the root directory */
void scan_files (char* path)
{
80003954:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80003958:	e28db000 	add	fp, sp, #0
8000395c:	e24dd00c 	sub	sp, sp, #12
80003960:	e50b0008 	str	r0, [fp, #-8]
   
}
80003964:	e28bd000 	add	sp, fp, #0
80003968:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
8000396c:	e12fff1e 	bx	lr

80003970 <read_file>:

int read_file(char *file_name)
{
80003970:	e92d4800 	push	{fp, lr}
80003974:	e28db004 	add	fp, sp, #4
80003978:	e24dd008 	sub	sp, sp, #8
8000397c:	e50b0008 	str	r0, [fp, #-8]

	clear_screen();
80003980:	ebfff8c8 	bl	80001ca8 <clear_screen>
	fb_print_string((uchar *) "read_file : Function not implemented",20, 20, lcd_fg_color);
80003984:	e59f3024 	ldr	r3, [pc, #36]	; 800039b0 <read_file+0x40>
80003988:	e5d33000 	ldrb	r3, [r3]
8000398c:	e59f0020 	ldr	r0, [pc, #32]	; 800039b4 <read_file+0x44>
80003990:	e3a01014 	mov	r1, #20
80003994:	e3a02014 	mov	r2, #20
80003998:	ebfff89a 	bl	80001c08 <fb_print_string>

    return 0;
8000399c:	e3a03000 	mov	r3, #0
}
800039a0:	e1a00003 	mov	r0, r3
800039a4:	e24bd004 	sub	sp, fp, #4
800039a8:	e8bd4800 	pop	{fp, lr}
800039ac:	e12fff1e 	bx	lr
800039b0:	80011496 	.word	0x80011496
800039b4:	800124ec 	.word	0x800124ec

800039b8 <print_file_info>:


int print_file_info(char *file_name)
{
800039b8:	e92d4800 	push	{fp, lr}
800039bc:	e28db004 	add	fp, sp, #4
800039c0:	e24dd008 	sub	sp, sp, #8
800039c4:	e50b0008 	str	r0, [fp, #-8]

	clear_screen();
800039c8:	ebfff8b6 	bl	80001ca8 <clear_screen>
	fb_print_string((uchar *) "print_file_info : Function not implemented",20, 20, lcd_fg_color);
800039cc:	e59f3024 	ldr	r3, [pc, #36]	; 800039f8 <print_file_info+0x40>
800039d0:	e5d33000 	ldrb	r3, [r3]
800039d4:	e59f0020 	ldr	r0, [pc, #32]	; 800039fc <print_file_info+0x44>
800039d8:	e3a01014 	mov	r1, #20
800039dc:	e3a02014 	mov	r2, #20
800039e0:	ebfff888 	bl	80001c08 <fb_print_string>

	return 0;
800039e4:	e3a03000 	mov	r3, #0
}
800039e8:	e1a00003 	mov	r0, r3
800039ec:	e24bd004 	sub	sp, fp, #4
800039f0:	e8bd4800 	pop	{fp, lr}
800039f4:	e12fff1e 	bx	lr
800039f8:	80011496 	.word	0x80011496
800039fc:	80012514 	.word	0x80012514

80003a00 <run_app>:

int run_app(char *file_name)
{
80003a00:	e92d4800 	push	{fp, lr}
80003a04:	e28db004 	add	fp, sp, #4
80003a08:	e24dd008 	sub	sp, sp, #8
80003a0c:	e50b0008 	str	r0, [fp, #-8]

	clear_screen();
80003a10:	ebfff8a4 	bl	80001ca8 <clear_screen>
	fb_print_string((uchar *) "run_app : Function not implemented",20, 40, lcd_fg_color);
80003a14:	e59f3024 	ldr	r3, [pc, #36]	; 80003a40 <run_app+0x40>
80003a18:	e5d33000 	ldrb	r3, [r3]
80003a1c:	e59f0020 	ldr	r0, [pc, #32]	; 80003a44 <run_app+0x44>
80003a20:	e3a01014 	mov	r1, #20
80003a24:	e3a02028 	mov	r2, #40	; 0x28
80003a28:	ebfff876 	bl	80001c08 <fb_print_string>

	return 0;
80003a2c:	e3a03000 	mov	r3, #0
}
80003a30:	e1a00003 	mov	r0, r3
80003a34:	e24bd004 	sub	sp, fp, #4
80003a38:	e8bd4800 	pop	{fp, lr}
80003a3c:	e12fff1e 	bx	lr
80003a40:	80011496 	.word	0x80011496
80003a44:	80012540 	.word	0x80012540

80003a48 <move_window>:
static
BOOL move_window (        /* TRUE: successful, FALSE: failed */
    FATFS *fs,            /* File system object */
    DWORD sector        /* Sector number to make apperance in the fs->win[] */
)                        /* Move to zero only writes back dirty window */
{
80003a48:	e92d4800 	push	{fp, lr}
80003a4c:	e28db004 	add	fp, sp, #4
80003a50:	e24dd010 	sub	sp, sp, #16
80003a54:	e50b0010 	str	r0, [fp, #-16]
80003a58:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    DWORD wsect;


    wsect = fs->winsect;
80003a5c:	e51b3010 	ldr	r3, [fp, #-16]
80003a60:	e5933004 	ldr	r3, [r3, #4]
80003a64:	e50b3008 	str	r3, [fp, #-8]
    if (wsect != sector) {    /* Changed current window */
80003a68:	e51b2008 	ldr	r2, [fp, #-8]
80003a6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003a70:	e1520003 	cmp	r2, r3
80003a74:	0a000048 	beq	80003b9c <move_window+0x154>
#if !_FS_READONLY
        BYTE n;
        if (fs->winflag) {    /* Write back dirty window if needed */
80003a78:	e51b3010 	ldr	r3, [fp, #-16]
80003a7c:	e5d33028 	ldrb	r3, [r3, #40]	; 0x28
80003a80:	e3530000 	cmp	r3, #0
80003a84:	0a000030 	beq	80003b4c <move_window+0x104>
            if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
80003a88:	e51b3010 	ldr	r3, [fp, #-16]
80003a8c:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
80003a90:	e51b3010 	ldr	r3, [fp, #-16]
80003a94:	e283302a 	add	r3, r3, #42	; 0x2a
80003a98:	e1a00002 	mov	r0, r2
80003a9c:	e1a01003 	mov	r1, r3
80003aa0:	e51b2008 	ldr	r2, [fp, #-8]
80003aa4:	e3a03001 	mov	r3, #1
80003aa8:	eb001345 	bl	800087c4 <disk_write>
80003aac:	e1a03000 	mov	r3, r0
80003ab0:	e3530000 	cmp	r3, #0
80003ab4:	0a000001 	beq	80003ac0 <move_window+0x78>
                return FALSE;
80003ab8:	e3a03000 	mov	r3, #0
80003abc:	ea000037 	b	80003ba0 <move_window+0x158>
            fs->winflag = 0;
80003ac0:	e51b3010 	ldr	r3, [fp, #-16]
80003ac4:	e3a02000 	mov	r2, #0
80003ac8:	e5c32028 	strb	r2, [r3, #40]	; 0x28
            if (wsect < (fs->fatbase + fs->sects_fat)) {    /* In FAT area */
80003acc:	e51b3010 	ldr	r3, [fp, #-16]
80003ad0:	e5932010 	ldr	r2, [r3, #16]
80003ad4:	e51b3010 	ldr	r3, [fp, #-16]
80003ad8:	e5933008 	ldr	r3, [r3, #8]
80003adc:	e0822003 	add	r2, r2, r3
80003ae0:	e51b3008 	ldr	r3, [fp, #-8]
80003ae4:	e1520003 	cmp	r2, r3
80003ae8:	9a000017 	bls	80003b4c <move_window+0x104>
                for (n = fs->n_fats; n >= 2; n--) {    /* Refrect the change to FAT copy */
80003aec:	e51b3010 	ldr	r3, [fp, #-16]
80003af0:	e5d33026 	ldrb	r3, [r3, #38]	; 0x26
80003af4:	e54b3009 	strb	r3, [fp, #-9]
80003af8:	ea000010 	b	80003b40 <move_window+0xf8>
                    wsect += fs->sects_fat;
80003afc:	e51b3010 	ldr	r3, [fp, #-16]
80003b00:	e5933008 	ldr	r3, [r3, #8]
80003b04:	e51b2008 	ldr	r2, [fp, #-8]
80003b08:	e0823003 	add	r3, r2, r3
80003b0c:	e50b3008 	str	r3, [fp, #-8]
                    disk_write(fs->drive, fs->win, wsect, 1);
80003b10:	e51b3010 	ldr	r3, [fp, #-16]
80003b14:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
80003b18:	e51b3010 	ldr	r3, [fp, #-16]
80003b1c:	e283302a 	add	r3, r3, #42	; 0x2a
80003b20:	e1a00002 	mov	r0, r2
80003b24:	e1a01003 	mov	r1, r3
80003b28:	e51b2008 	ldr	r2, [fp, #-8]
80003b2c:	e3a03001 	mov	r3, #1
80003b30:	eb001323 	bl	800087c4 <disk_write>
        if (fs->winflag) {    /* Write back dirty window if needed */
            if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
                return FALSE;
            fs->winflag = 0;
            if (wsect < (fs->fatbase + fs->sects_fat)) {    /* In FAT area */
                for (n = fs->n_fats; n >= 2; n--) {    /* Refrect the change to FAT copy */
80003b34:	e55b3009 	ldrb	r3, [fp, #-9]
80003b38:	e2433001 	sub	r3, r3, #1
80003b3c:	e54b3009 	strb	r3, [fp, #-9]
80003b40:	e55b3009 	ldrb	r3, [fp, #-9]
80003b44:	e3530001 	cmp	r3, #1
80003b48:	8affffeb 	bhi	80003afc <move_window+0xb4>
                    disk_write(fs->drive, fs->win, wsect, 1);
                }
            }
        }
#endif
        if (sector) {
80003b4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003b50:	e3530000 	cmp	r3, #0
80003b54:	0a000010 	beq	80003b9c <move_window+0x154>
            if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
80003b58:	e51b3010 	ldr	r3, [fp, #-16]
80003b5c:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
80003b60:	e51b3010 	ldr	r3, [fp, #-16]
80003b64:	e283302a 	add	r3, r3, #42	; 0x2a
80003b68:	e1a00002 	mov	r0, r2
80003b6c:	e1a01003 	mov	r1, r3
80003b70:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80003b74:	e3a03001 	mov	r3, #1
80003b78:	eb0012f5 	bl	80008754 <disk_read>
80003b7c:	e1a03000 	mov	r3, r0
80003b80:	e3530000 	cmp	r3, #0
80003b84:	0a000001 	beq	80003b90 <move_window+0x148>
                return FALSE;
80003b88:	e3a03000 	mov	r3, #0
80003b8c:	ea000003 	b	80003ba0 <move_window+0x158>
            fs->winsect = sector;
80003b90:	e51b3010 	ldr	r3, [fp, #-16]
80003b94:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80003b98:	e5832004 	str	r2, [r3, #4]
        }
    }
    return TRUE;
80003b9c:	e3a03001 	mov	r3, #1
}
80003ba0:	e1a00003 	mov	r0, r3
80003ba4:	e24bd004 	sub	sp, fp, #4
80003ba8:	e8bd4800 	pop	{fp, lr}
80003bac:	e12fff1e 	bx	lr

80003bb0 <sync>:
#if !_FS_READONLY
static
FRESULT sync (            /* FR_OK: successful, FR_RW_ERROR: failed */
    FATFS *fs            /* File system object */
)
{
80003bb0:	e92d4800 	push	{fp, lr}
80003bb4:	e28db004 	add	fp, sp, #4
80003bb8:	e24dd008 	sub	sp, sp, #8
80003bbc:	e50b0008 	str	r0, [fp, #-8]
    fs->winflag = 1;
80003bc0:	e51b3008 	ldr	r3, [fp, #-8]
80003bc4:	e3a02001 	mov	r2, #1
80003bc8:	e5c32028 	strb	r2, [r3, #40]	; 0x28
    if (!move_window(fs, 0)) return FR_RW_ERROR;
80003bcc:	e51b0008 	ldr	r0, [fp, #-8]
80003bd0:	e3a01000 	mov	r1, #0
80003bd4:	ebffff9b 	bl	80003a48 <move_window>
80003bd8:	e1a03000 	mov	r3, r0
80003bdc:	e3530000 	cmp	r3, #0
80003be0:	1a000001 	bne	80003bec <sync+0x3c>
80003be4:	e3a03008 	mov	r3, #8
80003be8:	ea00000b 	b	80003c1c <sync+0x6c>
        ST_DWORD(&fs->win[FSI_Nxt_Free], fs->last_clust);
        disk_write(0, fs->win, fs->fsi_sector, 1);
        fs->fsi_flag = 0;
    }
#endif
    if (disk_ioctl(fs->drive, CTRL_SYNC, NULL) != RES_OK) return FR_RW_ERROR;
80003bec:	e51b3008 	ldr	r3, [fp, #-8]
80003bf0:	e5d33027 	ldrb	r3, [r3, #39]	; 0x27
80003bf4:	e1a00003 	mov	r0, r3
80003bf8:	e3a01003 	mov	r1, #3
80003bfc:	e3a02000 	mov	r2, #0
80003c00:	eb00130b 	bl	80008834 <disk_ioctl>
80003c04:	e1a03000 	mov	r3, r0
80003c08:	e3530000 	cmp	r3, #0
80003c0c:	0a000001 	beq	80003c18 <sync+0x68>
80003c10:	e3a03008 	mov	r3, #8
80003c14:	ea000000 	b	80003c1c <sync+0x6c>
    return FR_OK;
80003c18:	e3a03000 	mov	r3, #0
}
80003c1c:	e1a00003 	mov	r0, r3
80003c20:	e24bd004 	sub	sp, fp, #4
80003c24:	e8bd4800 	pop	{fp, lr}
80003c28:	e12fff1e 	bx	lr

80003c2c <get_cluster>:
static
DWORD get_cluster (        /* 0,>=2: successful, 1: failed */
    FATFS *fs,            /* File system object */
    DWORD clust            /* Cluster# to get the link information */
)
{
80003c2c:	e92d4800 	push	{fp, lr}
80003c30:	e28db004 	add	fp, sp, #4
80003c34:	e24dd010 	sub	sp, sp, #16
80003c38:	e50b0010 	str	r0, [fp, #-16]
80003c3c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    WORD wc, bc;
    DWORD fatsect;


    if (clust >= 2 && clust < fs->max_clust) {        /* Valid cluster# */
80003c40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003c44:	e3530001 	cmp	r3, #1
80003c48:	9a0000ca 	bls	80003f78 <get_cluster+0x34c>
80003c4c:	e51b3010 	ldr	r3, [fp, #-16]
80003c50:	e593200c 	ldr	r2, [r3, #12]
80003c54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003c58:	e1520003 	cmp	r2, r3
80003c5c:	9a0000c5 	bls	80003f78 <get_cluster+0x34c>
        fatsect = fs->fatbase;
80003c60:	e51b3010 	ldr	r3, [fp, #-16]
80003c64:	e5933010 	ldr	r3, [r3, #16]
80003c68:	e50b3008 	str	r3, [fp, #-8]
        switch (fs->fs_type) {
80003c6c:	e51b3010 	ldr	r3, [fp, #-16]
80003c70:	e5d33024 	ldrb	r3, [r3, #36]	; 0x24
80003c74:	e3530002 	cmp	r3, #2
80003c78:	0a000052 	beq	80003dc8 <get_cluster+0x19c>
80003c7c:	e3530003 	cmp	r3, #3
80003c80:	0a000078 	beq	80003e68 <get_cluster+0x23c>
80003c84:	e3530001 	cmp	r3, #1
80003c88:	1a0000ba 	bne	80003f78 <get_cluster+0x34c>
        case FS_FAT12 :
            bc = (WORD)clust * 3 / 2;
80003c8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003c90:	e1a03803 	lsl	r3, r3, #16
80003c94:	e1a03823 	lsr	r3, r3, #16
80003c98:	e1a02003 	mov	r2, r3
80003c9c:	e1a03002 	mov	r3, r2
80003ca0:	e1a03083 	lsl	r3, r3, #1
80003ca4:	e0833002 	add	r3, r3, r2
80003ca8:	e1a02fa3 	lsr	r2, r3, #31
80003cac:	e0823003 	add	r3, r2, r3
80003cb0:	e1a030c3 	asr	r3, r3, #1
80003cb4:	e14b30ba 	strh	r3, [fp, #-10]
            if (!move_window(fs, fatsect + (bc / S_SIZ))) break;
80003cb8:	e15b30ba 	ldrh	r3, [fp, #-10]
80003cbc:	e1a034a3 	lsr	r3, r3, #9
80003cc0:	e1a03803 	lsl	r3, r3, #16
80003cc4:	e1a03823 	lsr	r3, r3, #16
80003cc8:	e1a02003 	mov	r2, r3
80003ccc:	e51b3008 	ldr	r3, [fp, #-8]
80003cd0:	e0823003 	add	r3, r2, r3
80003cd4:	e51b0010 	ldr	r0, [fp, #-16]
80003cd8:	e1a01003 	mov	r1, r3
80003cdc:	ebffff59 	bl	80003a48 <move_window>
80003ce0:	e1a03000 	mov	r3, r0
80003ce4:	e3530000 	cmp	r3, #0
80003ce8:	0a00009b 	beq	80003f5c <get_cluster+0x330>
            wc = fs->win[bc & (S_SIZ - 1)]; bc++;
80003cec:	e15b30ba 	ldrh	r3, [fp, #-10]
80003cf0:	e1a03b83 	lsl	r3, r3, #23
80003cf4:	e1a03ba3 	lsr	r3, r3, #23
80003cf8:	e51b1010 	ldr	r1, [fp, #-16]
80003cfc:	e3a02028 	mov	r2, #40	; 0x28
80003d00:	e0813003 	add	r3, r1, r3
80003d04:	e0833002 	add	r3, r3, r2
80003d08:	e5d33002 	ldrb	r3, [r3, #2]
80003d0c:	e14b30bc 	strh	r3, [fp, #-12]
80003d10:	e15b30ba 	ldrh	r3, [fp, #-10]
80003d14:	e2833001 	add	r3, r3, #1
80003d18:	e14b30ba 	strh	r3, [fp, #-10]
            if (!move_window(fs, fatsect + (bc / S_SIZ))) break;
80003d1c:	e15b30ba 	ldrh	r3, [fp, #-10]
80003d20:	e1a034a3 	lsr	r3, r3, #9
80003d24:	e1a03803 	lsl	r3, r3, #16
80003d28:	e1a03823 	lsr	r3, r3, #16
80003d2c:	e1a02003 	mov	r2, r3
80003d30:	e51b3008 	ldr	r3, [fp, #-8]
80003d34:	e0823003 	add	r3, r2, r3
80003d38:	e51b0010 	ldr	r0, [fp, #-16]
80003d3c:	e1a01003 	mov	r1, r3
80003d40:	ebffff40 	bl	80003a48 <move_window>
80003d44:	e1a03000 	mov	r3, r0
80003d48:	e3530000 	cmp	r3, #0
80003d4c:	0a000084 	beq	80003f64 <get_cluster+0x338>
            wc |= (WORD)fs->win[bc & (S_SIZ - 1)] << 8;
80003d50:	e15b30ba 	ldrh	r3, [fp, #-10]
80003d54:	e1a03b83 	lsl	r3, r3, #23
80003d58:	e1a03ba3 	lsr	r3, r3, #23
80003d5c:	e51b1010 	ldr	r1, [fp, #-16]
80003d60:	e3a02028 	mov	r2, #40	; 0x28
80003d64:	e0813003 	add	r3, r1, r3
80003d68:	e0833002 	add	r3, r3, r2
80003d6c:	e5d33002 	ldrb	r3, [r3, #2]
80003d70:	e1a03403 	lsl	r3, r3, #8
80003d74:	e1a03803 	lsl	r3, r3, #16
80003d78:	e1a02823 	lsr	r2, r3, #16
80003d7c:	e15b30bc 	ldrh	r3, [fp, #-12]
80003d80:	e1823003 	orr	r3, r2, r3
80003d84:	e1a03803 	lsl	r3, r3, #16
80003d88:	e1a03823 	lsr	r3, r3, #16
80003d8c:	e14b30bc 	strh	r3, [fp, #-12]
            return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);
80003d90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003d94:	e2033001 	and	r3, r3, #1
80003d98:	e20330ff 	and	r3, r3, #255	; 0xff
80003d9c:	e3530000 	cmp	r3, #0
80003da0:	0a000004 	beq	80003db8 <get_cluster+0x18c>
80003da4:	e15b30bc 	ldrh	r3, [fp, #-12]
80003da8:	e1a03223 	lsr	r3, r3, #4
80003dac:	e1a03803 	lsl	r3, r3, #16
80003db0:	e1a03823 	lsr	r3, r3, #16
80003db4:	ea000002 	b	80003dc4 <get_cluster+0x198>
80003db8:	e15b30bc 	ldrh	r3, [fp, #-12]
80003dbc:	e1a03a03 	lsl	r3, r3, #20
80003dc0:	e1a03a23 	lsr	r3, r3, #20
80003dc4:	ea00006c 	b	80003f7c <get_cluster+0x350>

        case FS_FAT16 :
            if (!move_window(fs, fatsect + (clust / (S_SIZ / 2)))) break;
80003dc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003dcc:	e1a02423 	lsr	r2, r3, #8
80003dd0:	e51b3008 	ldr	r3, [fp, #-8]
80003dd4:	e0823003 	add	r3, r2, r3
80003dd8:	e51b0010 	ldr	r0, [fp, #-16]
80003ddc:	e1a01003 	mov	r1, r3
80003de0:	ebffff18 	bl	80003a48 <move_window>
80003de4:	e1a03000 	mov	r3, r0
80003de8:	e3530000 	cmp	r3, #0
80003dec:	0a00005e 	beq	80003f6c <get_cluster+0x340>
            return LD_WORD(&fs->win[((WORD)clust * 2) & (S_SIZ - 1)]);
80003df0:	e51b3010 	ldr	r3, [fp, #-16]
80003df4:	e283202a 	add	r2, r3, #42	; 0x2a
80003df8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003dfc:	e1a03803 	lsl	r3, r3, #16
80003e00:	e1a03823 	lsr	r3, r3, #16
80003e04:	e1a03083 	lsl	r3, r3, #1
80003e08:	e1a03b83 	lsl	r3, r3, #23
80003e0c:	e1a03ba3 	lsr	r3, r3, #23
80003e10:	e2833001 	add	r3, r3, #1
80003e14:	e0823003 	add	r3, r2, r3
80003e18:	e5d33000 	ldrb	r3, [r3]
80003e1c:	e1a03403 	lsl	r3, r3, #8
80003e20:	e1a03803 	lsl	r3, r3, #16
80003e24:	e1a02823 	lsr	r2, r3, #16
80003e28:	e51b3010 	ldr	r3, [fp, #-16]
80003e2c:	e283102a 	add	r1, r3, #42	; 0x2a
80003e30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003e34:	e1a03803 	lsl	r3, r3, #16
80003e38:	e1a03823 	lsr	r3, r3, #16
80003e3c:	e1a03083 	lsl	r3, r3, #1
80003e40:	e1a03b83 	lsl	r3, r3, #23
80003e44:	e1a03ba3 	lsr	r3, r3, #23
80003e48:	e0813003 	add	r3, r1, r3
80003e4c:	e5d33000 	ldrb	r3, [r3]
80003e50:	e1823003 	orr	r3, r2, r3
80003e54:	e1a03803 	lsl	r3, r3, #16
80003e58:	e1a03823 	lsr	r3, r3, #16
80003e5c:	e1a03803 	lsl	r3, r3, #16
80003e60:	e1a03823 	lsr	r3, r3, #16
80003e64:	ea000044 	b	80003f7c <get_cluster+0x350>

        case FS_FAT32 :
            if (!move_window(fs, fatsect + (clust / (S_SIZ / 4)))) break;
80003e68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003e6c:	e1a023a3 	lsr	r2, r3, #7
80003e70:	e51b3008 	ldr	r3, [fp, #-8]
80003e74:	e0823003 	add	r3, r2, r3
80003e78:	e51b0010 	ldr	r0, [fp, #-16]
80003e7c:	e1a01003 	mov	r1, r3
80003e80:	ebfffef0 	bl	80003a48 <move_window>
80003e84:	e1a03000 	mov	r3, r0
80003e88:	e3530000 	cmp	r3, #0
80003e8c:	0a000038 	beq	80003f74 <get_cluster+0x348>
            return LD_DWORD(&fs->win[((WORD)clust * 4) & (S_SIZ - 1)]) & 0x0FFFFFFF;
80003e90:	e51b3010 	ldr	r3, [fp, #-16]
80003e94:	e283202a 	add	r2, r3, #42	; 0x2a
80003e98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003e9c:	e1a03803 	lsl	r3, r3, #16
80003ea0:	e1a03823 	lsr	r3, r3, #16
80003ea4:	e1a03103 	lsl	r3, r3, #2
80003ea8:	e1a03b83 	lsl	r3, r3, #23
80003eac:	e1a03ba3 	lsr	r3, r3, #23
80003eb0:	e2833003 	add	r3, r3, #3
80003eb4:	e0823003 	add	r3, r2, r3
80003eb8:	e5d33000 	ldrb	r3, [r3]
80003ebc:	e1a02c03 	lsl	r2, r3, #24
80003ec0:	e51b3010 	ldr	r3, [fp, #-16]
80003ec4:	e283102a 	add	r1, r3, #42	; 0x2a
80003ec8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003ecc:	e1a03803 	lsl	r3, r3, #16
80003ed0:	e1a03823 	lsr	r3, r3, #16
80003ed4:	e1a03103 	lsl	r3, r3, #2
80003ed8:	e1a03b83 	lsl	r3, r3, #23
80003edc:	e1a03ba3 	lsr	r3, r3, #23
80003ee0:	e2833002 	add	r3, r3, #2
80003ee4:	e0813003 	add	r3, r1, r3
80003ee8:	e5d33000 	ldrb	r3, [r3]
80003eec:	e1a03803 	lsl	r3, r3, #16
80003ef0:	e1822003 	orr	r2, r2, r3
80003ef4:	e51b3010 	ldr	r3, [fp, #-16]
80003ef8:	e283102a 	add	r1, r3, #42	; 0x2a
80003efc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003f00:	e1a03803 	lsl	r3, r3, #16
80003f04:	e1a03823 	lsr	r3, r3, #16
80003f08:	e1a03103 	lsl	r3, r3, #2
80003f0c:	e1a03b83 	lsl	r3, r3, #23
80003f10:	e1a03ba3 	lsr	r3, r3, #23
80003f14:	e2833001 	add	r3, r3, #1
80003f18:	e0813003 	add	r3, r1, r3
80003f1c:	e5d33000 	ldrb	r3, [r3]
80003f20:	e1a03403 	lsl	r3, r3, #8
80003f24:	e1822003 	orr	r2, r2, r3
80003f28:	e51b3010 	ldr	r3, [fp, #-16]
80003f2c:	e283102a 	add	r1, r3, #42	; 0x2a
80003f30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80003f34:	e1a03803 	lsl	r3, r3, #16
80003f38:	e1a03823 	lsr	r3, r3, #16
80003f3c:	e1a03103 	lsl	r3, r3, #2
80003f40:	e1a03b83 	lsl	r3, r3, #23
80003f44:	e1a03ba3 	lsr	r3, r3, #23
80003f48:	e0813003 	add	r3, r1, r3
80003f4c:	e5d33000 	ldrb	r3, [r3]
80003f50:	e1823003 	orr	r3, r2, r3
80003f54:	e3c3320f 	bic	r3, r3, #-268435456	; 0xf0000000
80003f58:	ea000007 	b	80003f7c <get_cluster+0x350>
    if (clust >= 2 && clust < fs->max_clust) {        /* Valid cluster# */
        fatsect = fs->fatbase;
        switch (fs->fs_type) {
        case FS_FAT12 :
            bc = (WORD)clust * 3 / 2;
            if (!move_window(fs, fatsect + (bc / S_SIZ))) break;
80003f5c:	e1a00000 	nop			; (mov r0, r0)
80003f60:	ea000004 	b	80003f78 <get_cluster+0x34c>
            wc = fs->win[bc & (S_SIZ - 1)]; bc++;
            if (!move_window(fs, fatsect + (bc / S_SIZ))) break;
80003f64:	e1a00000 	nop			; (mov r0, r0)
80003f68:	ea000002 	b	80003f78 <get_cluster+0x34c>
            wc |= (WORD)fs->win[bc & (S_SIZ - 1)] << 8;
            return (clust & 1) ? (wc >> 4) : (wc & 0xFFF);

        case FS_FAT16 :
            if (!move_window(fs, fatsect + (clust / (S_SIZ / 2)))) break;
80003f6c:	e1a00000 	nop			; (mov r0, r0)
80003f70:	ea000000 	b	80003f78 <get_cluster+0x34c>
            return LD_WORD(&fs->win[((WORD)clust * 2) & (S_SIZ - 1)]);

        case FS_FAT32 :
            if (!move_window(fs, fatsect + (clust / (S_SIZ / 4)))) break;
80003f74:	e1a00000 	nop			; (mov r0, r0)
            return LD_DWORD(&fs->win[((WORD)clust * 4) & (S_SIZ - 1)]) & 0x0FFFFFFF;
        }
    }

    return 1;    /* There is no cluster information, or an error occured */
80003f78:	e3a03001 	mov	r3, #1
}
80003f7c:	e1a00003 	mov	r0, r3
80003f80:	e24bd004 	sub	sp, fp, #4
80003f84:	e8bd4800 	pop	{fp, lr}
80003f88:	e12fff1e 	bx	lr

80003f8c <put_cluster>:
BOOL put_cluster (        /* TRUE: successful, FALSE: failed */
    FATFS *fs,            /* File system object */
    DWORD clust,        /* Cluster# to change */
    DWORD val            /* New value to mark the cluster */
)
{
80003f8c:	e92d4800 	push	{fp, lr}
80003f90:	e28db004 	add	fp, sp, #4
80003f94:	e24dd020 	sub	sp, sp, #32
80003f98:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
80003f9c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
80003fa0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    WORD bc;
    BYTE *p;
    DWORD fatsect;


    fatsect = fs->fatbase;
80003fa4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80003fa8:	e5933010 	ldr	r3, [r3, #16]
80003fac:	e50b3008 	str	r3, [fp, #-8]
    switch (fs->fs_type) {
80003fb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80003fb4:	e5d33024 	ldrb	r3, [r3, #36]	; 0x24
80003fb8:	e3530002 	cmp	r3, #2
80003fbc:	0a00006f 	beq	80004180 <put_cluster+0x1f4>
80003fc0:	e3530003 	cmp	r3, #3
80003fc4:	0a000098 	beq	8000422c <put_cluster+0x2a0>
80003fc8:	e3530001 	cmp	r3, #1
80003fcc:	1a0000dd 	bne	80004348 <put_cluster+0x3bc>
    case FS_FAT12 :
        bc = (WORD)clust * 3 / 2;
80003fd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80003fd4:	e1a03803 	lsl	r3, r3, #16
80003fd8:	e1a03823 	lsr	r3, r3, #16
80003fdc:	e1a02003 	mov	r2, r3
80003fe0:	e1a03002 	mov	r3, r2
80003fe4:	e1a03083 	lsl	r3, r3, #1
80003fe8:	e0833002 	add	r3, r3, r2
80003fec:	e1a02fa3 	lsr	r2, r3, #31
80003ff0:	e0823003 	add	r3, r2, r3
80003ff4:	e1a030c3 	asr	r3, r3, #1
80003ff8:	e14b30ba 	strh	r3, [fp, #-10]
        if (!move_window(fs, fatsect + (bc / S_SIZ))) return FALSE;
80003ffc:	e15b30ba 	ldrh	r3, [fp, #-10]
80004000:	e1a034a3 	lsr	r3, r3, #9
80004004:	e1a03803 	lsl	r3, r3, #16
80004008:	e1a03823 	lsr	r3, r3, #16
8000400c:	e1a02003 	mov	r2, r3
80004010:	e51b3008 	ldr	r3, [fp, #-8]
80004014:	e0823003 	add	r3, r2, r3
80004018:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
8000401c:	e1a01003 	mov	r1, r3
80004020:	ebfffe88 	bl	80003a48 <move_window>
80004024:	e1a03000 	mov	r3, r0
80004028:	e3530000 	cmp	r3, #0
8000402c:	1a000001 	bne	80004038 <put_cluster+0xac>
80004030:	e3a03000 	mov	r3, #0
80004034:	ea0000c9 	b	80004360 <put_cluster+0x3d4>
        p = &fs->win[bc & (S_SIZ - 1)];
80004038:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
8000403c:	e283202a 	add	r2, r3, #42	; 0x2a
80004040:	e15b30ba 	ldrh	r3, [fp, #-10]
80004044:	e1a03b83 	lsl	r3, r3, #23
80004048:	e1a03ba3 	lsr	r3, r3, #23
8000404c:	e0823003 	add	r3, r2, r3
80004050:	e50b3010 	str	r3, [fp, #-16]
        *p = (clust & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
80004054:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004058:	e2033001 	and	r3, r3, #1
8000405c:	e20330ff 	and	r3, r3, #255	; 0xff
80004060:	e3530000 	cmp	r3, #0
80004064:	0a00000c 	beq	8000409c <put_cluster+0x110>
80004068:	e51b3010 	ldr	r3, [fp, #-16]
8000406c:	e5d33000 	ldrb	r3, [r3]
80004070:	e20330ff 	and	r3, r3, #255	; 0xff
80004074:	e203300f 	and	r3, r3, #15
80004078:	e20320ff 	and	r2, r3, #255	; 0xff
8000407c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80004080:	e20330ff 	and	r3, r3, #255	; 0xff
80004084:	e1a03203 	lsl	r3, r3, #4
80004088:	e20330ff 	and	r3, r3, #255	; 0xff
8000408c:	e1823003 	orr	r3, r2, r3
80004090:	e20330ff 	and	r3, r3, #255	; 0xff
80004094:	e20330ff 	and	r3, r3, #255	; 0xff
80004098:	ea000001 	b	800040a4 <put_cluster+0x118>
8000409c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800040a0:	e20330ff 	and	r3, r3, #255	; 0xff
800040a4:	e51b2010 	ldr	r2, [fp, #-16]
800040a8:	e5c23000 	strb	r3, [r2]
        bc++;
800040ac:	e15b30ba 	ldrh	r3, [fp, #-10]
800040b0:	e2833001 	add	r3, r3, #1
800040b4:	e14b30ba 	strh	r3, [fp, #-10]
        fs->winflag = 1;
800040b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800040bc:	e3a02001 	mov	r2, #1
800040c0:	e5c32028 	strb	r2, [r3, #40]	; 0x28
        if (!move_window(fs, fatsect + (bc / S_SIZ))) return FALSE;
800040c4:	e15b30ba 	ldrh	r3, [fp, #-10]
800040c8:	e1a034a3 	lsr	r3, r3, #9
800040cc:	e1a03803 	lsl	r3, r3, #16
800040d0:	e1a03823 	lsr	r3, r3, #16
800040d4:	e1a02003 	mov	r2, r3
800040d8:	e51b3008 	ldr	r3, [fp, #-8]
800040dc:	e0823003 	add	r3, r2, r3
800040e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
800040e4:	e1a01003 	mov	r1, r3
800040e8:	ebfffe56 	bl	80003a48 <move_window>
800040ec:	e1a03000 	mov	r3, r0
800040f0:	e3530000 	cmp	r3, #0
800040f4:	1a000001 	bne	80004100 <put_cluster+0x174>
800040f8:	e3a03000 	mov	r3, #0
800040fc:	ea000097 	b	80004360 <put_cluster+0x3d4>
        p = &fs->win[bc & (S_SIZ - 1)];
80004100:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004104:	e283202a 	add	r2, r3, #42	; 0x2a
80004108:	e15b30ba 	ldrh	r3, [fp, #-10]
8000410c:	e1a03b83 	lsl	r3, r3, #23
80004110:	e1a03ba3 	lsr	r3, r3, #23
80004114:	e0823003 	add	r3, r2, r3
80004118:	e50b3010 	str	r3, [fp, #-16]
        *p = (clust & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
8000411c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004120:	e2033001 	and	r3, r3, #1
80004124:	e20330ff 	and	r3, r3, #255	; 0xff
80004128:	e3530000 	cmp	r3, #0
8000412c:	0a000003 	beq	80004140 <put_cluster+0x1b4>
80004130:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80004134:	e1a03223 	lsr	r3, r3, #4
80004138:	e20330ff 	and	r3, r3, #255	; 0xff
8000413c:	ea00000c 	b	80004174 <put_cluster+0x1e8>
80004140:	e51b3010 	ldr	r3, [fp, #-16]
80004144:	e5d33000 	ldrb	r3, [r3]
80004148:	e20330ff 	and	r3, r3, #255	; 0xff
8000414c:	e3c3300f 	bic	r3, r3, #15
80004150:	e20320ff 	and	r2, r3, #255	; 0xff
80004154:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80004158:	e1a03423 	lsr	r3, r3, #8
8000415c:	e20330ff 	and	r3, r3, #255	; 0xff
80004160:	e203300f 	and	r3, r3, #15
80004164:	e20330ff 	and	r3, r3, #255	; 0xff
80004168:	e1823003 	orr	r3, r2, r3
8000416c:	e20330ff 	and	r3, r3, #255	; 0xff
80004170:	e20330ff 	and	r3, r3, #255	; 0xff
80004174:	e51b2010 	ldr	r2, [fp, #-16]
80004178:	e5c23000 	strb	r3, [r2]
        break;
8000417c:	ea000073 	b	80004350 <put_cluster+0x3c4>

    case FS_FAT16 :
        if (!move_window(fs, fatsect + (clust / (S_SIZ / 2)))) return FALSE;
80004180:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004184:	e1a02423 	lsr	r2, r3, #8
80004188:	e51b3008 	ldr	r3, [fp, #-8]
8000418c:	e0823003 	add	r3, r2, r3
80004190:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
80004194:	e1a01003 	mov	r1, r3
80004198:	ebfffe2a 	bl	80003a48 <move_window>
8000419c:	e1a03000 	mov	r3, r0
800041a0:	e3530000 	cmp	r3, #0
800041a4:	1a000001 	bne	800041b0 <put_cluster+0x224>
800041a8:	e3a03000 	mov	r3, #0
800041ac:	ea00006b 	b	80004360 <put_cluster+0x3d4>
        ST_WORD(&fs->win[((WORD)clust * 2) & (S_SIZ - 1)], (WORD)val);
800041b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800041b4:	e283202a 	add	r2, r3, #42	; 0x2a
800041b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800041bc:	e1a03803 	lsl	r3, r3, #16
800041c0:	e1a03823 	lsr	r3, r3, #16
800041c4:	e1a03083 	lsl	r3, r3, #1
800041c8:	e1a03b83 	lsl	r3, r3, #23
800041cc:	e1a03ba3 	lsr	r3, r3, #23
800041d0:	e0823003 	add	r3, r2, r3
800041d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
800041d8:	e20220ff 	and	r2, r2, #255	; 0xff
800041dc:	e5c32000 	strb	r2, [r3]
800041e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800041e4:	e283202a 	add	r2, r3, #42	; 0x2a
800041e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800041ec:	e1a03803 	lsl	r3, r3, #16
800041f0:	e1a03823 	lsr	r3, r3, #16
800041f4:	e1a03083 	lsl	r3, r3, #1
800041f8:	e1a03b83 	lsl	r3, r3, #23
800041fc:	e1a03ba3 	lsr	r3, r3, #23
80004200:	e2833001 	add	r3, r3, #1
80004204:	e0823003 	add	r3, r2, r3
80004208:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
8000420c:	e1a02802 	lsl	r2, r2, #16
80004210:	e1a02822 	lsr	r2, r2, #16
80004214:	e1a02422 	lsr	r2, r2, #8
80004218:	e1a02802 	lsl	r2, r2, #16
8000421c:	e1a02822 	lsr	r2, r2, #16
80004220:	e20220ff 	and	r2, r2, #255	; 0xff
80004224:	e5c32000 	strb	r2, [r3]
        break;
80004228:	ea000048 	b	80004350 <put_cluster+0x3c4>

    case FS_FAT32 :
        if (!move_window(fs, fatsect + (clust / (S_SIZ / 4)))) return FALSE;
8000422c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004230:	e1a023a3 	lsr	r2, r3, #7
80004234:	e51b3008 	ldr	r3, [fp, #-8]
80004238:	e0823003 	add	r3, r2, r3
8000423c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
80004240:	e1a01003 	mov	r1, r3
80004244:	ebfffdff 	bl	80003a48 <move_window>
80004248:	e1a03000 	mov	r3, r0
8000424c:	e3530000 	cmp	r3, #0
80004250:	1a000001 	bne	8000425c <put_cluster+0x2d0>
80004254:	e3a03000 	mov	r3, #0
80004258:	ea000040 	b	80004360 <put_cluster+0x3d4>
        ST_DWORD(&fs->win[((WORD)clust * 4) & (S_SIZ - 1)], val);
8000425c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004260:	e283202a 	add	r2, r3, #42	; 0x2a
80004264:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004268:	e1a03803 	lsl	r3, r3, #16
8000426c:	e1a03823 	lsr	r3, r3, #16
80004270:	e1a03103 	lsl	r3, r3, #2
80004274:	e1a03b83 	lsl	r3, r3, #23
80004278:	e1a03ba3 	lsr	r3, r3, #23
8000427c:	e0823003 	add	r3, r2, r3
80004280:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80004284:	e20220ff 	and	r2, r2, #255	; 0xff
80004288:	e5c32000 	strb	r2, [r3]
8000428c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004290:	e283202a 	add	r2, r3, #42	; 0x2a
80004294:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004298:	e1a03803 	lsl	r3, r3, #16
8000429c:	e1a03823 	lsr	r3, r3, #16
800042a0:	e1a03103 	lsl	r3, r3, #2
800042a4:	e1a03b83 	lsl	r3, r3, #23
800042a8:	e1a03ba3 	lsr	r3, r3, #23
800042ac:	e2833001 	add	r3, r3, #1
800042b0:	e0823003 	add	r3, r2, r3
800042b4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
800042b8:	e1a02802 	lsl	r2, r2, #16
800042bc:	e1a02822 	lsr	r2, r2, #16
800042c0:	e1a02422 	lsr	r2, r2, #8
800042c4:	e1a02802 	lsl	r2, r2, #16
800042c8:	e1a02822 	lsr	r2, r2, #16
800042cc:	e20220ff 	and	r2, r2, #255	; 0xff
800042d0:	e5c32000 	strb	r2, [r3]
800042d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800042d8:	e283202a 	add	r2, r3, #42	; 0x2a
800042dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800042e0:	e1a03803 	lsl	r3, r3, #16
800042e4:	e1a03823 	lsr	r3, r3, #16
800042e8:	e1a03103 	lsl	r3, r3, #2
800042ec:	e1a03b83 	lsl	r3, r3, #23
800042f0:	e1a03ba3 	lsr	r3, r3, #23
800042f4:	e2833002 	add	r3, r3, #2
800042f8:	e0823003 	add	r3, r2, r3
800042fc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80004300:	e1a02822 	lsr	r2, r2, #16
80004304:	e20220ff 	and	r2, r2, #255	; 0xff
80004308:	e5c32000 	strb	r2, [r3]
8000430c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004310:	e283202a 	add	r2, r3, #42	; 0x2a
80004314:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004318:	e1a03803 	lsl	r3, r3, #16
8000431c:	e1a03823 	lsr	r3, r3, #16
80004320:	e1a03103 	lsl	r3, r3, #2
80004324:	e1a03b83 	lsl	r3, r3, #23
80004328:	e1a03ba3 	lsr	r3, r3, #23
8000432c:	e2833003 	add	r3, r3, #3
80004330:	e0823003 	add	r3, r2, r3
80004334:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80004338:	e1a02c22 	lsr	r2, r2, #24
8000433c:	e20220ff 	and	r2, r2, #255	; 0xff
80004340:	e5c32000 	strb	r2, [r3]
        break;
80004344:	ea000001 	b	80004350 <put_cluster+0x3c4>

    default :
        return FALSE;
80004348:	e3a03000 	mov	r3, #0
8000434c:	ea000003 	b	80004360 <put_cluster+0x3d4>
    }
    fs->winflag = 1;
80004350:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004354:	e3a02001 	mov	r2, #1
80004358:	e5c32028 	strb	r2, [r3, #40]	; 0x28
    return TRUE;
8000435c:	e3a03001 	mov	r3, #1
}
80004360:	e1a00003 	mov	r0, r3
80004364:	e24bd004 	sub	sp, fp, #4
80004368:	e8bd4800 	pop	{fp, lr}
8000436c:	e12fff1e 	bx	lr

80004370 <remove_chain>:
static
BOOL remove_chain (        /* TRUE: successful, FALSE: failed */
    FATFS *fs,            /* File system object */
    DWORD clust            /* Cluster# to remove chain from */
)
{
80004370:	e92d4800 	push	{fp, lr}
80004374:	e28db004 	add	fp, sp, #4
80004378:	e24dd010 	sub	sp, sp, #16
8000437c:	e50b0010 	str	r0, [fp, #-16]
80004380:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    DWORD nxt;


    while (clust >= 2 && clust < fs->max_clust) {
80004384:	ea00001c 	b	800043fc <remove_chain+0x8c>
        nxt = get_cluster(fs, clust);
80004388:	e51b0010 	ldr	r0, [fp, #-16]
8000438c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
80004390:	ebfffe25 	bl	80003c2c <get_cluster>
80004394:	e50b0008 	str	r0, [fp, #-8]
        if (nxt == 1) return FALSE;
80004398:	e51b3008 	ldr	r3, [fp, #-8]
8000439c:	e3530001 	cmp	r3, #1
800043a0:	1a000001 	bne	800043ac <remove_chain+0x3c>
800043a4:	e3a03000 	mov	r3, #0
800043a8:	ea00001c 	b	80004420 <remove_chain+0xb0>
        if (!put_cluster(fs, clust, 0)) return FALSE;
800043ac:	e51b0010 	ldr	r0, [fp, #-16]
800043b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
800043b4:	e3a02000 	mov	r2, #0
800043b8:	ebfffef3 	bl	80003f8c <put_cluster>
800043bc:	e1a03000 	mov	r3, r0
800043c0:	e3530000 	cmp	r3, #0
800043c4:	1a000001 	bne	800043d0 <remove_chain+0x60>
800043c8:	e3a03000 	mov	r3, #0
800043cc:	ea000013 	b	80004420 <remove_chain+0xb0>
        if (fs->free_clust != 0xFFFFFFFF) {
800043d0:	e51b3010 	ldr	r3, [fp, #-16]
800043d4:	e5933020 	ldr	r3, [r3, #32]
800043d8:	e3730001 	cmn	r3, #1
800043dc:	0a000004 	beq	800043f4 <remove_chain+0x84>
            fs->free_clust++;
800043e0:	e51b3010 	ldr	r3, [fp, #-16]
800043e4:	e5933020 	ldr	r3, [r3, #32]
800043e8:	e2832001 	add	r2, r3, #1
800043ec:	e51b3010 	ldr	r3, [fp, #-16]
800043f0:	e5832020 	str	r2, [r3, #32]
#if _USE_FSINFO
            fs->fsi_flag = 1;
#endif
        }
        clust = nxt;
800043f4:	e51b3008 	ldr	r3, [fp, #-8]
800043f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
)
{
    DWORD nxt;


    while (clust >= 2 && clust < fs->max_clust) {
800043fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80004400:	e3530001 	cmp	r3, #1
80004404:	9a000004 	bls	8000441c <remove_chain+0xac>
80004408:	e51b3010 	ldr	r3, [fp, #-16]
8000440c:	e593200c 	ldr	r2, [r3, #12]
80004410:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80004414:	e1520003 	cmp	r2, r3
80004418:	8affffda 	bhi	80004388 <remove_chain+0x18>
            fs->fsi_flag = 1;
#endif
        }
        clust = nxt;
    }
    return TRUE;
8000441c:	e3a03001 	mov	r3, #1
}
80004420:	e1a00003 	mov	r0, r3
80004424:	e24bd004 	sub	sp, fp, #4
80004428:	e8bd4800 	pop	{fp, lr}
8000442c:	e12fff1e 	bx	lr

80004430 <create_chain>:
static
DWORD create_chain (    /* 0: no free cluster, 1: error, >=2: new cluster number */
    FATFS *fs,            /* File system object */
    DWORD clust            /* Cluster# to stretch, 0 means create new */
)
{
80004430:	e92d4800 	push	{fp, lr}
80004434:	e28db004 	add	fp, sp, #4
80004438:	e24dd018 	sub	sp, sp, #24
8000443c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
80004440:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    DWORD cstat, ncl, scl, mcl = fs->max_clust;
80004444:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004448:	e593300c 	ldr	r3, [r3, #12]
8000444c:	e50b3010 	str	r3, [fp, #-16]


    if (clust == 0) {        /* Create new chain */
80004450:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004454:	e3530000 	cmp	r3, #0
80004458:	1a00000c 	bne	80004490 <create_chain+0x60>
        scl = fs->last_clust;            /* Get suggested start point */
8000445c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004460:	e593301c 	ldr	r3, [r3, #28]
80004464:	e50b300c 	str	r3, [fp, #-12]
        if (scl == 0 || scl >= mcl) scl = 1;
80004468:	e51b300c 	ldr	r3, [fp, #-12]
8000446c:	e3530000 	cmp	r3, #0
80004470:	0a000003 	beq	80004484 <create_chain+0x54>
80004474:	e51b200c 	ldr	r2, [fp, #-12]
80004478:	e51b3010 	ldr	r3, [fp, #-16]
8000447c:	e1520003 	cmp	r2, r3
80004480:	3a000013 	bcc	800044d4 <create_chain+0xa4>
80004484:	e3a03001 	mov	r3, #1
80004488:	e50b300c 	str	r3, [fp, #-12]
8000448c:	ea000010 	b	800044d4 <create_chain+0xa4>
    }
    else {                    /* Stretch existing chain */
        cstat = get_cluster(fs, clust);    /* Check the cluster status */
80004490:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
80004494:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
80004498:	ebfffde3 	bl	80003c2c <get_cluster>
8000449c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (cstat < 2) return 1;        /* It is an invalid cluster */
800044a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800044a4:	e3530001 	cmp	r3, #1
800044a8:	8a000001 	bhi	800044b4 <create_chain+0x84>
800044ac:	e3a03001 	mov	r3, #1
800044b0:	ea00004f 	b	800045f4 <create_chain+0x1c4>
        if (cstat < mcl) return cstat;    /* It is already followed by next cluster */
800044b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
800044b8:	e51b3010 	ldr	r3, [fp, #-16]
800044bc:	e1520003 	cmp	r2, r3
800044c0:	2a000001 	bcs	800044cc <create_chain+0x9c>
800044c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800044c8:	ea000049 	b	800045f4 <create_chain+0x1c4>
        scl = clust;
800044cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800044d0:	e50b300c 	str	r3, [fp, #-12]
    }

    ncl = scl;                /* Start cluster */
800044d4:	e51b300c 	ldr	r3, [fp, #-12]
800044d8:	e50b3008 	str	r3, [fp, #-8]
800044dc:	ea000000 	b	800044e4 <create_chain+0xb4>
        }
        cstat = get_cluster(fs, ncl);    /* Get the cluster status */
        if (cstat == 0) break;            /* Found a free cluster */
        if (cstat == 1) return 1;        /* Any error occured */
        if (ncl == scl) return 0;        /* No free custer */
    }
800044e0:	e1a00000 	nop			; (mov r0, r0)
        scl = clust;
    }

    ncl = scl;                /* Start cluster */
    for (;;) {
        ncl++;                            /* Next cluster */
800044e4:	e51b3008 	ldr	r3, [fp, #-8]
800044e8:	e2833001 	add	r3, r3, #1
800044ec:	e50b3008 	str	r3, [fp, #-8]
        if (ncl >= mcl) {                /* Wrap around */
800044f0:	e51b2008 	ldr	r2, [fp, #-8]
800044f4:	e51b3010 	ldr	r3, [fp, #-16]
800044f8:	e1520003 	cmp	r2, r3
800044fc:	3a000007 	bcc	80004520 <create_chain+0xf0>
            ncl = 2;
80004500:	e3a03002 	mov	r3, #2
80004504:	e50b3008 	str	r3, [fp, #-8]
            if (ncl > scl) return 0;    /* No free custer */
80004508:	e51b2008 	ldr	r2, [fp, #-8]
8000450c:	e51b300c 	ldr	r3, [fp, #-12]
80004510:	e1520003 	cmp	r2, r3
80004514:	9a000001 	bls	80004520 <create_chain+0xf0>
80004518:	e3a03000 	mov	r3, #0
8000451c:	ea000034 	b	800045f4 <create_chain+0x1c4>
        }
        cstat = get_cluster(fs, ncl);    /* Get the cluster status */
80004520:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
80004524:	e51b1008 	ldr	r1, [fp, #-8]
80004528:	ebfffdbf 	bl	80003c2c <get_cluster>
8000452c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (cstat == 0) break;            /* Found a free cluster */
80004530:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80004534:	e3530000 	cmp	r3, #0
80004538:	1a000007 	bne	8000455c <create_chain+0x12c>
        if (cstat == 1) return 1;        /* Any error occured */
        if (ncl == scl) return 0;        /* No free custer */
    }

    if (!put_cluster(fs, ncl, 0x0FFFFFFF)) return 1;        /* Mark the new cluster "in use" */
8000453c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
80004540:	e51b1008 	ldr	r1, [fp, #-8]
80004544:	e3e0220f 	mvn	r2, #-268435456	; 0xf0000000
80004548:	ebfffe8f 	bl	80003f8c <put_cluster>
8000454c:	e1a03000 	mov	r3, r0
80004550:	e3530000 	cmp	r3, #0
80004554:	0a00000b 	beq	80004588 <create_chain+0x158>
80004558:	ea00000c 	b	80004590 <create_chain+0x160>
            ncl = 2;
            if (ncl > scl) return 0;    /* No free custer */
        }
        cstat = get_cluster(fs, ncl);    /* Get the cluster status */
        if (cstat == 0) break;            /* Found a free cluster */
        if (cstat == 1) return 1;        /* Any error occured */
8000455c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80004560:	e3530001 	cmp	r3, #1
80004564:	1a000001 	bne	80004570 <create_chain+0x140>
80004568:	e3a03001 	mov	r3, #1
8000456c:	ea000020 	b	800045f4 <create_chain+0x1c4>
        if (ncl == scl) return 0;        /* No free custer */
80004570:	e51b2008 	ldr	r2, [fp, #-8]
80004574:	e51b300c 	ldr	r3, [fp, #-12]
80004578:	e1520003 	cmp	r2, r3
8000457c:	1affffd7 	bne	800044e0 <create_chain+0xb0>
80004580:	e3a03000 	mov	r3, #0
80004584:	ea00001a 	b	800045f4 <create_chain+0x1c4>
    }

    if (!put_cluster(fs, ncl, 0x0FFFFFFF)) return 1;        /* Mark the new cluster "in use" */
80004588:	e3a03001 	mov	r3, #1
8000458c:	ea000018 	b	800045f4 <create_chain+0x1c4>
    if (clust && !put_cluster(fs, clust, ncl)) return 1;    /* Link it to previous one if needed */
80004590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004594:	e3530000 	cmp	r3, #0
80004598:	0a000008 	beq	800045c0 <create_chain+0x190>
8000459c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
800045a0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
800045a4:	e51b2008 	ldr	r2, [fp, #-8]
800045a8:	ebfffe77 	bl	80003f8c <put_cluster>
800045ac:	e1a03000 	mov	r3, r0
800045b0:	e3530000 	cmp	r3, #0
800045b4:	1a000001 	bne	800045c0 <create_chain+0x190>
800045b8:	e3a03001 	mov	r3, #1
800045bc:	ea00000c 	b	800045f4 <create_chain+0x1c4>

    fs->last_clust = ncl;                /* Update fsinfo */
800045c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800045c4:	e51b2008 	ldr	r2, [fp, #-8]
800045c8:	e583201c 	str	r2, [r3, #28]
    if (fs->free_clust != 0xFFFFFFFF) {
800045cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800045d0:	e5933020 	ldr	r3, [r3, #32]
800045d4:	e3730001 	cmn	r3, #1
800045d8:	0a000004 	beq	800045f0 <create_chain+0x1c0>
        fs->free_clust--;
800045dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800045e0:	e5933020 	ldr	r3, [r3, #32]
800045e4:	e2432001 	sub	r2, r3, #1
800045e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800045ec:	e5832020 	str	r2, [r3, #32]
#if _USE_FSINFO
        fs->fsi_flag = 1;
#endif
    }

    return ncl;        /* Return new cluster number */
800045f0:	e51b3008 	ldr	r3, [fp, #-8]
}
800045f4:	e1a00003 	mov	r0, r3
800045f8:	e24bd004 	sub	sp, fp, #4
800045fc:	e8bd4800 	pop	{fp, lr}
80004600:	e12fff1e 	bx	lr

80004604 <clust2sect>:
static
DWORD clust2sect (    /* !=0: sector number, 0: failed - invalid cluster# */
    FATFS *fs,        /* File system object */
    DWORD clust        /* Cluster# to be converted */
)
{
80004604:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80004608:	e28db000 	add	fp, sp, #0
8000460c:	e24dd00c 	sub	sp, sp, #12
80004610:	e50b0008 	str	r0, [fp, #-8]
80004614:	e50b100c 	str	r1, [fp, #-12]
    clust -= 2;
80004618:	e51b300c 	ldr	r3, [fp, #-12]
8000461c:	e2433002 	sub	r3, r3, #2
80004620:	e50b300c 	str	r3, [fp, #-12]
    if (clust >= (fs->max_clust - 2)) return 0;        /* Invalid cluster# */
80004624:	e51b3008 	ldr	r3, [fp, #-8]
80004628:	e593300c 	ldr	r3, [r3, #12]
8000462c:	e2432002 	sub	r2, r3, #2
80004630:	e51b300c 	ldr	r3, [fp, #-12]
80004634:	e1520003 	cmp	r2, r3
80004638:	8a000001 	bhi	80004644 <clust2sect+0x40>
8000463c:	e3a03000 	mov	r3, #0
80004640:	ea000006 	b	80004660 <clust2sect+0x5c>
    return clust * fs->sects_clust + fs->database;
80004644:	e51b3008 	ldr	r3, [fp, #-8]
80004648:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
8000464c:	e51b200c 	ldr	r2, [fp, #-12]
80004650:	e0020293 	mul	r2, r3, r2
80004654:	e51b3008 	ldr	r3, [fp, #-8]
80004658:	e5933018 	ldr	r3, [r3, #24]
8000465c:	e0823003 	add	r3, r2, r3
}
80004660:	e1a00003 	mov	r0, r3
80004664:	e28bd000 	add	sp, fp, #0
80004668:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
8000466c:	e12fff1e 	bx	lr

80004670 <next_dir_entry>:

static
BOOL next_dir_entry (    /* TRUE: successful, FALSE: could not move next */
    DIR *dirobj            /* Pointer to directory object */
)
{
80004670:	e92d4800 	push	{fp, lr}
80004674:	e28db004 	add	fp, sp, #4
80004678:	e24dd018 	sub	sp, sp, #24
8000467c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    DWORD clust;
    WORD idx;
    FATFS *fs = dirobj->fs;
80004680:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004684:	e5933004 	ldr	r3, [r3, #4]
80004688:	e50b3008 	str	r3, [fp, #-8]


    idx = dirobj->index + 1;
8000468c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004690:	e1d330b2 	ldrh	r3, [r3, #2]
80004694:	e2833001 	add	r3, r3, #1
80004698:	e14b30ba 	strh	r3, [fp, #-10]
    if ((idx & ((S_SIZ - 1) / 32)) == 0) {        /* Table sector changed? */
8000469c:	e15b30ba 	ldrh	r3, [fp, #-10]
800046a0:	e203300f 	and	r3, r3, #15
800046a4:	e3530000 	cmp	r3, #0
800046a8:	1a000033 	bne	8000477c <next_dir_entry+0x10c>
        dirobj->sect++;            /* Next sector */
800046ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800046b0:	e5933010 	ldr	r3, [r3, #16]
800046b4:	e2832001 	add	r2, r3, #1
800046b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800046bc:	e5832010 	str	r2, [r3, #16]
        if (!dirobj->clust) {        /* In static table */
800046c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800046c4:	e593300c 	ldr	r3, [r3, #12]
800046c8:	e3530000 	cmp	r3, #0
800046cc:	1a000006 	bne	800046ec <next_dir_entry+0x7c>
            if (idx >= fs->n_rootdir) return FALSE;    /* Reached to end of table */
800046d0:	e51b3008 	ldr	r3, [fp, #-8]
800046d4:	e1d330b2 	ldrh	r3, [r3, #2]
800046d8:	e15b20ba 	ldrh	r2, [fp, #-10]
800046dc:	e1520003 	cmp	r2, r3
800046e0:	3a000025 	bcc	8000477c <next_dir_entry+0x10c>
800046e4:	e3a03000 	mov	r3, #0
800046e8:	ea000027 	b	8000478c <next_dir_entry+0x11c>
        } else {                    /* In dynamic table */
            if (((idx / (S_SIZ / 32)) & (fs->sects_clust - 1)) == 0) {    /* Cluster changed? */
800046ec:	e15b30ba 	ldrh	r3, [fp, #-10]
800046f0:	e1a03223 	lsr	r3, r3, #4
800046f4:	e1a03803 	lsl	r3, r3, #16
800046f8:	e1a03823 	lsr	r3, r3, #16
800046fc:	e1a02003 	mov	r2, r3
80004700:	e51b3008 	ldr	r3, [fp, #-8]
80004704:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
80004708:	e2433001 	sub	r3, r3, #1
8000470c:	e0023003 	and	r3, r2, r3
80004710:	e3530000 	cmp	r3, #0
80004714:	1a000018 	bne	8000477c <next_dir_entry+0x10c>
                clust = get_cluster(fs, dirobj->clust);        /* Get next cluster */
80004718:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
8000471c:	e593300c 	ldr	r3, [r3, #12]
80004720:	e51b0008 	ldr	r0, [fp, #-8]
80004724:	e1a01003 	mov	r1, r3
80004728:	ebfffd3f 	bl	80003c2c <get_cluster>
8000472c:	e50b0010 	str	r0, [fp, #-16]
                if (clust < 2 || clust >= fs->max_clust)    /* Reached to end of table */
80004730:	e51b3010 	ldr	r3, [fp, #-16]
80004734:	e3530001 	cmp	r3, #1
80004738:	9a000004 	bls	80004750 <next_dir_entry+0xe0>
8000473c:	e51b3008 	ldr	r3, [fp, #-8]
80004740:	e593200c 	ldr	r2, [r3, #12]
80004744:	e51b3010 	ldr	r3, [fp, #-16]
80004748:	e1520003 	cmp	r2, r3
8000474c:	8a000001 	bhi	80004758 <next_dir_entry+0xe8>
                    return FALSE;
80004750:	e3a03000 	mov	r3, #0
80004754:	ea00000c 	b	8000478c <next_dir_entry+0x11c>
                dirobj->clust = clust;                /* Initialize for new cluster */
80004758:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
8000475c:	e51b2010 	ldr	r2, [fp, #-16]
80004760:	e583200c 	str	r2, [r3, #12]
                dirobj->sect = clust2sect(fs, clust);
80004764:	e51b0008 	ldr	r0, [fp, #-8]
80004768:	e51b1010 	ldr	r1, [fp, #-16]
8000476c:	ebffffa4 	bl	80004604 <clust2sect>
80004770:	e1a02000 	mov	r2, r0
80004774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004778:	e5832010 	str	r2, [r3, #16]
            }
        }
    }
    dirobj->index = idx;    /* Lower 4 bit of dirobj->index indicates offset in dirobj->sect */
8000477c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004780:	e15b20ba 	ldrh	r2, [fp, #-10]
80004784:	e1c320b2 	strh	r2, [r3, #2]
    return TRUE;
80004788:	e3a03001 	mov	r3, #1
}
8000478c:	e1a00003 	mov	r0, r3
80004790:	e24bd004 	sub	sp, fp, #4
80004794:	e8bd4800 	pop	{fp, lr}
80004798:	e12fff1e 	bx	lr

8000479c <get_fileinfo>:
static
void get_fileinfo (        /* No return code */
    FILINFO *finfo,     /* Ptr to store the file information */
    const BYTE *dir        /* Ptr to the directory entry */
)
{
8000479c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
800047a0:	e28db000 	add	fp, sp, #0
800047a4:	e24dd01c 	sub	sp, sp, #28
800047a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
800047ac:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    BYTE n, c, a;
    char *p;


    p = &finfo->fname[0];
800047b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800047b4:	e2833009 	add	r3, r3, #9
800047b8:	e50b300c 	str	r3, [fp, #-12]
    a = _USE_NTFLAG ? dir[DIR_NTres] : 0;        /* NT flag */
800047bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800047c0:	e283300c 	add	r3, r3, #12
800047c4:	e5d33000 	ldrb	r3, [r3]
800047c8:	e54b300d 	strb	r3, [fp, #-13]
    for (n = 0; n < 8; n++) {    /* Convert file name (body) */
800047cc:	e3a03000 	mov	r3, #0
800047d0:	e54b3005 	strb	r3, [fp, #-5]
800047d4:	ea000022 	b	80004864 <get_fileinfo+0xc8>
        c = dir[n];
800047d8:	e55b3005 	ldrb	r3, [fp, #-5]
800047dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
800047e0:	e0823003 	add	r3, r2, r3
800047e4:	e5d33000 	ldrb	r3, [r3]
800047e8:	e54b3006 	strb	r3, [fp, #-6]
        if (c == ' ') break;
800047ec:	e55b3006 	ldrb	r3, [fp, #-6]
800047f0:	e3530020 	cmp	r3, #32
800047f4:	0a00001e 	beq	80004874 <get_fileinfo+0xd8>
        if (c == 0x05) c = 0xE5;
800047f8:	e55b3006 	ldrb	r3, [fp, #-6]
800047fc:	e3530005 	cmp	r3, #5
80004800:	1a000001 	bne	8000480c <get_fileinfo+0x70>
80004804:	e3e0301a 	mvn	r3, #26
80004808:	e54b3006 	strb	r3, [fp, #-6]
        if ((a & 0x08) && c >= 'A' && c <= 'Z') c += 0x20;
8000480c:	e55b300d 	ldrb	r3, [fp, #-13]
80004810:	e2033008 	and	r3, r3, #8
80004814:	e3530000 	cmp	r3, #0
80004818:	0a000008 	beq	80004840 <get_fileinfo+0xa4>
8000481c:	e55b3006 	ldrb	r3, [fp, #-6]
80004820:	e3530040 	cmp	r3, #64	; 0x40
80004824:	9a000005 	bls	80004840 <get_fileinfo+0xa4>
80004828:	e55b3006 	ldrb	r3, [fp, #-6]
8000482c:	e353005a 	cmp	r3, #90	; 0x5a
80004830:	8a000002 	bhi	80004840 <get_fileinfo+0xa4>
80004834:	e55b3006 	ldrb	r3, [fp, #-6]
80004838:	e2833020 	add	r3, r3, #32
8000483c:	e54b3006 	strb	r3, [fp, #-6]
        *p++ = c;
80004840:	e51b300c 	ldr	r3, [fp, #-12]
80004844:	e55b2006 	ldrb	r2, [fp, #-6]
80004848:	e5c32000 	strb	r2, [r3]
8000484c:	e51b300c 	ldr	r3, [fp, #-12]
80004850:	e2833001 	add	r3, r3, #1
80004854:	e50b300c 	str	r3, [fp, #-12]
    char *p;


    p = &finfo->fname[0];
    a = _USE_NTFLAG ? dir[DIR_NTres] : 0;        /* NT flag */
    for (n = 0; n < 8; n++) {    /* Convert file name (body) */
80004858:	e55b3005 	ldrb	r3, [fp, #-5]
8000485c:	e2833001 	add	r3, r3, #1
80004860:	e54b3005 	strb	r3, [fp, #-5]
80004864:	e55b3005 	ldrb	r3, [fp, #-5]
80004868:	e3530007 	cmp	r3, #7
8000486c:	9affffd9 	bls	800047d8 <get_fileinfo+0x3c>
80004870:	ea000000 	b	80004878 <get_fileinfo+0xdc>
        c = dir[n];
        if (c == ' ') break;
80004874:	e1a00000 	nop			; (mov r0, r0)
        if (c == 0x05) c = 0xE5;
        if ((a & 0x08) && c >= 'A' && c <= 'Z') c += 0x20;
        *p++ = c;
    }
    if (dir[8] != ' ') {        /* Convert file name (extension) */
80004878:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
8000487c:	e2833008 	add	r3, r3, #8
80004880:	e5d33000 	ldrb	r3, [r3]
80004884:	e3530020 	cmp	r3, #32
80004888:	0a00002b 	beq	8000493c <get_fileinfo+0x1a0>
        *p++ = '.';
8000488c:	e51b300c 	ldr	r3, [fp, #-12]
80004890:	e3a0202e 	mov	r2, #46	; 0x2e
80004894:	e5c32000 	strb	r2, [r3]
80004898:	e51b300c 	ldr	r3, [fp, #-12]
8000489c:	e2833001 	add	r3, r3, #1
800048a0:	e50b300c 	str	r3, [fp, #-12]
        for (n = 8; n < 11; n++) {
800048a4:	e3a03008 	mov	r3, #8
800048a8:	e54b3005 	strb	r3, [fp, #-5]
800048ac:	ea00001d 	b	80004928 <get_fileinfo+0x18c>
            c = dir[n];
800048b0:	e55b3005 	ldrb	r3, [fp, #-5]
800048b4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
800048b8:	e0823003 	add	r3, r2, r3
800048bc:	e5d33000 	ldrb	r3, [r3]
800048c0:	e54b3006 	strb	r3, [fp, #-6]
            if (c == ' ') break;
800048c4:	e55b3006 	ldrb	r3, [fp, #-6]
800048c8:	e3530020 	cmp	r3, #32
800048cc:	0a000019 	beq	80004938 <get_fileinfo+0x19c>
            if ((a & 0x10) && c >= 'A' && c <= 'Z') c += 0x20;
800048d0:	e55b300d 	ldrb	r3, [fp, #-13]
800048d4:	e2033010 	and	r3, r3, #16
800048d8:	e3530000 	cmp	r3, #0
800048dc:	0a000008 	beq	80004904 <get_fileinfo+0x168>
800048e0:	e55b3006 	ldrb	r3, [fp, #-6]
800048e4:	e3530040 	cmp	r3, #64	; 0x40
800048e8:	9a000005 	bls	80004904 <get_fileinfo+0x168>
800048ec:	e55b3006 	ldrb	r3, [fp, #-6]
800048f0:	e353005a 	cmp	r3, #90	; 0x5a
800048f4:	8a000002 	bhi	80004904 <get_fileinfo+0x168>
800048f8:	e55b3006 	ldrb	r3, [fp, #-6]
800048fc:	e2833020 	add	r3, r3, #32
80004900:	e54b3006 	strb	r3, [fp, #-6]
            *p++ = c;
80004904:	e51b300c 	ldr	r3, [fp, #-12]
80004908:	e55b2006 	ldrb	r2, [fp, #-6]
8000490c:	e5c32000 	strb	r2, [r3]
80004910:	e51b300c 	ldr	r3, [fp, #-12]
80004914:	e2833001 	add	r3, r3, #1
80004918:	e50b300c 	str	r3, [fp, #-12]
        if ((a & 0x08) && c >= 'A' && c <= 'Z') c += 0x20;
        *p++ = c;
    }
    if (dir[8] != ' ') {        /* Convert file name (extension) */
        *p++ = '.';
        for (n = 8; n < 11; n++) {
8000491c:	e55b3005 	ldrb	r3, [fp, #-5]
80004920:	e2833001 	add	r3, r3, #1
80004924:	e54b3005 	strb	r3, [fp, #-5]
80004928:	e55b3005 	ldrb	r3, [fp, #-5]
8000492c:	e353000a 	cmp	r3, #10
80004930:	9affffde 	bls	800048b0 <get_fileinfo+0x114>
80004934:	ea000000 	b	8000493c <get_fileinfo+0x1a0>
            c = dir[n];
            if (c == ' ') break;
80004938:	e1a00000 	nop			; (mov r0, r0)
            if ((a & 0x10) && c >= 'A' && c <= 'Z') c += 0x20;
            *p++ = c;
        }
    }
    *p = '\0';
8000493c:	e51b300c 	ldr	r3, [fp, #-12]
80004940:	e3a02000 	mov	r2, #0
80004944:	e5c32000 	strb	r2, [r3]

    finfo->fattrib = dir[DIR_Attr];                    /* Attribute */
80004948:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
8000494c:	e283300b 	add	r3, r3, #11
80004950:	e5d32000 	ldrb	r2, [r3]
80004954:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004958:	e5c32008 	strb	r2, [r3, #8]
    finfo->fsize = LD_DWORD(&dir[DIR_FileSize]);    /* Size */
8000495c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004960:	e283301f 	add	r3, r3, #31
80004964:	e5d33000 	ldrb	r3, [r3]
80004968:	e1a02c03 	lsl	r2, r3, #24
8000496c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004970:	e283301e 	add	r3, r3, #30
80004974:	e5d33000 	ldrb	r3, [r3]
80004978:	e1a03803 	lsl	r3, r3, #16
8000497c:	e1822003 	orr	r2, r2, r3
80004980:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004984:	e283301d 	add	r3, r3, #29
80004988:	e5d33000 	ldrb	r3, [r3]
8000498c:	e1a03403 	lsl	r3, r3, #8
80004990:	e1822003 	orr	r2, r2, r3
80004994:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004998:	e283301c 	add	r3, r3, #28
8000499c:	e5d33000 	ldrb	r3, [r3]
800049a0:	e1822003 	orr	r2, r2, r3
800049a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800049a8:	e5832000 	str	r2, [r3]
    finfo->fdate = LD_WORD(&dir[DIR_WrtDate]);        /* Date */
800049ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800049b0:	e2833019 	add	r3, r3, #25
800049b4:	e5d33000 	ldrb	r3, [r3]
800049b8:	e1a03403 	lsl	r3, r3, #8
800049bc:	e1a03803 	lsl	r3, r3, #16
800049c0:	e1a02823 	lsr	r2, r3, #16
800049c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800049c8:	e2833018 	add	r3, r3, #24
800049cc:	e5d33000 	ldrb	r3, [r3]
800049d0:	e1823003 	orr	r3, r2, r3
800049d4:	e1a03803 	lsl	r3, r3, #16
800049d8:	e1a03823 	lsr	r3, r3, #16
800049dc:	e1a03803 	lsl	r3, r3, #16
800049e0:	e1a02823 	lsr	r2, r3, #16
800049e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800049e8:	e1c320b4 	strh	r2, [r3, #4]
    finfo->ftime = LD_WORD(&dir[DIR_WrtTime]);        /* Time */
800049ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800049f0:	e2833017 	add	r3, r3, #23
800049f4:	e5d33000 	ldrb	r3, [r3]
800049f8:	e1a03403 	lsl	r3, r3, #8
800049fc:	e1a03803 	lsl	r3, r3, #16
80004a00:	e1a02823 	lsr	r2, r3, #16
80004a04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80004a08:	e2833016 	add	r3, r3, #22
80004a0c:	e5d33000 	ldrb	r3, [r3]
80004a10:	e1823003 	orr	r3, r2, r3
80004a14:	e1a03803 	lsl	r3, r3, #16
80004a18:	e1a03823 	lsr	r3, r3, #16
80004a1c:	e1a03803 	lsl	r3, r3, #16
80004a20:	e1a02823 	lsr	r2, r3, #16
80004a24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004a28:	e1c320b6 	strh	r2, [r3, #6]
}
80004a2c:	e28bd000 	add	sp, fp, #0
80004a30:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80004a34:	e12fff1e 	bx	lr

80004a38 <make_dirfile>:
static
char make_dirfile (            /* 1: error - detected an invalid format, '\0'or'/': next character */
    const char **path,        /* Pointer to the file path pointer */
    char *dirname            /* Pointer to directory name buffer {Name(8), Ext(3), NT flag(1)} */
)
{
80004a38:	e92d4800 	push	{fp, lr}
80004a3c:	e28db004 	add	fp, sp, #4
80004a40:	e24dd010 	sub	sp, sp, #16
80004a44:	e50b0010 	str	r0, [fp, #-16]
80004a48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    BYTE n, t, c, a, b;


    memset(dirname, ' ', 8+3);    /* Fill buffer with spaces */
80004a4c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
80004a50:	e3a01020 	mov	r1, #32
80004a54:	e3a0200b 	mov	r2, #11
80004a58:	eb0010c0 	bl	80008d60 <memset>
    a = 0; b = 0x18;    /* NT flag */
80004a5c:	e3a03000 	mov	r3, #0
80004a60:	e54b3008 	strb	r3, [fp, #-8]
80004a64:	e3a03018 	mov	r3, #24
80004a68:	e54b3009 	strb	r3, [fp, #-9]
    n = 0; t = 8;
80004a6c:	e3a03000 	mov	r3, #0
80004a70:	e54b3005 	strb	r3, [fp, #-5]
80004a74:	e3a03008 	mov	r3, #8
80004a78:	e54b3006 	strb	r3, [fp, #-6]
    for (;;) {
        c = *(*path)++;
80004a7c:	e51b3010 	ldr	r3, [fp, #-16]
80004a80:	e5933000 	ldr	r3, [r3]
80004a84:	e5d32000 	ldrb	r2, [r3]
80004a88:	e54b2007 	strb	r2, [fp, #-7]
80004a8c:	e2832001 	add	r2, r3, #1
80004a90:	e51b3010 	ldr	r3, [fp, #-16]
80004a94:	e5832000 	str	r2, [r3]
        if (c == '\0' || c == '/') {        /* Reached to end of str or directory separator */
80004a98:	e55b3007 	ldrb	r3, [fp, #-7]
80004a9c:	e3530000 	cmp	r3, #0
80004aa0:	0a000002 	beq	80004ab0 <make_dirfile+0x78>
80004aa4:	e55b3007 	ldrb	r3, [fp, #-7]
80004aa8:	e353002f 	cmp	r3, #47	; 0x2f
80004aac:	1a00000b 	bne	80004ae0 <make_dirfile+0xa8>
            if (n == 0) break;
80004ab0:	e55b3005 	ldrb	r3, [fp, #-5]
80004ab4:	e3530000 	cmp	r3, #0
80004ab8:	0a00008c 	beq	80004cf0 <make_dirfile+0x2b8>
            dirname[11] = _USE_NTFLAG ? (a & b) : 0;
80004abc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80004ac0:	e283300b 	add	r3, r3, #11
80004ac4:	e55b1008 	ldrb	r1, [fp, #-8]
80004ac8:	e55b2009 	ldrb	r2, [fp, #-9]
80004acc:	e0012002 	and	r2, r1, r2
80004ad0:	e20220ff 	and	r2, r2, #255	; 0xff
80004ad4:	e5c32000 	strb	r2, [r3]
            return c;
80004ad8:	e55b3007 	ldrb	r3, [fp, #-7]
80004adc:	ea000097 	b	80004d40 <make_dirfile+0x308>
        }
        if (c <= ' ' || c == 0x7F) break;        /* Reject invisible chars */
80004ae0:	e55b3007 	ldrb	r3, [fp, #-7]
80004ae4:	e3530020 	cmp	r3, #32
80004ae8:	9a000093 	bls	80004d3c <make_dirfile+0x304>
80004aec:	e55b3007 	ldrb	r3, [fp, #-7]
80004af0:	e353007f 	cmp	r3, #127	; 0x7f
80004af4:	0a000090 	beq	80004d3c <make_dirfile+0x304>
        if (c == '.') {
80004af8:	e55b3007 	ldrb	r3, [fp, #-7]
80004afc:	e353002e 	cmp	r3, #46	; 0x2e
80004b00:	1a00000f 	bne	80004b44 <make_dirfile+0x10c>
            if (!(a & 1) && n >= 1 && n <= 8) {    /* Enter extension part */
80004b04:	e55b3008 	ldrb	r3, [fp, #-8]
80004b08:	e2033001 	and	r3, r3, #1
80004b0c:	e3530000 	cmp	r3, #0
80004b10:	1a000078 	bne	80004cf8 <make_dirfile+0x2c0>
80004b14:	e55b3005 	ldrb	r3, [fp, #-5]
80004b18:	e3530000 	cmp	r3, #0
80004b1c:	0a000077 	beq	80004d00 <make_dirfile+0x2c8>
80004b20:	e55b3005 	ldrb	r3, [fp, #-5]
80004b24:	e3530008 	cmp	r3, #8
80004b28:	8a000076 	bhi	80004d08 <make_dirfile+0x2d0>
                n = 8; t = 11; continue;
80004b2c:	e3a03008 	mov	r3, #8
80004b30:	e54b3005 	strb	r3, [fp, #-5]
80004b34:	e3a0300b 	mov	r3, #11
80004b38:	e54b3006 	strb	r3, [fp, #-6]
80004b3c:	e1a00000 	nop			; (mov r0, r0)
    md_l1:
        a &= ~1;
    md_l2:
        if (n >= t) break;
        dirname[n++] = c;
    }
80004b40:	eaffffcd 	b	80004a7c <make_dirfile+0x44>
            if (!(a & 1) && n >= 1 && n <= 8) {    /* Enter extension part */
                n = 8; t = 11; continue;
            }
            break;
        }
        if (_USE_SJIS &&
80004b44:	e55b3007 	ldrb	r3, [fp, #-7]
80004b48:	e3530080 	cmp	r3, #128	; 0x80
80004b4c:	9a000002 	bls	80004b5c <make_dirfile+0x124>
            ((c >= 0x81 && c <= 0x9F) ||    /* Accept S-JIS code */
80004b50:	e55b3007 	ldrb	r3, [fp, #-7]
80004b54:	e353009f 	cmp	r3, #159	; 0x9f
80004b58:	9a000005 	bls	80004b74 <make_dirfile+0x13c>
            if (!(a & 1) && n >= 1 && n <= 8) {    /* Enter extension part */
                n = 8; t = 11; continue;
            }
            break;
        }
        if (_USE_SJIS &&
80004b5c:	e55b3007 	ldrb	r3, [fp, #-7]
80004b60:	e35300df 	cmp	r3, #223	; 0xdf
80004b64:	9a00000e 	bls	80004ba4 <make_dirfile+0x16c>
            ((c >= 0x81 && c <= 0x9F) ||    /* Accept S-JIS code */
            (c >= 0xE0 && c <= 0xFC))) {
80004b68:	e55b3007 	ldrb	r3, [fp, #-7]
80004b6c:	e35300fc 	cmp	r3, #252	; 0xfc
80004b70:	8a00000b 	bhi	80004ba4 <make_dirfile+0x16c>
            if (n == 0 && c == 0xE5)        /* Change heading \xE5 to \x05 */
80004b74:	e55b3005 	ldrb	r3, [fp, #-5]
80004b78:	e3530000 	cmp	r3, #0
80004b7c:	1a000004 	bne	80004b94 <make_dirfile+0x15c>
80004b80:	e55b3007 	ldrb	r3, [fp, #-7]
80004b84:	e35300e5 	cmp	r3, #229	; 0xe5
80004b88:	1a000001 	bne	80004b94 <make_dirfile+0x15c>
                c = 0x05;
80004b8c:	e3a03005 	mov	r3, #5
80004b90:	e54b3007 	strb	r3, [fp, #-7]
            a ^= 1; goto md_l2;
80004b94:	e55b3008 	ldrb	r3, [fp, #-8]
80004b98:	e2233001 	eor	r3, r3, #1
80004b9c:	e54b3008 	strb	r3, [fp, #-8]
80004ba0:	ea000045 	b	80004cbc <make_dirfile+0x284>
        }
        if (c == '"') break;                /* Reject " */
80004ba4:	e55b3007 	ldrb	r3, [fp, #-7]
80004ba8:	e3530022 	cmp	r3, #34	; 0x22
80004bac:	0a000057 	beq	80004d10 <make_dirfile+0x2d8>
        if (c <= ')') goto md_l1;            /* Accept ! # $ % & ' ( ) */
80004bb0:	e55b3007 	ldrb	r3, [fp, #-7]
80004bb4:	e3530029 	cmp	r3, #41	; 0x29
80004bb8:	9a000039 	bls	80004ca4 <make_dirfile+0x26c>
        if (c <= ',') break;                /* Reject * + , */
80004bbc:	e55b3007 	ldrb	r3, [fp, #-7]
80004bc0:	e353002c 	cmp	r3, #44	; 0x2c
80004bc4:	9a000053 	bls	80004d18 <make_dirfile+0x2e0>
        if (c <= '9') goto md_l1;            /* Accept - 0-9 */
80004bc8:	e55b3007 	ldrb	r3, [fp, #-7]
80004bcc:	e3530039 	cmp	r3, #57	; 0x39
80004bd0:	9a000035 	bls	80004cac <make_dirfile+0x274>
        if (c <= '?') break;                /* Reject : ; < = > ? */
80004bd4:	e55b3007 	ldrb	r3, [fp, #-7]
80004bd8:	e353003f 	cmp	r3, #63	; 0x3f
80004bdc:	9a00004f 	bls	80004d20 <make_dirfile+0x2e8>
        if (!(a & 1)) {    /* These checks are not applied to S-JIS 2nd byte */
80004be0:	e55b3008 	ldrb	r3, [fp, #-8]
80004be4:	e2033001 	and	r3, r3, #1
80004be8:	e3530000 	cmp	r3, #0
80004bec:	1a00002f 	bne	80004cb0 <make_dirfile+0x278>
            if (c == '|') break;            /* Reject | */
80004bf0:	e55b3007 	ldrb	r3, [fp, #-7]
80004bf4:	e353007c 	cmp	r3, #124	; 0x7c
80004bf8:	0a00004a 	beq	80004d28 <make_dirfile+0x2f0>
            if (c >= '[' && c <= ']') break;/* Reject [ \ ] */
80004bfc:	e55b3007 	ldrb	r3, [fp, #-7]
80004c00:	e353005a 	cmp	r3, #90	; 0x5a
80004c04:	9a000002 	bls	80004c14 <make_dirfile+0x1dc>
80004c08:	e55b3007 	ldrb	r3, [fp, #-7]
80004c0c:	e353005d 	cmp	r3, #93	; 0x5d
80004c10:	9a000046 	bls	80004d30 <make_dirfile+0x2f8>
            if (_USE_NTFLAG && c >= 'A' && c <= 'Z')
80004c14:	e55b3007 	ldrb	r3, [fp, #-7]
80004c18:	e3530040 	cmp	r3, #64	; 0x40
80004c1c:	9a00000c 	bls	80004c54 <make_dirfile+0x21c>
80004c20:	e55b3007 	ldrb	r3, [fp, #-7]
80004c24:	e353005a 	cmp	r3, #90	; 0x5a
80004c28:	8a000009 	bhi	80004c54 <make_dirfile+0x21c>
                (t == 8) ? (b &= ~0x08) : (b &= ~0x10);
80004c2c:	e55b3006 	ldrb	r3, [fp, #-6]
80004c30:	e3530008 	cmp	r3, #8
80004c34:	1a000003 	bne	80004c48 <make_dirfile+0x210>
80004c38:	e55b3009 	ldrb	r3, [fp, #-9]
80004c3c:	e3c33008 	bic	r3, r3, #8
80004c40:	e54b3009 	strb	r3, [fp, #-9]
80004c44:	ea000002 	b	80004c54 <make_dirfile+0x21c>
80004c48:	e55b3009 	ldrb	r3, [fp, #-9]
80004c4c:	e3c33010 	bic	r3, r3, #16
80004c50:	e54b3009 	strb	r3, [fp, #-9]
            if (c >= 'a' && c <= 'z') {        /* Convert to upper case */
80004c54:	e55b3007 	ldrb	r3, [fp, #-7]
80004c58:	e3530060 	cmp	r3, #96	; 0x60
80004c5c:	9a000013 	bls	80004cb0 <make_dirfile+0x278>
80004c60:	e55b3007 	ldrb	r3, [fp, #-7]
80004c64:	e353007a 	cmp	r3, #122	; 0x7a
80004c68:	8a000010 	bhi	80004cb0 <make_dirfile+0x278>
                c -= 0x20;
80004c6c:	e55b3007 	ldrb	r3, [fp, #-7]
80004c70:	e2433020 	sub	r3, r3, #32
80004c74:	e54b3007 	strb	r3, [fp, #-7]
                if (_USE_NTFLAG) (t == 8) ? (a |= 0x08) : (a |= 0x10);
80004c78:	e55b3006 	ldrb	r3, [fp, #-6]
80004c7c:	e3530008 	cmp	r3, #8
80004c80:	1a000003 	bne	80004c94 <make_dirfile+0x25c>
80004c84:	e55b3008 	ldrb	r3, [fp, #-8]
80004c88:	e3833008 	orr	r3, r3, #8
80004c8c:	e54b3008 	strb	r3, [fp, #-8]
80004c90:	ea000006 	b	80004cb0 <make_dirfile+0x278>
80004c94:	e55b3008 	ldrb	r3, [fp, #-8]
80004c98:	e3833010 	orr	r3, r3, #16
80004c9c:	e54b3008 	strb	r3, [fp, #-8]
80004ca0:	ea000002 	b	80004cb0 <make_dirfile+0x278>
            if (n == 0 && c == 0xE5)        /* Change heading \xE5 to \x05 */
                c = 0x05;
            a ^= 1; goto md_l2;
        }
        if (c == '"') break;                /* Reject " */
        if (c <= ')') goto md_l1;            /* Accept ! # $ % & ' ( ) */
80004ca4:	e1a00000 	nop			; (mov r0, r0)
80004ca8:	ea000000 	b	80004cb0 <make_dirfile+0x278>
        if (c <= ',') break;                /* Reject * + , */
        if (c <= '9') goto md_l1;            /* Accept - 0-9 */
80004cac:	e1a00000 	nop			; (mov r0, r0)
                c -= 0x20;
                if (_USE_NTFLAG) (t == 8) ? (a |= 0x08) : (a |= 0x10);
            }
        }
    md_l1:
        a &= ~1;
80004cb0:	e55b3008 	ldrb	r3, [fp, #-8]
80004cb4:	e3c33001 	bic	r3, r3, #1
80004cb8:	e54b3008 	strb	r3, [fp, #-8]
    md_l2:
        if (n >= t) break;
80004cbc:	e55b2005 	ldrb	r2, [fp, #-5]
80004cc0:	e55b3006 	ldrb	r3, [fp, #-6]
80004cc4:	e1520003 	cmp	r2, r3
80004cc8:	2a00001a 	bcs	80004d38 <make_dirfile+0x300>
        dirname[n++] = c;
80004ccc:	e55b3005 	ldrb	r3, [fp, #-5]
80004cd0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80004cd4:	e0823003 	add	r3, r2, r3
80004cd8:	e55b2007 	ldrb	r2, [fp, #-7]
80004cdc:	e5c32000 	strb	r2, [r3]
80004ce0:	e55b3005 	ldrb	r3, [fp, #-5]
80004ce4:	e2833001 	add	r3, r3, #1
80004ce8:	e54b3005 	strb	r3, [fp, #-5]
    }
80004cec:	eaffff62 	b	80004a7c <make_dirfile+0x44>
    a = 0; b = 0x18;    /* NT flag */
    n = 0; t = 8;
    for (;;) {
        c = *(*path)++;
        if (c == '\0' || c == '/') {        /* Reached to end of str or directory separator */
            if (n == 0) break;
80004cf0:	e1a00000 	nop			; (mov r0, r0)
80004cf4:	ea000010 	b	80004d3c <make_dirfile+0x304>
        if (c <= ' ' || c == 0x7F) break;        /* Reject invisible chars */
        if (c == '.') {
            if (!(a & 1) && n >= 1 && n <= 8) {    /* Enter extension part */
                n = 8; t = 11; continue;
            }
            break;
80004cf8:	e1a00000 	nop			; (mov r0, r0)
80004cfc:	ea00000e 	b	80004d3c <make_dirfile+0x304>
80004d00:	e1a00000 	nop			; (mov r0, r0)
80004d04:	ea00000c 	b	80004d3c <make_dirfile+0x304>
80004d08:	e1a00000 	nop			; (mov r0, r0)
80004d0c:	ea00000a 	b	80004d3c <make_dirfile+0x304>
            (c >= 0xE0 && c <= 0xFC))) {
            if (n == 0 && c == 0xE5)        /* Change heading \xE5 to \x05 */
                c = 0x05;
            a ^= 1; goto md_l2;
        }
        if (c == '"') break;                /* Reject " */
80004d10:	e1a00000 	nop			; (mov r0, r0)
80004d14:	ea000008 	b	80004d3c <make_dirfile+0x304>
        if (c <= ')') goto md_l1;            /* Accept ! # $ % & ' ( ) */
        if (c <= ',') break;                /* Reject * + , */
80004d18:	e1a00000 	nop			; (mov r0, r0)
80004d1c:	ea000006 	b	80004d3c <make_dirfile+0x304>
        if (c <= '9') goto md_l1;            /* Accept - 0-9 */
        if (c <= '?') break;                /* Reject : ; < = > ? */
80004d20:	e1a00000 	nop			; (mov r0, r0)
80004d24:	ea000004 	b	80004d3c <make_dirfile+0x304>
        if (!(a & 1)) {    /* These checks are not applied to S-JIS 2nd byte */
            if (c == '|') break;            /* Reject | */
80004d28:	e1a00000 	nop			; (mov r0, r0)
80004d2c:	ea000002 	b	80004d3c <make_dirfile+0x304>
            if (c >= '[' && c <= ']') break;/* Reject [ \ ] */
80004d30:	e1a00000 	nop			; (mov r0, r0)
80004d34:	ea000000 	b	80004d3c <make_dirfile+0x304>
            }
        }
    md_l1:
        a &= ~1;
    md_l2:
        if (n >= t) break;
80004d38:	e1a00000 	nop			; (mov r0, r0)
        dirname[n++] = c;
    }
    return 1;
80004d3c:	e3a03001 	mov	r3, #1
}
80004d40:	e1a00003 	mov	r0, r3
80004d44:	e24bd004 	sub	sp, fp, #4
80004d48:	e8bd4800 	pop	{fp, lr}
80004d4c:	e12fff1e 	bx	lr

80004d50 <trace_path>:
    DIR *dirobj,        /* Pointer to directory object to return last directory */
    char *fn,            /* Pointer to last segment name to return {file(8),ext(3),attr(1)} */
    const char *path,    /* Full-path string to trace a file or directory */
    BYTE **dir            /* Directory pointer in Win[] to retutn */
)
{
80004d50:	e92d4800 	push	{fp, lr}
80004d54:	e28db004 	add	fp, sp, #4
80004d58:	e24dd020 	sub	sp, sp, #32
80004d5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
80004d60:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
80004d64:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
80004d68:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    DWORD clust;
    char ds;
    BYTE *dptr = NULL;
80004d6c:	e3a03000 	mov	r3, #0
80004d70:	e50b3008 	str	r3, [fp, #-8]
    FATFS *fs = dirobj->fs;    /* Get logical drive from the given DIR structure */
80004d74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004d78:	e5933004 	ldr	r3, [r3, #4]
80004d7c:	e50b300c 	str	r3, [fp, #-12]


    /* Initialize directory object */
    clust = fs->dirbase;
80004d80:	e51b300c 	ldr	r3, [fp, #-12]
80004d84:	e5933014 	ldr	r3, [r3, #20]
80004d88:	e50b3010 	str	r3, [fp, #-16]
    if (fs->fs_type == FS_FAT32) {
80004d8c:	e51b300c 	ldr	r3, [fp, #-12]
80004d90:	e5d33024 	ldrb	r3, [r3, #36]	; 0x24
80004d94:	e3530003 	cmp	r3, #3
80004d98:	1a00000d 	bne	80004dd4 <trace_path+0x84>
        dirobj->clust = dirobj->sclust = clust;
80004d9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004da0:	e51b2010 	ldr	r2, [fp, #-16]
80004da4:	e5832008 	str	r2, [r3, #8]
80004da8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004dac:	e5932008 	ldr	r2, [r3, #8]
80004db0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004db4:	e583200c 	str	r2, [r3, #12]
        dirobj->sect = clust2sect(fs, clust);
80004db8:	e51b000c 	ldr	r0, [fp, #-12]
80004dbc:	e51b1010 	ldr	r1, [fp, #-16]
80004dc0:	ebfffe0f 	bl	80004604 <clust2sect>
80004dc4:	e1a02000 	mov	r2, r0
80004dc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004dcc:	e5832010 	str	r2, [r3, #16]
80004dd0:	ea000009 	b	80004dfc <trace_path+0xac>
    } else {
        dirobj->clust = dirobj->sclust = 0;
80004dd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004dd8:	e3a02000 	mov	r2, #0
80004ddc:	e5832008 	str	r2, [r3, #8]
80004de0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004de4:	e5932008 	ldr	r2, [r3, #8]
80004de8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004dec:	e583200c 	str	r2, [r3, #12]
        dirobj->sect = clust;
80004df0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004df4:	e51b2010 	ldr	r2, [fp, #-16]
80004df8:	e5832010 	str	r2, [r3, #16]
    }
    dirobj->index = 0;
80004dfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004e00:	e3a02000 	mov	r2, #0
80004e04:	e1c320b2 	strh	r2, [r3, #2]

    if (*path == '\0') {                    /* Null path means the root directory */
80004e08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80004e0c:	e5d33000 	ldrb	r3, [r3]
80004e10:	e3530000 	cmp	r3, #0
80004e14:	1a000004 	bne	80004e2c <trace_path+0xdc>
        *dir = NULL; return FR_OK;
80004e18:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80004e1c:	e3a02000 	mov	r2, #0
80004e20:	e5832000 	str	r2, [r3]
80004e24:	e3a03000 	mov	r3, #0
80004e28:	ea000085 	b	80005044 <trace_path+0x2f4>
    }

    for (;;) {
        ds = make_dirfile(&path, fn);            /* Get a paragraph into fn[] */
80004e2c:	e24b3020 	sub	r3, fp, #32
80004e30:	e1a00003 	mov	r0, r3
80004e34:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
80004e38:	ebfffefe 	bl	80004a38 <make_dirfile>
80004e3c:	e1a03000 	mov	r3, r0
80004e40:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if (ds == 1) return FR_INVALID_NAME;
80004e44:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80004e48:	e3530001 	cmp	r3, #1
80004e4c:	1a000002 	bne	80004e5c <trace_path+0x10c>
80004e50:	e3a03004 	mov	r3, #4
80004e54:	ea00007a 	b	80005044 <trace_path+0x2f4>
            if (dptr[DIR_Name] != 0xE5                        /* Matched? */
                && !(dptr[DIR_Attr] & AM_VOL)
                && !memcmp(&dptr[DIR_Name], fn, 8+3) ) break;
            if (!next_dir_entry(dirobj))                    /* Next directory pointer */
                return !ds ? FR_NO_FILE : FR_NO_PATH;
        }
80004e58:	e1a00000 	nop			; (mov r0, r0)

    for (;;) {
        ds = make_dirfile(&path, fn);            /* Get a paragraph into fn[] */
        if (ds == 1) return FR_INVALID_NAME;
        for (;;) {
            if (!move_window(fs, dirobj->sect)) return FR_RW_ERROR;
80004e5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004e60:	e5933010 	ldr	r3, [r3, #16]
80004e64:	e51b000c 	ldr	r0, [fp, #-12]
80004e68:	e1a01003 	mov	r1, r3
80004e6c:	ebfffaf5 	bl	80003a48 <move_window>
80004e70:	e1a03000 	mov	r3, r0
80004e74:	e3530000 	cmp	r3, #0
80004e78:	1a000001 	bne	80004e84 <trace_path+0x134>
80004e7c:	e3a03008 	mov	r3, #8
80004e80:	ea00006f 	b	80005044 <trace_path+0x2f4>
            dptr = &fs->win[(dirobj->index & ((S_SIZ - 1) / 32)) * 32];    /* Pointer to the directory entry */
80004e84:	e51b300c 	ldr	r3, [fp, #-12]
80004e88:	e283202a 	add	r2, r3, #42	; 0x2a
80004e8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80004e90:	e1d330b2 	ldrh	r3, [r3, #2]
80004e94:	e203300f 	and	r3, r3, #15
80004e98:	e1a03283 	lsl	r3, r3, #5
80004e9c:	e0823003 	add	r3, r2, r3
80004ea0:	e50b3008 	str	r3, [fp, #-8]
            if (dptr[DIR_Name] == 0)                        /* Has it reached to end of dir? */
80004ea4:	e51b3008 	ldr	r3, [fp, #-8]
80004ea8:	e5d33000 	ldrb	r3, [r3]
80004eac:	e3530000 	cmp	r3, #0
80004eb0:	1a000006 	bne	80004ed0 <trace_path+0x180>
                return !ds ? FR_NO_FILE : FR_NO_PATH;
80004eb4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80004eb8:	e3530000 	cmp	r3, #0
80004ebc:	1a000001 	bne	80004ec8 <trace_path+0x178>
80004ec0:	e3a03002 	mov	r3, #2
80004ec4:	ea000000 	b	80004ecc <trace_path+0x17c>
80004ec8:	e3a03003 	mov	r3, #3
80004ecc:	ea00005c 	b	80005044 <trace_path+0x2f4>
            if (dptr[DIR_Name] != 0xE5                        /* Matched? */
80004ed0:	e51b3008 	ldr	r3, [fp, #-8]
80004ed4:	e5d33000 	ldrb	r3, [r3]
80004ed8:	e35300e5 	cmp	r3, #229	; 0xe5
80004edc:	0a00000c 	beq	80004f14 <trace_path+0x1c4>
                && !(dptr[DIR_Attr] & AM_VOL)
80004ee0:	e51b3008 	ldr	r3, [fp, #-8]
80004ee4:	e283300b 	add	r3, r3, #11
80004ee8:	e5d33000 	ldrb	r3, [r3]
80004eec:	e2033008 	and	r3, r3, #8
80004ef0:	e3530000 	cmp	r3, #0
80004ef4:	1a000006 	bne	80004f14 <trace_path+0x1c4>
                && !memcmp(&dptr[DIR_Name], fn, 8+3) ) break;
80004ef8:	e51b0008 	ldr	r0, [fp, #-8]
80004efc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
80004f00:	e3a0200b 	mov	r2, #11
80004f04:	eb000efb 	bl	80008af8 <memcmp>
80004f08:	e1a03000 	mov	r3, r0
80004f0c:	e3530000 	cmp	r3, #0
80004f10:	0a00000b 	beq	80004f44 <trace_path+0x1f4>
            if (!next_dir_entry(dirobj))                    /* Next directory pointer */
80004f14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
80004f18:	ebfffdd4 	bl	80004670 <next_dir_entry>
80004f1c:	e1a03000 	mov	r3, r0
80004f20:	e3530000 	cmp	r3, #0
80004f24:	1affffcb 	bne	80004e58 <trace_path+0x108>
                return !ds ? FR_NO_FILE : FR_NO_PATH;
80004f28:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80004f2c:	e3530000 	cmp	r3, #0
80004f30:	1a000001 	bne	80004f3c <trace_path+0x1ec>
80004f34:	e3a03002 	mov	r3, #2
80004f38:	ea000000 	b	80004f40 <trace_path+0x1f0>
80004f3c:	e3a03003 	mov	r3, #3
80004f40:	ea00003f 	b	80005044 <trace_path+0x2f4>
        }
        if (!ds) { *dir = dptr; return FR_OK; }                /* Matched with end of path */
80004f44:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80004f48:	e3530000 	cmp	r3, #0
80004f4c:	1a000004 	bne	80004f64 <trace_path+0x214>
80004f50:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80004f54:	e51b2008 	ldr	r2, [fp, #-8]
80004f58:	e5832000 	str	r2, [r3]
80004f5c:	e3a03000 	mov	r3, #0
80004f60:	ea000037 	b	80005044 <trace_path+0x2f4>
        if (!(dptr[DIR_Attr] & AM_DIR)) return FR_NO_PATH;    /* Cannot trace because it is a file */
80004f64:	e51b3008 	ldr	r3, [fp, #-8]
80004f68:	e283300b 	add	r3, r3, #11
80004f6c:	e5d33000 	ldrb	r3, [r3]
80004f70:	e2033010 	and	r3, r3, #16
80004f74:	e3530000 	cmp	r3, #0
80004f78:	1a000001 	bne	80004f84 <trace_path+0x234>
80004f7c:	e3a03003 	mov	r3, #3
80004f80:	ea00002f 	b	80005044 <trace_path+0x2f4>
        clust = ((DWORD)LD_WORD(&dptr[DIR_FstClusHI]) << 16) | LD_WORD(&dptr[DIR_FstClusLO]); /* Get cluster# of the directory */
80004f84:	e51b3008 	ldr	r3, [fp, #-8]
80004f88:	e2833015 	add	r3, r3, #21
80004f8c:	e5d33000 	ldrb	r3, [r3]
80004f90:	e1a03403 	lsl	r3, r3, #8
80004f94:	e1a03803 	lsl	r3, r3, #16
80004f98:	e1a02823 	lsr	r2, r3, #16
80004f9c:	e51b3008 	ldr	r3, [fp, #-8]
80004fa0:	e2833014 	add	r3, r3, #20
80004fa4:	e5d33000 	ldrb	r3, [r3]
80004fa8:	e1823003 	orr	r3, r2, r3
80004fac:	e1a03803 	lsl	r3, r3, #16
80004fb0:	e1a03823 	lsr	r3, r3, #16
80004fb4:	e1a03803 	lsl	r3, r3, #16
80004fb8:	e1a03823 	lsr	r3, r3, #16
80004fbc:	e1a02803 	lsl	r2, r3, #16
80004fc0:	e51b3008 	ldr	r3, [fp, #-8]
80004fc4:	e283301b 	add	r3, r3, #27
80004fc8:	e5d33000 	ldrb	r3, [r3]
80004fcc:	e1a03403 	lsl	r3, r3, #8
80004fd0:	e1a03803 	lsl	r3, r3, #16
80004fd4:	e1a01823 	lsr	r1, r3, #16
80004fd8:	e51b3008 	ldr	r3, [fp, #-8]
80004fdc:	e283301a 	add	r3, r3, #26
80004fe0:	e5d33000 	ldrb	r3, [r3]
80004fe4:	e1813003 	orr	r3, r1, r3
80004fe8:	e1a03803 	lsl	r3, r3, #16
80004fec:	e1a03823 	lsr	r3, r3, #16
80004ff0:	e1a03803 	lsl	r3, r3, #16
80004ff4:	e1a03823 	lsr	r3, r3, #16
80004ff8:	e1823003 	orr	r3, r2, r3
80004ffc:	e50b3010 	str	r3, [fp, #-16]
        dirobj->clust = dirobj->sclust = clust;                /* Restart scanning at the new directory */
80005000:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80005004:	e51b2010 	ldr	r2, [fp, #-16]
80005008:	e5832008 	str	r2, [r3, #8]
8000500c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80005010:	e5932008 	ldr	r2, [r3, #8]
80005014:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80005018:	e583200c 	str	r2, [r3, #12]
        dirobj->sect = clust2sect(fs, clust);
8000501c:	e51b000c 	ldr	r0, [fp, #-12]
80005020:	e51b1010 	ldr	r1, [fp, #-16]
80005024:	ebfffd76 	bl	80004604 <clust2sect>
80005028:	e1a02000 	mov	r2, r0
8000502c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80005030:	e5832010 	str	r2, [r3, #16]
        dirobj->index = 2;
80005034:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80005038:	e3a02002 	mov	r2, #2
8000503c:	e1c320b2 	strh	r2, [r3, #2]
    }
80005040:	eaffff79 	b	80004e2c <trace_path+0xdc>

    return FR_OK;
}
80005044:	e1a00003 	mov	r0, r3
80005048:	e24bd004 	sub	sp, fp, #4
8000504c:	e8bd4800 	pop	{fp, lr}
80005050:	e12fff1e 	bx	lr

80005054 <reserve_direntry>:
static
FRESULT reserve_direntry (    /* FR_OK: successful, FR_DENIED: no free entry, FR_RW_ERROR: a disk error occured */
    DIR *dirobj,            /* Target directory to create new entry */
    BYTE **dir                /* Pointer to pointer to created entry to retutn */
)
{
80005054:	e92d4800 	push	{fp, lr}
80005058:	e28db004 	add	fp, sp, #4
8000505c:	e24dd020 	sub	sp, sp, #32
80005060:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
80005064:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    DWORD clust, sector;
    BYTE c, n, *dptr;
    FATFS *fs = dirobj->fs;
80005068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000506c:	e5933004 	ldr	r3, [r3, #4]
80005070:	e50b3010 	str	r3, [fp, #-16]


    /* Re-initialize directory object */
    clust = dirobj->sclust;
80005074:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80005078:	e5933008 	ldr	r3, [r3, #8]
8000507c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (clust) {    /* Dyanmic directory table */
80005080:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005084:	e3530000 	cmp	r3, #0
80005088:	0a000009 	beq	800050b4 <reserve_direntry+0x60>
        dirobj->clust = clust;
8000508c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80005090:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80005094:	e583200c 	str	r2, [r3, #12]
        dirobj->sect = clust2sect(fs, clust);
80005098:	e51b0010 	ldr	r0, [fp, #-16]
8000509c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
800050a0:	ebfffd57 	bl	80004604 <clust2sect>
800050a4:	e1a02000 	mov	r2, r0
800050a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800050ac:	e5832010 	str	r2, [r3, #16]
800050b0:	ea000003 	b	800050c4 <reserve_direntry+0x70>
    } else {        /* Static directory table */
        dirobj->sect = fs->dirbase;
800050b4:	e51b3010 	ldr	r3, [fp, #-16]
800050b8:	e5932014 	ldr	r2, [r3, #20]
800050bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800050c0:	e5832010 	str	r2, [r3, #16]
    }
    dirobj->index = 0;
800050c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800050c8:	e3a02000 	mov	r2, #0
800050cc:	e1c320b2 	strh	r2, [r3, #2]

    do {
        if (!move_window(fs, dirobj->sect)) return FR_RW_ERROR;
800050d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800050d4:	e5933010 	ldr	r3, [r3, #16]
800050d8:	e51b0010 	ldr	r0, [fp, #-16]
800050dc:	e1a01003 	mov	r1, r3
800050e0:	ebfffa58 	bl	80003a48 <move_window>
800050e4:	e1a03000 	mov	r3, r0
800050e8:	e3530000 	cmp	r3, #0
800050ec:	1a000001 	bne	800050f8 <reserve_direntry+0xa4>
800050f0:	e3a03008 	mov	r3, #8
800050f4:	ea000063 	b	80005288 <reserve_direntry+0x234>
        dptr = &fs->win[(dirobj->index & ((S_SIZ - 1) / 32)) * 32];    /* Pointer to the directory entry */
800050f8:	e51b3010 	ldr	r3, [fp, #-16]
800050fc:	e283202a 	add	r2, r3, #42	; 0x2a
80005100:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80005104:	e1d330b2 	ldrh	r3, [r3, #2]
80005108:	e203300f 	and	r3, r3, #15
8000510c:	e1a03283 	lsl	r3, r3, #5
80005110:	e0823003 	add	r3, r2, r3
80005114:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        c = dptr[DIR_Name];
80005118:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
8000511c:	e5d33000 	ldrb	r3, [r3]
80005120:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (c == 0 || c == 0xE5) {            /* Found an empty entry! */
80005124:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
80005128:	e3530000 	cmp	r3, #0
8000512c:	0a000002 	beq	8000513c <reserve_direntry+0xe8>
80005130:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
80005134:	e35300e5 	cmp	r3, #229	; 0xe5
80005138:	1a000004 	bne	80005150 <reserve_direntry+0xfc>
            *dir = dptr; return FR_OK;
8000513c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80005140:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80005144:	e5832000 	str	r2, [r3]
80005148:	e3a03000 	mov	r3, #0
8000514c:	ea00004d 	b	80005288 <reserve_direntry+0x234>
        }
    } while (next_dir_entry(dirobj));                /* Next directory pointer */
80005150:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
80005154:	ebfffd45 	bl	80004670 <next_dir_entry>
80005158:	e1a03000 	mov	r3, r0
8000515c:	e3530000 	cmp	r3, #0
80005160:	1affffda 	bne	800050d0 <reserve_direntry+0x7c>
    /* Reached to end of the directory table */

    /* Abort when static table or could not stretch dynamic table */
    if (!clust || !(clust = create_chain(fs, dirobj->clust))) return FR_DENIED;
80005164:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005168:	e3530000 	cmp	r3, #0
8000516c:	0a000008 	beq	80005194 <reserve_direntry+0x140>
80005170:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80005174:	e593300c 	ldr	r3, [r3, #12]
80005178:	e51b0010 	ldr	r0, [fp, #-16]
8000517c:	e1a01003 	mov	r1, r3
80005180:	ebfffcaa 	bl	80004430 <create_chain>
80005184:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
80005188:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
8000518c:	e3530000 	cmp	r3, #0
80005190:	1a000001 	bne	8000519c <reserve_direntry+0x148>
80005194:	e3a03006 	mov	r3, #6
80005198:	ea00003a 	b	80005288 <reserve_direntry+0x234>
    if (clust == 1 || !move_window(fs, 0)) return FR_RW_ERROR;
8000519c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800051a0:	e3530001 	cmp	r3, #1
800051a4:	0a000005 	beq	800051c0 <reserve_direntry+0x16c>
800051a8:	e51b0010 	ldr	r0, [fp, #-16]
800051ac:	e3a01000 	mov	r1, #0
800051b0:	ebfffa24 	bl	80003a48 <move_window>
800051b4:	e1a03000 	mov	r3, r0
800051b8:	e3530000 	cmp	r3, #0
800051bc:	1a000001 	bne	800051c8 <reserve_direntry+0x174>
800051c0:	e3a03008 	mov	r3, #8
800051c4:	ea00002f 	b	80005288 <reserve_direntry+0x234>

    fs->winsect = sector = clust2sect(fs, clust);        /* Cleanup the expanded table */
800051c8:	e51b0010 	ldr	r0, [fp, #-16]
800051cc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
800051d0:	ebfffd0b 	bl	80004604 <clust2sect>
800051d4:	e50b0008 	str	r0, [fp, #-8]
800051d8:	e51b3010 	ldr	r3, [fp, #-16]
800051dc:	e51b2008 	ldr	r2, [fp, #-8]
800051e0:	e5832004 	str	r2, [r3, #4]
    memset(fs->win, 0, S_SIZ);
800051e4:	e51b3010 	ldr	r3, [fp, #-16]
800051e8:	e283302a 	add	r3, r3, #42	; 0x2a
800051ec:	e1a00003 	mov	r0, r3
800051f0:	e3a01000 	mov	r1, #0
800051f4:	e3a02c02 	mov	r2, #512	; 0x200
800051f8:	eb000ed8 	bl	80008d60 <memset>
    for (n = fs->sects_clust; n; n--) {
800051fc:	e51b3010 	ldr	r3, [fp, #-16]
80005200:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
80005204:	e54b3009 	strb	r3, [fp, #-9]
80005208:	ea000013 	b	8000525c <reserve_direntry+0x208>
        if (disk_write(fs->drive, fs->win, sector, 1) != RES_OK)
8000520c:	e51b3010 	ldr	r3, [fp, #-16]
80005210:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
80005214:	e51b3010 	ldr	r3, [fp, #-16]
80005218:	e283302a 	add	r3, r3, #42	; 0x2a
8000521c:	e1a00002 	mov	r0, r2
80005220:	e1a01003 	mov	r1, r3
80005224:	e51b2008 	ldr	r2, [fp, #-8]
80005228:	e3a03001 	mov	r3, #1
8000522c:	eb000d64 	bl	800087c4 <disk_write>
80005230:	e1a03000 	mov	r3, r0
80005234:	e3530000 	cmp	r3, #0
80005238:	0a000001 	beq	80005244 <reserve_direntry+0x1f0>
            return FR_RW_ERROR;
8000523c:	e3a03008 	mov	r3, #8
80005240:	ea000010 	b	80005288 <reserve_direntry+0x234>
        sector++;
80005244:	e51b3008 	ldr	r3, [fp, #-8]
80005248:	e2833001 	add	r3, r3, #1
8000524c:	e50b3008 	str	r3, [fp, #-8]
    if (!clust || !(clust = create_chain(fs, dirobj->clust))) return FR_DENIED;
    if (clust == 1 || !move_window(fs, 0)) return FR_RW_ERROR;

    fs->winsect = sector = clust2sect(fs, clust);        /* Cleanup the expanded table */
    memset(fs->win, 0, S_SIZ);
    for (n = fs->sects_clust; n; n--) {
80005250:	e55b3009 	ldrb	r3, [fp, #-9]
80005254:	e2433001 	sub	r3, r3, #1
80005258:	e54b3009 	strb	r3, [fp, #-9]
8000525c:	e55b3009 	ldrb	r3, [fp, #-9]
80005260:	e3530000 	cmp	r3, #0
80005264:	1affffe8 	bne	8000520c <reserve_direntry+0x1b8>
        if (disk_write(fs->drive, fs->win, sector, 1) != RES_OK)
            return FR_RW_ERROR;
        sector++;
    }
    fs->winflag = 1;
80005268:	e51b3010 	ldr	r3, [fp, #-16]
8000526c:	e3a02001 	mov	r2, #1
80005270:	e5c32028 	strb	r2, [r3, #40]	; 0x28
    *dir = fs->win;
80005274:	e51b3010 	ldr	r3, [fp, #-16]
80005278:	e283202a 	add	r2, r3, #42	; 0x2a
8000527c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80005280:	e5832000 	str	r2, [r3]
    return FR_OK;
80005284:	e3a03000 	mov	r3, #0
}
80005288:	e1a00003 	mov	r0, r3
8000528c:	e24bd004 	sub	sp, fp, #4
80005290:	e8bd4800 	pop	{fp, lr}
80005294:	e12fff1e 	bx	lr

80005298 <check_fs>:
static
BYTE check_fs (        /* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record or error */
    FATFS *fs,        /* File system object */
    DWORD sect        /* Sector# (lba) to check if it is a FAT boot record or not */
)
{
80005298:	e92d4800 	push	{fp, lr}
8000529c:	e28db004 	add	fp, sp, #4
800052a0:	e24dd008 	sub	sp, sp, #8
800052a4:	e50b0008 	str	r0, [fp, #-8]
800052a8:	e50b100c 	str	r1, [fp, #-12]

    if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)    /* Load boot record */
800052ac:	e51b3008 	ldr	r3, [fp, #-8]
800052b0:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
800052b4:	e51b3008 	ldr	r3, [fp, #-8]
800052b8:	e283302a 	add	r3, r3, #42	; 0x2a
800052bc:	e1a00002 	mov	r0, r2
800052c0:	e1a01003 	mov	r1, r3
800052c4:	e51b200c 	ldr	r2, [fp, #-12]
800052c8:	e3a03001 	mov	r3, #1
800052cc:	eb000d20 	bl	80008754 <disk_read>
800052d0:	e1a03000 	mov	r3, r0
800052d4:	e3530000 	cmp	r3, #0
800052d8:	0a000001 	beq	800052e4 <check_fs+0x4c>
        return 2;
800052dc:	e3a03002 	mov	r3, #2
800052e0:	ea000033 	b	800053b4 <check_fs+0x11c>
    if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)                /* Check record signature (always offset 510) */
800052e4:	e51b3008 	ldr	r3, [fp, #-8]
800052e8:	e2833f8a 	add	r3, r3, #552	; 0x228
800052ec:	e2833001 	add	r3, r3, #1
800052f0:	e5d33000 	ldrb	r3, [r3]
800052f4:	e1a03403 	lsl	r3, r3, #8
800052f8:	e1a03803 	lsl	r3, r3, #16
800052fc:	e1a02823 	lsr	r2, r3, #16
80005300:	e51b3008 	ldr	r3, [fp, #-8]
80005304:	e2833f8a 	add	r3, r3, #552	; 0x228
80005308:	e5d33000 	ldrb	r3, [r3]
8000530c:	e1823003 	orr	r3, r2, r3
80005310:	e1a03803 	lsl	r3, r3, #16
80005314:	e1a03823 	lsr	r3, r3, #16
80005318:	e1a03803 	lsl	r3, r3, #16
8000531c:	e1a02843 	asr	r2, r3, #16
80005320:	e59f309c 	ldr	r3, [pc, #156]	; 800053c4 <check_fs+0x12c>
80005324:	e1520003 	cmp	r2, r3
80005328:	0a000001 	beq	80005334 <check_fs+0x9c>
        return 2;
8000532c:	e3a03002 	mov	r3, #2
80005330:	ea00001f 	b	800053b4 <check_fs+0x11c>

    if (!memcmp(&fs->win[BS_FilSysType], "FAT", 3))            /* Check FAT signature */    
80005334:	e51b3008 	ldr	r3, [fp, #-8]
80005338:	e283302a 	add	r3, r3, #42	; 0x2a
8000533c:	e2833036 	add	r3, r3, #54	; 0x36
80005340:	e1a00003 	mov	r0, r3
80005344:	e59f107c 	ldr	r1, [pc, #124]	; 800053c8 <check_fs+0x130>
80005348:	e3a02003 	mov	r2, #3
8000534c:	eb000de9 	bl	80008af8 <memcmp>
80005350:	e1a03000 	mov	r3, r0
80005354:	e3530000 	cmp	r3, #0
80005358:	1a000001 	bne	80005364 <check_fs+0xcc>
        return 0;
8000535c:	e3a03000 	mov	r3, #0
80005360:	ea000013 	b	800053b4 <check_fs+0x11c>
    	
    if (!memcmp(&fs->win[BS_FilSysType32], "FAT32", 5) && !(fs->win[BPB_ExtFlags] & 0x80))    	  	
80005364:	e51b3008 	ldr	r3, [fp, #-8]
80005368:	e283302a 	add	r3, r3, #42	; 0x2a
8000536c:	e2833052 	add	r3, r3, #82	; 0x52
80005370:	e1a00003 	mov	r0, r3
80005374:	e59f1050 	ldr	r1, [pc, #80]	; 800053cc <check_fs+0x134>
80005378:	e3a02005 	mov	r2, #5
8000537c:	eb000ddd 	bl	80008af8 <memcmp>
80005380:	e1a03000 	mov	r3, r0
80005384:	e3530000 	cmp	r3, #0
80005388:	1a000008 	bne	800053b0 <check_fs+0x118>
8000538c:	e51b3008 	ldr	r3, [fp, #-8]
80005390:	e5d33052 	ldrb	r3, [r3, #82]	; 0x52
80005394:	e20330ff 	and	r3, r3, #255	; 0xff
80005398:	e1a03c03 	lsl	r3, r3, #24
8000539c:	e1a03c43 	asr	r3, r3, #24
800053a0:	e3530000 	cmp	r3, #0
800053a4:	ba000001 	blt	800053b0 <check_fs+0x118>
        return 0;
800053a8:	e3a03000 	mov	r3, #0
800053ac:	ea000000 	b	800053b4 <check_fs+0x11c>
    	

    return 1;
800053b0:	e3a03001 	mov	r3, #1
}
800053b4:	e1a00003 	mov	r0, r3
800053b8:	e24bd004 	sub	sp, fp, #4
800053bc:	e8bd4800 	pop	{fp, lr}
800053c0:	e12fff1e 	bx	lr
800053c4:	ffffaa55 	.word	0xffffaa55
800053c8:	80012564 	.word	0x80012564
800053cc:	80012568 	.word	0x80012568

800053d0 <auto_mount>:
FRESULT auto_mount (        /* FR_OK(0): successful, !=0: any error occured */
    const char **path,        /* Pointer to pointer to the path name (drive number) */
    FATFS **rfs,            /* Pointer to pointer to the found file system object */
    BYTE chk_wp                /* !=0: Check media write protection for writing functions */
)
{
800053d0:	e92d4800 	push	{fp, lr}
800053d4:	e28db004 	add	fp, sp, #4
800053d8:	e24dd038 	sub	sp, sp, #56	; 0x38
800053dc:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
800053e0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
800053e4:	e1a03002 	mov	r3, r2
800053e8:	e54b3035 	strb	r3, [fp, #-53]	; 0xffffffcb
    BYTE drv, fmt, *tbl;
    DSTATUS stat;
    DWORD bootsect, fatsize, totalsect, maxclust;
    const char *p = *path;
800053ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
800053f0:	e5933000 	ldr	r3, [r3]
800053f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    FATFS *fs;


    /* Get drive number from the path name */
    while (*p == ' ') p++;        /* Strip leading spaces */
800053f8:	ea000002 	b	80005408 <auto_mount+0x38>
800053fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80005400:	e2833001 	add	r3, r3, #1
80005404:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
80005408:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
8000540c:	e5d33000 	ldrb	r3, [r3]
80005410:	e3530020 	cmp	r3, #32
80005414:	0afffff8 	beq	800053fc <auto_mount+0x2c>
    drv = p[0] - '0';            /* Is there a drive number? */
80005418:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
8000541c:	e5d33000 	ldrb	r3, [r3]
80005420:	e2433030 	sub	r3, r3, #48	; 0x30
80005424:	e54b3005 	strb	r3, [fp, #-5]
    if (drv <= 9 && p[1] == ':')
80005428:	e55b3005 	ldrb	r3, [fp, #-5]
8000542c:	e3530009 	cmp	r3, #9
80005430:	8a000008 	bhi	80005458 <auto_mount+0x88>
80005434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80005438:	e2833001 	add	r3, r3, #1
8000543c:	e5d33000 	ldrb	r3, [r3]
80005440:	e353003a 	cmp	r3, #58	; 0x3a
80005444:	1a000003 	bne	80005458 <auto_mount+0x88>
        p += 2;            /* Found a drive number, get and strip it */
80005448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
8000544c:	e2833002 	add	r3, r3, #2
80005450:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
80005454:	ea000001 	b	80005460 <auto_mount+0x90>
    else
        drv = 0;        /* No drive number is given, select drive 0 in default */
80005458:	e3a03000 	mov	r3, #0
8000545c:	e54b3005 	strb	r3, [fp, #-5]
    if (*p == '/') p++;    /* Strip heading slash */
80005460:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80005464:	e5d33000 	ldrb	r3, [r3]
80005468:	e353002f 	cmp	r3, #47	; 0x2f
8000546c:	1a000002 	bne	8000547c <auto_mount+0xac>
80005470:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80005474:	e2833001 	add	r3, r3, #1
80005478:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    *path = p;            /* Return pointer to the path name */
8000547c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
80005480:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80005484:	e5832000 	str	r2, [r3]

    /* Check if the drive number is valid or not */
    if (drv >= _DRIVES) return FR_INVALID_DRIVE;    /* Is the drive number valid? */
80005488:	e55b3005 	ldrb	r3, [fp, #-5]
8000548c:	e3530000 	cmp	r3, #0
80005490:	0a000001 	beq	8000549c <auto_mount+0xcc>
80005494:	e3a03005 	mov	r3, #5
80005498:	ea00016b 	b	80005a4c <auto_mount+0x67c>
    if (!(fs = FatFs[drv])) return FR_NOT_ENABLED;    /* Is the file system object registered? */
8000549c:	e55b2005 	ldrb	r2, [fp, #-5]
800054a0:	e59f35b4 	ldr	r3, [pc, #1460]	; 80005a5c <auto_mount+0x68c>
800054a4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
800054a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
800054ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800054b0:	e3530000 	cmp	r3, #0
800054b4:	1a000001 	bne	800054c0 <auto_mount+0xf0>
800054b8:	e3a0300a 	mov	r3, #10
800054bc:	ea000162 	b	80005a4c <auto_mount+0x67c>
    *rfs = fs;            /* Returen pointer to the corresponding file system object */
800054c0:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
800054c4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
800054c8:	e5832000 	str	r2, [r3]

    /* Check if the logical drive has been mounted or not */
    if (fs->fs_type) {
800054cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800054d0:	e5d33024 	ldrb	r3, [r3, #36]	; 0x24
800054d4:	e3530000 	cmp	r3, #0
800054d8:	0a000014 	beq	80005530 <auto_mount+0x160>
        stat = disk_status(fs->drive);
800054dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800054e0:	e5d33027 	ldrb	r3, [r3, #39]	; 0x27
800054e4:	e1a00003 	mov	r0, r3
800054e8:	eb000c8f 	bl	8000872c <disk_status>
800054ec:	e1a03000 	mov	r3, r0
800054f0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
        if (!(stat & STA_NOINIT)) {                /* If the physical drive is kept initialized */
800054f4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
800054f8:	e2033001 	and	r3, r3, #1
800054fc:	e3530000 	cmp	r3, #0
80005500:	1a00000a 	bne	80005530 <auto_mount+0x160>
#if !_FS_READONLY
            if (chk_wp && (stat & STA_PROTECT))    /* Check write protection if needed */
80005504:	e55b3035 	ldrb	r3, [fp, #-53]	; 0xffffffcb
80005508:	e3530000 	cmp	r3, #0
8000550c:	0a000005 	beq	80005528 <auto_mount+0x158>
80005510:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
80005514:	e2033004 	and	r3, r3, #4
80005518:	e3530000 	cmp	r3, #0
8000551c:	0a000001 	beq	80005528 <auto_mount+0x158>
                return FR_WRITE_PROTECTED;
80005520:	e3a03009 	mov	r3, #9
80005524:	ea000148 	b	80005a4c <auto_mount+0x67c>
#endif
            return FR_OK;                        /* The file system object is valid */
80005528:	e3a03000 	mov	r3, #0
8000552c:	ea000146 	b	80005a4c <auto_mount+0x67c>
        }
    }

    /* The logical drive has not been mounted, following code attempts to mount the logical drive */

    memset(fs, 0, sizeof(FATFS));        /* Clean-up the file system object */
80005530:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
80005534:	e3a01000 	mov	r1, #0
80005538:	e3a02f8b 	mov	r2, #556	; 0x22c
8000553c:	eb000e07 	bl	80008d60 <memset>
    fs->drive = LD2PD(drv);                /* Bind the logical drive and a physical drive */
80005540:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005544:	e55b2005 	ldrb	r2, [fp, #-5]
80005548:	e5c32027 	strb	r2, [r3, #39]	; 0x27
    stat = disk_initialize(fs->drive);    /* Initialize low level disk I/O layer */
8000554c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005550:	e5d33027 	ldrb	r3, [r3, #39]	; 0x27
80005554:	e1a00003 	mov	r0, r3
80005558:	eb000c42 	bl	80008668 <disk_initialize>
8000555c:	e1a03000 	mov	r3, r0
80005560:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    if (stat & STA_NOINIT)                /* Check if the drive is ready */
80005564:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
80005568:	e2033001 	and	r3, r3, #1
8000556c:	e20330ff 	and	r3, r3, #255	; 0xff
80005570:	e3530000 	cmp	r3, #0
80005574:	0a000001 	beq	80005580 <auto_mount+0x1b0>
        return FR_NOT_READY;
80005578:	e3a03001 	mov	r3, #1
8000557c:	ea000132 	b	80005a4c <auto_mount+0x67c>
#if S_MAX_SIZ > 512                        /* Check disk sector size */
    if (disk_ioctl(drv, GET_SECTOR_SIZE, &S_SIZ) != RES_OK || S_SIZ > S_MAX_SIZ)
        return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
    if (chk_wp && (stat & STA_PROTECT))    /* Check write protection if needed */
80005580:	e55b3035 	ldrb	r3, [fp, #-53]	; 0xffffffcb
80005584:	e3530000 	cmp	r3, #0
80005588:	0a000005 	beq	800055a4 <auto_mount+0x1d4>
8000558c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
80005590:	e2033004 	and	r3, r3, #4
80005594:	e3530000 	cmp	r3, #0
80005598:	0a000001 	beq	800055a4 <auto_mount+0x1d4>
        return FR_WRITE_PROTECTED;
8000559c:	e3a03009 	mov	r3, #9
800055a0:	ea000129 	b	80005a4c <auto_mount+0x67c>
#endif
    /* Search FAT partition on the drive */
	fmt = check_fs(fs, bootsect = 0);    /* Check sector 0 as an SFD format */
800055a4:	e3a03000 	mov	r3, #0
800055a8:	e50b300c 	str	r3, [fp, #-12]
800055ac:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
800055b0:	e51b100c 	ldr	r1, [fp, #-12]
800055b4:	ebffff37 	bl	80005298 <check_fs>
800055b8:	e1a03000 	mov	r3, r0
800055bc:	e54b3006 	strb	r3, [fp, #-6]
    if (fmt == 1) {                        /* Not a FAT boot record, it may be patitioned */
800055c0:	e55b3006 	ldrb	r3, [fp, #-6]
800055c4:	e3530001 	cmp	r3, #1
800055c8:	1a00001f 	bne	8000564c <auto_mount+0x27c>
        /* Check a partition listed in top of the partition table */
        tbl = &fs->win[MBR_Table + LD2PT(drv) * 16];    /* Partition table */
800055cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800055d0:	e2833f7a 	add	r3, r3, #488	; 0x1e8
800055d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        if (tbl[4]) {                                /* Is the partition existing? */
800055d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
800055dc:	e2833004 	add	r3, r3, #4
800055e0:	e5d33000 	ldrb	r3, [r3]
800055e4:	e3530000 	cmp	r3, #0
800055e8:	0a000017 	beq	8000564c <auto_mount+0x27c>
            bootsect = LD_DWORD(&tbl[8]);            /* Partition offset in LBA */
800055ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
800055f0:	e283300b 	add	r3, r3, #11
800055f4:	e5d33000 	ldrb	r3, [r3]
800055f8:	e1a02c03 	lsl	r2, r3, #24
800055fc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80005600:	e283300a 	add	r3, r3, #10
80005604:	e5d33000 	ldrb	r3, [r3]
80005608:	e1a03803 	lsl	r3, r3, #16
8000560c:	e1822003 	orr	r2, r2, r3
80005610:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80005614:	e2833009 	add	r3, r3, #9
80005618:	e5d33000 	ldrb	r3, [r3]
8000561c:	e1a03403 	lsl	r3, r3, #8
80005620:	e1822003 	orr	r2, r2, r3
80005624:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80005628:	e2833008 	add	r3, r3, #8
8000562c:	e5d33000 	ldrb	r3, [r3]
80005630:	e1823003 	orr	r3, r2, r3
80005634:	e50b300c 	str	r3, [fp, #-12]
			fmt = check_fs(fs, bootsect);            /* Check the partition */			
80005638:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
8000563c:	e51b100c 	ldr	r1, [fp, #-12]
80005640:	ebffff14 	bl	80005298 <check_fs>
80005644:	e1a03000 	mov	r3, r0
80005648:	e54b3006 	strb	r3, [fp, #-6]
        }
    }	
    if (fmt ||( LD_WORD(&fs->win[BPB_BytsPerSec]) != S_SIZ))    /* No valid FAT patition is found */    			
8000564c:	e55b3006 	ldrb	r3, [fp, #-6]
80005650:	e3530000 	cmp	r3, #0
80005654:	1a00000f 	bne	80005698 <auto_mount+0x2c8>
80005658:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
8000565c:	e2833036 	add	r3, r3, #54	; 0x36
80005660:	e5d33000 	ldrb	r3, [r3]
80005664:	e1a03403 	lsl	r3, r3, #8
80005668:	e1a03803 	lsl	r3, r3, #16
8000566c:	e1a02823 	lsr	r2, r3, #16
80005670:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005674:	e2833035 	add	r3, r3, #53	; 0x35
80005678:	e5d33000 	ldrb	r3, [r3]
8000567c:	e1823003 	orr	r3, r2, r3
80005680:	e1a03803 	lsl	r3, r3, #16
80005684:	e1a03823 	lsr	r3, r3, #16
80005688:	e1a03803 	lsl	r3, r3, #16
8000568c:	e1a03843 	asr	r3, r3, #16
80005690:	e3530c02 	cmp	r3, #512	; 0x200
80005694:	0a000001 	beq	800056a0 <auto_mount+0x2d0>
		return FR_NO_FILESYSTEM;    	
80005698:	e3a0300b 	mov	r3, #11
8000569c:	ea0000ea 	b	80005a4c <auto_mount+0x67c>
	
    /* Initialize the file system object */
    fatsize = LD_WORD(&fs->win[BPB_FATSz16]);            /* Number of sectors per FAT */
800056a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800056a4:	e2833041 	add	r3, r3, #65	; 0x41
800056a8:	e5d33000 	ldrb	r3, [r3]
800056ac:	e1a03403 	lsl	r3, r3, #8
800056b0:	e1a03803 	lsl	r3, r3, #16
800056b4:	e1a02823 	lsr	r2, r3, #16
800056b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800056bc:	e2833040 	add	r3, r3, #64	; 0x40
800056c0:	e5d33000 	ldrb	r3, [r3]
800056c4:	e1823003 	orr	r3, r2, r3
800056c8:	e1a03803 	lsl	r3, r3, #16
800056cc:	e1a03823 	lsr	r3, r3, #16
800056d0:	e1a03803 	lsl	r3, r3, #16
800056d4:	e1a03823 	lsr	r3, r3, #16
800056d8:	e50b3010 	str	r3, [fp, #-16]
    if (!fatsize) fatsize = LD_DWORD(&fs->win[BPB_FATSz32]);
800056dc:	e51b3010 	ldr	r3, [fp, #-16]
800056e0:	e3530000 	cmp	r3, #0
800056e4:	1a000012 	bne	80005734 <auto_mount+0x364>
800056e8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800056ec:	e2833051 	add	r3, r3, #81	; 0x51
800056f0:	e5d33000 	ldrb	r3, [r3]
800056f4:	e1a02c03 	lsl	r2, r3, #24
800056f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800056fc:	e2833050 	add	r3, r3, #80	; 0x50
80005700:	e5d33000 	ldrb	r3, [r3]
80005704:	e1a03803 	lsl	r3, r3, #16
80005708:	e1822003 	orr	r2, r2, r3
8000570c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005710:	e283304f 	add	r3, r3, #79	; 0x4f
80005714:	e5d33000 	ldrb	r3, [r3]
80005718:	e1a03403 	lsl	r3, r3, #8
8000571c:	e1822003 	orr	r2, r2, r3
80005720:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005724:	e283304e 	add	r3, r3, #78	; 0x4e
80005728:	e5d33000 	ldrb	r3, [r3]
8000572c:	e1823003 	orr	r3, r2, r3
80005730:	e50b3010 	str	r3, [fp, #-16]
    fs->sects_fat = fatsize;
80005734:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005738:	e51b2010 	ldr	r2, [fp, #-16]
8000573c:	e5832008 	str	r2, [r3, #8]
    fs->n_fats = fs->win[BPB_NumFATs];                    /* Number of FAT copies */
80005740:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005744:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
80005748:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
8000574c:	e5c32026 	strb	r2, [r3, #38]	; 0x26
    fatsize *= fs->n_fats;                                /* (Number of sectors in FAT area) */
80005750:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005754:	e5d33026 	ldrb	r3, [r3, #38]	; 0x26
80005758:	e1a02003 	mov	r2, r3
8000575c:	e51b3010 	ldr	r3, [fp, #-16]
80005760:	e0030392 	mul	r3, r2, r3
80005764:	e50b3010 	str	r3, [fp, #-16]
    fs->fatbase = bootsect + LD_WORD(&fs->win[BPB_RsvdSecCnt]); /* FAT start sector (lba) */
80005768:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
8000576c:	e2833039 	add	r3, r3, #57	; 0x39
80005770:	e5d33000 	ldrb	r3, [r3]
80005774:	e1a03403 	lsl	r3, r3, #8
80005778:	e1a03803 	lsl	r3, r3, #16
8000577c:	e1a02823 	lsr	r2, r3, #16
80005780:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005784:	e2833038 	add	r3, r3, #56	; 0x38
80005788:	e5d33000 	ldrb	r3, [r3]
8000578c:	e1823003 	orr	r3, r2, r3
80005790:	e1a03803 	lsl	r3, r3, #16
80005794:	e1a03823 	lsr	r3, r3, #16
80005798:	e1a03803 	lsl	r3, r3, #16
8000579c:	e1a03823 	lsr	r3, r3, #16
800057a0:	e1a02003 	mov	r2, r3
800057a4:	e51b300c 	ldr	r3, [fp, #-12]
800057a8:	e0822003 	add	r2, r2, r3
800057ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800057b0:	e5832010 	str	r2, [r3, #16]
    fs->sects_clust = fs->win[BPB_SecPerClus];            /* Number of sectors per cluster */
800057b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800057b8:	e5d32037 	ldrb	r2, [r3, #55]	; 0x37
800057bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800057c0:	e5c32025 	strb	r2, [r3, #37]	; 0x25
    fs->n_rootdir = LD_WORD(&fs->win[BPB_RootEntCnt]);    /* Nmuber of root directory entries */
800057c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800057c8:	e283303c 	add	r3, r3, #60	; 0x3c
800057cc:	e5d33000 	ldrb	r3, [r3]
800057d0:	e1a03403 	lsl	r3, r3, #8
800057d4:	e1a03803 	lsl	r3, r3, #16
800057d8:	e1a02823 	lsr	r2, r3, #16
800057dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800057e0:	e283303b 	add	r3, r3, #59	; 0x3b
800057e4:	e5d33000 	ldrb	r3, [r3]
800057e8:	e1823003 	orr	r3, r2, r3
800057ec:	e1a03803 	lsl	r3, r3, #16
800057f0:	e1a03823 	lsr	r3, r3, #16
800057f4:	e1a03803 	lsl	r3, r3, #16
800057f8:	e1a02823 	lsr	r2, r3, #16
800057fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005800:	e1c320b2 	strh	r2, [r3, #2]
    totalsect = LD_WORD(&fs->win[BPB_TotSec16]);        /* Number of sectors on the file system */
80005804:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005808:	e283303e 	add	r3, r3, #62	; 0x3e
8000580c:	e5d33000 	ldrb	r3, [r3]
80005810:	e1a03403 	lsl	r3, r3, #8
80005814:	e1a03803 	lsl	r3, r3, #16
80005818:	e1a02823 	lsr	r2, r3, #16
8000581c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005820:	e283303d 	add	r3, r3, #61	; 0x3d
80005824:	e5d33000 	ldrb	r3, [r3]
80005828:	e1823003 	orr	r3, r2, r3
8000582c:	e1a03803 	lsl	r3, r3, #16
80005830:	e1a03823 	lsr	r3, r3, #16
80005834:	e1a03803 	lsl	r3, r3, #16
80005838:	e1a03823 	lsr	r3, r3, #16
8000583c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (!totalsect) totalsect = LD_DWORD(&fs->win[BPB_TotSec32]);
80005840:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005844:	e3530000 	cmp	r3, #0
80005848:	1a000012 	bne	80005898 <auto_mount+0x4c8>
8000584c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005850:	e283304d 	add	r3, r3, #77	; 0x4d
80005854:	e5d33000 	ldrb	r3, [r3]
80005858:	e1a02c03 	lsl	r2, r3, #24
8000585c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005860:	e283304c 	add	r3, r3, #76	; 0x4c
80005864:	e5d33000 	ldrb	r3, [r3]
80005868:	e1a03803 	lsl	r3, r3, #16
8000586c:	e1822003 	orr	r2, r2, r3
80005870:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005874:	e283304b 	add	r3, r3, #75	; 0x4b
80005878:	e5d33000 	ldrb	r3, [r3]
8000587c:	e1a03403 	lsl	r3, r3, #8
80005880:	e1822003 	orr	r2, r2, r3
80005884:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005888:	e283304a 	add	r3, r3, #74	; 0x4a
8000588c:	e5d33000 	ldrb	r3, [r3]
80005890:	e1823003 	orr	r3, r2, r3
80005894:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    fs->max_clust = maxclust = (totalsect                /* Last cluster# + 1 */
        - LD_WORD(&fs->win[BPB_RsvdSecCnt]) - fatsize - fs->n_rootdir / (S_SIZ/32)
80005898:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
8000589c:	e2833039 	add	r3, r3, #57	; 0x39
800058a0:	e5d33000 	ldrb	r3, [r3]
800058a4:	e1a03403 	lsl	r3, r3, #8
800058a8:	e1a03803 	lsl	r3, r3, #16
800058ac:	e1a02823 	lsr	r2, r3, #16
800058b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800058b4:	e2833038 	add	r3, r3, #56	; 0x38
800058b8:	e5d33000 	ldrb	r3, [r3]
800058bc:	e1823003 	orr	r3, r2, r3
800058c0:	e1a03803 	lsl	r3, r3, #16
800058c4:	e1a03823 	lsr	r3, r3, #16
800058c8:	e1a03803 	lsl	r3, r3, #16
800058cc:	e1a03823 	lsr	r3, r3, #16
800058d0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
800058d4:	e0632002 	rsb	r2, r3, r2
800058d8:	e51b3010 	ldr	r3, [fp, #-16]
800058dc:	e0632002 	rsb	r2, r3, r2
800058e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800058e4:	e1d330b2 	ldrh	r3, [r3, #2]
800058e8:	e1a03223 	lsr	r3, r3, #4
800058ec:	e1a03803 	lsl	r3, r3, #16
800058f0:	e1a03823 	lsr	r3, r3, #16
800058f4:	e0632002 	rsb	r2, r3, r2
        ) / fs->sects_clust + 2;
800058f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800058fc:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
80005900:	e1a00002 	mov	r0, r2
80005904:	e1a01003 	mov	r1, r3
80005908:	eb000bde 	bl	80008888 <__aeabi_uidiv>
8000590c:	e1a03000 	mov	r3, r0
    fs->fatbase = bootsect + LD_WORD(&fs->win[BPB_RsvdSecCnt]); /* FAT start sector (lba) */
    fs->sects_clust = fs->win[BPB_SecPerClus];            /* Number of sectors per cluster */
    fs->n_rootdir = LD_WORD(&fs->win[BPB_RootEntCnt]);    /* Nmuber of root directory entries */
    totalsect = LD_WORD(&fs->win[BPB_TotSec16]);        /* Number of sectors on the file system */
    if (!totalsect) totalsect = LD_DWORD(&fs->win[BPB_TotSec32]);
    fs->max_clust = maxclust = (totalsect                /* Last cluster# + 1 */
80005910:	e2833002 	add	r3, r3, #2
80005914:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
80005918:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
8000591c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
80005920:	e583200c 	str	r2, [r3, #12]
        - LD_WORD(&fs->win[BPB_RsvdSecCnt]) - fatsize - fs->n_rootdir / (S_SIZ/32)
        ) / fs->sects_clust + 2;

    fmt = FS_FAT12;                                        /* Determine the FAT sub type */
80005924:	e3a03001 	mov	r3, #1
80005928:	e54b3006 	strb	r3, [fp, #-6]
    if (maxclust > 0xFF7) fmt = FS_FAT16;
8000592c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
80005930:	e59f3128 	ldr	r3, [pc, #296]	; 80005a60 <auto_mount+0x690>
80005934:	e1520003 	cmp	r2, r3
80005938:	9a000001 	bls	80005944 <auto_mount+0x574>
8000593c:	e3a03002 	mov	r3, #2
80005940:	e54b3006 	strb	r3, [fp, #-6]
    if (maxclust > 0xFFF7) fmt = FS_FAT32;
80005944:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
80005948:	e59f3114 	ldr	r3, [pc, #276]	; 80005a64 <auto_mount+0x694>
8000594c:	e1520003 	cmp	r2, r3
80005950:	9a000001 	bls	8000595c <auto_mount+0x58c>
80005954:	e3a03003 	mov	r3, #3
80005958:	e54b3006 	strb	r3, [fp, #-6]
    fs->fs_type = fmt;
8000595c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005960:	e55b2006 	ldrb	r2, [fp, #-6]
80005964:	e5c32024 	strb	r2, [r3, #36]	; 0x24

    if (fmt == FS_FAT32)
80005968:	e55b3006 	ldrb	r3, [fp, #-6]
8000596c:	e3530003 	cmp	r3, #3
80005970:	1a000014 	bne	800059c8 <auto_mount+0x5f8>
        fs->dirbase = LD_DWORD(&fs->win[BPB_RootClus]);    /* Root directory start cluster */
80005974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005978:	e2833059 	add	r3, r3, #89	; 0x59
8000597c:	e5d33000 	ldrb	r3, [r3]
80005980:	e1a02c03 	lsl	r2, r3, #24
80005984:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005988:	e2833058 	add	r3, r3, #88	; 0x58
8000598c:	e5d33000 	ldrb	r3, [r3]
80005990:	e1a03803 	lsl	r3, r3, #16
80005994:	e1822003 	orr	r2, r2, r3
80005998:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
8000599c:	e2833057 	add	r3, r3, #87	; 0x57
800059a0:	e5d33000 	ldrb	r3, [r3]
800059a4:	e1a03403 	lsl	r3, r3, #8
800059a8:	e1822003 	orr	r2, r2, r3
800059ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800059b0:	e2833056 	add	r3, r3, #86	; 0x56
800059b4:	e5d33000 	ldrb	r3, [r3]
800059b8:	e1822003 	orr	r2, r2, r3
800059bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800059c0:	e5832014 	str	r2, [r3, #20]
800059c4:	ea000005 	b	800059e0 <auto_mount+0x610>
    else
        fs->dirbase = fs->fatbase + fatsize;            /* Root directory start sector (lba) */
800059c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800059cc:	e5932010 	ldr	r2, [r3, #16]
800059d0:	e51b3010 	ldr	r3, [fp, #-16]
800059d4:	e0822003 	add	r2, r2, r3
800059d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800059dc:	e5832014 	str	r2, [r3, #20]
    fs->database = fs->fatbase + fatsize + fs->n_rootdir / (S_SIZ/32);    /* Data start sector (lba) */
800059e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800059e4:	e5932010 	ldr	r2, [r3, #16]
800059e8:	e51b3010 	ldr	r3, [fp, #-16]
800059ec:	e0822003 	add	r2, r2, r3
800059f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800059f4:	e1d330b2 	ldrh	r3, [r3, #2]
800059f8:	e1a03223 	lsr	r3, r3, #4
800059fc:	e1a03803 	lsl	r3, r3, #16
80005a00:	e1a03823 	lsr	r3, r3, #16
80005a04:	e0822003 	add	r2, r2, r3
80005a08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005a0c:	e5832018 	str	r2, [r3, #24]

#if !_FS_READONLY
    fs->free_clust = 0xFFFFFFFF;
80005a10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005a14:	e3e02000 	mvn	r2, #0
80005a18:	e5832020 	str	r2, [r3, #32]
            fs->free_clust = LD_DWORD(&fs->win[FSI_Free_Count]);
        }
    }
#endif
#endif
    fs->id = ++fsid;                                    /* File system mount ID */
80005a1c:	e59f3044 	ldr	r3, [pc, #68]	; 80005a68 <auto_mount+0x698>
80005a20:	e1d330b0 	ldrh	r3, [r3]
80005a24:	e2833001 	add	r3, r3, #1
80005a28:	e1a03803 	lsl	r3, r3, #16
80005a2c:	e1a02823 	lsr	r2, r3, #16
80005a30:	e59f3030 	ldr	r3, [pc, #48]	; 80005a68 <auto_mount+0x698>
80005a34:	e1c320b0 	strh	r2, [r3]
80005a38:	e59f3028 	ldr	r3, [pc, #40]	; 80005a68 <auto_mount+0x698>
80005a3c:	e1d320b0 	ldrh	r2, [r3]
80005a40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80005a44:	e1c320b0 	strh	r2, [r3]
    return FR_OK;
80005a48:	e3a03000 	mov	r3, #0
}
80005a4c:	e1a00003 	mov	r0, r3
80005a50:	e24bd004 	sub	sp, fp, #4
80005a54:	e8bd4800 	pop	{fp, lr}
80005a58:	e12fff1e 	bx	lr
80005a5c:	80012770 	.word	0x80012770
80005a60:	00000ff7 	.word	0x00000ff7
80005a64:	0000fff7 	.word	0x0000fff7
80005a68:	80012774 	.word	0x80012774

80005a6c <validate>:
static
FRESULT validate (        /* FR_OK(0): The object is valid, !=0: Not valid */
    const FATFS *fs,    /* Pointer to the file system object */
    WORD id                /* id member of the target object to be checked */
)
{
80005a6c:	e92d4800 	push	{fp, lr}
80005a70:	e28db004 	add	fp, sp, #4
80005a74:	e24dd008 	sub	sp, sp, #8
80005a78:	e50b0008 	str	r0, [fp, #-8]
80005a7c:	e1a03001 	mov	r3, r1
80005a80:	e14b30ba 	strh	r3, [fp, #-10]
    if (!fs || fs->id != id)
80005a84:	e51b3008 	ldr	r3, [fp, #-8]
80005a88:	e3530000 	cmp	r3, #0
80005a8c:	0a000004 	beq	80005aa4 <validate+0x38>
80005a90:	e51b3008 	ldr	r3, [fp, #-8]
80005a94:	e1d330b0 	ldrh	r3, [r3]
80005a98:	e15b20ba 	ldrh	r2, [fp, #-10]
80005a9c:	e1520003 	cmp	r2, r3
80005aa0:	0a000001 	beq	80005aac <validate+0x40>
        return FR_INVALID_OBJECT;
80005aa4:	e3a0300c 	mov	r3, #12
80005aa8:	ea00000b 	b	80005adc <validate+0x70>
    if (disk_status(fs->drive) & STA_NOINIT)
80005aac:	e51b3008 	ldr	r3, [fp, #-8]
80005ab0:	e5d33027 	ldrb	r3, [r3, #39]	; 0x27
80005ab4:	e1a00003 	mov	r0, r3
80005ab8:	eb000b1b 	bl	8000872c <disk_status>
80005abc:	e1a03000 	mov	r3, r0
80005ac0:	e2033001 	and	r3, r3, #1
80005ac4:	e20330ff 	and	r3, r3, #255	; 0xff
80005ac8:	e3530000 	cmp	r3, #0
80005acc:	0a000001 	beq	80005ad8 <validate+0x6c>
        return FR_NOT_READY;
80005ad0:	e3a03001 	mov	r3, #1
80005ad4:	ea000000 	b	80005adc <validate+0x70>

    return FR_OK;
80005ad8:	e3a03000 	mov	r3, #0
}
80005adc:	e1a00003 	mov	r0, r3
80005ae0:	e24bd004 	sub	sp, fp, #4
80005ae4:	e8bd4800 	pop	{fp, lr}
80005ae8:	e12fff1e 	bx	lr

80005aec <f_mount>:

FRESULT f_mount (
    BYTE drv,        /* Logical drive number to be mounted/unmounted */
    FATFS *fs        /* Pointer to new file system object (NULL for unmount)*/
)
{
80005aec:	e92d4800 	push	{fp, lr}
80005af0:	e28db004 	add	fp, sp, #4
80005af4:	e24dd010 	sub	sp, sp, #16
80005af8:	e1a03000 	mov	r3, r0
80005afc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
80005b00:	e54b300d 	strb	r3, [fp, #-13]
    FATFS *fsobj;


    if (drv >= _DRIVES) return FR_INVALID_DRIVE;
80005b04:	e55b300d 	ldrb	r3, [fp, #-13]
80005b08:	e3530000 	cmp	r3, #0
80005b0c:	0a000001 	beq	80005b18 <f_mount+0x2c>
80005b10:	e3a03005 	mov	r3, #5
80005b14:	ea000016 	b	80005b74 <f_mount+0x88>
    fsobj = FatFs[drv];
80005b18:	e55b200d 	ldrb	r2, [fp, #-13]
80005b1c:	e59f3060 	ldr	r3, [pc, #96]	; 80005b84 <f_mount+0x98>
80005b20:	e7933102 	ldr	r3, [r3, r2, lsl #2]
80005b24:	e50b3008 	str	r3, [fp, #-8]
    FatFs[drv] = fs;
80005b28:	e55b200d 	ldrb	r2, [fp, #-13]
80005b2c:	e59f3050 	ldr	r3, [pc, #80]	; 80005b84 <f_mount+0x98>
80005b30:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
80005b34:	e7831102 	str	r1, [r3, r2, lsl #2]
    if (fsobj) memset(fsobj, 0, sizeof(FATFS));
80005b38:	e51b3008 	ldr	r3, [fp, #-8]
80005b3c:	e3530000 	cmp	r3, #0
80005b40:	0a000003 	beq	80005b54 <f_mount+0x68>
80005b44:	e51b0008 	ldr	r0, [fp, #-8]
80005b48:	e3a01000 	mov	r1, #0
80005b4c:	e3a02f8b 	mov	r2, #556	; 0x22c
80005b50:	eb000c82 	bl	80008d60 <memset>
    if (fs) memset(fs, 0, sizeof(FATFS));
80005b54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005b58:	e3530000 	cmp	r3, #0
80005b5c:	0a000003 	beq	80005b70 <f_mount+0x84>
80005b60:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
80005b64:	e3a01000 	mov	r1, #0
80005b68:	e3a02f8b 	mov	r2, #556	; 0x22c
80005b6c:	eb000c7b 	bl	80008d60 <memset>

    return FR_OK;
80005b70:	e3a03000 	mov	r3, #0
}
80005b74:	e1a00003 	mov	r0, r3
80005b78:	e24bd004 	sub	sp, fp, #4
80005b7c:	e8bd4800 	pop	{fp, lr}
80005b80:	e12fff1e 	bx	lr
80005b84:	80012770 	.word	0x80012770

80005b88 <f_open>:
FRESULT f_open (
    FIL *fp,            /* Pointer to the blank file object */
    const char *path,    /* Pointer to the file name */
    BYTE mode            /* Access mode and file open mode flags */
)
{
80005b88:	e92d4800 	push	{fp, lr}
80005b8c:	e28db004 	add	fp, sp, #4
80005b90:	e24dd048 	sub	sp, sp, #72	; 0x48
80005b94:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
80005b98:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
80005b9c:	e1a03002 	mov	r3, r2
80005ba0:	e54b3045 	strb	r3, [fp, #-69]	; 0xffffffbb
    DIR dirobj;
    char fn[8+3+1];
    FATFS *fs;


    fp->fs = NULL;
80005ba4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
80005ba8:	e3a02000 	mov	r2, #0
80005bac:	e5832004 	str	r2, [r3, #4]
#if !_FS_READONLY
    mode &= (FA_READ|FA_WRITE|FA_CREATE_ALWAYS|FA_OPEN_ALWAYS|FA_CREATE_NEW);
80005bb0:	e55b3045 	ldrb	r3, [fp, #-69]	; 0xffffffbb
80005bb4:	e203301f 	and	r3, r3, #31
80005bb8:	e54b3045 	strb	r3, [fp, #-69]	; 0xffffffbb
    res = auto_mount(&path, &fs, (BYTE)(mode & (FA_WRITE|FA_CREATE_ALWAYS|FA_OPEN_ALWAYS|FA_CREATE_NEW)));
80005bbc:	e55b3045 	ldrb	r3, [fp, #-69]	; 0xffffffbb
80005bc0:	e203301e 	and	r3, r3, #30
80005bc4:	e20330ff 	and	r3, r3, #255	; 0xff
80005bc8:	e24b1044 	sub	r1, fp, #68	; 0x44
80005bcc:	e24b2038 	sub	r2, fp, #56	; 0x38
80005bd0:	e1a00001 	mov	r0, r1
80005bd4:	e1a01002 	mov	r1, r2
80005bd8:	e1a02003 	mov	r2, r3
80005bdc:	ebfffdfb 	bl	800053d0 <auto_mount>
80005be0:	e1a03000 	mov	r3, r0
80005be4:	e54b3005 	strb	r3, [fp, #-5]
#else
    mode &= FA_READ;
    res = auto_mount(&path, &fs, 0);
#endif
    if (res != FR_OK) return res;
80005be8:	e55b3005 	ldrb	r3, [fp, #-5]
80005bec:	e3530000 	cmp	r3, #0
80005bf0:	0a000001 	beq	80005bfc <f_open+0x74>
80005bf4:	e55b3005 	ldrb	r3, [fp, #-5]
80005bf8:	ea00014e 	b	80006138 <f_open+0x5b0>
    dirobj.fs = fs;
80005bfc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
80005c00:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

    /* Trace the file path */
    res = trace_path(&dirobj, fn, path, &dir);
80005c04:	e51b2044 	ldr	r2, [fp, #-68]	; 0xffffffbc
80005c08:	e24b0028 	sub	r0, fp, #40	; 0x28
80005c0c:	e24b1034 	sub	r1, fp, #52	; 0x34
80005c10:	e24b3014 	sub	r3, fp, #20
80005c14:	ebfffc4d 	bl	80004d50 <trace_path>
80005c18:	e1a03000 	mov	r3, r0
80005c1c:	e54b3005 	strb	r3, [fp, #-5]
#if !_FS_READONLY
    /* Create or Open a file */
    if (mode & (FA_CREATE_ALWAYS|FA_OPEN_ALWAYS|FA_CREATE_NEW)) {
80005c20:	e55b3045 	ldrb	r3, [fp, #-69]	; 0xffffffbb
80005c24:	e203301c 	and	r3, r3, #28
80005c28:	e3530000 	cmp	r3, #0
80005c2c:	0a0000d8 	beq	80005f94 <f_open+0x40c>
        DWORD ps, rs;
        if (res != FR_OK) {        /* No file, create new */
80005c30:	e55b3005 	ldrb	r3, [fp, #-5]
80005c34:	e3530000 	cmp	r3, #0
80005c38:	0a000023 	beq	80005ccc <f_open+0x144>
            if (res != FR_NO_FILE) return res;
80005c3c:	e55b3005 	ldrb	r3, [fp, #-5]
80005c40:	e3530002 	cmp	r3, #2
80005c44:	0a000001 	beq	80005c50 <f_open+0xc8>
80005c48:	e55b3005 	ldrb	r3, [fp, #-5]
80005c4c:	ea000139 	b	80006138 <f_open+0x5b0>
            res = reserve_direntry(&dirobj, &dir);
80005c50:	e24b2028 	sub	r2, fp, #40	; 0x28
80005c54:	e24b3014 	sub	r3, fp, #20
80005c58:	e1a00002 	mov	r0, r2
80005c5c:	e1a01003 	mov	r1, r3
80005c60:	ebfffcfb 	bl	80005054 <reserve_direntry>
80005c64:	e1a03000 	mov	r3, r0
80005c68:	e54b3005 	strb	r3, [fp, #-5]
            if (res != FR_OK) return res;
80005c6c:	e55b3005 	ldrb	r3, [fp, #-5]
80005c70:	e3530000 	cmp	r3, #0
80005c74:	0a000001 	beq	80005c80 <f_open+0xf8>
80005c78:	e55b3005 	ldrb	r3, [fp, #-5]
80005c7c:	ea00012d 	b	80006138 <f_open+0x5b0>
            memset(dir, 0, 32);                        /* Initialize the new entry with open name */
80005c80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005c84:	e1a00003 	mov	r0, r3
80005c88:	e3a01000 	mov	r1, #0
80005c8c:	e3a02020 	mov	r2, #32
80005c90:	eb000c32 	bl	80008d60 <memset>
            memcpy(&dir[DIR_Name], fn, 8+3);
80005c94:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80005c98:	e24b3034 	sub	r3, fp, #52	; 0x34
80005c9c:	e1a00002 	mov	r0, r2
80005ca0:	e1a01003 	mov	r1, r3
80005ca4:	e3a0200b 	mov	r2, #11
80005ca8:	eb000bbc 	bl	80008ba0 <memcpy>
            dir[DIR_NTres] = fn[11];
80005cac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005cb0:	e283300c 	add	r3, r3, #12
80005cb4:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
80005cb8:	e5c32000 	strb	r2, [r3]
            mode |= FA_CREATE_ALWAYS;
80005cbc:	e55b3045 	ldrb	r3, [fp, #-69]	; 0xffffffbb
80005cc0:	e3833008 	orr	r3, r3, #8
80005cc4:	e54b3045 	strb	r3, [fp, #-69]	; 0xffffffbb
80005cc8:	ea00006d 	b	80005e84 <f_open+0x2fc>
        }
        else {                    /* Any object is already existing */
            if (mode & FA_CREATE_NEW)            /* Cannot create new */
80005ccc:	e55b3045 	ldrb	r3, [fp, #-69]	; 0xffffffbb
80005cd0:	e2033004 	and	r3, r3, #4
80005cd4:	e3530000 	cmp	r3, #0
80005cd8:	0a000001 	beq	80005ce4 <f_open+0x15c>
                return FR_EXIST;
80005cdc:	e3a03007 	mov	r3, #7
80005ce0:	ea000114 	b	80006138 <f_open+0x5b0>
            if (dir == NULL || (dir[DIR_Attr] & (AM_RDO|AM_DIR)))    /* Cannot overwrite it (R/O or DIR) */
80005ce4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005ce8:	e3530000 	cmp	r3, #0
80005cec:	0a000005 	beq	80005d08 <f_open+0x180>
80005cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005cf4:	e283300b 	add	r3, r3, #11
80005cf8:	e5d33000 	ldrb	r3, [r3]
80005cfc:	e2033011 	and	r3, r3, #17
80005d00:	e3530000 	cmp	r3, #0
80005d04:	0a000001 	beq	80005d10 <f_open+0x188>
                return FR_DENIED;
80005d08:	e3a03006 	mov	r3, #6
80005d0c:	ea000109 	b	80006138 <f_open+0x5b0>
            if (mode & FA_CREATE_ALWAYS) {        /* Resize it to zero if needed */
80005d10:	e55b3045 	ldrb	r3, [fp, #-69]	; 0xffffffbb
80005d14:	e2033008 	and	r3, r3, #8
80005d18:	e3530000 	cmp	r3, #0
80005d1c:	0a000058 	beq	80005e84 <f_open+0x2fc>
                rs = ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);    /* Get start cluster */
80005d20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005d24:	e2833015 	add	r3, r3, #21
80005d28:	e5d33000 	ldrb	r3, [r3]
80005d2c:	e1a03403 	lsl	r3, r3, #8
80005d30:	e1a03803 	lsl	r3, r3, #16
80005d34:	e1a02823 	lsr	r2, r3, #16
80005d38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005d3c:	e2833014 	add	r3, r3, #20
80005d40:	e5d33000 	ldrb	r3, [r3]
80005d44:	e1823003 	orr	r3, r2, r3
80005d48:	e1a03803 	lsl	r3, r3, #16
80005d4c:	e1a03823 	lsr	r3, r3, #16
80005d50:	e1a03803 	lsl	r3, r3, #16
80005d54:	e1a03823 	lsr	r3, r3, #16
80005d58:	e1a02803 	lsl	r2, r3, #16
80005d5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005d60:	e283301b 	add	r3, r3, #27
80005d64:	e5d33000 	ldrb	r3, [r3]
80005d68:	e1a03403 	lsl	r3, r3, #8
80005d6c:	e1a03803 	lsl	r3, r3, #16
80005d70:	e1a01823 	lsr	r1, r3, #16
80005d74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005d78:	e283301a 	add	r3, r3, #26
80005d7c:	e5d33000 	ldrb	r3, [r3]
80005d80:	e1813003 	orr	r3, r1, r3
80005d84:	e1a03803 	lsl	r3, r3, #16
80005d88:	e1a03823 	lsr	r3, r3, #16
80005d8c:	e1a03803 	lsl	r3, r3, #16
80005d90:	e1a03823 	lsr	r3, r3, #16
80005d94:	e1823003 	orr	r3, r2, r3
80005d98:	e50b300c 	str	r3, [fp, #-12]
                ST_WORD(&dir[DIR_FstClusHI], 0);    /* cluster = 0 */
80005d9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005da0:	e2833014 	add	r3, r3, #20
80005da4:	e3a02000 	mov	r2, #0
80005da8:	e5c32000 	strb	r2, [r3]
80005dac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005db0:	e2833015 	add	r3, r3, #21
80005db4:	e3a02000 	mov	r2, #0
80005db8:	e5c32000 	strb	r2, [r3]
                ST_WORD(&dir[DIR_FstClusLO], 0);
80005dbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005dc0:	e283301a 	add	r3, r3, #26
80005dc4:	e3a02000 	mov	r2, #0
80005dc8:	e5c32000 	strb	r2, [r3]
80005dcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005dd0:	e283301b 	add	r3, r3, #27
80005dd4:	e3a02000 	mov	r2, #0
80005dd8:	e5c32000 	strb	r2, [r3]
                ST_DWORD(&dir[DIR_FileSize], 0);    /* size = 0 */
80005ddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005de0:	e283301c 	add	r3, r3, #28
80005de4:	e3a02000 	mov	r2, #0
80005de8:	e5c32000 	strb	r2, [r3]
80005dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005df0:	e283301d 	add	r3, r3, #29
80005df4:	e3a02000 	mov	r2, #0
80005df8:	e5c32000 	strb	r2, [r3]
80005dfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005e00:	e283301e 	add	r3, r3, #30
80005e04:	e3a02000 	mov	r2, #0
80005e08:	e5c32000 	strb	r2, [r3]
80005e0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005e10:	e283301f 	add	r3, r3, #31
80005e14:	e3a02000 	mov	r2, #0
80005e18:	e5c32000 	strb	r2, [r3]
                fs->winflag = 1;
80005e1c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
80005e20:	e3a02001 	mov	r2, #1
80005e24:	e5c32028 	strb	r2, [r3, #40]	; 0x28
                ps = fs->winsect;                /* Remove the cluster chain */
80005e28:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
80005e2c:	e5933004 	ldr	r3, [r3, #4]
80005e30:	e50b3010 	str	r3, [fp, #-16]
                if (!remove_chain(fs, rs) || !move_window(fs, ps))
80005e34:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
80005e38:	e1a00003 	mov	r0, r3
80005e3c:	e51b100c 	ldr	r1, [fp, #-12]
80005e40:	ebfff94a 	bl	80004370 <remove_chain>
80005e44:	e1a03000 	mov	r3, r0
80005e48:	e3530000 	cmp	r3, #0
80005e4c:	0a000006 	beq	80005e6c <f_open+0x2e4>
80005e50:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
80005e54:	e1a00003 	mov	r0, r3
80005e58:	e51b1010 	ldr	r1, [fp, #-16]
80005e5c:	ebfff6f9 	bl	80003a48 <move_window>
80005e60:	e1a03000 	mov	r3, r0
80005e64:	e3530000 	cmp	r3, #0
80005e68:	1a000001 	bne	80005e74 <f_open+0x2ec>
                    return FR_RW_ERROR;
80005e6c:	e3a03008 	mov	r3, #8
80005e70:	ea0000b0 	b	80006138 <f_open+0x5b0>
                fs->last_clust = rs - 1;        /* Reuse the cluster hole */
80005e74:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
80005e78:	e51b200c 	ldr	r2, [fp, #-12]
80005e7c:	e2422001 	sub	r2, r2, #1
80005e80:	e583201c 	str	r2, [r3, #28]
            }
        }
        if (mode & FA_CREATE_ALWAYS) {
80005e84:	e55b3045 	ldrb	r3, [fp, #-69]	; 0xffffffbb
80005e88:	e2033008 	and	r3, r3, #8
80005e8c:	e3530000 	cmp	r3, #0
80005e90:	0a00005c 	beq	80006008 <f_open+0x480>
            dir[DIR_Attr] = AM_ARC;                /* New attribute */
80005e94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005e98:	e283300b 	add	r3, r3, #11
80005e9c:	e3a02020 	mov	r2, #32
80005ea0:	e5c32000 	strb	r2, [r3]
            ps = get_fattime();
80005ea4:	eb000a6f 	bl	80008868 <get_fattime>
80005ea8:	e50b0010 	str	r0, [fp, #-16]
            ST_DWORD(&dir[DIR_WrtTime], ps);    /* Updated time */
80005eac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005eb0:	e2833016 	add	r3, r3, #22
80005eb4:	e51b2010 	ldr	r2, [fp, #-16]
80005eb8:	e20220ff 	and	r2, r2, #255	; 0xff
80005ebc:	e5c32000 	strb	r2, [r3]
80005ec0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005ec4:	e2833017 	add	r3, r3, #23
80005ec8:	e51b2010 	ldr	r2, [fp, #-16]
80005ecc:	e1a02802 	lsl	r2, r2, #16
80005ed0:	e1a02822 	lsr	r2, r2, #16
80005ed4:	e1a02422 	lsr	r2, r2, #8
80005ed8:	e1a02802 	lsl	r2, r2, #16
80005edc:	e1a02822 	lsr	r2, r2, #16
80005ee0:	e20220ff 	and	r2, r2, #255	; 0xff
80005ee4:	e5c32000 	strb	r2, [r3]
80005ee8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005eec:	e2833018 	add	r3, r3, #24
80005ef0:	e51b2010 	ldr	r2, [fp, #-16]
80005ef4:	e1a02822 	lsr	r2, r2, #16
80005ef8:	e20220ff 	and	r2, r2, #255	; 0xff
80005efc:	e5c32000 	strb	r2, [r3]
80005f00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005f04:	e2833019 	add	r3, r3, #25
80005f08:	e51b2010 	ldr	r2, [fp, #-16]
80005f0c:	e1a02c22 	lsr	r2, r2, #24
80005f10:	e20220ff 	and	r2, r2, #255	; 0xff
80005f14:	e5c32000 	strb	r2, [r3]
            ST_DWORD(&dir[DIR_CrtTime], ps);    /* Created time */
80005f18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005f1c:	e283300e 	add	r3, r3, #14
80005f20:	e51b2010 	ldr	r2, [fp, #-16]
80005f24:	e20220ff 	and	r2, r2, #255	; 0xff
80005f28:	e5c32000 	strb	r2, [r3]
80005f2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005f30:	e283300f 	add	r3, r3, #15
80005f34:	e51b2010 	ldr	r2, [fp, #-16]
80005f38:	e1a02802 	lsl	r2, r2, #16
80005f3c:	e1a02822 	lsr	r2, r2, #16
80005f40:	e1a02422 	lsr	r2, r2, #8
80005f44:	e1a02802 	lsl	r2, r2, #16
80005f48:	e1a02822 	lsr	r2, r2, #16
80005f4c:	e20220ff 	and	r2, r2, #255	; 0xff
80005f50:	e5c32000 	strb	r2, [r3]
80005f54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005f58:	e2833010 	add	r3, r3, #16
80005f5c:	e51b2010 	ldr	r2, [fp, #-16]
80005f60:	e1a02822 	lsr	r2, r2, #16
80005f64:	e20220ff 	and	r2, r2, #255	; 0xff
80005f68:	e5c32000 	strb	r2, [r3]
80005f6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005f70:	e2833011 	add	r3, r3, #17
80005f74:	e51b2010 	ldr	r2, [fp, #-16]
80005f78:	e1a02c22 	lsr	r2, r2, #24
80005f7c:	e20220ff 	and	r2, r2, #255	; 0xff
80005f80:	e5c32000 	strb	r2, [r3]
            fs->winflag = 1;
80005f84:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
80005f88:	e3a02001 	mov	r2, #1
80005f8c:	e5c32028 	strb	r2, [r3, #40]	; 0x28
80005f90:	ea00001c 	b	80006008 <f_open+0x480>
        }
    }
    /* Open an existing file */
    else {
#endif /* !_FS_READONLY */
        if (res != FR_OK) return res;        /* Trace failed */
80005f94:	e55b3005 	ldrb	r3, [fp, #-5]
80005f98:	e3530000 	cmp	r3, #0
80005f9c:	0a000001 	beq	80005fa8 <f_open+0x420>
80005fa0:	e55b3005 	ldrb	r3, [fp, #-5]
80005fa4:	ea000063 	b	80006138 <f_open+0x5b0>
        if (dir == NULL || (dir[DIR_Attr] & AM_DIR))    /* It is a directory */
80005fa8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005fac:	e3530000 	cmp	r3, #0
80005fb0:	0a000005 	beq	80005fcc <f_open+0x444>
80005fb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005fb8:	e283300b 	add	r3, r3, #11
80005fbc:	e5d33000 	ldrb	r3, [r3]
80005fc0:	e2033010 	and	r3, r3, #16
80005fc4:	e3530000 	cmp	r3, #0
80005fc8:	0a000001 	beq	80005fd4 <f_open+0x44c>
            return FR_NO_FILE;
80005fcc:	e3a03002 	mov	r3, #2
80005fd0:	ea000058 	b	80006138 <f_open+0x5b0>
#if !_FS_READONLY
        if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
80005fd4:	e55b3045 	ldrb	r3, [fp, #-69]	; 0xffffffbb
80005fd8:	e2033002 	and	r3, r3, #2
80005fdc:	e3530000 	cmp	r3, #0
80005fe0:	0a000008 	beq	80006008 <f_open+0x480>
80005fe4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80005fe8:	e283300b 	add	r3, r3, #11
80005fec:	e5d33000 	ldrb	r3, [r3]
80005ff0:	e2033001 	and	r3, r3, #1
80005ff4:	e20330ff 	and	r3, r3, #255	; 0xff
80005ff8:	e3530000 	cmp	r3, #0
80005ffc:	0a000001 	beq	80006008 <f_open+0x480>
            return FR_DENIED;
80006000:	e3a03006 	mov	r3, #6
80006004:	ea00004b 	b	80006138 <f_open+0x5b0>
    }

    fp->dir_sect = fs->winsect;            /* Pointer to the directory entry */
80006008:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
8000600c:	e5932004 	ldr	r2, [r3, #4]
80006010:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
80006014:	e583201c 	str	r2, [r3, #28]
    fp->dir_ptr = dir;
80006018:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
8000601c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
80006020:	e5832020 	str	r2, [r3, #32]
#endif
    fp->flag = mode;                    /* File access mode */
80006024:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
80006028:	e55b2045 	ldrb	r2, [fp, #-69]	; 0xffffffbb
8000602c:	e5c32002 	strb	r2, [r3, #2]
    fp->org_clust =                        /* File start cluster */
        ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);
80006030:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80006034:	e2833015 	add	r3, r3, #21
80006038:	e5d33000 	ldrb	r3, [r3]
8000603c:	e1a03403 	lsl	r3, r3, #8
80006040:	e1a03803 	lsl	r3, r3, #16
80006044:	e1a02823 	lsr	r2, r3, #16
80006048:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
8000604c:	e2833014 	add	r3, r3, #20
80006050:	e5d33000 	ldrb	r3, [r3]
80006054:	e1823003 	orr	r3, r2, r3
80006058:	e1a03803 	lsl	r3, r3, #16
8000605c:	e1a03823 	lsr	r3, r3, #16
80006060:	e1a03803 	lsl	r3, r3, #16
80006064:	e1a03823 	lsr	r3, r3, #16
80006068:	e1a02803 	lsl	r2, r3, #16
8000606c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80006070:	e283301b 	add	r3, r3, #27
80006074:	e5d33000 	ldrb	r3, [r3]
80006078:	e1a03403 	lsl	r3, r3, #8
8000607c:	e1a03803 	lsl	r3, r3, #16
80006080:	e1a01823 	lsr	r1, r3, #16
80006084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80006088:	e283301a 	add	r3, r3, #26
8000608c:	e5d33000 	ldrb	r3, [r3]
80006090:	e1813003 	orr	r3, r1, r3
80006094:	e1a03803 	lsl	r3, r3, #16
80006098:	e1a03823 	lsr	r3, r3, #16
8000609c:	e1a03803 	lsl	r3, r3, #16
800060a0:	e1a03823 	lsr	r3, r3, #16
800060a4:	e1822003 	orr	r2, r2, r3

    fp->dir_sect = fs->winsect;            /* Pointer to the directory entry */
    fp->dir_ptr = dir;
#endif
    fp->flag = mode;                    /* File access mode */
    fp->org_clust =                        /* File start cluster */
800060a8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
800060ac:	e5832010 	str	r2, [r3, #16]
        ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);
    fp->fsize = LD_DWORD(&dir[DIR_FileSize]);    /* File size */
800060b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800060b4:	e283301f 	add	r3, r3, #31
800060b8:	e5d33000 	ldrb	r3, [r3]
800060bc:	e1a02c03 	lsl	r2, r3, #24
800060c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800060c4:	e283301e 	add	r3, r3, #30
800060c8:	e5d33000 	ldrb	r3, [r3]
800060cc:	e1a03803 	lsl	r3, r3, #16
800060d0:	e1822003 	orr	r2, r2, r3
800060d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800060d8:	e283301d 	add	r3, r3, #29
800060dc:	e5d33000 	ldrb	r3, [r3]
800060e0:	e1a03403 	lsl	r3, r3, #8
800060e4:	e1822003 	orr	r2, r2, r3
800060e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800060ec:	e283301c 	add	r3, r3, #28
800060f0:	e5d33000 	ldrb	r3, [r3]
800060f4:	e1822003 	orr	r2, r2, r3
800060f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
800060fc:	e583200c 	str	r2, [r3, #12]
    fp->fptr = 0;                        /* File ptr */
80006100:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
80006104:	e3a02000 	mov	r2, #0
80006108:	e5832008 	str	r2, [r3, #8]
    fp->sect_clust = 1;                    /* Sector counter */
8000610c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
80006110:	e3a02001 	mov	r2, #1
80006114:	e5c32003 	strb	r2, [r3, #3]
    fp->fs = fs; fp->id = fs->id;        /* Owner file system object of the file */
80006118:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
8000611c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
80006120:	e5832004 	str	r2, [r3, #4]
80006124:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
80006128:	e1d320b0 	ldrh	r2, [r3]
8000612c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
80006130:	e1c320b0 	strh	r2, [r3]

    return FR_OK;
80006134:	e3a03000 	mov	r3, #0
}
80006138:	e1a00003 	mov	r0, r3
8000613c:	e24bd004 	sub	sp, fp, #4
80006140:	e8bd4800 	pop	{fp, lr}
80006144:	e12fff1e 	bx	lr

80006148 <f_read>:
    FIL *fp,         /* Pointer to the file object */
    void *buff,        /* Pointer to data buffer */
    WORD btr,        /* Number of bytes to read */
    WORD *br        /* Pointer to number of bytes read */
)
{
80006148:	e92d4800 	push	{fp, lr}
8000614c:	e28db004 	add	fp, sp, #4
80006150:	e24dd030 	sub	sp, sp, #48	; 0x30
80006154:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
80006158:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
8000615c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
80006160:	e14b22be 	strh	r2, [fp, #-46]	; 0xffffffd2
    DWORD clust, sect, remain;
    WORD rcnt;
    BYTE cc, *rbuff = buff;
80006164:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
80006168:	e50b3010 	str	r3, [fp, #-16]
    FRESULT res;
    FATFS *fs = fp->fs;
8000616c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006170:	e5933004 	ldr	r3, [r3, #4]
80006174:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec


    *br = 0;
80006178:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
8000617c:	e3a02000 	mov	r2, #0
80006180:	e1c320b0 	strh	r2, [r3]
    res = validate(fs, fp->id);                        /* Check validity of the object */
80006184:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006188:	e1d330b0 	ldrh	r3, [r3]
8000618c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
80006190:	e1a01003 	mov	r1, r3
80006194:	ebfffe34 	bl	80005a6c <validate>
80006198:	e1a03000 	mov	r3, r0
8000619c:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    if (res) return res;
800061a0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
800061a4:	e3530000 	cmp	r3, #0
800061a8:	0a000001 	beq	800061b4 <f_read+0x6c>
800061ac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
800061b0:	ea0000ee 	b	80006570 <f_read+0x428>
    if (fp->flag & FA__ERROR) return FR_RW_ERROR;    /* Check error flag */
800061b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800061b8:	e5d33002 	ldrb	r3, [r3, #2]
800061bc:	e20330ff 	and	r3, r3, #255	; 0xff
800061c0:	e1a03c03 	lsl	r3, r3, #24
800061c4:	e1a03c43 	asr	r3, r3, #24
800061c8:	e3530000 	cmp	r3, #0
800061cc:	aa000001 	bge	800061d8 <f_read+0x90>
800061d0:	e3a03008 	mov	r3, #8
800061d4:	ea0000e5 	b	80006570 <f_read+0x428>
    if (!(fp->flag & FA_READ)) return FR_DENIED;    /* Check access mode */
800061d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800061dc:	e5d33002 	ldrb	r3, [r3, #2]
800061e0:	e2033001 	and	r3, r3, #1
800061e4:	e3530000 	cmp	r3, #0
800061e8:	1a000001 	bne	800061f4 <f_read+0xac>
800061ec:	e3a03006 	mov	r3, #6
800061f0:	ea0000de 	b	80006570 <f_read+0x428>
    remain = fp->fsize - fp->fptr;
800061f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800061f8:	e593200c 	ldr	r2, [r3, #12]
800061fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006200:	e5933008 	ldr	r3, [r3, #8]
80006204:	e0633002 	rsb	r3, r3, r2
80006208:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (btr > remain) btr = (WORD)remain;            /* Truncate read count by number of bytes left */
8000620c:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
80006210:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80006214:	e1520003 	cmp	r2, r3
80006218:	9a0000c2 	bls	80006528 <f_read+0x3e0>
8000621c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80006220:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2

    for ( ;  btr;                                    /* Repeat until all data transferred */
80006224:	ea0000bf 	b	80006528 <f_read+0x3e0>
        rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
        if ((fp->fptr & (S_SIZ - 1)) == 0) {        /* On the sector boundary */
80006228:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
8000622c:	e5933008 	ldr	r3, [r3, #8]
80006230:	e1a03b83 	lsl	r3, r3, #23
80006234:	e1a03ba3 	lsr	r3, r3, #23
80006238:	e3530000 	cmp	r3, #0
8000623c:	1a000087 	bne	80006460 <f_read+0x318>
            if (--fp->sect_clust) {                    /* Decrement left sector counter */
80006240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006244:	e5d33003 	ldrb	r3, [r3, #3]
80006248:	e2433001 	sub	r3, r3, #1
8000624c:	e20320ff 	and	r2, r3, #255	; 0xff
80006250:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006254:	e5c32003 	strb	r2, [r3, #3]
80006258:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
8000625c:	e5d33003 	ldrb	r3, [r3, #3]
80006260:	e3530000 	cmp	r3, #0
80006264:	0a000004 	beq	8000627c <f_read+0x134>
                sect = fp->curr_sect + 1;            /* Get current sector */
80006268:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
8000626c:	e5933018 	ldr	r3, [r3, #24]
80006270:	e2833001 	add	r3, r3, #1
80006274:	e50b3008 	str	r3, [fp, #-8]
80006278:	ea000020 	b	80006300 <f_read+0x1b8>
            } else {                                /* On the cluster boundary, get next cluster */
                clust = (fp->fptr == 0) ?
8000627c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006280:	e5933008 	ldr	r3, [r3, #8]
                    fp->org_clust : get_cluster(fs, fp->curr_clust);
80006284:	e3530000 	cmp	r3, #0
80006288:	1a000002 	bne	80006298 <f_read+0x150>
8000628c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006290:	e5933010 	ldr	r3, [r3, #16]
80006294:	ea000005 	b	800062b0 <f_read+0x168>
80006298:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
8000629c:	e5933014 	ldr	r3, [r3, #20]
800062a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
800062a4:	e1a01003 	mov	r1, r3
800062a8:	ebfff65f 	bl	80003c2c <get_cluster>
800062ac:	e1a03000 	mov	r3, r0
        rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
        if ((fp->fptr & (S_SIZ - 1)) == 0) {        /* On the sector boundary */
            if (--fp->sect_clust) {                    /* Decrement left sector counter */
                sect = fp->curr_sect + 1;            /* Get current sector */
            } else {                                /* On the cluster boundary, get next cluster */
                clust = (fp->fptr == 0) ?
800062b0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                    fp->org_clust : get_cluster(fs, fp->curr_clust);
                if (clust < 2 || clust >= fs->max_clust)
800062b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800062b8:	e3530001 	cmp	r3, #1
800062bc:	9a0000a3 	bls	80006550 <f_read+0x408>
800062c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800062c4:	e593200c 	ldr	r2, [r3, #12]
800062c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800062cc:	e1520003 	cmp	r2, r3
800062d0:	9a00009e 	bls	80006550 <f_read+0x408>
                    goto fr_error;
                fp->curr_clust = clust;                /* Current cluster */
800062d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800062d8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
800062dc:	e5832014 	str	r2, [r3, #20]
                sect = clust2sect(fs, clust);        /* Get current sector */
800062e0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
800062e4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
800062e8:	ebfff8c5 	bl	80004604 <clust2sect>
800062ec:	e50b0008 	str	r0, [fp, #-8]
                fp->sect_clust = fs->sects_clust;    /* Re-initialize the left sector counter */
800062f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800062f4:	e5d32025 	ldrb	r2, [r3, #37]	; 0x25
800062f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800062fc:	e5c32003 	strb	r2, [r3, #3]
            }
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {                /* Flush file I/O buffer if needed */
80006300:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006304:	e5d33002 	ldrb	r3, [r3, #2]
80006308:	e2033040 	and	r3, r3, #64	; 0x40
8000630c:	e3530000 	cmp	r3, #0
80006310:	0a000013 	beq	80006364 <f_read+0x21c>
                if (disk_write(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
80006314:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80006318:	e5d31027 	ldrb	r1, [r3, #39]	; 0x27
8000631c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006320:	e2832024 	add	r2, r3, #36	; 0x24
80006324:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006328:	e5933018 	ldr	r3, [r3, #24]
8000632c:	e1a00001 	mov	r0, r1
80006330:	e1a01002 	mov	r1, r2
80006334:	e1a02003 	mov	r2, r3
80006338:	e3a03001 	mov	r3, #1
8000633c:	eb000920 	bl	800087c4 <disk_write>
80006340:	e1a03000 	mov	r3, r0
80006344:	e3530000 	cmp	r3, #0
80006348:	1a00007b 	bne	8000653c <f_read+0x3f4>
                    goto fr_error;
                fp->flag &= ~FA__DIRTY;
8000634c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006350:	e5d33002 	ldrb	r3, [r3, #2]
80006354:	e3c33040 	bic	r3, r3, #64	; 0x40
80006358:	e20320ff 	and	r2, r3, #255	; 0xff
8000635c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006360:	e5c32002 	strb	r2, [r3, #2]
            }
#endif
            fp->curr_sect = sect;                    /* Update current sector */
80006364:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006368:	e51b2008 	ldr	r2, [fp, #-8]
8000636c:	e5832018 	str	r2, [r3, #24]
            cc = btr / S_SIZ;                        /* When left bytes >= S_SIZ, */
80006370:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
80006374:	e1a034a3 	lsr	r3, r3, #9
80006378:	e1a03803 	lsl	r3, r3, #16
8000637c:	e1a03823 	lsr	r3, r3, #16
80006380:	e54b300b 	strb	r3, [fp, #-11]
            if (cc) {                                /* Read maximum contiguous sectors directly */
80006384:	e55b300b 	ldrb	r3, [fp, #-11]
80006388:	e3530000 	cmp	r3, #0
8000638c:	0a000027 	beq	80006430 <f_read+0x2e8>
                if (cc > fp->sect_clust) cc = fp->sect_clust;
80006390:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006394:	e5d33003 	ldrb	r3, [r3, #3]
80006398:	e55b200b 	ldrb	r2, [fp, #-11]
8000639c:	e1520003 	cmp	r2, r3
800063a0:	9a000002 	bls	800063b0 <f_read+0x268>
800063a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800063a8:	e5d33003 	ldrb	r3, [r3, #3]
800063ac:	e54b300b 	strb	r3, [fp, #-11]
                if (disk_read(fs->drive, rbuff, sect, cc) != RES_OK)
800063b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800063b4:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
800063b8:	e55b300b 	ldrb	r3, [fp, #-11]
800063bc:	e1a00002 	mov	r0, r2
800063c0:	e51b1010 	ldr	r1, [fp, #-16]
800063c4:	e51b2008 	ldr	r2, [fp, #-8]
800063c8:	eb0008e1 	bl	80008754 <disk_read>
800063cc:	e1a03000 	mov	r3, r0
800063d0:	e3530000 	cmp	r3, #0
800063d4:	1a00005a 	bne	80006544 <f_read+0x3fc>
                    goto fr_error;
                fp->sect_clust -= cc - 1;
800063d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800063dc:	e5d32003 	ldrb	r2, [r3, #3]
800063e0:	e55b300b 	ldrb	r3, [fp, #-11]
800063e4:	e0633002 	rsb	r3, r3, r2
800063e8:	e20330ff 	and	r3, r3, #255	; 0xff
800063ec:	e2833001 	add	r3, r3, #1
800063f0:	e20320ff 	and	r2, r3, #255	; 0xff
800063f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800063f8:	e5c32003 	strb	r2, [r3, #3]
                fp->curr_sect += cc - 1;
800063fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006400:	e5932018 	ldr	r2, [r3, #24]
80006404:	e55b300b 	ldrb	r3, [fp, #-11]
80006408:	e0823003 	add	r3, r2, r3
8000640c:	e2432001 	sub	r2, r3, #1
80006410:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006414:	e5832018 	str	r2, [r3, #24]
                rcnt = cc * S_SIZ; continue;
80006418:	e55b300b 	ldrb	r3, [fp, #-11]
8000641c:	e1a03803 	lsl	r3, r3, #16
80006420:	e1a03823 	lsr	r3, r3, #16
80006424:	e1a03483 	lsl	r3, r3, #9
80006428:	e14b30ba 	strh	r3, [fp, #-10]
8000642c:	ea000027 	b	800064d0 <f_read+0x388>
            }
            if (disk_read(fs->drive, fp->buffer, sect, 1) != RES_OK)    /* Load the sector into file I/O buffer */
80006430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80006434:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
80006438:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
8000643c:	e2833024 	add	r3, r3, #36	; 0x24
80006440:	e1a00002 	mov	r0, r2
80006444:	e1a01003 	mov	r1, r3
80006448:	e51b2008 	ldr	r2, [fp, #-8]
8000644c:	e3a03001 	mov	r3, #1
80006450:	eb0008bf 	bl	80008754 <disk_read>
80006454:	e1a03000 	mov	r3, r0
80006458:	e3530000 	cmp	r3, #0
8000645c:	1a00003a 	bne	8000654c <f_read+0x404>
                goto fr_error;
        }
        rcnt = S_SIZ - ((WORD)fp->fptr & (S_SIZ - 1));                /* Copy fractional bytes from file I/O buffer */
80006460:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006464:	e5933008 	ldr	r3, [r3, #8]
80006468:	e1a03803 	lsl	r3, r3, #16
8000646c:	e1a03823 	lsr	r3, r3, #16
80006470:	e1a03b83 	lsl	r3, r3, #23
80006474:	e1a03ba3 	lsr	r3, r3, #23
80006478:	e1a03803 	lsl	r3, r3, #16
8000647c:	e1a03823 	lsr	r3, r3, #16
80006480:	e2633c02 	rsb	r3, r3, #512	; 0x200
80006484:	e14b30ba 	strh	r3, [fp, #-10]
        if (rcnt > btr) rcnt = btr;
80006488:	e15b20ba 	ldrh	r2, [fp, #-10]
8000648c:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
80006490:	e1520003 	cmp	r2, r3
80006494:	9a000001 	bls	800064a0 <f_read+0x358>
80006498:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
8000649c:	e14b30ba 	strh	r3, [fp, #-10]
        memcpy(rbuff, &fp->buffer[fp->fptr & (S_SIZ - 1)], rcnt);
800064a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800064a4:	e2832024 	add	r2, r3, #36	; 0x24
800064a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800064ac:	e5933008 	ldr	r3, [r3, #8]
800064b0:	e1a03b83 	lsl	r3, r3, #23
800064b4:	e1a03ba3 	lsr	r3, r3, #23
800064b8:	e0822003 	add	r2, r2, r3
800064bc:	e15b30ba 	ldrh	r3, [fp, #-10]
800064c0:	e51b0010 	ldr	r0, [fp, #-16]
800064c4:	e1a01002 	mov	r1, r2
800064c8:	e1a02003 	mov	r2, r3
800064cc:	eb0009b3 	bl	80008ba0 <memcpy>
    if (!(fp->flag & FA_READ)) return FR_DENIED;    /* Check access mode */
    remain = fp->fsize - fp->fptr;
    if (btr > remain) btr = (WORD)remain;            /* Truncate read count by number of bytes left */

    for ( ;  btr;                                    /* Repeat until all data transferred */
        rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
800064d0:	e15b30ba 	ldrh	r3, [fp, #-10]
800064d4:	e51b2010 	ldr	r2, [fp, #-16]
800064d8:	e0823003 	add	r3, r2, r3
800064dc:	e50b3010 	str	r3, [fp, #-16]
800064e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800064e4:	e5932008 	ldr	r2, [r3, #8]
800064e8:	e15b30ba 	ldrh	r3, [fp, #-10]
800064ec:	e0822003 	add	r2, r2, r3
800064f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800064f4:	e5832008 	str	r2, [r3, #8]
800064f8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
800064fc:	e1d320b0 	ldrh	r2, [r3]
80006500:	e15b30ba 	ldrh	r3, [fp, #-10]
80006504:	e0823003 	add	r3, r2, r3
80006508:	e1a03803 	lsl	r3, r3, #16
8000650c:	e1a02823 	lsr	r2, r3, #16
80006510:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
80006514:	e1c320b0 	strh	r2, [r3]
80006518:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
8000651c:	e15b30ba 	ldrh	r3, [fp, #-10]
80006520:	e0633002 	rsb	r3, r3, r2
80006524:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
    if (fp->flag & FA__ERROR) return FR_RW_ERROR;    /* Check error flag */
    if (!(fp->flag & FA_READ)) return FR_DENIED;    /* Check access mode */
    remain = fp->fsize - fp->fptr;
    if (btr > remain) btr = (WORD)remain;            /* Truncate read count by number of bytes left */

    for ( ;  btr;                                    /* Repeat until all data transferred */
80006528:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
8000652c:	e3530000 	cmp	r3, #0
80006530:	1affff3c 	bne	80006228 <f_read+0xe0>
        rcnt = S_SIZ - ((WORD)fp->fptr & (S_SIZ - 1));                /* Copy fractional bytes from file I/O buffer */
        if (rcnt > btr) rcnt = btr;
        memcpy(rbuff, &fp->buffer[fp->fptr & (S_SIZ - 1)], rcnt);
    }

    return FR_OK;
80006534:	e3a03000 	mov	r3, #0
80006538:	ea00000c 	b	80006570 <f_read+0x428>
                fp->sect_clust = fs->sects_clust;    /* Re-initialize the left sector counter */
            }
#if !_FS_READONLY
            if (fp->flag & FA__DIRTY) {                /* Flush file I/O buffer if needed */
                if (disk_write(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
                    goto fr_error;
8000653c:	e1a00000 	nop			; (mov r0, r0)
80006540:	ea000002 	b	80006550 <f_read+0x408>
            fp->curr_sect = sect;                    /* Update current sector */
            cc = btr / S_SIZ;                        /* When left bytes >= S_SIZ, */
            if (cc) {                                /* Read maximum contiguous sectors directly */
                if (cc > fp->sect_clust) cc = fp->sect_clust;
                if (disk_read(fs->drive, rbuff, sect, cc) != RES_OK)
                    goto fr_error;
80006544:	e1a00000 	nop			; (mov r0, r0)
80006548:	ea000000 	b	80006550 <f_read+0x408>
                fp->sect_clust -= cc - 1;
                fp->curr_sect += cc - 1;
                rcnt = cc * S_SIZ; continue;
            }
            if (disk_read(fs->drive, fp->buffer, sect, 1) != RES_OK)    /* Load the sector into file I/O buffer */
                goto fr_error;
8000654c:	e1a00000 	nop			; (mov r0, r0)
    }

    return FR_OK;

fr_error:    /* Abort this file due to an unrecoverable error */
    fp->flag |= FA__ERROR;
80006550:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006554:	e5d33002 	ldrb	r3, [r3, #2]
80006558:	e1e03c83 	mvn	r3, r3, lsl #25
8000655c:	e1e03ca3 	mvn	r3, r3, lsr #25
80006560:	e20320ff 	and	r2, r3, #255	; 0xff
80006564:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80006568:	e5c32002 	strb	r2, [r3, #2]
    return FR_RW_ERROR;
8000656c:	e3a03008 	mov	r3, #8
}
80006570:	e1a00003 	mov	r0, r3
80006574:	e24bd004 	sub	sp, fp, #4
80006578:	e8bd4800 	pop	{fp, lr}
8000657c:	e12fff1e 	bx	lr

80006580 <f_write>:
    FIL *fp,            /* Pointer to the file object */
    const void *buff,    /* Pointer to the data to be written */
    WORD btw,            /* Number of bytes to write */
    WORD *bw            /* Pointer to number of bytes written */
)
{
80006580:	e92d4800 	push	{fp, lr}
80006584:	e28db004 	add	fp, sp, #4
80006588:	e24dd028 	sub	sp, sp, #40	; 0x28
8000658c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
80006590:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
80006594:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
80006598:	e14b22b6 	strh	r2, [fp, #-38]	; 0xffffffda
    DWORD clust, sect;
    WORD wcnt;
    BYTE cc;
    FRESULT res;
    const BYTE *wbuff = buff;
8000659c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
800065a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    FATFS *fs = fp->fs;
800065a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800065a8:	e5933004 	ldr	r3, [r3, #4]
800065ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8


    *bw = 0;
800065b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
800065b4:	e3a02000 	mov	r2, #0
800065b8:	e1c320b0 	strh	r2, [r3]
    res = validate(fs, fp->id);                        /* Check validity of the object */
800065bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800065c0:	e1d330b0 	ldrh	r3, [r3]
800065c4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
800065c8:	e1a01003 	mov	r1, r3
800065cc:	ebfffd26 	bl	80005a6c <validate>
800065d0:	e1a03000 	mov	r3, r0
800065d4:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    if (res) return res;
800065d8:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
800065dc:	e3530000 	cmp	r3, #0
800065e0:	0a000001 	beq	800065ec <f_write+0x6c>
800065e4:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
800065e8:	ea000116 	b	80006a48 <f_write+0x4c8>
    if (fp->flag & FA__ERROR) return FR_RW_ERROR;    /* Check error flag */
800065ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800065f0:	e5d33002 	ldrb	r3, [r3, #2]
800065f4:	e20330ff 	and	r3, r3, #255	; 0xff
800065f8:	e1a03c03 	lsl	r3, r3, #24
800065fc:	e1a03c43 	asr	r3, r3, #24
80006600:	e3530000 	cmp	r3, #0
80006604:	aa000001 	bge	80006610 <f_write+0x90>
80006608:	e3a03008 	mov	r3, #8
8000660c:	ea00010d 	b	80006a48 <f_write+0x4c8>
    if (!(fp->flag & FA_WRITE)) return FR_DENIED;    /* Check access mode */
80006610:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006614:	e5d33002 	ldrb	r3, [r3, #2]
80006618:	e2033002 	and	r3, r3, #2
8000661c:	e3530000 	cmp	r3, #0
80006620:	1a000001 	bne	8000662c <f_write+0xac>
80006624:	e3a03006 	mov	r3, #6
80006628:	ea000106 	b	80006a48 <f_write+0x4c8>
    if (fp->fsize + btw < fp->fsize) return FR_OK;    /* File size cannot reach 4GB */
8000662c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006630:	e593200c 	ldr	r2, [r3, #12]
80006634:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
80006638:	e0822003 	add	r2, r2, r3
8000663c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006640:	e593300c 	ldr	r3, [r3, #12]
80006644:	e1520003 	cmp	r2, r3
80006648:	2a0000da 	bcs	800069b8 <f_write+0x438>
8000664c:	e3a03000 	mov	r3, #0
80006650:	ea0000fc 	b	80006a48 <f_write+0x4c8>

    for ( ;  btw;                                    /* Repeat until all data transferred */
        wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
        if ((fp->fptr & (S_SIZ - 1)) == 0) {        /* On the sector boundary */
80006654:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006658:	e5933008 	ldr	r3, [r3, #8]
8000665c:	e1a03b83 	lsl	r3, r3, #23
80006660:	e1a03ba3 	lsr	r3, r3, #23
80006664:	e3530000 	cmp	r3, #0
80006668:	1a00009a 	bne	800068d8 <f_write+0x358>
            if (--fp->sect_clust) {                    /* Decrement left sector counter */
8000666c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006670:	e5d33003 	ldrb	r3, [r3, #3]
80006674:	e2433001 	sub	r3, r3, #1
80006678:	e20320ff 	and	r2, r3, #255	; 0xff
8000667c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006680:	e5c32003 	strb	r2, [r3, #3]
80006684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006688:	e5d33003 	ldrb	r3, [r3, #3]
8000668c:	e3530000 	cmp	r3, #0
80006690:	0a000004 	beq	800066a8 <f_write+0x128>
                sect = fp->curr_sect + 1;            /* Get current sector */
80006694:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006698:	e5933018 	ldr	r3, [r3, #24]
8000669c:	e2833001 	add	r3, r3, #1
800066a0:	e50b300c 	str	r3, [fp, #-12]
800066a4:	ea00002d 	b	80006760 <f_write+0x1e0>
            } else {                                /* On the cluster boundary, get next cluster */
                if (fp->fptr == 0) {                /* Is top of the file */
800066a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800066ac:	e5933008 	ldr	r3, [r3, #8]
800066b0:	e3530000 	cmp	r3, #0
800066b4:	1a00000d 	bne	800066f0 <f_write+0x170>
                    clust = fp->org_clust;
800066b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800066bc:	e5933010 	ldr	r3, [r3, #16]
800066c0:	e50b3008 	str	r3, [fp, #-8]
                    if (clust == 0)                    /* No cluster is created yet */
800066c4:	e51b3008 	ldr	r3, [fp, #-8]
800066c8:	e3530000 	cmp	r3, #0
800066cc:	1a00000d 	bne	80006708 <f_write+0x188>
                        fp->org_clust = clust = create_chain(fs, 0);    /* Create a new cluster chain */
800066d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
800066d4:	e3a01000 	mov	r1, #0
800066d8:	ebfff754 	bl	80004430 <create_chain>
800066dc:	e50b0008 	str	r0, [fp, #-8]
800066e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800066e4:	e51b2008 	ldr	r2, [fp, #-8]
800066e8:	e5832010 	str	r2, [r3, #16]
800066ec:	ea000005 	b	80006708 <f_write+0x188>
                } else {                            /* Middle or end of file */
                    clust = create_chain(fs, fp->curr_clust);            /* Trace or streach cluster chain */
800066f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800066f4:	e5933014 	ldr	r3, [r3, #20]
800066f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
800066fc:	e1a01003 	mov	r1, r3
80006700:	ebfff74a 	bl	80004430 <create_chain>
80006704:	e50b0008 	str	r0, [fp, #-8]
                }
                if (clust == 0) break;                /* Disk full */
80006708:	e51b3008 	ldr	r3, [fp, #-8]
8000670c:	e3530000 	cmp	r3, #0
80006710:	0a0000ac 	beq	800069c8 <f_write+0x448>
                if (clust == 1 || clust >= fs->max_clust) goto fw_error;
80006714:	e51b3008 	ldr	r3, [fp, #-8]
80006718:	e3530001 	cmp	r3, #1
8000671c:	0a0000c1 	beq	80006a28 <f_write+0x4a8>
80006720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006724:	e593200c 	ldr	r2, [r3, #12]
80006728:	e51b3008 	ldr	r3, [fp, #-8]
8000672c:	e1520003 	cmp	r2, r3
80006730:	9a0000bc 	bls	80006a28 <f_write+0x4a8>
                fp->curr_clust = clust;                /* Current cluster */
80006734:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006738:	e51b2008 	ldr	r2, [fp, #-8]
8000673c:	e5832014 	str	r2, [r3, #20]
                sect = clust2sect(fs, clust);        /* Get current sector */
80006740:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
80006744:	e51b1008 	ldr	r1, [fp, #-8]
80006748:	ebfff7ad 	bl	80004604 <clust2sect>
8000674c:	e50b000c 	str	r0, [fp, #-12]
                fp->sect_clust = fs->sects_clust;    /* Re-initialize the left sector counter */
80006750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006754:	e5d32025 	ldrb	r2, [r3, #37]	; 0x25
80006758:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000675c:	e5c32003 	strb	r2, [r3, #3]
            }
            if (fp->flag & FA__DIRTY) {                /* Flush file I/O buffer if needed */
80006760:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006764:	e5d33002 	ldrb	r3, [r3, #2]
80006768:	e2033040 	and	r3, r3, #64	; 0x40
8000676c:	e3530000 	cmp	r3, #0
80006770:	0a000013 	beq	800067c4 <f_write+0x244>
                if (disk_write(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
80006774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006778:	e5d31027 	ldrb	r1, [r3, #39]	; 0x27
8000677c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006780:	e2832024 	add	r2, r3, #36	; 0x24
80006784:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006788:	e5933018 	ldr	r3, [r3, #24]
8000678c:	e1a00001 	mov	r0, r1
80006790:	e1a01002 	mov	r1, r2
80006794:	e1a02003 	mov	r2, r3
80006798:	e3a03001 	mov	r3, #1
8000679c:	eb000808 	bl	800087c4 <disk_write>
800067a0:	e1a03000 	mov	r3, r0
800067a4:	e3530000 	cmp	r3, #0
800067a8:	1a000099 	bne	80006a14 <f_write+0x494>
                    goto fw_error;
                fp->flag &= ~FA__DIRTY;
800067ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800067b0:	e5d33002 	ldrb	r3, [r3, #2]
800067b4:	e3c33040 	bic	r3, r3, #64	; 0x40
800067b8:	e20320ff 	and	r2, r3, #255	; 0xff
800067bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800067c0:	e5c32002 	strb	r2, [r3, #2]
            }
            fp->curr_sect = sect;                    /* Update current sector */
800067c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800067c8:	e51b200c 	ldr	r2, [fp, #-12]
800067cc:	e5832018 	str	r2, [r3, #24]
            cc = btw / S_SIZ;                        /* When left bytes >= S_SIZ, */
800067d0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
800067d4:	e1a034a3 	lsr	r3, r3, #9
800067d8:	e1a03803 	lsl	r3, r3, #16
800067dc:	e1a03823 	lsr	r3, r3, #16
800067e0:	e54b300f 	strb	r3, [fp, #-15]
            if (cc) {                                /* Write maximum contiguous sectors directly */
800067e4:	e55b300f 	ldrb	r3, [fp, #-15]
800067e8:	e3530000 	cmp	r3, #0
800067ec:	0a000027 	beq	80006890 <f_write+0x310>
                if (cc > fp->sect_clust) cc = fp->sect_clust;
800067f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800067f4:	e5d33003 	ldrb	r3, [r3, #3]
800067f8:	e55b200f 	ldrb	r2, [fp, #-15]
800067fc:	e1520003 	cmp	r2, r3
80006800:	9a000002 	bls	80006810 <f_write+0x290>
80006804:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006808:	e5d33003 	ldrb	r3, [r3, #3]
8000680c:	e54b300f 	strb	r3, [fp, #-15]
                if (disk_write(fs->drive, wbuff, sect, cc) != RES_OK)
80006810:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006814:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
80006818:	e55b300f 	ldrb	r3, [fp, #-15]
8000681c:	e1a00002 	mov	r0, r2
80006820:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
80006824:	e51b200c 	ldr	r2, [fp, #-12]
80006828:	eb0007e5 	bl	800087c4 <disk_write>
8000682c:	e1a03000 	mov	r3, r0
80006830:	e3530000 	cmp	r3, #0
80006834:	1a000078 	bne	80006a1c <f_write+0x49c>
                    goto fw_error;
                fp->sect_clust -= cc - 1;
80006838:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000683c:	e5d32003 	ldrb	r2, [r3, #3]
80006840:	e55b300f 	ldrb	r3, [fp, #-15]
80006844:	e0633002 	rsb	r3, r3, r2
80006848:	e20330ff 	and	r3, r3, #255	; 0xff
8000684c:	e2833001 	add	r3, r3, #1
80006850:	e20320ff 	and	r2, r3, #255	; 0xff
80006854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006858:	e5c32003 	strb	r2, [r3, #3]
                fp->curr_sect += cc - 1;
8000685c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006860:	e5932018 	ldr	r2, [r3, #24]
80006864:	e55b300f 	ldrb	r3, [fp, #-15]
80006868:	e0823003 	add	r3, r2, r3
8000686c:	e2432001 	sub	r2, r3, #1
80006870:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006874:	e5832018 	str	r2, [r3, #24]
                wcnt = cc * S_SIZ; continue;
80006878:	e55b300f 	ldrb	r3, [fp, #-15]
8000687c:	e1a03803 	lsl	r3, r3, #16
80006880:	e1a03823 	lsr	r3, r3, #16
80006884:	e1a03483 	lsl	r3, r3, #9
80006888:	e14b30be 	strh	r3, [fp, #-14]
8000688c:	ea000033 	b	80006960 <f_write+0x3e0>
            }
            if (fp->fptr < fp->fsize &&              /* Fill sector buffer with file data if needed */
80006890:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006894:	e5932008 	ldr	r2, [r3, #8]
80006898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000689c:	e593300c 	ldr	r3, [r3, #12]
800068a0:	e1520003 	cmp	r2, r3
800068a4:	2a00000b 	bcs	800068d8 <f_write+0x358>
                disk_read(fs->drive, fp->buffer, sect, 1) != RES_OK)
800068a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800068ac:	e5d32027 	ldrb	r2, [r3, #39]	; 0x27
800068b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800068b4:	e2833024 	add	r3, r3, #36	; 0x24
800068b8:	e1a00002 	mov	r0, r2
800068bc:	e1a01003 	mov	r1, r3
800068c0:	e51b200c 	ldr	r2, [fp, #-12]
800068c4:	e3a03001 	mov	r3, #1
800068c8:	eb0007a1 	bl	80008754 <disk_read>
800068cc:	e1a03000 	mov	r3, r0
                    goto fw_error;
                fp->sect_clust -= cc - 1;
                fp->curr_sect += cc - 1;
                wcnt = cc * S_SIZ; continue;
            }
            if (fp->fptr < fp->fsize &&              /* Fill sector buffer with file data if needed */
800068d0:	e3530000 	cmp	r3, #0
800068d4:	1a000052 	bne	80006a24 <f_write+0x4a4>
                disk_read(fs->drive, fp->buffer, sect, 1) != RES_OK)
                    goto fw_error;
        }
        wcnt = S_SIZ - ((WORD)fp->fptr & (S_SIZ - 1));    /* Copy fractional bytes to file I/O buffer */
800068d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800068dc:	e5933008 	ldr	r3, [r3, #8]
800068e0:	e1a03803 	lsl	r3, r3, #16
800068e4:	e1a03823 	lsr	r3, r3, #16
800068e8:	e1a03b83 	lsl	r3, r3, #23
800068ec:	e1a03ba3 	lsr	r3, r3, #23
800068f0:	e1a03803 	lsl	r3, r3, #16
800068f4:	e1a03823 	lsr	r3, r3, #16
800068f8:	e2633c02 	rsb	r3, r3, #512	; 0x200
800068fc:	e14b30be 	strh	r3, [fp, #-14]
        if (wcnt > btw) wcnt = btw;
80006900:	e15b20be 	ldrh	r2, [fp, #-14]
80006904:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
80006908:	e1520003 	cmp	r2, r3
8000690c:	9a000001 	bls	80006918 <f_write+0x398>
80006910:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
80006914:	e14b30be 	strh	r3, [fp, #-14]
        memcpy(&fp->buffer[fp->fptr & (S_SIZ - 1)], wbuff, wcnt);
80006918:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000691c:	e2832024 	add	r2, r3, #36	; 0x24
80006920:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006924:	e5933008 	ldr	r3, [r3, #8]
80006928:	e1a03b83 	lsl	r3, r3, #23
8000692c:	e1a03ba3 	lsr	r3, r3, #23
80006930:	e0822003 	add	r2, r2, r3
80006934:	e15b30be 	ldrh	r3, [fp, #-14]
80006938:	e1a00002 	mov	r0, r2
8000693c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
80006940:	e1a02003 	mov	r2, r3
80006944:	eb000895 	bl	80008ba0 <memcpy>
        fp->flag |= FA__DIRTY;
80006948:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000694c:	e5d33002 	ldrb	r3, [r3, #2]
80006950:	e3833040 	orr	r3, r3, #64	; 0x40
80006954:	e20320ff 	and	r2, r3, #255	; 0xff
80006958:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000695c:	e5c32002 	strb	r2, [r3, #2]
    if (fp->flag & FA__ERROR) return FR_RW_ERROR;    /* Check error flag */
    if (!(fp->flag & FA_WRITE)) return FR_DENIED;    /* Check access mode */
    if (fp->fsize + btw < fp->fsize) return FR_OK;    /* File size cannot reach 4GB */

    for ( ;  btw;                                    /* Repeat until all data transferred */
        wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
80006960:	e15b30be 	ldrh	r3, [fp, #-14]
80006964:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80006968:	e0823003 	add	r3, r2, r3
8000696c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
80006970:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006974:	e5932008 	ldr	r2, [r3, #8]
80006978:	e15b30be 	ldrh	r3, [fp, #-14]
8000697c:	e0822003 	add	r2, r2, r3
80006980:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006984:	e5832008 	str	r2, [r3, #8]
80006988:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
8000698c:	e1d320b0 	ldrh	r2, [r3]
80006990:	e15b30be 	ldrh	r3, [fp, #-14]
80006994:	e0823003 	add	r3, r2, r3
80006998:	e1a03803 	lsl	r3, r3, #16
8000699c:	e1a02823 	lsr	r2, r3, #16
800069a0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
800069a4:	e1c320b0 	strh	r2, [r3]
800069a8:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
800069ac:	e15b30be 	ldrh	r3, [fp, #-14]
800069b0:	e0633002 	rsb	r3, r3, r2
800069b4:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    if (res) return res;
    if (fp->flag & FA__ERROR) return FR_RW_ERROR;    /* Check error flag */
    if (!(fp->flag & FA_WRITE)) return FR_DENIED;    /* Check access mode */
    if (fp->fsize + btw < fp->fsize) return FR_OK;    /* File size cannot reach 4GB */

    for ( ;  btw;                                    /* Repeat until all data transferred */
800069b8:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
800069bc:	e3530000 	cmp	r3, #0
800069c0:	1affff23 	bne	80006654 <f_write+0xd4>
800069c4:	ea000000 	b	800069cc <f_write+0x44c>
                    if (clust == 0)                    /* No cluster is created yet */
                        fp->org_clust = clust = create_chain(fs, 0);    /* Create a new cluster chain */
                } else {                            /* Middle or end of file */
                    clust = create_chain(fs, fp->curr_clust);            /* Trace or streach cluster chain */
                }
                if (clust == 0) break;                /* Disk full */
800069c8:	e1a00000 	nop			; (mov r0, r0)
        if (wcnt > btw) wcnt = btw;
        memcpy(&fp->buffer[fp->fptr & (S_SIZ - 1)], wbuff, wcnt);
        fp->flag |= FA__DIRTY;
    }

    if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;    /* Update file size if needed */
800069cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800069d0:	e5932008 	ldr	r2, [r3, #8]
800069d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800069d8:	e593300c 	ldr	r3, [r3, #12]
800069dc:	e1520003 	cmp	r2, r3
800069e0:	9a000003 	bls	800069f4 <f_write+0x474>
800069e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800069e8:	e5932008 	ldr	r2, [r3, #8]
800069ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800069f0:	e583200c 	str	r2, [r3, #12]
    fp->flag |= FA__WRITTEN;                        /* Set file changed flag */
800069f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800069f8:	e5d33002 	ldrb	r3, [r3, #2]
800069fc:	e3833020 	orr	r3, r3, #32
80006a00:	e20320ff 	and	r2, r3, #255	; 0xff
80006a04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006a08:	e5c32002 	strb	r2, [r3, #2]
    return FR_OK;
80006a0c:	e3a03000 	mov	r3, #0
80006a10:	ea00000c 	b	80006a48 <f_write+0x4c8>
                sect = clust2sect(fs, clust);        /* Get current sector */
                fp->sect_clust = fs->sects_clust;    /* Re-initialize the left sector counter */
            }
            if (fp->flag & FA__DIRTY) {                /* Flush file I/O buffer if needed */
                if (disk_write(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
                    goto fw_error;
80006a14:	e1a00000 	nop			; (mov r0, r0)
80006a18:	ea000002 	b	80006a28 <f_write+0x4a8>
            fp->curr_sect = sect;                    /* Update current sector */
            cc = btw / S_SIZ;                        /* When left bytes >= S_SIZ, */
            if (cc) {                                /* Write maximum contiguous sectors directly */
                if (cc > fp->sect_clust) cc = fp->sect_clust;
                if (disk_write(fs->drive, wbuff, sect, cc) != RES_OK)
                    goto fw_error;
80006a1c:	e1a00000 	nop			; (mov r0, r0)
80006a20:	ea000000 	b	80006a28 <f_write+0x4a8>
                fp->curr_sect += cc - 1;
                wcnt = cc * S_SIZ; continue;
            }
            if (fp->fptr < fp->fsize &&              /* Fill sector buffer with file data if needed */
                disk_read(fs->drive, fp->buffer, sect, 1) != RES_OK)
                    goto fw_error;
80006a24:	e1a00000 	nop			; (mov r0, r0)
    if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;    /* Update file size if needed */
    fp->flag |= FA__WRITTEN;                        /* Set file changed flag */
    return FR_OK;

fw_error:    /* Abort this file due to an unrecoverable error */
    fp->flag |= FA__ERROR;
80006a28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006a2c:	e5d33002 	ldrb	r3, [r3, #2]
80006a30:	e1e03c83 	mvn	r3, r3, lsl #25
80006a34:	e1e03ca3 	mvn	r3, r3, lsr #25
80006a38:	e20320ff 	and	r2, r3, #255	; 0xff
80006a3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006a40:	e5c32002 	strb	r2, [r3, #2]
    return FR_RW_ERROR;
80006a44:	e3a03008 	mov	r3, #8
}
80006a48:	e1a00003 	mov	r0, r3
80006a4c:	e24bd004 	sub	sp, fp, #4
80006a50:	e8bd4800 	pop	{fp, lr}
80006a54:	e12fff1e 	bx	lr

80006a58 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
    FIL *fp        /* Pointer to the file object */
)
{
80006a58:	e92d4800 	push	{fp, lr}
80006a5c:	e28db004 	add	fp, sp, #4
80006a60:	e24dd018 	sub	sp, sp, #24
80006a64:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    DWORD tim;
    BYTE *dir;
    FRESULT res;
    FATFS *fs = fp->fs;
80006a68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006a6c:	e5933004 	ldr	r3, [r3, #4]
80006a70:	e50b300c 	str	r3, [fp, #-12]


    res = validate(fs, fp->id);            /* Check validity of the object */
80006a74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006a78:	e1d330b0 	ldrh	r3, [r3]
80006a7c:	e51b000c 	ldr	r0, [fp, #-12]
80006a80:	e1a01003 	mov	r1, r3
80006a84:	ebfffbf8 	bl	80005a6c <validate>
80006a88:	e1a03000 	mov	r3, r0
80006a8c:	e54b3005 	strb	r3, [fp, #-5]
    if (res == FR_OK) {
80006a90:	e55b3005 	ldrb	r3, [fp, #-5]
80006a94:	e3530000 	cmp	r3, #0
80006a98:	1a00009e 	bne	80006d18 <f_sync+0x2c0>
        if (fp->flag & FA__WRITTEN) {    /* Has the file been written? */
80006a9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006aa0:	e5d33002 	ldrb	r3, [r3, #2]
80006aa4:	e2033020 	and	r3, r3, #32
80006aa8:	e3530000 	cmp	r3, #0
80006aac:	0a000099 	beq	80006d18 <f_sync+0x2c0>
            /* Write back data buffer if needed */
            if (fp->flag & FA__DIRTY) {
80006ab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006ab4:	e5d33002 	ldrb	r3, [r3, #2]
80006ab8:	e2033040 	and	r3, r3, #64	; 0x40
80006abc:	e3530000 	cmp	r3, #0
80006ac0:	0a000015 	beq	80006b1c <f_sync+0xc4>
                if (disk_write(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
80006ac4:	e51b300c 	ldr	r3, [fp, #-12]
80006ac8:	e5d31027 	ldrb	r1, [r3, #39]	; 0x27
80006acc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006ad0:	e2832024 	add	r2, r3, #36	; 0x24
80006ad4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006ad8:	e5933018 	ldr	r3, [r3, #24]
80006adc:	e1a00001 	mov	r0, r1
80006ae0:	e1a01002 	mov	r1, r2
80006ae4:	e1a02003 	mov	r2, r3
80006ae8:	e3a03001 	mov	r3, #1
80006aec:	eb000734 	bl	800087c4 <disk_write>
80006af0:	e1a03000 	mov	r3, r0
80006af4:	e3530000 	cmp	r3, #0
80006af8:	0a000001 	beq	80006b04 <f_sync+0xac>
                    return FR_RW_ERROR;
80006afc:	e3a03008 	mov	r3, #8
80006b00:	ea000085 	b	80006d1c <f_sync+0x2c4>
                fp->flag &= ~FA__DIRTY;
80006b04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006b08:	e5d33002 	ldrb	r3, [r3, #2]
80006b0c:	e3c33040 	bic	r3, r3, #64	; 0x40
80006b10:	e20320ff 	and	r2, r3, #255	; 0xff
80006b14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006b18:	e5c32002 	strb	r2, [r3, #2]
            }
            /* Update the directory entry */
            if (!move_window(fs, fp->dir_sect))
80006b1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006b20:	e593301c 	ldr	r3, [r3, #28]
80006b24:	e51b000c 	ldr	r0, [fp, #-12]
80006b28:	e1a01003 	mov	r1, r3
80006b2c:	ebfff3c5 	bl	80003a48 <move_window>
80006b30:	e1a03000 	mov	r3, r0
80006b34:	e3530000 	cmp	r3, #0
80006b38:	1a000001 	bne	80006b44 <f_sync+0xec>
                return FR_RW_ERROR;
80006b3c:	e3a03008 	mov	r3, #8
80006b40:	ea000075 	b	80006d1c <f_sync+0x2c4>
            dir = fp->dir_ptr;
80006b44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006b48:	e5933020 	ldr	r3, [r3, #32]
80006b4c:	e50b3010 	str	r3, [fp, #-16]
            dir[DIR_Attr] |= AM_ARC;                        /* Set archive bit */
80006b50:	e51b3010 	ldr	r3, [fp, #-16]
80006b54:	e283300b 	add	r3, r3, #11
80006b58:	e51b2010 	ldr	r2, [fp, #-16]
80006b5c:	e282200b 	add	r2, r2, #11
80006b60:	e5d22000 	ldrb	r2, [r2]
80006b64:	e3822020 	orr	r2, r2, #32
80006b68:	e20220ff 	and	r2, r2, #255	; 0xff
80006b6c:	e5c32000 	strb	r2, [r3]
            ST_DWORD(&dir[DIR_FileSize], fp->fsize);        /* Update file size */
80006b70:	e51b3010 	ldr	r3, [fp, #-16]
80006b74:	e283301c 	add	r3, r3, #28
80006b78:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80006b7c:	e592200c 	ldr	r2, [r2, #12]
80006b80:	e20220ff 	and	r2, r2, #255	; 0xff
80006b84:	e5c32000 	strb	r2, [r3]
80006b88:	e51b3010 	ldr	r3, [fp, #-16]
80006b8c:	e283301d 	add	r3, r3, #29
80006b90:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80006b94:	e592200c 	ldr	r2, [r2, #12]
80006b98:	e1a02802 	lsl	r2, r2, #16
80006b9c:	e1a02822 	lsr	r2, r2, #16
80006ba0:	e1a02422 	lsr	r2, r2, #8
80006ba4:	e1a02802 	lsl	r2, r2, #16
80006ba8:	e1a02822 	lsr	r2, r2, #16
80006bac:	e20220ff 	and	r2, r2, #255	; 0xff
80006bb0:	e5c32000 	strb	r2, [r3]
80006bb4:	e51b3010 	ldr	r3, [fp, #-16]
80006bb8:	e283301e 	add	r3, r3, #30
80006bbc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80006bc0:	e592200c 	ldr	r2, [r2, #12]
80006bc4:	e1a02822 	lsr	r2, r2, #16
80006bc8:	e20220ff 	and	r2, r2, #255	; 0xff
80006bcc:	e5c32000 	strb	r2, [r3]
80006bd0:	e51b3010 	ldr	r3, [fp, #-16]
80006bd4:	e283301f 	add	r3, r3, #31
80006bd8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80006bdc:	e592200c 	ldr	r2, [r2, #12]
80006be0:	e1a02c22 	lsr	r2, r2, #24
80006be4:	e20220ff 	and	r2, r2, #255	; 0xff
80006be8:	e5c32000 	strb	r2, [r3]
            ST_WORD(&dir[DIR_FstClusLO], fp->org_clust);    /* Update start cluster */
80006bec:	e51b3010 	ldr	r3, [fp, #-16]
80006bf0:	e283301a 	add	r3, r3, #26
80006bf4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80006bf8:	e5922010 	ldr	r2, [r2, #16]
80006bfc:	e20220ff 	and	r2, r2, #255	; 0xff
80006c00:	e5c32000 	strb	r2, [r3]
80006c04:	e51b3010 	ldr	r3, [fp, #-16]
80006c08:	e283301b 	add	r3, r3, #27
80006c0c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80006c10:	e5922010 	ldr	r2, [r2, #16]
80006c14:	e1a02802 	lsl	r2, r2, #16
80006c18:	e1a02822 	lsr	r2, r2, #16
80006c1c:	e1a02422 	lsr	r2, r2, #8
80006c20:	e1a02802 	lsl	r2, r2, #16
80006c24:	e1a02822 	lsr	r2, r2, #16
80006c28:	e20220ff 	and	r2, r2, #255	; 0xff
80006c2c:	e5c32000 	strb	r2, [r3]
            ST_WORD(&dir[DIR_FstClusHI], fp->org_clust >> 16);
80006c30:	e51b3010 	ldr	r3, [fp, #-16]
80006c34:	e2833014 	add	r3, r3, #20
80006c38:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80006c3c:	e5922010 	ldr	r2, [r2, #16]
80006c40:	e1a02822 	lsr	r2, r2, #16
80006c44:	e20220ff 	and	r2, r2, #255	; 0xff
80006c48:	e5c32000 	strb	r2, [r3]
80006c4c:	e51b3010 	ldr	r3, [fp, #-16]
80006c50:	e2833015 	add	r3, r3, #21
80006c54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80006c58:	e5922010 	ldr	r2, [r2, #16]
80006c5c:	e1a02822 	lsr	r2, r2, #16
80006c60:	e1a02802 	lsl	r2, r2, #16
80006c64:	e1a02822 	lsr	r2, r2, #16
80006c68:	e1a02422 	lsr	r2, r2, #8
80006c6c:	e1a02802 	lsl	r2, r2, #16
80006c70:	e1a02822 	lsr	r2, r2, #16
80006c74:	e20220ff 	and	r2, r2, #255	; 0xff
80006c78:	e5c32000 	strb	r2, [r3]
            tim = get_fattime();                    /* Updated time */
80006c7c:	eb0006f9 	bl	80008868 <get_fattime>
80006c80:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            ST_DWORD(&dir[DIR_WrtTime], tim);
80006c84:	e51b3010 	ldr	r3, [fp, #-16]
80006c88:	e2833016 	add	r3, r3, #22
80006c8c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80006c90:	e20220ff 	and	r2, r2, #255	; 0xff
80006c94:	e5c32000 	strb	r2, [r3]
80006c98:	e51b3010 	ldr	r3, [fp, #-16]
80006c9c:	e2833017 	add	r3, r3, #23
80006ca0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80006ca4:	e1a02802 	lsl	r2, r2, #16
80006ca8:	e1a02822 	lsr	r2, r2, #16
80006cac:	e1a02422 	lsr	r2, r2, #8
80006cb0:	e1a02802 	lsl	r2, r2, #16
80006cb4:	e1a02822 	lsr	r2, r2, #16
80006cb8:	e20220ff 	and	r2, r2, #255	; 0xff
80006cbc:	e5c32000 	strb	r2, [r3]
80006cc0:	e51b3010 	ldr	r3, [fp, #-16]
80006cc4:	e2833018 	add	r3, r3, #24
80006cc8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80006ccc:	e1a02822 	lsr	r2, r2, #16
80006cd0:	e20220ff 	and	r2, r2, #255	; 0xff
80006cd4:	e5c32000 	strb	r2, [r3]
80006cd8:	e51b3010 	ldr	r3, [fp, #-16]
80006cdc:	e2833019 	add	r3, r3, #25
80006ce0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
80006ce4:	e1a02c22 	lsr	r2, r2, #24
80006ce8:	e20220ff 	and	r2, r2, #255	; 0xff
80006cec:	e5c32000 	strb	r2, [r3]
            fp->flag &= ~FA__WRITTEN;
80006cf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006cf4:	e5d33002 	ldrb	r3, [r3, #2]
80006cf8:	e3c33020 	bic	r3, r3, #32
80006cfc:	e20320ff 	and	r2, r3, #255	; 0xff
80006d00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80006d04:	e5c32002 	strb	r2, [r3, #2]
            res = sync(fs);
80006d08:	e51b000c 	ldr	r0, [fp, #-12]
80006d0c:	ebfff3a7 	bl	80003bb0 <sync>
80006d10:	e1a03000 	mov	r3, r0
80006d14:	e54b3005 	strb	r3, [fp, #-5]
        }
    }
    return res;
80006d18:	e55b3005 	ldrb	r3, [fp, #-5]
}
80006d1c:	e1a00003 	mov	r0, r3
80006d20:	e24bd004 	sub	sp, fp, #4
80006d24:	e8bd4800 	pop	{fp, lr}
80006d28:	e12fff1e 	bx	lr

80006d2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
    FIL *fp        /* Pointer to the file object to be closed */
)
{
80006d2c:	e92d4800 	push	{fp, lr}
80006d30:	e28db004 	add	fp, sp, #4
80006d34:	e24dd010 	sub	sp, sp, #16
80006d38:	e50b0010 	str	r0, [fp, #-16]
    FRESULT res;


#if !_FS_READONLY
    res = f_sync(fp);
80006d3c:	e51b0010 	ldr	r0, [fp, #-16]
80006d40:	ebffff44 	bl	80006a58 <f_sync>
80006d44:	e1a03000 	mov	r3, r0
80006d48:	e54b3005 	strb	r3, [fp, #-5]
#else
    res = validate(fp->fs, fp->id);
#endif
    if (res == FR_OK)
80006d4c:	e55b3005 	ldrb	r3, [fp, #-5]
80006d50:	e3530000 	cmp	r3, #0
80006d54:	1a000002 	bne	80006d64 <f_close+0x38>
        fp->fs = NULL;
80006d58:	e51b3010 	ldr	r3, [fp, #-16]
80006d5c:	e3a02000 	mov	r2, #0
80006d60:	e5832004 	str	r2, [r3, #4]
    return res;
80006d64:	e55b3005 	ldrb	r3, [fp, #-5]
}
80006d68:	e1a00003 	mov	r0, r3
80006d6c:	e24bd004 	sub	sp, fp, #4
80006d70:	e8bd4800 	pop	{fp, lr}
80006d74:	e12fff1e 	bx	lr

80006d78 <f_lseek>:

FRESULT f_lseek (
    FIL *fp,        /* Pointer to the file object */
    DWORD ofs        /* File pointer from top of file */
)
{
80006d78:	e92d4800 	push	{fp, lr}
80006d7c:	e28db004 	add	fp, sp, #4
80006d80:	e24dd020 	sub	sp, sp, #32
80006d84:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
80006d88:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    DWORD clust, csize;
    BYTE csect;
    FRESULT res;
    FATFS *fs = fp->fs;
80006d8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006d90:	e5933004 	ldr	r3, [r3, #4]
80006d94:	e50b300c 	str	r3, [fp, #-12]


    res = validate(fs, fp->id);            /* Check validity of the object */
80006d98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006d9c:	e1d330b0 	ldrh	r3, [r3]
80006da0:	e51b000c 	ldr	r0, [fp, #-12]
80006da4:	e1a01003 	mov	r1, r3
80006da8:	ebfffb2f 	bl	80005a6c <validate>
80006dac:	e1a03000 	mov	r3, r0
80006db0:	e54b300d 	strb	r3, [fp, #-13]
    if (res) return res;
80006db4:	e55b300d 	ldrb	r3, [fp, #-13]
80006db8:	e3530000 	cmp	r3, #0
80006dbc:	0a000001 	beq	80006dc8 <f_lseek+0x50>
80006dc0:	e55b300d 	ldrb	r3, [fp, #-13]
80006dc4:	ea0000cd 	b	80007100 <f_lseek+0x388>
    if (fp->flag & FA__ERROR) return FR_RW_ERROR;
80006dc8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006dcc:	e5d33002 	ldrb	r3, [r3, #2]
80006dd0:	e20330ff 	and	r3, r3, #255	; 0xff
80006dd4:	e1a03c03 	lsl	r3, r3, #24
80006dd8:	e1a03c43 	asr	r3, r3, #24
80006ddc:	e3530000 	cmp	r3, #0
80006de0:	aa000001 	bge	80006dec <f_lseek+0x74>
80006de4:	e3a03008 	mov	r3, #8
80006de8:	ea0000c4 	b	80007100 <f_lseek+0x388>
#if !_FS_READONLY
    if (fp->flag & FA__DIRTY) {            /* Write-back dirty buffer if needed */
80006dec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006df0:	e5d33002 	ldrb	r3, [r3, #2]
80006df4:	e2033040 	and	r3, r3, #64	; 0x40
80006df8:	e3530000 	cmp	r3, #0
80006dfc:	0a000013 	beq	80006e50 <f_lseek+0xd8>
        if (disk_write(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
80006e00:	e51b300c 	ldr	r3, [fp, #-12]
80006e04:	e5d31027 	ldrb	r1, [r3, #39]	; 0x27
80006e08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006e0c:	e2832024 	add	r2, r3, #36	; 0x24
80006e10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006e14:	e5933018 	ldr	r3, [r3, #24]
80006e18:	e1a00001 	mov	r0, r1
80006e1c:	e1a01002 	mov	r1, r2
80006e20:	e1a02003 	mov	r2, r3
80006e24:	e3a03001 	mov	r3, #1
80006e28:	eb000665 	bl	800087c4 <disk_write>
80006e2c:	e1a03000 	mov	r3, r0
80006e30:	e3530000 	cmp	r3, #0
80006e34:	1a0000a4 	bne	800070cc <f_lseek+0x354>
            goto fk_error;
        fp->flag &= ~FA__DIRTY;
80006e38:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006e3c:	e5d33002 	ldrb	r3, [r3, #2]
80006e40:	e3c33040 	bic	r3, r3, #64	; 0x40
80006e44:	e20320ff 	and	r2, r3, #255	; 0xff
80006e48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006e4c:	e5c32002 	strb	r2, [r3, #2]
    }
    if (ofs > fp->fsize && !(fp->flag & FA_WRITE))
80006e50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006e54:	e593200c 	ldr	r2, [r3, #12]
80006e58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80006e5c:	e1520003 	cmp	r2, r3
80006e60:	2a000007 	bcs	80006e84 <f_lseek+0x10c>
80006e64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006e68:	e5d33002 	ldrb	r3, [r3, #2]
80006e6c:	e2033002 	and	r3, r3, #2
80006e70:	e3530000 	cmp	r3, #0
80006e74:	1a000002 	bne	80006e84 <f_lseek+0x10c>
#else
    if (ofs > fp->fsize)
#endif
        ofs = fp->fsize;
80006e78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006e7c:	e593300c 	ldr	r3, [r3, #12]
80006e80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    fp->fptr = 0; fp->sect_clust = 1;        /* Set file R/W pointer to top of the file */
80006e84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006e88:	e3a02000 	mov	r2, #0
80006e8c:	e5832008 	str	r2, [r3, #8]
80006e90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006e94:	e3a02001 	mov	r2, #1
80006e98:	e5c32003 	strb	r2, [r3, #3]

    /* Move file R/W pointer if needed */
    if (ofs) {
80006e9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80006ea0:	e3530000 	cmp	r3, #0
80006ea4:	0a000071 	beq	80007070 <f_lseek+0x2f8>
        clust = fp->org_clust;    /* Get start cluster */
80006ea8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006eac:	e5933010 	ldr	r3, [r3, #16]
80006eb0:	e50b3008 	str	r3, [fp, #-8]
#if !_FS_READONLY
        if (!clust) {            /* If the file does not have a cluster chain, create new cluster chain */
80006eb4:	e51b3008 	ldr	r3, [fp, #-8]
80006eb8:	e3530000 	cmp	r3, #0
80006ebc:	1a000009 	bne	80006ee8 <f_lseek+0x170>
            clust = create_chain(fs, 0);
80006ec0:	e51b000c 	ldr	r0, [fp, #-12]
80006ec4:	e3a01000 	mov	r1, #0
80006ec8:	ebfff558 	bl	80004430 <create_chain>
80006ecc:	e50b0008 	str	r0, [fp, #-8]
            if (clust == 1) goto fk_error;
80006ed0:	e51b3008 	ldr	r3, [fp, #-8]
80006ed4:	e3530001 	cmp	r3, #1
80006ed8:	0a00007d 	beq	800070d4 <f_lseek+0x35c>
            fp->org_clust = clust;
80006edc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006ee0:	e51b2008 	ldr	r2, [fp, #-8]
80006ee4:	e5832010 	str	r2, [r3, #16]
        }
#endif
        if (clust) {            /* If the file has a cluster chain, it can be followed */
80006ee8:	e51b3008 	ldr	r3, [fp, #-8]
80006eec:	e3530000 	cmp	r3, #0
80006ef0:	0a00005e 	beq	80007070 <f_lseek+0x2f8>
            csize = (DWORD)fs->sects_clust * S_SIZ;        /* Cluster size in unit of byte */
80006ef4:	e51b300c 	ldr	r3, [fp, #-12]
80006ef8:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
80006efc:	e1a03483 	lsl	r3, r3, #9
80006f00:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            for (;;) {                                    /* Loop to skip leading clusters */
                fp->curr_clust = clust;                    /* Update current cluster */
80006f04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006f08:	e51b2008 	ldr	r2, [fp, #-8]
80006f0c:	e5832014 	str	r2, [r3, #20]
                if (ofs <= csize) break;
80006f10:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80006f14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80006f18:	e1520003 	cmp	r2, r3
80006f1c:	9a000026 	bls	80006fbc <f_lseek+0x244>
#if !_FS_READONLY
                if (fp->flag & FA_WRITE)                /* Check if in write mode or not */
80006f20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006f24:	e5d33002 	ldrb	r3, [r3, #2]
80006f28:	e2033002 	and	r3, r3, #2
80006f2c:	e3530000 	cmp	r3, #0
80006f30:	0a000004 	beq	80006f48 <f_lseek+0x1d0>
                    clust = create_chain(fs, clust);    /* Force streached if in write mode */
80006f34:	e51b000c 	ldr	r0, [fp, #-12]
80006f38:	e51b1008 	ldr	r1, [fp, #-8]
80006f3c:	ebfff53b 	bl	80004430 <create_chain>
80006f40:	e50b0008 	str	r0, [fp, #-8]
80006f44:	ea000003 	b	80006f58 <f_lseek+0x1e0>
                else
#endif
                    clust = get_cluster(fs, clust);        /* Only follow cluster chain if not in write mode */
80006f48:	e51b000c 	ldr	r0, [fp, #-12]
80006f4c:	e51b1008 	ldr	r1, [fp, #-8]
80006f50:	ebfff335 	bl	80003c2c <get_cluster>
80006f54:	e50b0008 	str	r0, [fp, #-8]
                if (clust == 0) {                        /* Stop if could not follow the cluster chain */
80006f58:	e51b3008 	ldr	r3, [fp, #-8]
80006f5c:	e3530000 	cmp	r3, #0
80006f60:	1a000002 	bne	80006f70 <f_lseek+0x1f8>
                    ofs = csize; break;
80006f64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80006f68:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
80006f6c:	ea000013 	b	80006fc0 <f_lseek+0x248>
                }
                if (clust == 1 || clust >= fs->max_clust) goto fk_error;
80006f70:	e51b3008 	ldr	r3, [fp, #-8]
80006f74:	e3530001 	cmp	r3, #1
80006f78:	0a000058 	beq	800070e0 <f_lseek+0x368>
80006f7c:	e51b300c 	ldr	r3, [fp, #-12]
80006f80:	e593200c 	ldr	r2, [r3, #12]
80006f84:	e51b3008 	ldr	r3, [fp, #-8]
80006f88:	e1520003 	cmp	r2, r3
80006f8c:	9a000053 	bls	800070e0 <f_lseek+0x368>
                fp->fptr += csize;                        /* Update R/W pointer */
80006f90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006f94:	e5932008 	ldr	r2, [r3, #8]
80006f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80006f9c:	e0822003 	add	r2, r2, r3
80006fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006fa4:	e5832008 	str	r2, [r3, #8]
                ofs -= csize;
80006fa8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80006fac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80006fb0:	e0633002 	rsb	r3, r3, r2
80006fb4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
            }
80006fb8:	eaffffd1 	b	80006f04 <f_lseek+0x18c>
#endif
        if (clust) {            /* If the file has a cluster chain, it can be followed */
            csize = (DWORD)fs->sects_clust * S_SIZ;        /* Cluster size in unit of byte */
            for (;;) {                                    /* Loop to skip leading clusters */
                fp->curr_clust = clust;                    /* Update current cluster */
                if (ofs <= csize) break;
80006fbc:	e1a00000 	nop			; (mov r0, r0)
                }
                if (clust == 1 || clust >= fs->max_clust) goto fk_error;
                fp->fptr += csize;                        /* Update R/W pointer */
                ofs -= csize;
            }
            csect = (BYTE)((ofs - 1) / S_SIZ);            /* Sector offset in the cluster */
80006fc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80006fc4:	e2433001 	sub	r3, r3, #1
80006fc8:	e1a034a3 	lsr	r3, r3, #9
80006fcc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            fp->curr_sect = clust2sect(fs, clust) + csect;    /* Current sector */
80006fd0:	e51b000c 	ldr	r0, [fp, #-12]
80006fd4:	e51b1008 	ldr	r1, [fp, #-8]
80006fd8:	ebfff589 	bl	80004604 <clust2sect>
80006fdc:	e1a02000 	mov	r2, r0
80006fe0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
80006fe4:	e0822003 	add	r2, r2, r3
80006fe8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80006fec:	e5832018 	str	r2, [r3, #24]
            if ((ofs & (S_SIZ - 1)) &&                    /* Load current sector if needed */
80006ff0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80006ff4:	e1a03b83 	lsl	r3, r3, #23
80006ff8:	e1a03ba3 	lsr	r3, r3, #23
80006ffc:	e3530000 	cmp	r3, #0
80007000:	0a00000d 	beq	8000703c <f_lseek+0x2c4>
                disk_read(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
80007004:	e51b300c 	ldr	r3, [fp, #-12]
80007008:	e5d31027 	ldrb	r1, [r3, #39]	; 0x27
8000700c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007010:	e2832024 	add	r2, r3, #36	; 0x24
80007014:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007018:	e5933018 	ldr	r3, [r3, #24]
8000701c:	e1a00001 	mov	r0, r1
80007020:	e1a01002 	mov	r1, r2
80007024:	e1a02003 	mov	r2, r3
80007028:	e3a03001 	mov	r3, #1
8000702c:	eb0005c8 	bl	80008754 <disk_read>
80007030:	e1a03000 	mov	r3, r0
                fp->fptr += csize;                        /* Update R/W pointer */
                ofs -= csize;
            }
            csect = (BYTE)((ofs - 1) / S_SIZ);            /* Sector offset in the cluster */
            fp->curr_sect = clust2sect(fs, clust) + csect;    /* Current sector */
            if ((ofs & (S_SIZ - 1)) &&                    /* Load current sector if needed */
80007034:	e3530000 	cmp	r3, #0
80007038:	1a000027 	bne	800070dc <f_lseek+0x364>
                disk_read(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
                goto fk_error;
            fp->sect_clust = fs->sects_clust - csect;    /* Left sector counter in the cluster */
8000703c:	e51b300c 	ldr	r3, [fp, #-12]
80007040:	e5d32025 	ldrb	r2, [r3, #37]	; 0x25
80007044:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
80007048:	e0633002 	rsb	r3, r3, r2
8000704c:	e20320ff 	and	r2, r3, #255	; 0xff
80007050:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007054:	e5c32003 	strb	r2, [r3, #3]
            fp->fptr += ofs;                            /* Update file R/W pointer */
80007058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000705c:	e5932008 	ldr	r2, [r3, #8]
80007060:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
80007064:	e0822003 	add	r2, r2, r3
80007068:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000706c:	e5832008 	str	r2, [r3, #8]
        }
    }
#if !_FS_READONLY
    if ((fp->flag & FA_WRITE) && fp->fptr > fp->fsize) {    /* Set updated flag if in write mode */
80007070:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007074:	e5d33002 	ldrb	r3, [r3, #2]
80007078:	e2033002 	and	r3, r3, #2
8000707c:	e3530000 	cmp	r3, #0
80007080:	0a00000f 	beq	800070c4 <f_lseek+0x34c>
80007084:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007088:	e5932008 	ldr	r2, [r3, #8]
8000708c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007090:	e593300c 	ldr	r3, [r3, #12]
80007094:	e1520003 	cmp	r2, r3
80007098:	9a000009 	bls	800070c4 <f_lseek+0x34c>
        fp->fsize = fp->fptr;
8000709c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800070a0:	e5932008 	ldr	r2, [r3, #8]
800070a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800070a8:	e583200c 	str	r2, [r3, #12]
        fp->flag |= FA__WRITTEN;
800070ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800070b0:	e5d33002 	ldrb	r3, [r3, #2]
800070b4:	e3833020 	orr	r3, r3, #32
800070b8:	e20320ff 	and	r2, r3, #255	; 0xff
800070bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800070c0:	e5c32002 	strb	r2, [r3, #2]
    }
#endif

    return FR_OK;
800070c4:	e3a03000 	mov	r3, #0
800070c8:	ea00000c 	b	80007100 <f_lseek+0x388>
    if (res) return res;
    if (fp->flag & FA__ERROR) return FR_RW_ERROR;
#if !_FS_READONLY
    if (fp->flag & FA__DIRTY) {            /* Write-back dirty buffer if needed */
        if (disk_write(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
            goto fk_error;
800070cc:	e1a00000 	nop			; (mov r0, r0)
800070d0:	ea000002 	b	800070e0 <f_lseek+0x368>
    if (ofs) {
        clust = fp->org_clust;    /* Get start cluster */
#if !_FS_READONLY
        if (!clust) {            /* If the file does not have a cluster chain, create new cluster chain */
            clust = create_chain(fs, 0);
            if (clust == 1) goto fk_error;
800070d4:	e1a00000 	nop			; (mov r0, r0)
800070d8:	ea000000 	b	800070e0 <f_lseek+0x368>
            }
            csect = (BYTE)((ofs - 1) / S_SIZ);            /* Sector offset in the cluster */
            fp->curr_sect = clust2sect(fs, clust) + csect;    /* Current sector */
            if ((ofs & (S_SIZ - 1)) &&                    /* Load current sector if needed */
                disk_read(fs->drive, fp->buffer, fp->curr_sect, 1) != RES_OK)
                goto fk_error;
800070dc:	e1a00000 	nop			; (mov r0, r0)
#endif

    return FR_OK;

fk_error:    /* Abort this file due to an unrecoverable error */
    fp->flag |= FA__ERROR;
800070e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800070e4:	e5d33002 	ldrb	r3, [r3, #2]
800070e8:	e1e03c83 	mvn	r3, r3, lsl #25
800070ec:	e1e03ca3 	mvn	r3, r3, lsr #25
800070f0:	e20320ff 	and	r2, r3, #255	; 0xff
800070f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800070f8:	e5c32002 	strb	r2, [r3, #2]
    return FR_RW_ERROR;
800070fc:	e3a03008 	mov	r3, #8
}
80007100:	e1a00003 	mov	r0, r3
80007104:	e24bd004 	sub	sp, fp, #4
80007108:	e8bd4800 	pop	{fp, lr}
8000710c:	e12fff1e 	bx	lr

80007110 <f_opendir>:

FRESULT f_opendir (
    DIR *dirobj,        /* Pointer to directory object to create */
    const char *path    /* Pointer to the directory path */
)
{
80007110:	e92d4800 	push	{fp, lr}
80007114:	e28db004 	add	fp, sp, #4
80007118:	e24dd020 	sub	sp, sp, #32
8000711c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
80007120:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    char fn[8+3+1];
    FRESULT res;
    FATFS *fs;


    res = auto_mount(&path, &fs, 0);
80007124:	e24b2024 	sub	r2, fp, #36	; 0x24
80007128:	e24b301c 	sub	r3, fp, #28
8000712c:	e1a00002 	mov	r0, r2
80007130:	e1a01003 	mov	r1, r3
80007134:	e3a02000 	mov	r2, #0
80007138:	ebfff8a4 	bl	800053d0 <auto_mount>
8000713c:	e1a03000 	mov	r3, r0
80007140:	e54b3005 	strb	r3, [fp, #-5]
    if (res != FR_OK) return res;
80007144:	e55b3005 	ldrb	r3, [fp, #-5]
80007148:	e3530000 	cmp	r3, #0
8000714c:	0a000001 	beq	80007158 <f_opendir+0x48>
80007150:	e55b3005 	ldrb	r3, [fp, #-5]
80007154:	ea000049 	b	80007280 <f_opendir+0x170>
    dirobj->fs = fs;
80007158:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
8000715c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007160:	e5832004 	str	r2, [r3, #4]

    res = trace_path(dirobj, fn, path, &dir);    /* Trace the directory path */
80007164:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80007168:	e24b1018 	sub	r1, fp, #24
8000716c:	e24b300c 	sub	r3, fp, #12
80007170:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
80007174:	ebfff6f5 	bl	80004d50 <trace_path>
80007178:	e1a03000 	mov	r3, r0
8000717c:	e54b3005 	strb	r3, [fp, #-5]
    if (res == FR_OK) {                        /* Trace completed */
80007180:	e55b3005 	ldrb	r3, [fp, #-5]
80007184:	e3530000 	cmp	r3, #0
80007188:	1a00003b 	bne	8000727c <f_opendir+0x16c>
        if (dir != NULL) {                    /* It is not the root dir */
8000718c:	e51b300c 	ldr	r3, [fp, #-12]
80007190:	e3530000 	cmp	r3, #0
80007194:	0a000034 	beq	8000726c <f_opendir+0x15c>
            if (dir[DIR_Attr] & AM_DIR) {        /* The entry is a directory */
80007198:	e51b300c 	ldr	r3, [fp, #-12]
8000719c:	e283300b 	add	r3, r3, #11
800071a0:	e5d33000 	ldrb	r3, [r3]
800071a4:	e2033010 	and	r3, r3, #16
800071a8:	e3530000 	cmp	r3, #0
800071ac:	0a00002c 	beq	80007264 <f_opendir+0x154>
                dirobj->clust = ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);
800071b0:	e51b300c 	ldr	r3, [fp, #-12]
800071b4:	e2833015 	add	r3, r3, #21
800071b8:	e5d33000 	ldrb	r3, [r3]
800071bc:	e1a03403 	lsl	r3, r3, #8
800071c0:	e1a03803 	lsl	r3, r3, #16
800071c4:	e1a02823 	lsr	r2, r3, #16
800071c8:	e51b300c 	ldr	r3, [fp, #-12]
800071cc:	e2833014 	add	r3, r3, #20
800071d0:	e5d33000 	ldrb	r3, [r3]
800071d4:	e1823003 	orr	r3, r2, r3
800071d8:	e1a03803 	lsl	r3, r3, #16
800071dc:	e1a03823 	lsr	r3, r3, #16
800071e0:	e1a03803 	lsl	r3, r3, #16
800071e4:	e1a03823 	lsr	r3, r3, #16
800071e8:	e1a02803 	lsl	r2, r3, #16
800071ec:	e51b300c 	ldr	r3, [fp, #-12]
800071f0:	e283301b 	add	r3, r3, #27
800071f4:	e5d33000 	ldrb	r3, [r3]
800071f8:	e1a03403 	lsl	r3, r3, #8
800071fc:	e1a03803 	lsl	r3, r3, #16
80007200:	e1a01823 	lsr	r1, r3, #16
80007204:	e51b300c 	ldr	r3, [fp, #-12]
80007208:	e283301a 	add	r3, r3, #26
8000720c:	e5d33000 	ldrb	r3, [r3]
80007210:	e1813003 	orr	r3, r1, r3
80007214:	e1a03803 	lsl	r3, r3, #16
80007218:	e1a03823 	lsr	r3, r3, #16
8000721c:	e1a03803 	lsl	r3, r3, #16
80007220:	e1a03823 	lsr	r3, r3, #16
80007224:	e1822003 	orr	r2, r2, r3
80007228:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000722c:	e583200c 	str	r2, [r3, #12]
                dirobj->sect = clust2sect(fs, dirobj->clust);
80007230:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
80007234:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007238:	e593300c 	ldr	r3, [r3, #12]
8000723c:	e1a00002 	mov	r0, r2
80007240:	e1a01003 	mov	r1, r3
80007244:	ebfff4ee 	bl	80004604 <clust2sect>
80007248:	e1a02000 	mov	r2, r0
8000724c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007250:	e5832010 	str	r2, [r3, #16]
                dirobj->index = 2;
80007254:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007258:	e3a02002 	mov	r2, #2
8000725c:	e1c320b2 	strh	r2, [r3, #2]
80007260:	ea000001 	b	8000726c <f_opendir+0x15c>
            } else {                        /* The entry is not a directory */
                res = FR_NO_FILE;
80007264:	e3a03002 	mov	r3, #2
80007268:	e54b3005 	strb	r3, [fp, #-5]
            }
        }
        dirobj->id = fs->id;
8000726c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007270:	e1d320b0 	ldrh	r2, [r3]
80007274:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007278:	e1c320b0 	strh	r2, [r3]
    }
    return res;
8000727c:	e55b3005 	ldrb	r3, [fp, #-5]
}
80007280:	e1a00003 	mov	r0, r3
80007284:	e24bd004 	sub	sp, fp, #4
80007288:	e8bd4800 	pop	{fp, lr}
8000728c:	e12fff1e 	bx	lr

80007290 <f_readdir>:

FRESULT f_readdir (
    DIR *dirobj,        /* Pointer to the directory object */
    FILINFO *finfo        /* Pointer to file information to return */
)
{
80007290:	e92d4800 	push	{fp, lr}
80007294:	e28db004 	add	fp, sp, #4
80007298:	e24dd018 	sub	sp, sp, #24
8000729c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
800072a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    BYTE *dir, c;
    FATFS *fs = dirobj->fs;
800072a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800072a8:	e5933004 	ldr	r3, [r3, #4]
800072ac:	e50b3008 	str	r3, [fp, #-8]
    FRESULT result;

    result = validate(fs, dirobj->id);            /* Check validity of the object */
800072b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800072b4:	e1d330b0 	ldrh	r3, [r3]
800072b8:	e51b0008 	ldr	r0, [fp, #-8]
800072bc:	e1a01003 	mov	r1, r3
800072c0:	ebfff9e9 	bl	80005a6c <validate>
800072c4:	e1a03000 	mov	r3, r0
800072c8:	e54b3009 	strb	r3, [fp, #-9]
    if (result)
800072cc:	e55b3009 	ldrb	r3, [fp, #-9]
800072d0:	e3530000 	cmp	r3, #0
800072d4:	0a000001 	beq	800072e0 <f_readdir+0x50>
    {
        return result;
800072d8:	e55b3009 	ldrb	r3, [fp, #-9]
800072dc:	ea00003c 	b	800073d4 <f_readdir+0x144>
    }

    finfo->fname[0] = 0;
800072e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800072e4:	e3a02000 	mov	r2, #0
800072e8:	e5c32009 	strb	r2, [r3, #9]
    while (dirobj->sect) {
800072ec:	ea00002f 	b	800073b0 <f_readdir+0x120>
        if (!move_window(fs, dirobj->sect))
800072f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800072f4:	e5933010 	ldr	r3, [r3, #16]
800072f8:	e51b0008 	ldr	r0, [fp, #-8]
800072fc:	e1a01003 	mov	r1, r3
80007300:	ebfff1d0 	bl	80003a48 <move_window>
80007304:	e1a03000 	mov	r3, r0
80007308:	e3530000 	cmp	r3, #0
8000730c:	1a000001 	bne	80007318 <f_readdir+0x88>
            return FR_RW_ERROR;
80007310:	e3a03008 	mov	r3, #8
80007314:	ea00002e 	b	800073d4 <f_readdir+0x144>
        dir = &fs->win[(dirobj->index & ((S_SIZ - 1) >> 5)) * 32];    /* pointer to the directory entry */
80007318:	e51b3008 	ldr	r3, [fp, #-8]
8000731c:	e283202a 	add	r2, r3, #42	; 0x2a
80007320:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007324:	e1d330b2 	ldrh	r3, [r3, #2]
80007328:	e203300f 	and	r3, r3, #15
8000732c:	e1a03283 	lsl	r3, r3, #5
80007330:	e0823003 	add	r3, r2, r3
80007334:	e50b3010 	str	r3, [fp, #-16]
        c = *dir;
80007338:	e51b3010 	ldr	r3, [fp, #-16]
8000733c:	e5d33000 	ldrb	r3, [r3]
80007340:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        if (c == 0) break;                                /* Has it reached to end of dir? */
80007344:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80007348:	e3530000 	cmp	r3, #0
8000734c:	0a00001c 	beq	800073c4 <f_readdir+0x134>
        if (c != 0xE5 && !(dir[DIR_Attr] & AM_VOL))        /* Is it a valid entry? */
80007350:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80007354:	e35300e5 	cmp	r3, #229	; 0xe5
80007358:	0a000008 	beq	80007380 <f_readdir+0xf0>
8000735c:	e51b3010 	ldr	r3, [fp, #-16]
80007360:	e283300b 	add	r3, r3, #11
80007364:	e5d33000 	ldrb	r3, [r3]
80007368:	e2033008 	and	r3, r3, #8
8000736c:	e3530000 	cmp	r3, #0
80007370:	1a000002 	bne	80007380 <f_readdir+0xf0>
            get_fileinfo(finfo, dir);
80007374:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
80007378:	e51b1010 	ldr	r1, [fp, #-16]
8000737c:	ebfff506 	bl	8000479c <get_fileinfo>
        if (!next_dir_entry(dirobj)) dirobj->sect = 0;    /* Next entry */
80007380:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
80007384:	ebfff4b9 	bl	80004670 <next_dir_entry>
80007388:	e1a03000 	mov	r3, r0
8000738c:	e3530000 	cmp	r3, #0
80007390:	1a000002 	bne	800073a0 <f_readdir+0x110>
80007394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007398:	e3a02000 	mov	r2, #0
8000739c:	e5832010 	str	r2, [r3, #16]
        if (finfo->fname[0]) break;                        /* Found valid entry */
800073a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
800073a4:	e5d33009 	ldrb	r3, [r3, #9]
800073a8:	e3530000 	cmp	r3, #0
800073ac:	1a000006 	bne	800073cc <f_readdir+0x13c>
    {
        return result;
    }

    finfo->fname[0] = 0;
    while (dirobj->sect) {
800073b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800073b4:	e5933010 	ldr	r3, [r3, #16]
800073b8:	e3530000 	cmp	r3, #0
800073bc:	1affffcb 	bne	800072f0 <f_readdir+0x60>
800073c0:	ea000002 	b	800073d0 <f_readdir+0x140>
        if (!move_window(fs, dirobj->sect))
            return FR_RW_ERROR;
        dir = &fs->win[(dirobj->index & ((S_SIZ - 1) >> 5)) * 32];    /* pointer to the directory entry */
        c = *dir;
        if (c == 0) break;                                /* Has it reached to end of dir? */
800073c4:	e1a00000 	nop			; (mov r0, r0)
800073c8:	ea000000 	b	800073d0 <f_readdir+0x140>
        if (c != 0xE5 && !(dir[DIR_Attr] & AM_VOL))        /* Is it a valid entry? */
            get_fileinfo(finfo, dir);
        if (!next_dir_entry(dirobj)) dirobj->sect = 0;    /* Next entry */
        if (finfo->fname[0]) break;                        /* Found valid entry */
800073cc:	e1a00000 	nop			; (mov r0, r0)
    }

    return FR_OK;
800073d0:	e3a03000 	mov	r3, #0
}
800073d4:	e1a00003 	mov	r0, r3
800073d8:	e24bd004 	sub	sp, fp, #4
800073dc:	e8bd4800 	pop	{fp, lr}
800073e0:	e12fff1e 	bx	lr

800073e4 <f_stat>:

FRESULT f_stat (
    const char *path,    /* Pointer to the file path */
    FILINFO *finfo        /* Pointer to file information to return */
)
{
800073e4:	e92d4800 	push	{fp, lr}
800073e8:	e28db004 	add	fp, sp, #4
800073ec:	e24dd038 	sub	sp, sp, #56	; 0x38
800073f0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
800073f4:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
    FRESULT res;
    DIR dirobj;
    FATFS *fs;


    res = auto_mount(&path, &fs, 0);
800073f8:	e24b2038 	sub	r2, fp, #56	; 0x38
800073fc:	e24b3030 	sub	r3, fp, #48	; 0x30
80007400:	e1a00002 	mov	r0, r2
80007404:	e1a01003 	mov	r1, r3
80007408:	e3a02000 	mov	r2, #0
8000740c:	ebfff7ef 	bl	800053d0 <auto_mount>
80007410:	e1a03000 	mov	r3, r0
80007414:	e54b3005 	strb	r3, [fp, #-5]
    if (res != FR_OK) return res;
80007418:	e55b3005 	ldrb	r3, [fp, #-5]
8000741c:	e3530000 	cmp	r3, #0
80007420:	0a000001 	beq	8000742c <f_stat+0x48>
80007424:	e55b3005 	ldrb	r3, [fp, #-5]
80007428:	ea000016 	b	80007488 <f_stat+0xa4>
    dirobj.fs = fs;
8000742c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
80007430:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    res = trace_path(&dirobj, fn, path, &dir);    /* Trace the file path */
80007434:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
80007438:	e24b002c 	sub	r0, fp, #44	; 0x2c
8000743c:	e24b1018 	sub	r1, fp, #24
80007440:	e24b300c 	sub	r3, fp, #12
80007444:	ebfff641 	bl	80004d50 <trace_path>
80007448:	e1a03000 	mov	r3, r0
8000744c:	e54b3005 	strb	r3, [fp, #-5]
    if (res == FR_OK) {                            /* Trace completed */
80007450:	e55b3005 	ldrb	r3, [fp, #-5]
80007454:	e3530000 	cmp	r3, #0
80007458:	1a000009 	bne	80007484 <f_stat+0xa0>
        if (dir)    /* Found an object */
8000745c:	e51b300c 	ldr	r3, [fp, #-12]
80007460:	e3530000 	cmp	r3, #0
80007464:	0a000004 	beq	8000747c <f_stat+0x98>
            get_fileinfo(finfo, dir);
80007468:	e51b300c 	ldr	r3, [fp, #-12]
8000746c:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
80007470:	e1a01003 	mov	r1, r3
80007474:	ebfff4c8 	bl	8000479c <get_fileinfo>
80007478:	ea000001 	b	80007484 <f_stat+0xa0>
        else        /* It is root dir */
            res = FR_INVALID_NAME;
8000747c:	e3a03004 	mov	r3, #4
80007480:	e54b3005 	strb	r3, [fp, #-5]
    }

    return res;
80007484:	e55b3005 	ldrb	r3, [fp, #-5]
}
80007488:	e1a00003 	mov	r0, r3
8000748c:	e24bd004 	sub	sp, fp, #4
80007490:	e8bd4800 	pop	{fp, lr}
80007494:	e12fff1e 	bx	lr

80007498 <f_getfree>:
FRESULT f_getfree (
    const char *drv,    /* Logical drive number */
    DWORD *nclust,        /* Pointer to the double word to return number of free clusters */
    FATFS **fatfs        /* Pointer to pointer to the file system object to return */
)
{
80007498:	e92d4800 	push	{fp, lr}
8000749c:	e28db004 	add	fp, sp, #4
800074a0:	e24dd030 	sub	sp, sp, #48	; 0x30
800074a4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
800074a8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
800074ac:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    FRESULT res;
    FATFS *fs;


    /* Get drive number */
    res = auto_mount(&drv, &fs, 0);
800074b0:	e24b2028 	sub	r2, fp, #40	; 0x28
800074b4:	e24b3020 	sub	r3, fp, #32
800074b8:	e1a00002 	mov	r0, r2
800074bc:	e1a01003 	mov	r1, r3
800074c0:	e3a02000 	mov	r2, #0
800074c4:	ebfff7c1 	bl	800053d0 <auto_mount>
800074c8:	e1a03000 	mov	r3, r0
800074cc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    if (res != FR_OK) return res;
800074d0:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
800074d4:	e3530000 	cmp	r3, #0
800074d8:	0a000001 	beq	800074e4 <f_getfree+0x4c>
800074dc:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
800074e0:	ea00008e 	b	80007720 <f_getfree+0x288>
    *fatfs = fs;
800074e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
800074e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
800074ec:	e5832000 	str	r2, [r3]

    /* If number of free cluster is valid, return it without cluster scan. */
    if (fs->free_clust <= fs->max_clust - 2) {
800074f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800074f4:	e5932020 	ldr	r2, [r3, #32]
800074f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800074fc:	e593300c 	ldr	r3, [r3, #12]
80007500:	e2433002 	sub	r3, r3, #2
80007504:	e1520003 	cmp	r2, r3
80007508:	8a000005 	bhi	80007524 <f_getfree+0x8c>
        *nclust = fs->free_clust;
8000750c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007510:	e5932020 	ldr	r2, [r3, #32]
80007514:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
80007518:	e5832000 	str	r2, [r3]
        return FR_OK;
8000751c:	e3a03000 	mov	r3, #0
80007520:	ea00007e 	b	80007720 <f_getfree+0x288>
    }

    /* Count number of free clusters */
    fat = fs->fs_type;
80007524:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007528:	e5d33024 	ldrb	r3, [r3, #36]	; 0x24
8000752c:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
    n = 0;
80007530:	e3a03000 	mov	r3, #0
80007534:	e50b3008 	str	r3, [fp, #-8]
    if (fat == FS_FAT12) {
80007538:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
8000753c:	e3530001 	cmp	r3, #1
80007540:	1a000016 	bne	800075a0 <f_getfree+0x108>
        clust = 2;
80007544:	e3a03002 	mov	r3, #2
80007548:	e50b300c 	str	r3, [fp, #-12]
        do {
            if ((WORD)get_cluster(fs, clust) == 0) n++;
8000754c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007550:	e1a00003 	mov	r0, r3
80007554:	e51b100c 	ldr	r1, [fp, #-12]
80007558:	ebfff1b3 	bl	80003c2c <get_cluster>
8000755c:	e1a03000 	mov	r3, r0
80007560:	e1a03803 	lsl	r3, r3, #16
80007564:	e1a03823 	lsr	r3, r3, #16
80007568:	e3530000 	cmp	r3, #0
8000756c:	1a000002 	bne	8000757c <f_getfree+0xe4>
80007570:	e51b3008 	ldr	r3, [fp, #-8]
80007574:	e2833001 	add	r3, r3, #1
80007578:	e50b3008 	str	r3, [fp, #-8]
        } while (++clust < fs->max_clust);
8000757c:	e51b300c 	ldr	r3, [fp, #-12]
80007580:	e2833001 	add	r3, r3, #1
80007584:	e50b300c 	str	r3, [fp, #-12]
80007588:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000758c:	e593300c 	ldr	r3, [r3, #12]
80007590:	e51b200c 	ldr	r2, [fp, #-12]
80007594:	e1520003 	cmp	r2, r3
80007598:	3affffeb 	bcc	8000754c <f_getfree+0xb4>
8000759c:	ea000058 	b	80007704 <f_getfree+0x26c>
    } else {
        clust = fs->max_clust;
800075a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800075a4:	e593300c 	ldr	r3, [r3, #12]
800075a8:	e50b300c 	str	r3, [fp, #-12]
        sect = fs->fatbase;
800075ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
800075b0:	e5933010 	ldr	r3, [r3, #16]
800075b4:	e50b3010 	str	r3, [fp, #-16]
        f = 0; p = 0;
800075b8:	e3a03000 	mov	r3, #0
800075bc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
800075c0:	e3a03000 	mov	r3, #0
800075c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        do {
            if (!f) {
800075c8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
800075cc:	e3530000 	cmp	r3, #0
800075d0:	1a00000f 	bne	80007614 <f_getfree+0x17c>
                if (!move_window(fs, sect++)) return FR_RW_ERROR;
800075d4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
800075d8:	e51b3010 	ldr	r3, [fp, #-16]
800075dc:	e51b1010 	ldr	r1, [fp, #-16]
800075e0:	e2811001 	add	r1, r1, #1
800075e4:	e50b1010 	str	r1, [fp, #-16]
800075e8:	e1a00002 	mov	r0, r2
800075ec:	e1a01003 	mov	r1, r3
800075f0:	ebfff114 	bl	80003a48 <move_window>
800075f4:	e1a03000 	mov	r3, r0
800075f8:	e3530000 	cmp	r3, #0
800075fc:	1a000001 	bne	80007608 <f_getfree+0x170>
80007600:	e3a03008 	mov	r3, #8
80007604:	ea000045 	b	80007720 <f_getfree+0x288>
                p = fs->win;
80007608:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
8000760c:	e283302a 	add	r3, r3, #42	; 0x2a
80007610:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            }
            if (fat == FS_FAT16) {
80007614:	e55b301a 	ldrb	r3, [fp, #-26]	; 0xffffffe6
80007618:	e3530002 	cmp	r3, #2
8000761c:	1a000016 	bne	8000767c <f_getfree+0x1e4>
                if (LD_WORD(p) == 0) n++;
80007620:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007624:	e2833001 	add	r3, r3, #1
80007628:	e5d33000 	ldrb	r3, [r3]
8000762c:	e1a03403 	lsl	r3, r3, #8
80007630:	e1a03803 	lsl	r3, r3, #16
80007634:	e1a02823 	lsr	r2, r3, #16
80007638:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
8000763c:	e5d33000 	ldrb	r3, [r3]
80007640:	e1823003 	orr	r3, r2, r3
80007644:	e1a03803 	lsl	r3, r3, #16
80007648:	e1a03823 	lsr	r3, r3, #16
8000764c:	e3530000 	cmp	r3, #0
80007650:	1a000002 	bne	80007660 <f_getfree+0x1c8>
80007654:	e51b3008 	ldr	r3, [fp, #-8]
80007658:	e2833001 	add	r3, r3, #1
8000765c:	e50b3008 	str	r3, [fp, #-8]
                p += 2; f += 1;
80007660:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007664:	e2833002 	add	r3, r3, #2
80007668:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
8000766c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80007670:	e2833001 	add	r3, r3, #1
80007674:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
80007678:	ea00001b 	b	800076ec <f_getfree+0x254>
            } else {
                if (LD_DWORD(p) == 0) n++;
8000767c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007680:	e2833003 	add	r3, r3, #3
80007684:	e5d33000 	ldrb	r3, [r3]
80007688:	e1a02c03 	lsl	r2, r3, #24
8000768c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007690:	e2833002 	add	r3, r3, #2
80007694:	e5d33000 	ldrb	r3, [r3]
80007698:	e1a03803 	lsl	r3, r3, #16
8000769c:	e1822003 	orr	r2, r2, r3
800076a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800076a4:	e2833001 	add	r3, r3, #1
800076a8:	e5d33000 	ldrb	r3, [r3]
800076ac:	e1a03403 	lsl	r3, r3, #8
800076b0:	e1822003 	orr	r2, r2, r3
800076b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800076b8:	e5d33000 	ldrb	r3, [r3]
800076bc:	e1823003 	orr	r3, r2, r3
800076c0:	e3530000 	cmp	r3, #0
800076c4:	1a000002 	bne	800076d4 <f_getfree+0x23c>
800076c8:	e51b3008 	ldr	r3, [fp, #-8]
800076cc:	e2833001 	add	r3, r3, #1
800076d0:	e50b3008 	str	r3, [fp, #-8]
                p += 4; f += 2;
800076d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800076d8:	e2833004 	add	r3, r3, #4
800076dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
800076e0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
800076e4:	e2833002 	add	r3, r3, #2
800076e8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
            }
        } while (--clust);
800076ec:	e51b300c 	ldr	r3, [fp, #-12]
800076f0:	e2433001 	sub	r3, r3, #1
800076f4:	e50b300c 	str	r3, [fp, #-12]
800076f8:	e51b300c 	ldr	r3, [fp, #-12]
800076fc:	e3530000 	cmp	r3, #0
80007700:	1affffb0 	bne	800075c8 <f_getfree+0x130>
    }
    fs->free_clust = n;
80007704:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
80007708:	e51b2008 	ldr	r2, [fp, #-8]
8000770c:	e5832020 	str	r2, [r3, #32]
#if _USE_FSINFO
    if (fat == FS_FAT32) fs->fsi_flag = 1;
#endif

    *nclust = n;
80007710:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
80007714:	e51b2008 	ldr	r2, [fp, #-8]
80007718:	e5832000 	str	r2, [r3]
    return FR_OK;
8000771c:	e3a03000 	mov	r3, #0
}
80007720:	e1a00003 	mov	r0, r3
80007724:	e24bd004 	sub	sp, fp, #4
80007728:	e8bd4800 	pop	{fp, lr}
8000772c:	e12fff1e 	bx	lr

80007730 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
    const char *path            /* Pointer to the file or directory path */
)
{
80007730:	e92d4800 	push	{fp, lr}
80007734:	e28db004 	add	fp, sp, #4
80007738:	e24dd040 	sub	sp, sp, #64	; 0x40
8000773c:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
    FRESULT res;
    DIR dirobj;
    FATFS *fs;


    res = auto_mount(&path, &fs, 1);
80007740:	e24b2040 	sub	r2, fp, #64	; 0x40
80007744:	e24b303c 	sub	r3, fp, #60	; 0x3c
80007748:	e1a00002 	mov	r0, r2
8000774c:	e1a01003 	mov	r1, r3
80007750:	e3a02001 	mov	r2, #1
80007754:	ebfff71d 	bl	800053d0 <auto_mount>
80007758:	e1a03000 	mov	r3, r0
8000775c:	e54b3005 	strb	r3, [fp, #-5]
    if (res != FR_OK) return res;
80007760:	e55b3005 	ldrb	r3, [fp, #-5]
80007764:	e3530000 	cmp	r3, #0
80007768:	0a000001 	beq	80007774 <f_unlink+0x44>
8000776c:	e55b3005 	ldrb	r3, [fp, #-5]
80007770:	ea000092 	b	800079c0 <f_unlink+0x290>
    dirobj.fs = fs;
80007774:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
80007778:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

    res = trace_path(&dirobj, fn, path, &dir);    /* Trace the file path */
8000777c:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
80007780:	e24b0038 	sub	r0, fp, #56	; 0x38
80007784:	e24b1024 	sub	r1, fp, #36	; 0x24
80007788:	e24b3018 	sub	r3, fp, #24
8000778c:	ebfff56f 	bl	80004d50 <trace_path>
80007790:	e1a03000 	mov	r3, r0
80007794:	e54b3005 	strb	r3, [fp, #-5]
    if (res != FR_OK) return res;                /* Trace failed */
80007798:	e55b3005 	ldrb	r3, [fp, #-5]
8000779c:	e3530000 	cmp	r3, #0
800077a0:	0a000001 	beq	800077ac <f_unlink+0x7c>
800077a4:	e55b3005 	ldrb	r3, [fp, #-5]
800077a8:	ea000084 	b	800079c0 <f_unlink+0x290>
    if (dir == NULL) return FR_INVALID_NAME;    /* It is the root directory */
800077ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800077b0:	e3530000 	cmp	r3, #0
800077b4:	1a000001 	bne	800077c0 <f_unlink+0x90>
800077b8:	e3a03004 	mov	r3, #4
800077bc:	ea00007f 	b	800079c0 <f_unlink+0x290>
    if (dir[DIR_Attr] & AM_RDO) return FR_DENIED;    /* It is a R/O object */
800077c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800077c4:	e283300b 	add	r3, r3, #11
800077c8:	e5d33000 	ldrb	r3, [r3]
800077cc:	e2033001 	and	r3, r3, #1
800077d0:	e20330ff 	and	r3, r3, #255	; 0xff
800077d4:	e3530000 	cmp	r3, #0
800077d8:	0a000001 	beq	800077e4 <f_unlink+0xb4>
800077dc:	e3a03006 	mov	r3, #6
800077e0:	ea000076 	b	800079c0 <f_unlink+0x290>
    dsect = fs->winsect;
800077e4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
800077e8:	e5933004 	ldr	r3, [r3, #4]
800077ec:	e50b300c 	str	r3, [fp, #-12]
    dclust = ((DWORD)LD_WORD(&dir[DIR_FstClusHI]) << 16) | LD_WORD(&dir[DIR_FstClusLO]);
800077f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
800077f4:	e2833015 	add	r3, r3, #21
800077f8:	e5d33000 	ldrb	r3, [r3]
800077fc:	e1a03403 	lsl	r3, r3, #8
80007800:	e1a03803 	lsl	r3, r3, #16
80007804:	e1a02823 	lsr	r2, r3, #16
80007808:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
8000780c:	e2833014 	add	r3, r3, #20
80007810:	e5d33000 	ldrb	r3, [r3]
80007814:	e1823003 	orr	r3, r2, r3
80007818:	e1a03803 	lsl	r3, r3, #16
8000781c:	e1a03823 	lsr	r3, r3, #16
80007820:	e1a03803 	lsl	r3, r3, #16
80007824:	e1a03823 	lsr	r3, r3, #16
80007828:	e1a02803 	lsl	r2, r3, #16
8000782c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007830:	e283301b 	add	r3, r3, #27
80007834:	e5d33000 	ldrb	r3, [r3]
80007838:	e1a03403 	lsl	r3, r3, #8
8000783c:	e1a03803 	lsl	r3, r3, #16
80007840:	e1a01823 	lsr	r1, r3, #16
80007844:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007848:	e283301a 	add	r3, r3, #26
8000784c:	e5d33000 	ldrb	r3, [r3]
80007850:	e1813003 	orr	r3, r1, r3
80007854:	e1a03803 	lsl	r3, r3, #16
80007858:	e1a03823 	lsr	r3, r3, #16
8000785c:	e1a03803 	lsl	r3, r3, #16
80007860:	e1a03823 	lsr	r3, r3, #16
80007864:	e1823003 	orr	r3, r2, r3
80007868:	e50b3010 	str	r3, [fp, #-16]

    if (dir[DIR_Attr] & AM_DIR) {                /* It is a sub-directory */
8000786c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007870:	e283300b 	add	r3, r3, #11
80007874:	e5d33000 	ldrb	r3, [r3]
80007878:	e2033010 	and	r3, r3, #16
8000787c:	e3530000 	cmp	r3, #0
80007880:	0a000032 	beq	80007950 <f_unlink+0x220>
        dirobj.clust = dclust;                    /* Check if the sub-dir is empty or not */
80007884:	e51b3010 	ldr	r3, [fp, #-16]
80007888:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        dirobj.sect = clust2sect(fs, dclust);
8000788c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
80007890:	e1a00003 	mov	r0, r3
80007894:	e51b1010 	ldr	r1, [fp, #-16]
80007898:	ebfff359 	bl	80004604 <clust2sect>
8000789c:	e1a03000 	mov	r3, r0
800078a0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
        dirobj.index = 2;
800078a4:	e3a03002 	mov	r3, #2
800078a8:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
        do {
            if (!move_window(fs, dirobj.sect)) return FR_RW_ERROR;
800078ac:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
800078b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
800078b4:	e1a00002 	mov	r0, r2
800078b8:	e1a01003 	mov	r1, r3
800078bc:	ebfff061 	bl	80003a48 <move_window>
800078c0:	e1a03000 	mov	r3, r0
800078c4:	e3530000 	cmp	r3, #0
800078c8:	1a000001 	bne	800078d4 <f_unlink+0x1a4>
800078cc:	e3a03008 	mov	r3, #8
800078d0:	ea00003a 	b	800079c0 <f_unlink+0x290>
            sdir = &fs->win[(dirobj.index & ((S_SIZ - 1) >> 5)) * 32];
800078d4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
800078d8:	e283202a 	add	r2, r3, #42	; 0x2a
800078dc:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
800078e0:	e203300f 	and	r3, r3, #15
800078e4:	e1a03283 	lsl	r3, r3, #5
800078e8:	e0823003 	add	r3, r2, r3
800078ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            if (sdir[DIR_Name] == 0) break;
800078f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800078f4:	e5d33000 	ldrb	r3, [r3]
800078f8:	e3530000 	cmp	r3, #0
800078fc:	0a000012 	beq	8000794c <f_unlink+0x21c>
            if (sdir[DIR_Name] != 0xE5 && !(sdir[DIR_Attr] & AM_VOL))
80007900:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80007904:	e5d33000 	ldrb	r3, [r3]
80007908:	e35300e5 	cmp	r3, #229	; 0xe5
8000790c:	0a000007 	beq	80007930 <f_unlink+0x200>
80007910:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
80007914:	e283300b 	add	r3, r3, #11
80007918:	e5d33000 	ldrb	r3, [r3]
8000791c:	e2033008 	and	r3, r3, #8
80007920:	e3530000 	cmp	r3, #0
80007924:	1a000001 	bne	80007930 <f_unlink+0x200>
                return FR_DENIED;    /* The directory is not empty */
80007928:	e3a03006 	mov	r3, #6
8000792c:	ea000023 	b	800079c0 <f_unlink+0x290>
        } while (next_dir_entry(&dirobj));
80007930:	e24b3038 	sub	r3, fp, #56	; 0x38
80007934:	e1a00003 	mov	r0, r3
80007938:	ebfff34c 	bl	80004670 <next_dir_entry>
8000793c:	e1a03000 	mov	r3, r0
80007940:	e3530000 	cmp	r3, #0
80007944:	1affffd8 	bne	800078ac <f_unlink+0x17c>
80007948:	ea000000 	b	80007950 <f_unlink+0x220>
        dirobj.sect = clust2sect(fs, dclust);
        dirobj.index = 2;
        do {
            if (!move_window(fs, dirobj.sect)) return FR_RW_ERROR;
            sdir = &fs->win[(dirobj.index & ((S_SIZ - 1) >> 5)) * 32];
            if (sdir[DIR_Name] == 0) break;
8000794c:	e1a00000 	nop			; (mov r0, r0)
            if (sdir[DIR_Name] != 0xE5 && !(sdir[DIR_Attr] & AM_VOL))
                return FR_DENIED;    /* The directory is not empty */
        } while (next_dir_entry(&dirobj));
    }

    if (!move_window(fs, dsect)) return FR_RW_ERROR;    /* Mark the directory entry 'deleted' */
80007950:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
80007954:	e1a00003 	mov	r0, r3
80007958:	e51b100c 	ldr	r1, [fp, #-12]
8000795c:	ebfff039 	bl	80003a48 <move_window>
80007960:	e1a03000 	mov	r3, r0
80007964:	e3530000 	cmp	r3, #0
80007968:	1a000001 	bne	80007974 <f_unlink+0x244>
8000796c:	e3a03008 	mov	r3, #8
80007970:	ea000012 	b	800079c0 <f_unlink+0x290>
    dir[DIR_Name] = 0xE5;
80007974:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007978:	e3e0201a 	mvn	r2, #26
8000797c:	e5c32000 	strb	r2, [r3]
    fs->winflag = 1;
80007980:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
80007984:	e3a02001 	mov	r2, #1
80007988:	e5c32028 	strb	r2, [r3, #40]	; 0x28
    if (!remove_chain(fs, dclust)) return FR_RW_ERROR;    /* Remove the cluster chain */
8000798c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
80007990:	e1a00003 	mov	r0, r3
80007994:	e51b1010 	ldr	r1, [fp, #-16]
80007998:	ebfff274 	bl	80004370 <remove_chain>
8000799c:	e1a03000 	mov	r3, r0
800079a0:	e3530000 	cmp	r3, #0
800079a4:	1a000001 	bne	800079b0 <f_unlink+0x280>
800079a8:	e3a03008 	mov	r3, #8
800079ac:	ea000003 	b	800079c0 <f_unlink+0x290>

    return sync(fs);
800079b0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
800079b4:	e1a00003 	mov	r0, r3
800079b8:	ebfff07c 	bl	80003bb0 <sync>
800079bc:	e1a03000 	mov	r3, r0
}
800079c0:	e1a00003 	mov	r0, r3
800079c4:	e24bd004 	sub	sp, fp, #4
800079c8:	e8bd4800 	pop	{fp, lr}
800079cc:	e12fff1e 	bx	lr

800079d0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    const char *path        /* Pointer to the directory path */
)
{
800079d0:	e92d4800 	push	{fp, lr}
800079d4:	e28db004 	add	fp, sp, #4
800079d8:	e24dd050 	sub	sp, sp, #80	; 0x50
800079dc:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
    FRESULT res;
    DIR dirobj;
    FATFS *fs;


    res = auto_mount(&path, &fs, 1);
800079e0:	e24b2050 	sub	r2, fp, #80	; 0x50
800079e4:	e24b304c 	sub	r3, fp, #76	; 0x4c
800079e8:	e1a00002 	mov	r0, r2
800079ec:	e1a01003 	mov	r1, r3
800079f0:	e3a02001 	mov	r2, #1
800079f4:	ebfff675 	bl	800053d0 <auto_mount>
800079f8:	e1a03000 	mov	r3, r0
800079fc:	e54b300d 	strb	r3, [fp, #-13]
    if (res != FR_OK) return res;
80007a00:	e55b300d 	ldrb	r3, [fp, #-13]
80007a04:	e3530000 	cmp	r3, #0
80007a08:	0a000001 	beq	80007a14 <f_mkdir+0x44>
80007a0c:	e55b300d 	ldrb	r3, [fp, #-13]
80007a10:	ea00010f 	b	80007e54 <f_mkdir+0x484>
    dirobj.fs = fs;
80007a14:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007a18:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    res = trace_path(&dirobj, fn, path, &dir);    /* Trace the file path */
80007a1c:	e51b2050 	ldr	r2, [fp, #-80]	; 0xffffffb0
80007a20:	e24b0048 	sub	r0, fp, #72	; 0x48
80007a24:	e24b1034 	sub	r1, fp, #52	; 0x34
80007a28:	e24b3028 	sub	r3, fp, #40	; 0x28
80007a2c:	ebfff4c7 	bl	80004d50 <trace_path>
80007a30:	e1a03000 	mov	r3, r0
80007a34:	e54b300d 	strb	r3, [fp, #-13]
    if (res == FR_OK) return FR_EXIST;            /* Any file or directory is already existing */
80007a38:	e55b300d 	ldrb	r3, [fp, #-13]
80007a3c:	e3530000 	cmp	r3, #0
80007a40:	1a000001 	bne	80007a4c <f_mkdir+0x7c>
80007a44:	e3a03007 	mov	r3, #7
80007a48:	ea000101 	b	80007e54 <f_mkdir+0x484>
    if (res != FR_NO_FILE) return res;
80007a4c:	e55b300d 	ldrb	r3, [fp, #-13]
80007a50:	e3530002 	cmp	r3, #2
80007a54:	0a000001 	beq	80007a60 <f_mkdir+0x90>
80007a58:	e55b300d 	ldrb	r3, [fp, #-13]
80007a5c:	ea0000fc 	b	80007e54 <f_mkdir+0x484>

    res = reserve_direntry(&dirobj, &dir);         /* Reserve a directory entry */
80007a60:	e24b2048 	sub	r2, fp, #72	; 0x48
80007a64:	e24b3028 	sub	r3, fp, #40	; 0x28
80007a68:	e1a00002 	mov	r0, r2
80007a6c:	e1a01003 	mov	r1, r3
80007a70:	ebfff577 	bl	80005054 <reserve_direntry>
80007a74:	e1a03000 	mov	r3, r0
80007a78:	e54b300d 	strb	r3, [fp, #-13]
    if (res != FR_OK) return res;
80007a7c:	e55b300d 	ldrb	r3, [fp, #-13]
80007a80:	e3530000 	cmp	r3, #0
80007a84:	0a000001 	beq	80007a90 <f_mkdir+0xc0>
80007a88:	e55b300d 	ldrb	r3, [fp, #-13]
80007a8c:	ea0000f0 	b	80007e54 <f_mkdir+0x484>
    sect = fs->winsect;
80007a90:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007a94:	e5933004 	ldr	r3, [r3, #4]
80007a98:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    dclust = create_chain(fs, 0);                /* Allocate a cluster for new directory table */
80007a9c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007aa0:	e1a00003 	mov	r0, r3
80007aa4:	e3a01000 	mov	r1, #0
80007aa8:	ebfff260 	bl	80004430 <create_chain>
80007aac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (dclust == 1) return FR_RW_ERROR;
80007ab0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
80007ab4:	e3530001 	cmp	r3, #1
80007ab8:	1a000001 	bne	80007ac4 <f_mkdir+0xf4>
80007abc:	e3a03008 	mov	r3, #8
80007ac0:	ea0000e3 	b	80007e54 <f_mkdir+0x484>
    dsect = clust2sect(fs, dclust);
80007ac4:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007ac8:	e1a00003 	mov	r0, r3
80007acc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
80007ad0:	ebfff2cb 	bl	80004604 <clust2sect>
80007ad4:	e50b000c 	str	r0, [fp, #-12]
    if (!dsect) return FR_DENIED;
80007ad8:	e51b300c 	ldr	r3, [fp, #-12]
80007adc:	e3530000 	cmp	r3, #0
80007ae0:	1a000001 	bne	80007aec <f_mkdir+0x11c>
80007ae4:	e3a03006 	mov	r3, #6
80007ae8:	ea0000d9 	b	80007e54 <f_mkdir+0x484>
    if (!move_window(fs, dsect)) return FR_RW_ERROR;
80007aec:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007af0:	e1a00003 	mov	r0, r3
80007af4:	e51b100c 	ldr	r1, [fp, #-12]
80007af8:	ebffefd2 	bl	80003a48 <move_window>
80007afc:	e1a03000 	mov	r3, r0
80007b00:	e3530000 	cmp	r3, #0
80007b04:	1a000001 	bne	80007b10 <f_mkdir+0x140>
80007b08:	e3a03008 	mov	r3, #8
80007b0c:	ea0000d0 	b	80007e54 <f_mkdir+0x484>

    fw = fs->win;
80007b10:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007b14:	e283302a 	add	r3, r3, #42	; 0x2a
80007b18:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    memset(fw, 0, S_SIZ);                        /* Clear the new directory table */
80007b1c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
80007b20:	e3a01000 	mov	r1, #0
80007b24:	e3a02c02 	mov	r2, #512	; 0x200
80007b28:	eb00048c 	bl	80008d60 <memset>
    for (n = 1; n < fs->sects_clust; n++) {
80007b2c:	e3a03001 	mov	r3, #1
80007b30:	e54b3005 	strb	r3, [fp, #-5]
80007b34:	ea000011 	b	80007b80 <f_mkdir+0x1b0>
        if (disk_write(fs->drive, fw, ++dsect, 1) != RES_OK)
80007b38:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007b3c:	e5d33027 	ldrb	r3, [r3, #39]	; 0x27
80007b40:	e51b200c 	ldr	r2, [fp, #-12]
80007b44:	e2822001 	add	r2, r2, #1
80007b48:	e50b200c 	str	r2, [fp, #-12]
80007b4c:	e1a00003 	mov	r0, r3
80007b50:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
80007b54:	e51b200c 	ldr	r2, [fp, #-12]
80007b58:	e3a03001 	mov	r3, #1
80007b5c:	eb000318 	bl	800087c4 <disk_write>
80007b60:	e1a03000 	mov	r3, r0
80007b64:	e3530000 	cmp	r3, #0
80007b68:	0a000001 	beq	80007b74 <f_mkdir+0x1a4>
            return FR_RW_ERROR;
80007b6c:	e3a03008 	mov	r3, #8
80007b70:	ea0000b7 	b	80007e54 <f_mkdir+0x484>
    if (!dsect) return FR_DENIED;
    if (!move_window(fs, dsect)) return FR_RW_ERROR;

    fw = fs->win;
    memset(fw, 0, S_SIZ);                        /* Clear the new directory table */
    for (n = 1; n < fs->sects_clust; n++) {
80007b74:	e55b3005 	ldrb	r3, [fp, #-5]
80007b78:	e2833001 	add	r3, r3, #1
80007b7c:	e54b3005 	strb	r3, [fp, #-5]
80007b80:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007b84:	e5d33025 	ldrb	r3, [r3, #37]	; 0x25
80007b88:	e55b2005 	ldrb	r2, [fp, #-5]
80007b8c:	e1520003 	cmp	r2, r3
80007b90:	3affffe8 	bcc	80007b38 <f_mkdir+0x168>
        if (disk_write(fs->drive, fw, ++dsect, 1) != RES_OK)
            return FR_RW_ERROR;
    }
    memset(&fw[DIR_Name], ' ', 8+3);            /* Create "." entry */
80007b94:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
80007b98:	e3a01020 	mov	r1, #32
80007b9c:	e3a0200b 	mov	r2, #11
80007ba0:	eb00046e 	bl	80008d60 <memset>
    fw[DIR_Name] = '.';
80007ba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007ba8:	e3a0202e 	mov	r2, #46	; 0x2e
80007bac:	e5c32000 	strb	r2, [r3]
    fw[DIR_Attr] = AM_DIR;
80007bb0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007bb4:	e283300b 	add	r3, r3, #11
80007bb8:	e3a02010 	mov	r2, #16
80007bbc:	e5c32000 	strb	r2, [r3]
    tim = get_fattime();
80007bc0:	eb000328 	bl	80008868 <get_fattime>
80007bc4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    ST_DWORD(&fw[DIR_WrtTime], tim);
80007bc8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007bcc:	e2833016 	add	r3, r3, #22
80007bd0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80007bd4:	e20220ff 	and	r2, r2, #255	; 0xff
80007bd8:	e5c32000 	strb	r2, [r3]
80007bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007be0:	e2833017 	add	r3, r3, #23
80007be4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80007be8:	e1a02802 	lsl	r2, r2, #16
80007bec:	e1a02822 	lsr	r2, r2, #16
80007bf0:	e1a02422 	lsr	r2, r2, #8
80007bf4:	e1a02802 	lsl	r2, r2, #16
80007bf8:	e1a02822 	lsr	r2, r2, #16
80007bfc:	e20220ff 	and	r2, r2, #255	; 0xff
80007c00:	e5c32000 	strb	r2, [r3]
80007c04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007c08:	e2833018 	add	r3, r3, #24
80007c0c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80007c10:	e1a02822 	lsr	r2, r2, #16
80007c14:	e20220ff 	and	r2, r2, #255	; 0xff
80007c18:	e5c32000 	strb	r2, [r3]
80007c1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007c20:	e2833019 	add	r3, r3, #25
80007c24:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80007c28:	e1a02c22 	lsr	r2, r2, #24
80007c2c:	e20220ff 	and	r2, r2, #255	; 0xff
80007c30:	e5c32000 	strb	r2, [r3]
    memcpy(&fw[32], &fw[0], 32); fw[33] = '.';    /* Create ".." entry */
80007c34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007c38:	e2833020 	add	r3, r3, #32
80007c3c:	e1a00003 	mov	r0, r3
80007c40:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
80007c44:	e3a02020 	mov	r2, #32
80007c48:	eb0003d4 	bl	80008ba0 <memcpy>
80007c4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007c50:	e2833021 	add	r3, r3, #33	; 0x21
80007c54:	e3a0202e 	mov	r2, #46	; 0x2e
80007c58:	e5c32000 	strb	r2, [r3]
    pclust = dirobj.sclust;
80007c5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
80007c60:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if _FAT32
    ST_WORD(&fw[   DIR_FstClusHI], dclust >> 16);
    if (fs->fs_type == FS_FAT32 && pclust == fs->dirbase) pclust = 0;
    ST_WORD(&fw[32+DIR_FstClusHI], pclust >> 16);
#endif
    ST_WORD(&fw[   DIR_FstClusLO], dclust);
80007c64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007c68:	e283301a 	add	r3, r3, #26
80007c6c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80007c70:	e20220ff 	and	r2, r2, #255	; 0xff
80007c74:	e5c32000 	strb	r2, [r3]
80007c78:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007c7c:	e283301b 	add	r3, r3, #27
80007c80:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80007c84:	e1a02802 	lsl	r2, r2, #16
80007c88:	e1a02822 	lsr	r2, r2, #16
80007c8c:	e1a02422 	lsr	r2, r2, #8
80007c90:	e1a02802 	lsl	r2, r2, #16
80007c94:	e1a02822 	lsr	r2, r2, #16
80007c98:	e20220ff 	and	r2, r2, #255	; 0xff
80007c9c:	e5c32000 	strb	r2, [r3]
    ST_WORD(&fw[32+DIR_FstClusLO], pclust);
80007ca0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007ca4:	e283303a 	add	r3, r3, #58	; 0x3a
80007ca8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80007cac:	e20220ff 	and	r2, r2, #255	; 0xff
80007cb0:	e5c32000 	strb	r2, [r3]
80007cb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
80007cb8:	e283303b 	add	r3, r3, #59	; 0x3b
80007cbc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
80007cc0:	e1a02802 	lsl	r2, r2, #16
80007cc4:	e1a02822 	lsr	r2, r2, #16
80007cc8:	e1a02422 	lsr	r2, r2, #8
80007ccc:	e1a02802 	lsl	r2, r2, #16
80007cd0:	e1a02822 	lsr	r2, r2, #16
80007cd4:	e20220ff 	and	r2, r2, #255	; 0xff
80007cd8:	e5c32000 	strb	r2, [r3]
    fs->winflag = 1;
80007cdc:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007ce0:	e3a02001 	mov	r2, #1
80007ce4:	e5c32028 	strb	r2, [r3, #40]	; 0x28

    if (!move_window(fs, sect)) return FR_RW_ERROR;
80007ce8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007cec:	e1a00003 	mov	r0, r3
80007cf0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
80007cf4:	ebffef53 	bl	80003a48 <move_window>
80007cf8:	e1a03000 	mov	r3, r0
80007cfc:	e3530000 	cmp	r3, #0
80007d00:	1a000001 	bne	80007d0c <f_mkdir+0x33c>
80007d04:	e3a03008 	mov	r3, #8
80007d08:	ea000051 	b	80007e54 <f_mkdir+0x484>
    memset(&dir[0], 0, 32);                        /* Initialize the new entry */
80007d0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007d10:	e1a00003 	mov	r0, r3
80007d14:	e3a01000 	mov	r1, #0
80007d18:	e3a02020 	mov	r2, #32
80007d1c:	eb00040f 	bl	80008d60 <memset>
    memcpy(&dir[DIR_Name], fn, 8+3);            /* Name */
80007d20:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
80007d24:	e24b3034 	sub	r3, fp, #52	; 0x34
80007d28:	e1a00002 	mov	r0, r2
80007d2c:	e1a01003 	mov	r1, r3
80007d30:	e3a0200b 	mov	r2, #11
80007d34:	eb000399 	bl	80008ba0 <memcpy>
    dir[DIR_NTres] = fn[11];
80007d38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007d3c:	e283300c 	add	r3, r3, #12
80007d40:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
80007d44:	e5c32000 	strb	r2, [r3]
    dir[DIR_Attr] = AM_DIR;                        /* Attribute */
80007d48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007d4c:	e283300b 	add	r3, r3, #11
80007d50:	e3a02010 	mov	r2, #16
80007d54:	e5c32000 	strb	r2, [r3]
    ST_DWORD(&dir[DIR_WrtTime], tim);            /* Crated time */
80007d58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007d5c:	e2833016 	add	r3, r3, #22
80007d60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80007d64:	e20220ff 	and	r2, r2, #255	; 0xff
80007d68:	e5c32000 	strb	r2, [r3]
80007d6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007d70:	e2833017 	add	r3, r3, #23
80007d74:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80007d78:	e1a02802 	lsl	r2, r2, #16
80007d7c:	e1a02822 	lsr	r2, r2, #16
80007d80:	e1a02422 	lsr	r2, r2, #8
80007d84:	e1a02802 	lsl	r2, r2, #16
80007d88:	e1a02822 	lsr	r2, r2, #16
80007d8c:	e20220ff 	and	r2, r2, #255	; 0xff
80007d90:	e5c32000 	strb	r2, [r3]
80007d94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007d98:	e2833018 	add	r3, r3, #24
80007d9c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80007da0:	e1a02822 	lsr	r2, r2, #16
80007da4:	e20220ff 	and	r2, r2, #255	; 0xff
80007da8:	e5c32000 	strb	r2, [r3]
80007dac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007db0:	e2833019 	add	r3, r3, #25
80007db4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
80007db8:	e1a02c22 	lsr	r2, r2, #24
80007dbc:	e20220ff 	and	r2, r2, #255	; 0xff
80007dc0:	e5c32000 	strb	r2, [r3]
    ST_WORD(&dir[DIR_FstClusLO], dclust);        /* Table start cluster */
80007dc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007dc8:	e283301a 	add	r3, r3, #26
80007dcc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80007dd0:	e20220ff 	and	r2, r2, #255	; 0xff
80007dd4:	e5c32000 	strb	r2, [r3]
80007dd8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007ddc:	e283301b 	add	r3, r3, #27
80007de0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80007de4:	e1a02802 	lsl	r2, r2, #16
80007de8:	e1a02822 	lsr	r2, r2, #16
80007dec:	e1a02422 	lsr	r2, r2, #8
80007df0:	e1a02802 	lsl	r2, r2, #16
80007df4:	e1a02822 	lsr	r2, r2, #16
80007df8:	e20220ff 	and	r2, r2, #255	; 0xff
80007dfc:	e5c32000 	strb	r2, [r3]
    ST_WORD(&dir[DIR_FstClusHI], dclust >> 16);
80007e00:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007e04:	e2833014 	add	r3, r3, #20
80007e08:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80007e0c:	e1a02822 	lsr	r2, r2, #16
80007e10:	e20220ff 	and	r2, r2, #255	; 0xff
80007e14:	e5c32000 	strb	r2, [r3]
80007e18:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
80007e1c:	e2833015 	add	r3, r3, #21
80007e20:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
80007e24:	e1a02822 	lsr	r2, r2, #16
80007e28:	e1a02802 	lsl	r2, r2, #16
80007e2c:	e1a02822 	lsr	r2, r2, #16
80007e30:	e1a02422 	lsr	r2, r2, #8
80007e34:	e1a02802 	lsl	r2, r2, #16
80007e38:	e1a02822 	lsr	r2, r2, #16
80007e3c:	e20220ff 	and	r2, r2, #255	; 0xff
80007e40:	e5c32000 	strb	r2, [r3]

    return sync(fs);
80007e44:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
80007e48:	e1a00003 	mov	r0, r3
80007e4c:	ebffef57 	bl	80003bb0 <sync>
80007e50:	e1a03000 	mov	r3, r0
}
80007e54:	e1a00003 	mov	r0, r3
80007e58:	e24bd004 	sub	sp, fp, #4
80007e5c:	e8bd4800 	pop	{fp, lr}
80007e60:	e12fff1e 	bx	lr

80007e64 <f_chmod>:
FRESULT f_chmod (
    const char *path,    /* Pointer to the file path */
    BYTE value,            /* Attribute bits */
    BYTE mask            /* Attribute mask to change */
)
{
80007e64:	e92d4800 	push	{fp, lr}
80007e68:	e28db004 	add	fp, sp, #4
80007e6c:	e24dd038 	sub	sp, sp, #56	; 0x38
80007e70:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
80007e74:	e1a03002 	mov	r3, r2
80007e78:	e1a02001 	mov	r2, r1
80007e7c:	e54b2039 	strb	r2, [fp, #-57]	; 0xffffffc7
80007e80:	e54b303a 	strb	r3, [fp, #-58]	; 0xffffffc6
    DIR dirobj;
    char fn[8+3+1];
    FATFS *fs;


    res = auto_mount(&path, &fs, 1);
80007e84:	e24b2038 	sub	r2, fp, #56	; 0x38
80007e88:	e24b3030 	sub	r3, fp, #48	; 0x30
80007e8c:	e1a00002 	mov	r0, r2
80007e90:	e1a01003 	mov	r1, r3
80007e94:	e3a02001 	mov	r2, #1
80007e98:	ebfff54c 	bl	800053d0 <auto_mount>
80007e9c:	e1a03000 	mov	r3, r0
80007ea0:	e54b3005 	strb	r3, [fp, #-5]
    if (res == FR_OK) {
80007ea4:	e55b3005 	ldrb	r3, [fp, #-5]
80007ea8:	e3530000 	cmp	r3, #0
80007eac:	1a00002a 	bne	80007f5c <f_chmod+0xf8>
        dirobj.fs = fs;
80007eb0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
80007eb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        res = trace_path(&dirobj, fn, path, &dir);    /* Trace the file path */
80007eb8:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
80007ebc:	e24b0020 	sub	r0, fp, #32
80007ec0:	e24b102c 	sub	r1, fp, #44	; 0x2c
80007ec4:	e24b300c 	sub	r3, fp, #12
80007ec8:	ebfff3a0 	bl	80004d50 <trace_path>
80007ecc:	e1a03000 	mov	r3, r0
80007ed0:	e54b3005 	strb	r3, [fp, #-5]
        if (res == FR_OK) {            /* Trace completed */
80007ed4:	e55b3005 	ldrb	r3, [fp, #-5]
80007ed8:	e3530000 	cmp	r3, #0
80007edc:	1a00001e 	bne	80007f5c <f_chmod+0xf8>
            if (dir == NULL) {
80007ee0:	e51b300c 	ldr	r3, [fp, #-12]
80007ee4:	e3530000 	cmp	r3, #0
80007ee8:	1a000002 	bne	80007ef8 <f_chmod+0x94>
                res = FR_INVALID_NAME;
80007eec:	e3a03004 	mov	r3, #4
80007ef0:	e54b3005 	strb	r3, [fp, #-5]
80007ef4:	ea000018 	b	80007f5c <f_chmod+0xf8>
            } else {
                mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;    /* Valid attribute mask */
80007ef8:	e55b303a 	ldrb	r3, [fp, #-58]	; 0xffffffc6
80007efc:	e2033027 	and	r3, r3, #39	; 0x27
80007f00:	e54b303a 	strb	r3, [fp, #-58]	; 0xffffffc6
                dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);    /* Apply attribute change */
80007f04:	e51b300c 	ldr	r3, [fp, #-12]
80007f08:	e283300b 	add	r3, r3, #11
80007f0c:	e55b1039 	ldrb	r1, [fp, #-57]	; 0xffffffc7
80007f10:	e55b203a 	ldrb	r2, [fp, #-58]	; 0xffffffc6
80007f14:	e0012002 	and	r2, r1, r2
80007f18:	e20210ff 	and	r1, r2, #255	; 0xff
80007f1c:	e51b200c 	ldr	r2, [fp, #-12]
80007f20:	e282200b 	add	r2, r2, #11
80007f24:	e5d20000 	ldrb	r0, [r2]
80007f28:	e55b203a 	ldrb	r2, [fp, #-58]	; 0xffffffc6
80007f2c:	e1e02002 	mvn	r2, r2
80007f30:	e20220ff 	and	r2, r2, #255	; 0xff
80007f34:	e0002002 	and	r2, r0, r2
80007f38:	e20220ff 	and	r2, r2, #255	; 0xff
80007f3c:	e1812002 	orr	r2, r1, r2
80007f40:	e20220ff 	and	r2, r2, #255	; 0xff
80007f44:	e5c32000 	strb	r2, [r3]
                res = sync(fs);
80007f48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
80007f4c:	e1a00003 	mov	r0, r3
80007f50:	ebffef16 	bl	80003bb0 <sync>
80007f54:	e1a03000 	mov	r3, r0
80007f58:	e54b3005 	strb	r3, [fp, #-5]
            }
        }
    }
    return res;
80007f5c:	e55b3005 	ldrb	r3, [fp, #-5]
}
80007f60:	e1a00003 	mov	r0, r3
80007f64:	e24bd004 	sub	sp, fp, #4
80007f68:	e8bd4800 	pop	{fp, lr}
80007f6c:	e12fff1e 	bx	lr

80007f70 <f_rename>:

FRESULT f_rename (
    const char *path_old,    /* Pointer to the old name */
    const char *path_new    /* Pointer to the new name */
)
{
80007f70:	e92d4800 	push	{fp, lr}
80007f74:	e28db004 	add	fp, sp, #4
80007f78:	e24dd058 	sub	sp, sp, #88	; 0x58
80007f7c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
80007f80:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
    DIR dirobj;
    char fn[8+3+1];
    FATFS *fs;


    res = auto_mount(&path_old, &fs, 1);
80007f84:	e24b2058 	sub	r2, fp, #88	; 0x58
80007f88:	e24b3050 	sub	r3, fp, #80	; 0x50
80007f8c:	e1a00002 	mov	r0, r2
80007f90:	e1a01003 	mov	r1, r3
80007f94:	e3a02001 	mov	r2, #1
80007f98:	ebfff50c 	bl	800053d0 <auto_mount>
80007f9c:	e1a03000 	mov	r3, r0
80007fa0:	e54b3005 	strb	r3, [fp, #-5]
    if (res != FR_OK) return res;
80007fa4:	e55b3005 	ldrb	r3, [fp, #-5]
80007fa8:	e3530000 	cmp	r3, #0
80007fac:	0a000001 	beq	80007fb8 <f_rename+0x48>
80007fb0:	e55b3005 	ldrb	r3, [fp, #-5]
80007fb4:	ea00005f 	b	80008138 <f_rename+0x1c8>
    dirobj.fs = fs;
80007fb8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
80007fbc:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    res = trace_path(&dirobj, fn, path_old, &dir_old);    /* Check old object */
80007fc0:	e51b2058 	ldr	r2, [fp, #-88]	; 0xffffffa8
80007fc4:	e24b0040 	sub	r0, fp, #64	; 0x40
80007fc8:	e24b104c 	sub	r1, fp, #76	; 0x4c
80007fcc:	e24b3010 	sub	r3, fp, #16
80007fd0:	ebfff35e 	bl	80004d50 <trace_path>
80007fd4:	e1a03000 	mov	r3, r0
80007fd8:	e54b3005 	strb	r3, [fp, #-5]
    if (res != FR_OK) return res;            /* The old object is not found */
80007fdc:	e55b3005 	ldrb	r3, [fp, #-5]
80007fe0:	e3530000 	cmp	r3, #0
80007fe4:	0a000001 	beq	80007ff0 <f_rename+0x80>
80007fe8:	e55b3005 	ldrb	r3, [fp, #-5]
80007fec:	ea000051 	b	80008138 <f_rename+0x1c8>
    if (!dir_old) return FR_NO_FILE;
80007ff0:	e51b3010 	ldr	r3, [fp, #-16]
80007ff4:	e3530000 	cmp	r3, #0
80007ff8:	1a000001 	bne	80008004 <f_rename+0x94>
80007ffc:	e3a03002 	mov	r3, #2
80008000:	ea00004c 	b	80008138 <f_rename+0x1c8>
    sect_old = fs->winsect;                    /* Save the object information */
80008004:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
80008008:	e5933004 	ldr	r3, [r3, #4]
8000800c:	e50b300c 	str	r3, [fp, #-12]
    memcpy(direntry, &dir_old[DIR_Attr], 32-11);
80008010:	e51b3010 	ldr	r3, [fp, #-16]
80008014:	e283300b 	add	r3, r3, #11
80008018:	e24b202c 	sub	r2, fp, #44	; 0x2c
8000801c:	e1a00002 	mov	r0, r2
80008020:	e1a01003 	mov	r1, r3
80008024:	e3a02015 	mov	r2, #21
80008028:	eb0002dc 	bl	80008ba0 <memcpy>

    res = trace_path(&dirobj, fn, path_new, &dir_new);    /* Check new object */
8000802c:	e24b1040 	sub	r1, fp, #64	; 0x40
80008030:	e24b204c 	sub	r2, fp, #76	; 0x4c
80008034:	e24b3014 	sub	r3, fp, #20
80008038:	e1a00001 	mov	r0, r1
8000803c:	e1a01002 	mov	r1, r2
80008040:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
80008044:	ebfff341 	bl	80004d50 <trace_path>
80008048:	e1a03000 	mov	r3, r0
8000804c:	e54b3005 	strb	r3, [fp, #-5]
    if (res == FR_OK) return FR_EXIST;            /* The new object name is already existing */
80008050:	e55b3005 	ldrb	r3, [fp, #-5]
80008054:	e3530000 	cmp	r3, #0
80008058:	1a000001 	bne	80008064 <f_rename+0xf4>
8000805c:	e3a03007 	mov	r3, #7
80008060:	ea000034 	b	80008138 <f_rename+0x1c8>
    if (res != FR_NO_FILE) return res;            /* Is there no old name? */
80008064:	e55b3005 	ldrb	r3, [fp, #-5]
80008068:	e3530002 	cmp	r3, #2
8000806c:	0a000001 	beq	80008078 <f_rename+0x108>
80008070:	e55b3005 	ldrb	r3, [fp, #-5]
80008074:	ea00002f 	b	80008138 <f_rename+0x1c8>
    res = reserve_direntry(&dirobj, &dir_new);     /* Reserve a directory entry */
80008078:	e24b2040 	sub	r2, fp, #64	; 0x40
8000807c:	e24b3014 	sub	r3, fp, #20
80008080:	e1a00002 	mov	r0, r2
80008084:	e1a01003 	mov	r1, r3
80008088:	ebfff3f1 	bl	80005054 <reserve_direntry>
8000808c:	e1a03000 	mov	r3, r0
80008090:	e54b3005 	strb	r3, [fp, #-5]
    if (res != FR_OK) return res;
80008094:	e55b3005 	ldrb	r3, [fp, #-5]
80008098:	e3530000 	cmp	r3, #0
8000809c:	0a000001 	beq	800080a8 <f_rename+0x138>
800080a0:	e55b3005 	ldrb	r3, [fp, #-5]
800080a4:	ea000023 	b	80008138 <f_rename+0x1c8>

    memcpy(&dir_new[DIR_Attr], direntry, 32-11);    /* Create new entry */
800080a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800080ac:	e283200b 	add	r2, r3, #11
800080b0:	e24b302c 	sub	r3, fp, #44	; 0x2c
800080b4:	e1a00002 	mov	r0, r2
800080b8:	e1a01003 	mov	r1, r3
800080bc:	e3a02015 	mov	r2, #21
800080c0:	eb0002b6 	bl	80008ba0 <memcpy>
    memcpy(&dir_new[DIR_Name], fn, 8+3);
800080c4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
800080c8:	e24b304c 	sub	r3, fp, #76	; 0x4c
800080cc:	e1a00002 	mov	r0, r2
800080d0:	e1a01003 	mov	r1, r3
800080d4:	e3a0200b 	mov	r2, #11
800080d8:	eb0002b0 	bl	80008ba0 <memcpy>
    dir_new[DIR_NTres] = fn[11];
800080dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
800080e0:	e283300c 	add	r3, r3, #12
800080e4:	e55b2041 	ldrb	r2, [fp, #-65]	; 0xffffffbf
800080e8:	e5c32000 	strb	r2, [r3]
    fs->winflag = 1;
800080ec:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
800080f0:	e3a02001 	mov	r2, #1
800080f4:	e5c32028 	strb	r2, [r3, #40]	; 0x28

    if (!move_window(fs, sect_old)) return FR_RW_ERROR;    /* Remove old entry */
800080f8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
800080fc:	e1a00003 	mov	r0, r3
80008100:	e51b100c 	ldr	r1, [fp, #-12]
80008104:	ebffee4f 	bl	80003a48 <move_window>
80008108:	e1a03000 	mov	r3, r0
8000810c:	e3530000 	cmp	r3, #0
80008110:	1a000001 	bne	8000811c <f_rename+0x1ac>
80008114:	e3a03008 	mov	r3, #8
80008118:	ea000006 	b	80008138 <f_rename+0x1c8>
    dir_old[DIR_Name] = 0xE5;
8000811c:	e51b3010 	ldr	r3, [fp, #-16]
80008120:	e3e0201a 	mvn	r2, #26
80008124:	e5c32000 	strb	r2, [r3]

    return sync(fs);
80008128:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
8000812c:	e1a00003 	mov	r0, r3
80008130:	ebffee9e 	bl	80003bb0 <sync>
80008134:	e1a03000 	mov	r3, r0
}
80008138:	e1a00003 	mov	r0, r3
8000813c:	e24bd004 	sub	sp, fp, #4
80008140:	e8bd4800 	pop	{fp, lr}
80008144:	e12fff1e 	bx	lr

80008148 <i2c1_init>:
80008148:	e92d4800 	push	{fp, lr}
8000814c:	e28db004 	add	fp, sp, #4
80008150:	e24dd008 	sub	sp, sp, #8
80008154:	e3a03000 	mov	r3, #0
80008158:	e50b3008 	str	r3, [fp, #-8]
8000815c:	e3a03000 	mov	r3, #0
80008160:	e50b3008 	str	r3, [fp, #-8]
80008164:	e59f31c0 	ldr	r3, [pc, #448]	; 8000832c <i2c1_init+0x1e4>
80008168:	e50b3008 	str	r3, [fp, #-8]
8000816c:	e59f31bc 	ldr	r3, [pc, #444]	; 80008330 <i2c1_init+0x1e8>
80008170:	e59f21b8 	ldr	r2, [pc, #440]	; 80008330 <i2c1_init+0x1e8>
80008174:	e5921000 	ldr	r1, [r2]
80008178:	e51b2008 	ldr	r2, [fp, #-8]
8000817c:	e1a02802 	lsl	r2, r2, #16
80008180:	e1812002 	orr	r2, r1, r2
80008184:	e5832000 	str	r2, [r3]
80008188:	e59f31a0 	ldr	r3, [pc, #416]	; 80008330 <i2c1_init+0x1e8>
8000818c:	e59f219c 	ldr	r2, [pc, #412]	; 80008330 <i2c1_init+0x1e8>
80008190:	e5921000 	ldr	r1, [r2]
80008194:	e51b2008 	ldr	r2, [fp, #-8]
80008198:	e1812002 	orr	r2, r1, r2
8000819c:	e5832000 	str	r2, [r3]
800081a0:	e59f318c 	ldr	r3, [pc, #396]	; 80008334 <i2c1_init+0x1ec>
800081a4:	e59f2188 	ldr	r2, [pc, #392]	; 80008334 <i2c1_init+0x1ec>
800081a8:	e5922000 	ldr	r2, [r2]
800081ac:	e3822902 	orr	r2, r2, #32768	; 0x8000
800081b0:	e5832000 	str	r2, [r3]
800081b4:	e59f317c 	ldr	r3, [pc, #380]	; 80008338 <i2c1_init+0x1f0>
800081b8:	e59f2178 	ldr	r2, [pc, #376]	; 80008338 <i2c1_init+0x1f0>
800081bc:	e5922000 	ldr	r2, [r2]
800081c0:	e3822902 	orr	r2, r2, #32768	; 0x8000
800081c4:	e5832000 	str	r2, [r3]
800081c8:	e59f316c 	ldr	r3, [pc, #364]	; 8000833c <i2c1_init+0x1f4>
800081cc:	e1d330b0 	ldrh	r3, [r3]
800081d0:	e1a03803 	lsl	r3, r3, #16
800081d4:	e1a03823 	lsr	r3, r3, #16
800081d8:	e1a03803 	lsl	r3, r3, #16
800081dc:	e1a03823 	lsr	r3, r3, #16
800081e0:	e1a03803 	lsl	r3, r3, #16
800081e4:	e1a03843 	asr	r3, r3, #16
800081e8:	e3530000 	cmp	r3, #0
800081ec:	aa000009 	bge	80008218 <i2c1_init+0xd0>
800081f0:	e59f2144 	ldr	r2, [pc, #324]	; 8000833c <i2c1_init+0x1f4>
800081f4:	e59f3140 	ldr	r3, [pc, #320]	; 8000833c <i2c1_init+0x1f4>
800081f8:	e1d330b0 	ldrh	r3, [r3]
800081fc:	e1a03803 	lsl	r3, r3, #16
80008200:	e1a03823 	lsr	r3, r3, #16
80008204:	e1a03883 	lsl	r3, r3, #17
80008208:	e1a038a3 	lsr	r3, r3, #17
8000820c:	e1a03803 	lsl	r3, r3, #16
80008210:	e1a03823 	lsr	r3, r3, #16
80008214:	e1c230b0 	strh	r3, [r2]
80008218:	e59f3120 	ldr	r3, [pc, #288]	; 80008340 <i2c1_init+0x1f8>
8000821c:	e59f211c 	ldr	r2, [pc, #284]	; 80008340 <i2c1_init+0x1f8>
80008220:	e1d220b0 	ldrh	r2, [r2]
80008224:	e1a02802 	lsl	r2, r2, #16
80008228:	e1a02822 	lsr	r2, r2, #16
8000822c:	e3822002 	orr	r2, r2, #2
80008230:	e1a02802 	lsl	r2, r2, #16
80008234:	e1a02822 	lsr	r2, r2, #16
80008238:	e1c320b0 	strh	r2, [r3]
8000823c:	e59f20f8 	ldr	r2, [pc, #248]	; 8000833c <i2c1_init+0x1f4>
80008240:	e59f30f4 	ldr	r3, [pc, #244]	; 8000833c <i2c1_init+0x1f4>
80008244:	e1d330b0 	ldrh	r3, [r3]
80008248:	e1a03803 	lsl	r3, r3, #16
8000824c:	e1a03823 	lsr	r3, r3, #16
80008250:	e1e03883 	mvn	r3, r3, lsl #17
80008254:	e1e038a3 	mvn	r3, r3, lsr #17
80008258:	e1a03803 	lsl	r3, r3, #16
8000825c:	e1a03823 	lsr	r3, r3, #16
80008260:	e1c230b0 	strh	r3, [r2]
80008264:	e3a00ffa 	mov	r0, #1000	; 0x3e8
80008268:	ebffe82d 	bl	80002324 <wait>
8000826c:	e1a00000 	nop			; (mov r0, r0)
80008270:	e59f30cc 	ldr	r3, [pc, #204]	; 80008344 <i2c1_init+0x1fc>
80008274:	e1d330b0 	ldrh	r3, [r3]
80008278:	e1a03803 	lsl	r3, r3, #16
8000827c:	e1a03823 	lsr	r3, r3, #16
80008280:	e2033001 	and	r3, r3, #1
80008284:	e3530000 	cmp	r3, #0
80008288:	0afffff8 	beq	80008270 <i2c1_init+0x128>
8000828c:	e59f20a8 	ldr	r2, [pc, #168]	; 8000833c <i2c1_init+0x1f4>
80008290:	e59f30a4 	ldr	r3, [pc, #164]	; 8000833c <i2c1_init+0x1f4>
80008294:	e1d330b0 	ldrh	r3, [r3]
80008298:	e1a03803 	lsl	r3, r3, #16
8000829c:	e1a03823 	lsr	r3, r3, #16
800082a0:	e1a03883 	lsl	r3, r3, #17
800082a4:	e1a038a3 	lsr	r3, r3, #17
800082a8:	e1a03803 	lsl	r3, r3, #16
800082ac:	e1a03823 	lsr	r3, r3, #16
800082b0:	e1c230b0 	strh	r3, [r2]
800082b4:	e59f308c 	ldr	r3, [pc, #140]	; 80008348 <i2c1_init+0x200>
800082b8:	e3a02007 	mov	r2, #7
800082bc:	e1c320b0 	strh	r2, [r3]
800082c0:	e59f3084 	ldr	r3, [pc, #132]	; 8000834c <i2c1_init+0x204>
800082c4:	e3a02008 	mov	r2, #8
800082c8:	e1c320b0 	strh	r2, [r3]
800082cc:	e59f307c 	ldr	r3, [pc, #124]	; 80008350 <i2c1_init+0x208>
800082d0:	e3a02010 	mov	r2, #16
800082d4:	e1c320b0 	strh	r2, [r3]
800082d8:	e59f205c 	ldr	r2, [pc, #92]	; 8000833c <i2c1_init+0x1f4>
800082dc:	e59f3058 	ldr	r3, [pc, #88]	; 8000833c <i2c1_init+0x1f4>
800082e0:	e1d330b0 	ldrh	r3, [r3]
800082e4:	e1a03803 	lsl	r3, r3, #16
800082e8:	e1a03823 	lsr	r3, r3, #16
800082ec:	e1e03883 	mvn	r3, r3, lsl #17
800082f0:	e1e038a3 	mvn	r3, r3, lsr #17
800082f4:	e1a03803 	lsl	r3, r3, #16
800082f8:	e1a03823 	lsr	r3, r3, #16
800082fc:	e1c230b0 	strh	r3, [r2]
80008300:	e59f004c 	ldr	r0, [pc, #76]	; 80008354 <i2c1_init+0x20c>
80008304:	ebffe806 	bl	80002324 <wait>
80008308:	e59f3048 	ldr	r3, [pc, #72]	; 80008358 <i2c1_init+0x210>
8000830c:	e3a020ff 	mov	r2, #255	; 0xff
80008310:	e1c320b0 	strh	r2, [r3]
80008314:	e59f3040 	ldr	r3, [pc, #64]	; 8000835c <i2c1_init+0x214>
80008318:	e3a02000 	mov	r2, #0
8000831c:	e1c320b0 	strh	r2, [r3]
80008320:	e24bd004 	sub	sp, fp, #4
80008324:	e8bd4800 	pop	{fp, lr}
80008328:	e12fff1e 	bx	lr
8000832c:	00002310 	.word	0x00002310
80008330:	480021b8 	.word	0x480021b8
80008334:	48004a10 	.word	0x48004a10
80008338:	48004a00 	.word	0x48004a00
8000833c:	48070024 	.word	0x48070024
80008340:	48070020 	.word	0x48070020
80008344:	48070010 	.word	0x48070010
80008348:	48070030 	.word	0x48070030
8000834c:	48070034 	.word	0x48070034
80008350:	48070038 	.word	0x48070038
80008354:	0000c350 	.word	0x0000c350
80008358:	48070008 	.word	0x48070008
8000835c:	48070018 	.word	0x48070018

80008360 <i2c1_transmit_data>:
80008360:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80008364:	e28db000 	add	fp, sp, #0
80008368:	e24dd00c 	sub	sp, sp, #12
8000836c:	e1a02000 	mov	r2, r0
80008370:	e1a03001 	mov	r3, r1
80008374:	e14b20b6 	strh	r2, [fp, #-6]
80008378:	e14b30b8 	strh	r3, [fp, #-8]
8000837c:	ea000002 	b	8000838c <i2c1_transmit_data+0x2c>
80008380:	e1a00000 	nop			; (mov r0, r0)
80008384:	ea000000 	b	8000838c <i2c1_transmit_data+0x2c>
80008388:	e1a00000 	nop			; (mov r0, r0)
8000838c:	e59f3180 	ldr	r3, [pc, #384]	; 80008514 <i2c1_transmit_data+0x1b4>
80008390:	e1d330b0 	ldrh	r3, [r3]
80008394:	e1a03803 	lsl	r3, r3, #16
80008398:	e1a03823 	lsr	r3, r3, #16
8000839c:	e2033002 	and	r3, r3, #2
800083a0:	e3530000 	cmp	r3, #0
800083a4:	0a000001 	beq	800083b0 <i2c1_transmit_data+0x50>
800083a8:	e3a03001 	mov	r3, #1
800083ac:	ea000054 	b	80008504 <i2c1_transmit_data+0x1a4>
800083b0:	e59f315c 	ldr	r3, [pc, #348]	; 80008514 <i2c1_transmit_data+0x1b4>
800083b4:	e1d330b0 	ldrh	r3, [r3]
800083b8:	e1a03803 	lsl	r3, r3, #16
800083bc:	e1a03823 	lsr	r3, r3, #16
800083c0:	e2033001 	and	r3, r3, #1
800083c4:	e20330ff 	and	r3, r3, #255	; 0xff
800083c8:	e3530000 	cmp	r3, #0
800083cc:	0a000001 	beq	800083d8 <i2c1_transmit_data+0x78>
800083d0:	e3a03001 	mov	r3, #1
800083d4:	ea00004a 	b	80008504 <i2c1_transmit_data+0x1a4>
800083d8:	e59f3134 	ldr	r3, [pc, #308]	; 80008514 <i2c1_transmit_data+0x1b4>
800083dc:	e1d330b0 	ldrh	r3, [r3]
800083e0:	e1a03803 	lsl	r3, r3, #16
800083e4:	e1a03823 	lsr	r3, r3, #16
800083e8:	e2033004 	and	r3, r3, #4
800083ec:	e3530000 	cmp	r3, #0
800083f0:	0a000001 	beq	800083fc <i2c1_transmit_data+0x9c>
800083f4:	e3a03000 	mov	r3, #0
800083f8:	ea000041 	b	80008504 <i2c1_transmit_data+0x1a4>
800083fc:	e59f3110 	ldr	r3, [pc, #272]	; 80008514 <i2c1_transmit_data+0x1b4>
80008400:	e1d330b0 	ldrh	r3, [r3]
80008404:	e1a03803 	lsl	r3, r3, #16
80008408:	e1a03823 	lsr	r3, r3, #16
8000840c:	e2033901 	and	r3, r3, #16384	; 0x4000
80008410:	e3530000 	cmp	r3, #0
80008414:	0a00000b 	beq	80008448 <i2c1_transmit_data+0xe8>
80008418:	e59f30f8 	ldr	r3, [pc, #248]	; 80008518 <i2c1_transmit_data+0x1b8>
8000841c:	e15b20b8 	ldrh	r2, [fp, #-8]
80008420:	e1c320b0 	strh	r2, [r3]
80008424:	e59f30e8 	ldr	r3, [pc, #232]	; 80008514 <i2c1_transmit_data+0x1b4>
80008428:	e59f20e4 	ldr	r2, [pc, #228]	; 80008514 <i2c1_transmit_data+0x1b4>
8000842c:	e1d220b0 	ldrh	r2, [r2]
80008430:	e1a02802 	lsl	r2, r2, #16
80008434:	e1a02822 	lsr	r2, r2, #16
80008438:	e3822901 	orr	r2, r2, #16384	; 0x4000
8000843c:	e1a02802 	lsl	r2, r2, #16
80008440:	e1a02822 	lsr	r2, r2, #16
80008444:	e1c320b0 	strh	r2, [r3]
80008448:	e59f30c4 	ldr	r3, [pc, #196]	; 80008514 <i2c1_transmit_data+0x1b4>
8000844c:	e1d330b0 	ldrh	r3, [r3]
80008450:	e1a03803 	lsl	r3, r3, #16
80008454:	e1a03823 	lsr	r3, r3, #16
80008458:	e2033010 	and	r3, r3, #16
8000845c:	e3530000 	cmp	r3, #0
80008460:	0affffc6 	beq	80008380 <i2c1_transmit_data+0x20>
80008464:	e59f30ac 	ldr	r3, [pc, #172]	; 80008518 <i2c1_transmit_data+0x1b8>
80008468:	e15b20b6 	ldrh	r2, [fp, #-6]
8000846c:	e1c320b0 	strh	r2, [r3]
80008470:	e59f309c 	ldr	r3, [pc, #156]	; 80008514 <i2c1_transmit_data+0x1b4>
80008474:	e59f2098 	ldr	r2, [pc, #152]	; 80008514 <i2c1_transmit_data+0x1b4>
80008478:	e1d220b0 	ldrh	r2, [r2]
8000847c:	e1a02802 	lsl	r2, r2, #16
80008480:	e1a02822 	lsr	r2, r2, #16
80008484:	e3822010 	orr	r2, r2, #16
80008488:	e1a02802 	lsl	r2, r2, #16
8000848c:	e1a02822 	lsr	r2, r2, #16
80008490:	e1c320b0 	strh	r2, [r3]
80008494:	e1a00000 	nop			; (mov r0, r0)
80008498:	e59f3074 	ldr	r3, [pc, #116]	; 80008514 <i2c1_transmit_data+0x1b4>
8000849c:	e1d330b0 	ldrh	r3, [r3]
800084a0:	e1a03803 	lsl	r3, r3, #16
800084a4:	e1a03823 	lsr	r3, r3, #16
800084a8:	e2033002 	and	r3, r3, #2
800084ac:	e3530000 	cmp	r3, #0
800084b0:	1afffff8 	bne	80008498 <i2c1_transmit_data+0x138>
800084b4:	e59f3058 	ldr	r3, [pc, #88]	; 80008514 <i2c1_transmit_data+0x1b4>
800084b8:	e1d330b0 	ldrh	r3, [r3]
800084bc:	e1a03803 	lsl	r3, r3, #16
800084c0:	e1a03823 	lsr	r3, r3, #16
800084c4:	e2033010 	and	r3, r3, #16
800084c8:	e3530000 	cmp	r3, #0
800084cc:	0affffad 	beq	80008388 <i2c1_transmit_data+0x28>
800084d0:	e59f3040 	ldr	r3, [pc, #64]	; 80008518 <i2c1_transmit_data+0x1b8>
800084d4:	e15b20b8 	ldrh	r2, [fp, #-8]
800084d8:	e1c320b0 	strh	r2, [r3]
800084dc:	e59f3030 	ldr	r3, [pc, #48]	; 80008514 <i2c1_transmit_data+0x1b4>
800084e0:	e59f202c 	ldr	r2, [pc, #44]	; 80008514 <i2c1_transmit_data+0x1b4>
800084e4:	e1d220b0 	ldrh	r2, [r2]
800084e8:	e1a02802 	lsl	r2, r2, #16
800084ec:	e1a02822 	lsr	r2, r2, #16
800084f0:	e3822010 	orr	r2, r2, #16
800084f4:	e1a02802 	lsl	r2, r2, #16
800084f8:	e1a02822 	lsr	r2, r2, #16
800084fc:	e1c320b0 	strh	r2, [r3]
80008500:	eaffffa1 	b	8000838c <i2c1_transmit_data+0x2c>
80008504:	e1a00003 	mov	r0, r3
80008508:	e28bd000 	add	sp, fp, #0
8000850c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80008510:	e12fff1e 	bx	lr
80008514:	48070008 	.word	0x48070008
80008518:	4807001c 	.word	0x4807001c

8000851c <i2c1_write_byte>:
8000851c:	e92d4800 	push	{fp, lr}
80008520:	e28db004 	add	fp, sp, #4
80008524:	e24dd008 	sub	sp, sp, #8
80008528:	e1a03002 	mov	r3, r2
8000852c:	e14b00b6 	strh	r0, [fp, #-6]
80008530:	e14b10b8 	strh	r1, [fp, #-8]
80008534:	e14b30ba 	strh	r3, [fp, #-10]
80008538:	e59f3114 	ldr	r3, [pc, #276]	; 80008654 <i2c1_write_byte+0x138>
8000853c:	e3a020ff 	mov	r2, #255	; 0xff
80008540:	e1c320b0 	strh	r2, [r3]
80008544:	e59f3108 	ldr	r3, [pc, #264]	; 80008654 <i2c1_write_byte+0x138>
80008548:	e1d330b0 	ldrh	r3, [r3]
8000854c:	e59f3104 	ldr	r3, [pc, #260]	; 80008658 <i2c1_write_byte+0x13c>
80008550:	e15b20b6 	ldrh	r2, [fp, #-6]
80008554:	e1c320b0 	strh	r2, [r3]
80008558:	e59f30fc 	ldr	r3, [pc, #252]	; 8000865c <i2c1_write_byte+0x140>
8000855c:	e59f20f8 	ldr	r2, [pc, #248]	; 8000865c <i2c1_write_byte+0x140>
80008560:	e1d220b0 	ldrh	r2, [r2]
80008564:	e1a02802 	lsl	r2, r2, #16
80008568:	e1a02822 	lsr	r2, r2, #16
8000856c:	e3822b01 	orr	r2, r2, #1024	; 0x400
80008570:	e1a02802 	lsl	r2, r2, #16
80008574:	e1a02822 	lsr	r2, r2, #16
80008578:	e1c320b0 	strh	r2, [r3]
8000857c:	e59f30d8 	ldr	r3, [pc, #216]	; 8000865c <i2c1_write_byte+0x140>
80008580:	e59f20d4 	ldr	r2, [pc, #212]	; 8000865c <i2c1_write_byte+0x140>
80008584:	e1d220b0 	ldrh	r2, [r2]
80008588:	e1a02802 	lsl	r2, r2, #16
8000858c:	e1a02822 	lsr	r2, r2, #16
80008590:	e3822c02 	orr	r2, r2, #512	; 0x200
80008594:	e1a02802 	lsl	r2, r2, #16
80008598:	e1a02822 	lsr	r2, r2, #16
8000859c:	e1c320b0 	strh	r2, [r3]
800085a0:	e59f30b4 	ldr	r3, [pc, #180]	; 8000865c <i2c1_write_byte+0x140>
800085a4:	e59f20b0 	ldr	r2, [pc, #176]	; 8000865c <i2c1_write_byte+0x140>
800085a8:	e1d220b0 	ldrh	r2, [r2]
800085ac:	e1a02802 	lsl	r2, r2, #16
800085b0:	e1a02822 	lsr	r2, r2, #16
800085b4:	e3822003 	orr	r2, r2, #3
800085b8:	e1a02802 	lsl	r2, r2, #16
800085bc:	e1a02822 	lsr	r2, r2, #16
800085c0:	e1c320b0 	strh	r2, [r3]
800085c4:	e59f3094 	ldr	r3, [pc, #148]	; 80008660 <i2c1_write_byte+0x144>
800085c8:	e3a02002 	mov	r2, #2
800085cc:	e1c320b0 	strh	r2, [r3]
800085d0:	e59f308c 	ldr	r3, [pc, #140]	; 80008664 <i2c1_write_byte+0x148>
800085d4:	e59f2088 	ldr	r2, [pc, #136]	; 80008664 <i2c1_write_byte+0x148>
800085d8:	e1d220b0 	ldrh	r2, [r2]
800085dc:	e1a02802 	lsl	r2, r2, #16
800085e0:	e1a02822 	lsr	r2, r2, #16
800085e4:	e3822040 	orr	r2, r2, #64	; 0x40
800085e8:	e1a02802 	lsl	r2, r2, #16
800085ec:	e1a02822 	lsr	r2, r2, #16
800085f0:	e1c320b0 	strh	r2, [r3]
800085f4:	e59f3068 	ldr	r3, [pc, #104]	; 80008664 <i2c1_write_byte+0x148>
800085f8:	e3a02002 	mov	r2, #2
800085fc:	e1c320b0 	strh	r2, [r3]
80008600:	e15b20b8 	ldrh	r2, [fp, #-8]
80008604:	e15b30ba 	ldrh	r3, [fp, #-10]
80008608:	e1a00002 	mov	r0, r2
8000860c:	e1a01003 	mov	r1, r3
80008610:	ebffff52 	bl	80008360 <i2c1_transmit_data>
80008614:	e1a03000 	mov	r3, r0
80008618:	e3530000 	cmp	r3, #0
8000861c:	0a000001 	beq	80008628 <i2c1_write_byte+0x10c>
80008620:	e3a03001 	mov	r3, #1
80008624:	ea000006 	b	80008644 <i2c1_write_byte+0x128>
80008628:	e59f3024 	ldr	r3, [pc, #36]	; 80008654 <i2c1_write_byte+0x138>
8000862c:	e3a020ff 	mov	r2, #255	; 0xff
80008630:	e1c320b0 	strh	r2, [r3]
80008634:	e59f3024 	ldr	r3, [pc, #36]	; 80008660 <i2c1_write_byte+0x144>
80008638:	e3a02000 	mov	r2, #0
8000863c:	e1c320b0 	strh	r2, [r3]
80008640:	e3a03000 	mov	r3, #0
80008644:	e1a00003 	mov	r0, r3
80008648:	e24bd004 	sub	sp, fp, #4
8000864c:	e8bd4800 	pop	{fp, lr}
80008650:	e12fff1e 	bx	lr
80008654:	48070008 	.word	0x48070008
80008658:	4807002c 	.word	0x4807002c
8000865c:	48070024 	.word	0x48070024
80008660:	48070018 	.word	0x48070018
80008664:	48070014 	.word	0x48070014

80008668 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS
disk_initialize(
    BYTE bValue)                /* Physical drive number (0) */
{
80008668:	e92d4800 	push	{fp, lr}
8000866c:	e28db004 	add	fp, sp, #4
80008670:	e24dd008 	sub	sp, sp, #8
80008674:	e1a03000 	mov	r3, r0
80008678:	e54b3005 	strb	r3, [fp, #-5]
   
    if (DRIVE_NUM_MAX <= bValue)
8000867c:	e55b3005 	ldrb	r3, [fp, #-5]
80008680:	e3530000 	cmp	r3, #0
80008684:	0a000001 	beq	80008690 <disk_initialize+0x28>
    {
        return STA_NODISK;
80008688:	e3a03002 	mov	r3, #2
8000868c:	ea000021 	b	80008718 <disk_initialize+0xb0>
    }
    
    if ((DRIVE_NUM_MMCSD == bValue) && (fat_devices[bValue].initDone != 1))
80008690:	e55b3005 	ldrb	r3, [fp, #-5]
80008694:	e3530000 	cmp	r3, #0
80008698:	1a00001d 	bne	80008714 <disk_initialize+0xac>
8000869c:	e55b2005 	ldrb	r2, [fp, #-5]
800086a0:	e59f0080 	ldr	r0, [pc, #128]	; 80008728 <disk_initialize+0xc0>
800086a4:	e3a01008 	mov	r1, #8
800086a8:	e1a03002 	mov	r3, r2
800086ac:	e1a03083 	lsl	r3, r3, #1
800086b0:	e0833002 	add	r3, r3, r2
800086b4:	e1a03103 	lsl	r3, r3, #2
800086b8:	e0803003 	add	r3, r0, r3
800086bc:	e0833001 	add	r3, r3, r1
800086c0:	e5933000 	ldr	r3, [r3]
800086c4:	e3530001 	cmp	r3, #1
800086c8:	0a000011 	beq	80008714 <disk_initialize+0xac>
    {

        /* SD Card init */
    	i2c1_init();
800086cc:	ebfffe9d 	bl	80008148 <i2c1_init>

        if (mmc1_init())
800086d0:	ebffea06 	bl	80002ef0 <mmc1_init>
800086d4:	e1a03000 	mov	r3, r0
800086d8:	e3530000 	cmp	r3, #0
800086dc:	0a000001 	beq	800086e8 <disk_initialize+0x80>
        {
           return STA_NOINIT;
800086e0:	e3a03001 	mov	r3, #1
800086e4:	ea00000b 	b	80008718 <disk_initialize+0xb0>
        }
        else
		fat_devices[bValue].initDone = 1;
800086e8:	e55b2005 	ldrb	r2, [fp, #-5]
800086ec:	e59f0034 	ldr	r0, [pc, #52]	; 80008728 <disk_initialize+0xc0>
800086f0:	e3a01008 	mov	r1, #8
800086f4:	e1a03002 	mov	r3, r2
800086f8:	e1a03083 	lsl	r3, r3, #1
800086fc:	e0833002 	add	r3, r3, r2
80008700:	e1a03103 	lsl	r3, r3, #2
80008704:	e0803003 	add	r3, r0, r3
80008708:	e0833001 	add	r3, r3, r1
8000870c:	e3a02001 	mov	r2, #1
80008710:	e5832000 	str	r2, [r3]
    }
        
    return 0;
80008714:	e3a03000 	mov	r3, #0
}
80008718:	e1a00003 	mov	r0, r3
8000871c:	e24bd004 	sub	sp, fp, #4
80008720:	e8bd4800 	pop	{fp, lr}
80008724:	e12fff1e 	bx	lr
80008728:	80021efc 	.word	0x80021efc

8000872c <disk_status>:
/* Returns the current status of a drive                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
    BYTE drv)                   /* Physical drive number (0) */
{
8000872c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80008730:	e28db000 	add	fp, sp, #0
80008734:	e24dd00c 	sub	sp, sp, #12
80008738:	e1a03000 	mov	r3, r0
8000873c:	e54b3005 	strb	r3, [fp, #-5]
	return 0;
80008740:	e3a03000 	mov	r3, #0
}
80008744:	e1a00003 	mov	r0, r3
80008748:	e28bd000 	add	sp, fp, #0
8000874c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80008750:	e12fff1e 	bx	lr

80008754 <disk_read>:
DRESULT disk_read (
    BYTE drv,               /* Physical drive number (0) */
    BYTE* buff,             /* Pointer to the data buffer to store read data */
    DWORD sector,           /* Physical drive number (0) */
    BYTE count)             /* Sector count (1..255) */
{
80008754:	e92d4800 	push	{fp, lr}
80008758:	e28db004 	add	fp, sp, #4
8000875c:	e24dd010 	sub	sp, sp, #16
80008760:	e50b100c 	str	r1, [fp, #-12]
80008764:	e50b2010 	str	r2, [fp, #-16]
80008768:	e1a02000 	mov	r2, r0
8000876c:	e54b2005 	strb	r2, [fp, #-5]
80008770:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	if (drv == DRIVE_NUM_MMCSD)
80008774:	e55b3005 	ldrb	r3, [fp, #-5]
80008778:	e3530000 	cmp	r3, #0
8000877c:	1a00000b 	bne	800087b0 <disk_read+0x5c>
	{
    	/* READ BLOCK */
		if(mmchs_read_multiple_block(buff, sector, count))
80008780:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
80008784:	e51b000c 	ldr	r0, [fp, #-12]
80008788:	e51b1010 	ldr	r1, [fp, #-16]
8000878c:	e1a02003 	mov	r2, r3
80008790:	ebffea03 	bl	80002fa4 <mmchs_read_multiple_block>
80008794:	e1a03000 	mov	r3, r0
80008798:	e3530000 	cmp	r3, #0
8000879c:	0a000001 	beq	800087a8 <disk_read+0x54>
		{
			return RES_ERROR;
800087a0:	e3a03001 	mov	r3, #1
800087a4:	ea000002 	b	800087b4 <disk_read+0x60>
		}
		else
			return RES_OK;
800087a8:	e3a03000 	mov	r3, #0
800087ac:	ea000000 	b	800087b4 <disk_read+0x60>

    }

	return RES_ERROR;
800087b0:	e3a03001 	mov	r3, #1
}
800087b4:	e1a00003 	mov	r0, r3
800087b8:	e24bd004 	sub	sp, fp, #4
800087bc:	e8bd4800 	pop	{fp, lr}
800087c0:	e12fff1e 	bx	lr

800087c4 <disk_write>:
DRESULT disk_write (
    BYTE ucDrive,           /* Physical drive number (0) */
    const BYTE* buff,       /* Pointer to the data to be written */
    DWORD sector,           /* Start sector number (LBA) */
    BYTE count)             /* Sector count (1..255) */
{
800087c4:	e92d4800 	push	{fp, lr}
800087c8:	e28db004 	add	fp, sp, #4
800087cc:	e24dd010 	sub	sp, sp, #16
800087d0:	e50b100c 	str	r1, [fp, #-12]
800087d4:	e50b2010 	str	r2, [fp, #-16]
800087d8:	e1a02000 	mov	r2, r0
800087dc:	e54b2005 	strb	r2, [fp, #-5]
800087e0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	if (ucDrive == DRIVE_NUM_MMCSD)
800087e4:	e55b3005 	ldrb	r3, [fp, #-5]
800087e8:	e3530000 	cmp	r3, #0
800087ec:	1a00000b 	bne	80008820 <disk_write+0x5c>
	{
    	/* WRITE BLOCK */
		if (mmchs_write_multiple_block(buff, (ulong) sector, (uchar) count))
800087f0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
800087f4:	e51b000c 	ldr	r0, [fp, #-12]
800087f8:	e51b1010 	ldr	r1, [fp, #-16]
800087fc:	e1a02003 	mov	r2, r3
80008800:	ebffe9db 	bl	80002f74 <mmchs_write_multiple_block>
80008804:	e1a03000 	mov	r3, r0
80008808:	e3530000 	cmp	r3, #0
8000880c:	0a000001 	beq	80008818 <disk_write+0x54>
	    {
        	return RES_ERROR;
80008810:	e3a03001 	mov	r3, #1
80008814:	ea000002 	b	80008824 <disk_write+0x60>
		}
		else
			return RES_OK;
80008818:	e3a03000 	mov	r3, #0
8000881c:	ea000000 	b	80008824 <disk_write+0x60>
	}

    return RES_ERROR;
80008820:	e3a03001 	mov	r3, #1
}
80008824:	e1a00003 	mov	r0, r3
80008828:	e24bd004 	sub	sp, fp, #4
8000882c:	e8bd4800 	pop	{fp, lr}
80008830:	e12fff1e 	bx	lr

80008834 <disk_ioctl>:

DRESULT disk_ioctl (
    BYTE drv,               /* Physical drive number (0) */
    BYTE ctrl,              /* Control code */
    void *buff)             /* Buffer to send/receive control data */
{
80008834:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
80008838:	e28db000 	add	fp, sp, #0
8000883c:	e24dd00c 	sub	sp, sp, #12
80008840:	e1a03001 	mov	r3, r1
80008844:	e50b200c 	str	r2, [fp, #-12]
80008848:	e1a02000 	mov	r2, r0
8000884c:	e54b2005 	strb	r2, [fp, #-5]
80008850:	e54b3006 	strb	r3, [fp, #-6]

	return RES_OK;
80008854:	e3a03000 	mov	r3, #0
}
80008858:	e1a00003 	mov	r0, r3
8000885c:	e28bd000 	add	sp, fp, #0
80008860:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80008864:	e12fff1e 	bx	lr

80008868 <get_fattime>:
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime (void)
{
80008868:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
8000886c:	e28db000 	add	fp, sp, #0
    return    ((2007UL-1980) << 25) // Year = 2007
80008870:	e59f300c 	ldr	r3, [pc, #12]	; 80008884 <get_fattime+0x1c>
            | (5UL << 16)           // Day = 5
            | (11U << 11)           // Hour = 11
            | (38U << 5)            // Min = 38
            | (0U >> 1)             // Sec = 0
            ;
}
80008874:	e1a00003 	mov	r0, r3
80008878:	e28bd000 	add	sp, fp, #0
8000887c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
80008880:	e12fff1e 	bx	lr
80008884:	36c55cc0 	.word	0x36c55cc0

80008888 <__aeabi_uidiv>:
80008888:	e2512001 	subs	r2, r1, #1
8000888c:	012fff1e 	bxeq	lr
80008890:	3a000036 	bcc	80008970 <__aeabi_uidiv+0xe8>
80008894:	e1500001 	cmp	r0, r1
80008898:	9a000022 	bls	80008928 <__aeabi_uidiv+0xa0>
8000889c:	e1110002 	tst	r1, r2
800088a0:	0a000023 	beq	80008934 <__aeabi_uidiv+0xac>
800088a4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
800088a8:	01a01181 	lsleq	r1, r1, #3
800088ac:	03a03008 	moveq	r3, #8
800088b0:	13a03001 	movne	r3, #1
800088b4:	e3510201 	cmp	r1, #268435456	; 0x10000000
800088b8:	31510000 	cmpcc	r1, r0
800088bc:	31a01201 	lslcc	r1, r1, #4
800088c0:	31a03203 	lslcc	r3, r3, #4
800088c4:	3afffffa 	bcc	800088b4 <__aeabi_uidiv+0x2c>
800088c8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
800088cc:	31510000 	cmpcc	r1, r0
800088d0:	31a01081 	lslcc	r1, r1, #1
800088d4:	31a03083 	lslcc	r3, r3, #1
800088d8:	3afffffa 	bcc	800088c8 <__aeabi_uidiv+0x40>
800088dc:	e3a02000 	mov	r2, #0
800088e0:	e1500001 	cmp	r0, r1
800088e4:	20400001 	subcs	r0, r0, r1
800088e8:	21822003 	orrcs	r2, r2, r3
800088ec:	e15000a1 	cmp	r0, r1, lsr #1
800088f0:	204000a1 	subcs	r0, r0, r1, lsr #1
800088f4:	218220a3 	orrcs	r2, r2, r3, lsr #1
800088f8:	e1500121 	cmp	r0, r1, lsr #2
800088fc:	20400121 	subcs	r0, r0, r1, lsr #2
80008900:	21822123 	orrcs	r2, r2, r3, lsr #2
80008904:	e15001a1 	cmp	r0, r1, lsr #3
80008908:	204001a1 	subcs	r0, r0, r1, lsr #3
8000890c:	218221a3 	orrcs	r2, r2, r3, lsr #3
80008910:	e3500000 	cmp	r0, #0
80008914:	11b03223 	lsrsne	r3, r3, #4
80008918:	11a01221 	lsrne	r1, r1, #4
8000891c:	1affffef 	bne	800088e0 <__aeabi_uidiv+0x58>
80008920:	e1a00002 	mov	r0, r2
80008924:	e12fff1e 	bx	lr
80008928:	03a00001 	moveq	r0, #1
8000892c:	13a00000 	movne	r0, #0
80008930:	e12fff1e 	bx	lr
80008934:	e3510801 	cmp	r1, #65536	; 0x10000
80008938:	21a01821 	lsrcs	r1, r1, #16
8000893c:	23a02010 	movcs	r2, #16
80008940:	33a02000 	movcc	r2, #0
80008944:	e3510c01 	cmp	r1, #256	; 0x100
80008948:	21a01421 	lsrcs	r1, r1, #8
8000894c:	22822008 	addcs	r2, r2, #8
80008950:	e3510010 	cmp	r1, #16
80008954:	21a01221 	lsrcs	r1, r1, #4
80008958:	22822004 	addcs	r2, r2, #4
8000895c:	e3510004 	cmp	r1, #4
80008960:	82822003 	addhi	r2, r2, #3
80008964:	908220a1 	addls	r2, r2, r1, lsr #1
80008968:	e1a00230 	lsr	r0, r0, r2
8000896c:	e12fff1e 	bx	lr
80008970:	e3500000 	cmp	r0, #0
80008974:	13e00000 	mvnne	r0, #0
80008978:	ea000059 	b	80008ae4 <__aeabi_idiv0>

8000897c <__aeabi_uidivmod>:
8000897c:	e3510000 	cmp	r1, #0
80008980:	0afffffa 	beq	80008970 <__aeabi_uidiv+0xe8>
80008984:	e92d4003 	push	{r0, r1, lr}
80008988:	ebffffbe 	bl	80008888 <__aeabi_uidiv>
8000898c:	e8bd4006 	pop	{r1, r2, lr}
80008990:	e0030092 	mul	r3, r2, r0
80008994:	e0411003 	sub	r1, r1, r3
80008998:	e12fff1e 	bx	lr

8000899c <__aeabi_idiv>:
8000899c:	e3510000 	cmp	r1, #0
800089a0:	0a000043 	beq	80008ab4 <.divsi3_skip_div0_test+0x110>

800089a4 <.divsi3_skip_div0_test>:
800089a4:	e020c001 	eor	ip, r0, r1
800089a8:	42611000 	rsbmi	r1, r1, #0
800089ac:	e2512001 	subs	r2, r1, #1
800089b0:	0a000027 	beq	80008a54 <.divsi3_skip_div0_test+0xb0>
800089b4:	e1b03000 	movs	r3, r0
800089b8:	42603000 	rsbmi	r3, r0, #0
800089bc:	e1530001 	cmp	r3, r1
800089c0:	9a000026 	bls	80008a60 <.divsi3_skip_div0_test+0xbc>
800089c4:	e1110002 	tst	r1, r2
800089c8:	0a000028 	beq	80008a70 <.divsi3_skip_div0_test+0xcc>
800089cc:	e311020e 	tst	r1, #-536870912	; 0xe0000000
800089d0:	01a01181 	lsleq	r1, r1, #3
800089d4:	03a02008 	moveq	r2, #8
800089d8:	13a02001 	movne	r2, #1
800089dc:	e3510201 	cmp	r1, #268435456	; 0x10000000
800089e0:	31510003 	cmpcc	r1, r3
800089e4:	31a01201 	lslcc	r1, r1, #4
800089e8:	31a02202 	lslcc	r2, r2, #4
800089ec:	3afffffa 	bcc	800089dc <.divsi3_skip_div0_test+0x38>
800089f0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
800089f4:	31510003 	cmpcc	r1, r3
800089f8:	31a01081 	lslcc	r1, r1, #1
800089fc:	31a02082 	lslcc	r2, r2, #1
80008a00:	3afffffa 	bcc	800089f0 <.divsi3_skip_div0_test+0x4c>
80008a04:	e3a00000 	mov	r0, #0
80008a08:	e1530001 	cmp	r3, r1
80008a0c:	20433001 	subcs	r3, r3, r1
80008a10:	21800002 	orrcs	r0, r0, r2
80008a14:	e15300a1 	cmp	r3, r1, lsr #1
80008a18:	204330a1 	subcs	r3, r3, r1, lsr #1
80008a1c:	218000a2 	orrcs	r0, r0, r2, lsr #1
80008a20:	e1530121 	cmp	r3, r1, lsr #2
80008a24:	20433121 	subcs	r3, r3, r1, lsr #2
80008a28:	21800122 	orrcs	r0, r0, r2, lsr #2
80008a2c:	e15301a1 	cmp	r3, r1, lsr #3
80008a30:	204331a1 	subcs	r3, r3, r1, lsr #3
80008a34:	218001a2 	orrcs	r0, r0, r2, lsr #3
80008a38:	e3530000 	cmp	r3, #0
80008a3c:	11b02222 	lsrsne	r2, r2, #4
80008a40:	11a01221 	lsrne	r1, r1, #4
80008a44:	1affffef 	bne	80008a08 <.divsi3_skip_div0_test+0x64>
80008a48:	e35c0000 	cmp	ip, #0
80008a4c:	42600000 	rsbmi	r0, r0, #0
80008a50:	e12fff1e 	bx	lr
80008a54:	e13c0000 	teq	ip, r0
80008a58:	42600000 	rsbmi	r0, r0, #0
80008a5c:	e12fff1e 	bx	lr
80008a60:	33a00000 	movcc	r0, #0
80008a64:	01a00fcc 	asreq	r0, ip, #31
80008a68:	03800001 	orreq	r0, r0, #1
80008a6c:	e12fff1e 	bx	lr
80008a70:	e3510801 	cmp	r1, #65536	; 0x10000
80008a74:	21a01821 	lsrcs	r1, r1, #16
80008a78:	23a02010 	movcs	r2, #16
80008a7c:	33a02000 	movcc	r2, #0
80008a80:	e3510c01 	cmp	r1, #256	; 0x100
80008a84:	21a01421 	lsrcs	r1, r1, #8
80008a88:	22822008 	addcs	r2, r2, #8
80008a8c:	e3510010 	cmp	r1, #16
80008a90:	21a01221 	lsrcs	r1, r1, #4
80008a94:	22822004 	addcs	r2, r2, #4
80008a98:	e3510004 	cmp	r1, #4
80008a9c:	82822003 	addhi	r2, r2, #3
80008aa0:	908220a1 	addls	r2, r2, r1, lsr #1
80008aa4:	e35c0000 	cmp	ip, #0
80008aa8:	e1a00233 	lsr	r0, r3, r2
80008aac:	42600000 	rsbmi	r0, r0, #0
80008ab0:	e12fff1e 	bx	lr
80008ab4:	e3500000 	cmp	r0, #0
80008ab8:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
80008abc:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
80008ac0:	ea000007 	b	80008ae4 <__aeabi_idiv0>

80008ac4 <__aeabi_idivmod>:
80008ac4:	e3510000 	cmp	r1, #0
80008ac8:	0afffff9 	beq	80008ab4 <.divsi3_skip_div0_test+0x110>
80008acc:	e92d4003 	push	{r0, r1, lr}
80008ad0:	ebffffb3 	bl	800089a4 <.divsi3_skip_div0_test>
80008ad4:	e8bd4006 	pop	{r1, r2, lr}
80008ad8:	e0030092 	mul	r3, r2, r0
80008adc:	e0411003 	sub	r1, r1, r3
80008ae0:	e12fff1e 	bx	lr

80008ae4 <__aeabi_idiv0>:
80008ae4:	e12fff1e 	bx	lr

80008ae8 <__errno>:
80008ae8:	e59f3004 	ldr	r3, [pc, #4]	; 80008af4 <__errno+0xc>
80008aec:	e5930000 	ldr	r0, [r3]
80008af0:	e12fff1e 	bx	lr
80008af4:	800114a8 	.word	0x800114a8

80008af8 <memcmp>:
80008af8:	e3520003 	cmp	r2, #3
80008afc:	e92d0030 	push	{r4, r5}
80008b00:	e1a0c000 	mov	ip, r0
80008b04:	e1a04001 	mov	r4, r1
80008b08:	9a00000f 	bls	80008b4c <memcmp+0x54>
80008b0c:	e1813000 	orr	r3, r1, r0
80008b10:	e3130003 	tst	r3, #3
80008b14:	1a00000f 	bne	80008b58 <memcmp+0x60>
80008b18:	e1a03001 	mov	r3, r1
80008b1c:	e1a01003 	mov	r1, r3
80008b20:	e1a0c000 	mov	ip, r0
80008b24:	e4934004 	ldr	r4, [r3], #4
80008b28:	e4905004 	ldr	r5, [r0], #4
80008b2c:	e1550004 	cmp	r5, r4
80008b30:	1a000004 	bne	80008b48 <memcmp+0x50>
80008b34:	e2422004 	sub	r2, r2, #4
80008b38:	e3520003 	cmp	r2, #3
80008b3c:	e1a0c000 	mov	ip, r0
80008b40:	e1a01003 	mov	r1, r3
80008b44:	8afffff4 	bhi	80008b1c <memcmp+0x24>
80008b48:	e1a04001 	mov	r4, r1
80008b4c:	e3520000 	cmp	r2, #0
80008b50:	01a00002 	moveq	r0, r2
80008b54:	0a00000d 	beq	80008b90 <memcmp+0x98>
80008b58:	e5dc0000 	ldrb	r0, [ip]
80008b5c:	e5d43000 	ldrb	r3, [r4]
80008b60:	e1500003 	cmp	r0, r3
80008b64:	01a01004 	moveq	r1, r4
80008b68:	0a000005 	beq	80008b84 <memcmp+0x8c>
80008b6c:	ea000009 	b	80008b98 <memcmp+0xa0>
80008b70:	e5fc0001 	ldrb	r0, [ip, #1]!
80008b74:	e5f13001 	ldrb	r3, [r1, #1]!
80008b78:	e1500003 	cmp	r0, r3
80008b7c:	e2422001 	sub	r2, r2, #1
80008b80:	1a000004 	bne	80008b98 <memcmp+0xa0>
80008b84:	e3520001 	cmp	r2, #1
80008b88:	1afffff8 	bne	80008b70 <memcmp+0x78>
80008b8c:	e3a00000 	mov	r0, #0
80008b90:	e8bd0030 	pop	{r4, r5}
80008b94:	e12fff1e 	bx	lr
80008b98:	e0630000 	rsb	r0, r3, r0
80008b9c:	eafffffb 	b	80008b90 <memcmp+0x98>

80008ba0 <memcpy>:
80008ba0:	e3520003 	cmp	r2, #3
80008ba4:	e92d01f0 	push	{r4, r5, r6, r7, r8}
80008ba8:	8a000009 	bhi	80008bd4 <memcpy+0x34>
80008bac:	e3520000 	cmp	r2, #0
80008bb0:	0a000005 	beq	80008bcc <memcpy+0x2c>
80008bb4:	e3a03000 	mov	r3, #0
80008bb8:	e7d1c003 	ldrb	ip, [r1, r3]
80008bbc:	e7c0c003 	strb	ip, [r0, r3]
80008bc0:	e2833001 	add	r3, r3, #1
80008bc4:	e1530002 	cmp	r3, r2
80008bc8:	1afffffa 	bne	80008bb8 <memcpy+0x18>
80008bcc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
80008bd0:	e12fff1e 	bx	lr
80008bd4:	e1a03001 	mov	r3, r1
80008bd8:	e0802002 	add	r2, r0, r2
80008bdc:	e1a01000 	mov	r1, r0
80008be0:	ea000002 	b	80008bf0 <memcpy+0x50>
80008be4:	e5dcc000 	ldrb	ip, [ip]
80008be8:	e4c1c001 	strb	ip, [r1], #1
80008bec:	e2833001 	add	r3, r3, #1
80008bf0:	e3110003 	tst	r1, #3
80008bf4:	e1a0c003 	mov	ip, r3
80008bf8:	1afffff9 	bne	80008be4 <memcpy+0x44>
80008bfc:	e2134003 	ands	r4, r3, #3
80008c00:	0a000034 	beq	80008cd8 <memcpy+0x138>
80008c04:	e2645000 	rsb	r5, r4, #0
80008c08:	e2647004 	rsb	r7, r4, #4
80008c0c:	e7933005 	ldr	r3, [r3, r5]
80008c10:	e1a04184 	lsl	r4, r4, #3
80008c14:	e1a07187 	lsl	r7, r7, #3
80008c18:	ea000005 	b	80008c34 <memcpy+0x94>
80008c1c:	e28cc004 	add	ip, ip, #4
80008c20:	e79c6005 	ldr	r6, [ip, r5]
80008c24:	e1a08716 	lsl	r8, r6, r7
80008c28:	e1883433 	orr	r3, r8, r3, lsr r4
80008c2c:	e4813004 	str	r3, [r1], #4
80008c30:	e1a03006 	mov	r3, r6
80008c34:	e0616002 	rsb	r6, r1, r2
80008c38:	e3560003 	cmp	r6, #3
80008c3c:	cafffff6 	bgt	80008c1c <memcpy+0x7c>
80008c40:	ea000001 	b	80008c4c <memcpy+0xac>
80008c44:	e4dc3001 	ldrb	r3, [ip], #1
80008c48:	e4c13001 	strb	r3, [r1], #1
80008c4c:	e1520001 	cmp	r2, r1
80008c50:	8afffffb 	bhi	80008c44 <memcpy+0xa4>
80008c54:	eaffffdc 	b	80008bcc <memcpy+0x2c>
80008c58:	e513c040 	ldr	ip, [r3, #-64]	; 0xffffffc0
80008c5c:	e501c040 	str	ip, [r1, #-64]	; 0xffffffc0
80008c60:	e513c03c 	ldr	ip, [r3, #-60]	; 0xffffffc4
80008c64:	e501c03c 	str	ip, [r1, #-60]	; 0xffffffc4
80008c68:	e513c038 	ldr	ip, [r3, #-56]	; 0xffffffc8
80008c6c:	e501c038 	str	ip, [r1, #-56]	; 0xffffffc8
80008c70:	e513c034 	ldr	ip, [r3, #-52]	; 0xffffffcc
80008c74:	e501c034 	str	ip, [r1, #-52]	; 0xffffffcc
80008c78:	e513c030 	ldr	ip, [r3, #-48]	; 0xffffffd0
80008c7c:	e501c030 	str	ip, [r1, #-48]	; 0xffffffd0
80008c80:	e513c02c 	ldr	ip, [r3, #-44]	; 0xffffffd4
80008c84:	e501c02c 	str	ip, [r1, #-44]	; 0xffffffd4
80008c88:	e513c028 	ldr	ip, [r3, #-40]	; 0xffffffd8
80008c8c:	e501c028 	str	ip, [r1, #-40]	; 0xffffffd8
80008c90:	e513c024 	ldr	ip, [r3, #-36]	; 0xffffffdc
80008c94:	e501c024 	str	ip, [r1, #-36]	; 0xffffffdc
80008c98:	e513c020 	ldr	ip, [r3, #-32]	; 0xffffffe0
80008c9c:	e501c020 	str	ip, [r1, #-32]	; 0xffffffe0
80008ca0:	e513c01c 	ldr	ip, [r3, #-28]	; 0xffffffe4
80008ca4:	e501c01c 	str	ip, [r1, #-28]	; 0xffffffe4
80008ca8:	e513c018 	ldr	ip, [r3, #-24]	; 0xffffffe8
80008cac:	e501c018 	str	ip, [r1, #-24]	; 0xffffffe8
80008cb0:	e513c014 	ldr	ip, [r3, #-20]	; 0xffffffec
80008cb4:	e501c014 	str	ip, [r1, #-20]	; 0xffffffec
80008cb8:	e513c010 	ldr	ip, [r3, #-16]
80008cbc:	e501c010 	str	ip, [r1, #-16]
80008cc0:	e513c00c 	ldr	ip, [r3, #-12]
80008cc4:	e501c00c 	str	ip, [r1, #-12]
80008cc8:	e513c008 	ldr	ip, [r3, #-8]
80008ccc:	e501c008 	str	ip, [r1, #-8]
80008cd0:	e513c004 	ldr	ip, [r3, #-4]
80008cd4:	e501c004 	str	ip, [r1, #-4]
80008cd8:	e061c002 	rsb	ip, r1, r2
80008cdc:	e35c003f 	cmp	ip, #63	; 0x3f
80008ce0:	e1a04003 	mov	r4, r3
80008ce4:	e1a0c001 	mov	ip, r1
80008ce8:	e2833040 	add	r3, r3, #64	; 0x40
80008cec:	e2811040 	add	r1, r1, #64	; 0x40
80008cf0:	caffffd8 	bgt	80008c58 <memcpy+0xb8>
80008cf4:	e1a03004 	mov	r3, r4
80008cf8:	ea000007 	b	80008d1c <memcpy+0x17c>
80008cfc:	e5131010 	ldr	r1, [r3, #-16]
80008d00:	e50c1010 	str	r1, [ip, #-16]
80008d04:	e513100c 	ldr	r1, [r3, #-12]
80008d08:	e50c100c 	str	r1, [ip, #-12]
80008d0c:	e5131008 	ldr	r1, [r3, #-8]
80008d10:	e50c1008 	str	r1, [ip, #-8]
80008d14:	e5131004 	ldr	r1, [r3, #-4]
80008d18:	e50c1004 	str	r1, [ip, #-4]
80008d1c:	e1a0100c 	mov	r1, ip
80008d20:	e06cc002 	rsb	ip, ip, r2
80008d24:	e35c000f 	cmp	ip, #15
80008d28:	e1a04003 	mov	r4, r3
80008d2c:	e281c010 	add	ip, r1, #16
80008d30:	e2833010 	add	r3, r3, #16
80008d34:	cafffff0 	bgt	80008cfc <memcpy+0x15c>
80008d38:	e1a03004 	mov	r3, r4
80008d3c:	ea000002 	b	80008d4c <memcpy+0x1ac>
80008d40:	e59cc000 	ldr	ip, [ip]
80008d44:	e481c004 	str	ip, [r1], #4
80008d48:	e2833004 	add	r3, r3, #4
80008d4c:	e061c002 	rsb	ip, r1, r2
80008d50:	e35c0003 	cmp	ip, #3
80008d54:	e1a0c003 	mov	ip, r3
80008d58:	cafffff8 	bgt	80008d40 <memcpy+0x1a0>
80008d5c:	eaffffba 	b	80008c4c <memcpy+0xac>

80008d60 <memset>:
80008d60:	e3520003 	cmp	r2, #3
80008d64:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
80008d68:	e20110ff 	and	r1, r1, #255	; 0xff
80008d6c:	8a000008 	bhi	80008d94 <memset+0x34>
80008d70:	e3520000 	cmp	r2, #0
80008d74:	0a000004 	beq	80008d8c <memset+0x2c>
80008d78:	e1a03000 	mov	r3, r0
80008d7c:	e0822000 	add	r2, r2, r0
80008d80:	e4c31001 	strb	r1, [r3], #1
80008d84:	e1530002 	cmp	r3, r2
80008d88:	1afffffc 	bne	80008d80 <memset+0x20>
80008d8c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
80008d90:	e12fff1e 	bx	lr
80008d94:	e0802002 	add	r2, r0, r2
80008d98:	e1a0c000 	mov	ip, r0
80008d9c:	ea000000 	b	80008da4 <memset+0x44>
80008da0:	e4cc1001 	strb	r1, [ip], #1
80008da4:	e31c0003 	tst	ip, #3
80008da8:	1afffffc 	bne	80008da0 <memset+0x40>
80008dac:	e0813401 	add	r3, r1, r1, lsl #8
80008db0:	e0833803 	add	r3, r3, r3, lsl #16
80008db4:	ea00000f 	b	80008df8 <memset+0x98>
80008db8:	e50c3040 	str	r3, [ip, #-64]	; 0xffffffc0
80008dbc:	e50c303c 	str	r3, [ip, #-60]	; 0xffffffc4
80008dc0:	e50c3038 	str	r3, [ip, #-56]	; 0xffffffc8
80008dc4:	e50c3034 	str	r3, [ip, #-52]	; 0xffffffcc
80008dc8:	e50c3030 	str	r3, [ip, #-48]	; 0xffffffd0
80008dcc:	e50c302c 	str	r3, [ip, #-44]	; 0xffffffd4
80008dd0:	e50c3028 	str	r3, [ip, #-40]	; 0xffffffd8
80008dd4:	e50c3024 	str	r3, [ip, #-36]	; 0xffffffdc
80008dd8:	e50c3020 	str	r3, [ip, #-32]	; 0xffffffe0
80008ddc:	e50c301c 	str	r3, [ip, #-28]	; 0xffffffe4
80008de0:	e50c3018 	str	r3, [ip, #-24]	; 0xffffffe8
80008de4:	e50c3014 	str	r3, [ip, #-20]	; 0xffffffec
80008de8:	e50c3010 	str	r3, [ip, #-16]
80008dec:	e50c300c 	str	r3, [ip, #-12]
80008df0:	e50c3008 	str	r3, [ip, #-8]
80008df4:	e50c3004 	str	r3, [ip, #-4]
80008df8:	e06c4002 	rsb	r4, ip, r2
80008dfc:	e354003f 	cmp	r4, #63	; 0x3f
80008e00:	e1a0400c 	mov	r4, ip
80008e04:	e28cc040 	add	ip, ip, #64	; 0x40
80008e08:	caffffea 	bgt	80008db8 <memset+0x58>
80008e0c:	e1a0c004 	mov	ip, r4
80008e10:	ea000003 	b	80008e24 <memset+0xc4>
80008e14:	e50c3010 	str	r3, [ip, #-16]
80008e18:	e50c300c 	str	r3, [ip, #-12]
80008e1c:	e50c3008 	str	r3, [ip, #-8]
80008e20:	e50c3004 	str	r3, [ip, #-4]
80008e24:	e06c4002 	rsb	r4, ip, r2
80008e28:	e354000f 	cmp	r4, #15
80008e2c:	e1a0400c 	mov	r4, ip
80008e30:	e28cc010 	add	ip, ip, #16
80008e34:	cafffff6 	bgt	80008e14 <memset+0xb4>
80008e38:	ea000000 	b	80008e40 <memset+0xe0>
80008e3c:	e4843004 	str	r3, [r4], #4
80008e40:	e064c002 	rsb	ip, r4, r2
80008e44:	e35c0003 	cmp	ip, #3
80008e48:	cafffffb 	bgt	80008e3c <memset+0xdc>
80008e4c:	ea000000 	b	80008e54 <memset+0xf4>
80008e50:	e4c41001 	strb	r1, [r4], #1
80008e54:	e1540002 	cmp	r4, r2
80008e58:	3afffffc 	bcc	80008e50 <memset+0xf0>
80008e5c:	eaffffca 	b	80008d8c <memset+0x2c>

80008e60 <_sprintf_r>:
80008e60:	e92d000c 	push	{r2, r3}
80008e64:	e92d4030 	push	{r4, r5, lr}
80008e68:	e24dd074 	sub	sp, sp, #116	; 0x74
80008e6c:	e28dc084 	add	ip, sp, #132	; 0x84
80008e70:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
80008e74:	e1a04001 	mov	r4, r1
80008e78:	e59d2080 	ldr	r2, [sp, #128]	; 0x80
80008e7c:	e1a0300c 	mov	r3, ip
80008e80:	e58de00c 	str	lr, [sp, #12]
80008e84:	e58de018 	str	lr, [sp, #24]
80008e88:	e28d1004 	add	r1, sp, #4
80008e8c:	e3e0e000 	mvn	lr, #0
80008e90:	e3a05f82 	mov	r5, #520	; 0x208
80008e94:	e1cd51b0 	strh	r5, [sp, #16]
80008e98:	e58d4004 	str	r4, [sp, #4]
80008e9c:	e58d4014 	str	r4, [sp, #20]
80008ea0:	e1cde1b2 	strh	lr, [sp, #18]
80008ea4:	e58dc06c 	str	ip, [sp, #108]	; 0x6c
80008ea8:	eb000023 	bl	80008f3c <_svfprintf_r>
80008eac:	e59d3004 	ldr	r3, [sp, #4]
80008eb0:	e3a02000 	mov	r2, #0
80008eb4:	e5c32000 	strb	r2, [r3]
80008eb8:	e28dd074 	add	sp, sp, #116	; 0x74
80008ebc:	e8bd4030 	pop	{r4, r5, lr}
80008ec0:	e28dd008 	add	sp, sp, #8
80008ec4:	e12fff1e 	bx	lr

80008ec8 <sprintf>:
80008ec8:	e92d000e 	push	{r1, r2, r3}
80008ecc:	e92d4030 	push	{r4, r5, lr}
80008ed0:	e59f3060 	ldr	r3, [pc, #96]	; 80008f38 <sprintf+0x70>
80008ed4:	e24dd070 	sub	sp, sp, #112	; 0x70
80008ed8:	e28dc080 	add	ip, sp, #128	; 0x80
80008edc:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
80008ee0:	e1a04000 	mov	r4, r0
80008ee4:	e59d207c 	ldr	r2, [sp, #124]	; 0x7c
80008ee8:	e58de00c 	str	lr, [sp, #12]
80008eec:	e58de018 	str	lr, [sp, #24]
80008ef0:	e5930000 	ldr	r0, [r3]
80008ef4:	e3e0e000 	mvn	lr, #0
80008ef8:	e1a0300c 	mov	r3, ip
80008efc:	e28d1004 	add	r1, sp, #4
80008f00:	e3a05f82 	mov	r5, #520	; 0x208
80008f04:	e1cd51b0 	strh	r5, [sp, #16]
80008f08:	e58d4004 	str	r4, [sp, #4]
80008f0c:	e58d4014 	str	r4, [sp, #20]
80008f10:	e1cde1b2 	strh	lr, [sp, #18]
80008f14:	e58dc06c 	str	ip, [sp, #108]	; 0x6c
80008f18:	eb000007 	bl	80008f3c <_svfprintf_r>
80008f1c:	e59d3004 	ldr	r3, [sp, #4]
80008f20:	e3a02000 	mov	r2, #0
80008f24:	e5c32000 	strb	r2, [r3]
80008f28:	e28dd070 	add	sp, sp, #112	; 0x70
80008f2c:	e8bd4030 	pop	{r4, r5, lr}
80008f30:	e28dd00c 	add	sp, sp, #12
80008f34:	e12fff1e 	bx	lr
80008f38:	800114a8 	.word	0x800114a8

80008f3c <_svfprintf_r>:
80008f3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
80008f40:	e24ddf43 	sub	sp, sp, #268	; 0x10c
80008f44:	e58d303c 	str	r3, [sp, #60]	; 0x3c
80008f48:	e58d1024 	str	r1, [sp, #36]	; 0x24
80008f4c:	e1a04002 	mov	r4, r2
80008f50:	e58d0038 	str	r0, [sp, #56]	; 0x38
80008f54:	eb000e62 	bl	8000c8e4 <_localeconv_r>
80008f58:	e5900000 	ldr	r0, [r0]
80008f5c:	e58d0054 	str	r0, [sp, #84]	; 0x54
80008f60:	eb001470 	bl	8000e128 <strlen>
80008f64:	e58d0060 	str	r0, [sp, #96]	; 0x60
80008f68:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
80008f6c:	e1d030bc 	ldrh	r3, [r0, #12]
80008f70:	e3130080 	tst	r3, #128	; 0x80
80008f74:	0a000002 	beq	80008f84 <_svfprintf_r+0x48>
80008f78:	e5903010 	ldr	r3, [r0, #16]
80008f7c:	e3530000 	cmp	r3, #0
80008f80:	0a000742 	beq	8000ac90 <_svfprintf_r+0x1d54>
80008f84:	e28d10e8 	add	r1, sp, #232	; 0xe8
80008f88:	e3a03000 	mov	r3, #0
80008f8c:	e28d7074 	add	r7, sp, #116	; 0x74
80008f90:	e2811007 	add	r1, r1, #7
80008f94:	e58d302c 	str	r3, [sp, #44]	; 0x2c
80008f98:	e58d70dc 	str	r7, [sp, #220]	; 0xdc
80008f9c:	e58d30e4 	str	r3, [sp, #228]	; 0xe4
80008fa0:	e58d30e0 	str	r3, [sp, #224]	; 0xe0
80008fa4:	e58d401c 	str	r4, [sp, #28]
80008fa8:	e58d3058 	str	r3, [sp, #88]	; 0x58
80008fac:	e58d305c 	str	r3, [sp, #92]	; 0x5c
80008fb0:	e58d3068 	str	r3, [sp, #104]	; 0x68
80008fb4:	e58d3064 	str	r3, [sp, #100]	; 0x64
80008fb8:	e58d3030 	str	r3, [sp, #48]	; 0x30
80008fbc:	e58d106c 	str	r1, [sp, #108]	; 0x6c
80008fc0:	e1a06007 	mov	r6, r7
80008fc4:	e59d201c 	ldr	r2, [sp, #28]
80008fc8:	e5d23000 	ldrb	r3, [r2]
80008fcc:	e3530000 	cmp	r3, #0
80008fd0:	13530025 	cmpne	r3, #37	; 0x25
80008fd4:	0a0000a4 	beq	8000926c <_svfprintf_r+0x330>
80008fd8:	e2823001 	add	r3, r2, #1
80008fdc:	e1a08003 	mov	r8, r3
80008fe0:	e5d33000 	ldrb	r3, [r3]
80008fe4:	e3530025 	cmp	r3, #37	; 0x25
80008fe8:	13530000 	cmpne	r3, #0
80008fec:	e2883001 	add	r3, r8, #1
80008ff0:	1afffff9 	bne	80008fdc <_svfprintf_r+0xa0>
80008ff4:	e59d301c 	ldr	r3, [sp, #28]
80008ff8:	e058a003 	subs	sl, r8, r3
80008ffc:	0a00000c 	beq	80009034 <_svfprintf_r+0xf8>
80009000:	e28d40e0 	add	r4, sp, #224	; 0xe0
80009004:	e8940030 	ldm	r4, {r4, r5}
80009008:	e2844001 	add	r4, r4, #1
8000900c:	e085500a 	add	r5, r5, sl
80009010:	e3540007 	cmp	r4, #7
80009014:	e8860408 	stm	r6, {r3, sl}
80009018:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000901c:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009020:	d2866008 	addle	r6, r6, #8
80009024:	ca000078 	bgt	8000920c <_svfprintf_r+0x2d0>
80009028:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
8000902c:	e08cc00a 	add	ip, ip, sl
80009030:	e58dc030 	str	ip, [sp, #48]	; 0x30
80009034:	e5d83000 	ldrb	r3, [r8]
80009038:	e3530000 	cmp	r3, #0
8000903c:	0a00007a 	beq	8000922c <_svfprintf_r+0x2f0>
80009040:	e3a01000 	mov	r1, #0
80009044:	e2882001 	add	r2, r8, #1
80009048:	e3a00000 	mov	r0, #0
8000904c:	e58d1028 	str	r1, [sp, #40]	; 0x28
80009050:	e5cd0107 	strb	r0, [sp, #263]	; 0x107
80009054:	e58d201c 	str	r2, [sp, #28]
80009058:	e3e05000 	mvn	r5, #0
8000905c:	e5d83001 	ldrb	r3, [r8, #1]
80009060:	e3a04020 	mov	r4, #32
80009064:	e58d1018 	str	r1, [sp, #24]
80009068:	e1a0c002 	mov	ip, r2
8000906c:	e3a0102b 	mov	r1, #43	; 0x2b
80009070:	e28cc001 	add	ip, ip, #1
80009074:	e2432020 	sub	r2, r3, #32
80009078:	e3520058 	cmp	r2, #88	; 0x58
8000907c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
80009080:	ea0001cb 	b	800097b4 <_svfprintf_r+0x878>
80009084:	800097f4 	.word	0x800097f4
80009088:	800097b4 	.word	0x800097b4
8000908c:	800097b4 	.word	0x800097b4
80009090:	8000980c 	.word	0x8000980c
80009094:	800097b4 	.word	0x800097b4
80009098:	800097b4 	.word	0x800097b4
8000909c:	800097b4 	.word	0x800097b4
800090a0:	800097b4 	.word	0x800097b4
800090a4:	800097b4 	.word	0x800097b4
800090a8:	800097b4 	.word	0x800097b4
800090ac:	80009820 	.word	0x80009820
800090b0:	80009274 	.word	0x80009274
800090b4:	800097b4 	.word	0x800097b4
800090b8:	800091f8 	.word	0x800091f8
800090bc:	80009280 	.word	0x80009280
800090c0:	800097b4 	.word	0x800097b4
800090c4:	800092c8 	.word	0x800092c8
800090c8:	800092dc 	.word	0x800092dc
800090cc:	800092dc 	.word	0x800092dc
800090d0:	800092dc 	.word	0x800092dc
800090d4:	800092dc 	.word	0x800092dc
800090d8:	800092dc 	.word	0x800092dc
800090dc:	800092dc 	.word	0x800092dc
800090e0:	800092dc 	.word	0x800092dc
800090e4:	800092dc 	.word	0x800092dc
800090e8:	800092dc 	.word	0x800092dc
800090ec:	800097b4 	.word	0x800097b4
800090f0:	800097b4 	.word	0x800097b4
800090f4:	800097b4 	.word	0x800097b4
800090f8:	800097b4 	.word	0x800097b4
800090fc:	800097b4 	.word	0x800097b4
80009100:	800097b4 	.word	0x800097b4
80009104:	800097b4 	.word	0x800097b4
80009108:	800097b4 	.word	0x800097b4
8000910c:	800097b4 	.word	0x800097b4
80009110:	800097b4 	.word	0x800097b4
80009114:	8000930c 	.word	0x8000930c
80009118:	8000951c 	.word	0x8000951c
8000911c:	800097b4 	.word	0x800097b4
80009120:	8000951c 	.word	0x8000951c
80009124:	800097b4 	.word	0x800097b4
80009128:	800097b4 	.word	0x800097b4
8000912c:	800097b4 	.word	0x800097b4
80009130:	800097b4 	.word	0x800097b4
80009134:	800095d8 	.word	0x800095d8
80009138:	800097b4 	.word	0x800097b4
8000913c:	800097b4 	.word	0x800097b4
80009140:	800095ec 	.word	0x800095ec
80009144:	800097b4 	.word	0x800097b4
80009148:	800097b4 	.word	0x800097b4
8000914c:	800097b4 	.word	0x800097b4
80009150:	800097b4 	.word	0x800097b4
80009154:	800097b4 	.word	0x800097b4
80009158:	80009640 	.word	0x80009640
8000915c:	800097b4 	.word	0x800097b4
80009160:	800097b4 	.word	0x800097b4
80009164:	8000968c 	.word	0x8000968c
80009168:	800097b4 	.word	0x800097b4
8000916c:	800097b4 	.word	0x800097b4
80009170:	800097b4 	.word	0x800097b4
80009174:	800097b4 	.word	0x800097b4
80009178:	800097b4 	.word	0x800097b4
8000917c:	800097b4 	.word	0x800097b4
80009180:	800097b4 	.word	0x800097b4
80009184:	800097b4 	.word	0x800097b4
80009188:	800097b4 	.word	0x800097b4
8000918c:	800097b4 	.word	0x800097b4
80009190:	800098dc 	.word	0x800098dc
80009194:	80009890 	.word	0x80009890
80009198:	8000951c 	.word	0x8000951c
8000919c:	8000951c 	.word	0x8000951c
800091a0:	8000951c 	.word	0x8000951c
800091a4:	800098c8 	.word	0x800098c8
800091a8:	80009890 	.word	0x80009890
800091ac:	800097b4 	.word	0x800097b4
800091b0:	800097b4 	.word	0x800097b4
800091b4:	80009710 	.word	0x80009710
800091b8:	800097b4 	.word	0x800097b4
800091bc:	80009738 	.word	0x80009738
800091c0:	80009770 	.word	0x80009770
800091c4:	80009928 	.word	0x80009928
800091c8:	800096fc 	.word	0x800096fc
800091cc:	800097b4 	.word	0x800097b4
800091d0:	8000997c 	.word	0x8000997c
800091d4:	800097b4 	.word	0x800097b4
800091d8:	80009848 	.word	0x80009848
800091dc:	800097b4 	.word	0x800097b4
800091e0:	800097b4 	.word	0x800097b4
800091e4:	80009a00 	.word	0x80009a00
800091e8:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
800091ec:	e2600000 	rsb	r0, r0, #0
800091f0:	e58d0028 	str	r0, [sp, #40]	; 0x28
800091f4:	e58d203c 	str	r2, [sp, #60]	; 0x3c
800091f8:	e59d2018 	ldr	r2, [sp, #24]
800091fc:	e3822004 	orr	r2, r2, #4
80009200:	e58d2018 	str	r2, [sp, #24]
80009204:	e5dc3000 	ldrb	r3, [ip]
80009208:	eaffff98 	b	80009070 <_svfprintf_r+0x134>
8000920c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
80009210:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
80009214:	e28d20dc 	add	r2, sp, #220	; 0xdc
80009218:	eb0013da 	bl	8000e188 <__ssprint_r>
8000921c:	e3500000 	cmp	r0, #0
80009220:	1a000007 	bne	80009244 <_svfprintf_r+0x308>
80009224:	e1a06007 	mov	r6, r7
80009228:	eaffff7e 	b	80009028 <_svfprintf_r+0xec>
8000922c:	e59d30e4 	ldr	r3, [sp, #228]	; 0xe4
80009230:	e3530000 	cmp	r3, #0
80009234:	159d0038 	ldrne	r0, [sp, #56]	; 0x38
80009238:	159d1024 	ldrne	r1, [sp, #36]	; 0x24
8000923c:	128d20dc 	addne	r2, sp, #220	; 0xdc
80009240:	1b0013d0 	blne	8000e188 <__ssprint_r>
80009244:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
80009248:	e1d030bc 	ldrh	r3, [r0, #12]
8000924c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
80009250:	e3130040 	tst	r3, #64	; 0x40
80009254:	13e01000 	mvnne	r1, #0
80009258:	e58d1030 	str	r1, [sp, #48]	; 0x30
8000925c:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
80009260:	e28ddf43 	add	sp, sp, #268	; 0x10c
80009264:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
80009268:	e12fff1e 	bx	lr
8000926c:	e59d801c 	ldr	r8, [sp, #28]
80009270:	eaffff6f 	b	80009034 <_svfprintf_r+0xf8>
80009274:	e5cd1107 	strb	r1, [sp, #263]	; 0x107
80009278:	e5dc3000 	ldrb	r3, [ip]
8000927c:	eaffff7b 	b	80009070 <_svfprintf_r+0x134>
80009280:	e4dc3001 	ldrb	r3, [ip], #1
80009284:	e353002a 	cmp	r3, #42	; 0x2a
80009288:	0a00076a 	beq	8000b038 <_svfprintf_r+0x20fc>
8000928c:	e2432030 	sub	r2, r3, #48	; 0x30
80009290:	e3520009 	cmp	r2, #9
80009294:	83a05000 	movhi	r5, #0
80009298:	8a000008 	bhi	800092c0 <_svfprintf_r+0x384>
8000929c:	e1a0000c 	mov	r0, ip
800092a0:	e3a05000 	mov	r5, #0
800092a4:	e4d03001 	ldrb	r3, [r0], #1
800092a8:	e0855105 	add	r5, r5, r5, lsl #2
800092ac:	e0825085 	add	r5, r2, r5, lsl #1
800092b0:	e2432030 	sub	r2, r3, #48	; 0x30
800092b4:	e3520009 	cmp	r2, #9
800092b8:	e1a0c000 	mov	ip, r0
800092bc:	9afffff8 	bls	800092a4 <_svfprintf_r+0x368>
800092c0:	e1855fc5 	orr	r5, r5, r5, asr #31
800092c4:	eaffff6a 	b	80009074 <_svfprintf_r+0x138>
800092c8:	e59d0018 	ldr	r0, [sp, #24]
800092cc:	e3800080 	orr	r0, r0, #128	; 0x80
800092d0:	e58d0018 	str	r0, [sp, #24]
800092d4:	e5dc3000 	ldrb	r3, [ip]
800092d8:	eaffff64 	b	80009070 <_svfprintf_r+0x134>
800092dc:	e1a0000c 	mov	r0, ip
800092e0:	e3a02000 	mov	r2, #0
800092e4:	e243c030 	sub	ip, r3, #48	; 0x30
800092e8:	e4d03001 	ldrb	r3, [r0], #1
800092ec:	e2438030 	sub	r8, r3, #48	; 0x30
800092f0:	e0822102 	add	r2, r2, r2, lsl #2
800092f4:	e3580009 	cmp	r8, #9
800092f8:	e08c2082 	add	r2, ip, r2, lsl #1
800092fc:	e1a0c000 	mov	ip, r0
80009300:	9afffff7 	bls	800092e4 <_svfprintf_r+0x3a8>
80009304:	e58d2028 	str	r2, [sp, #40]	; 0x28
80009308:	eaffff59 	b	80009074 <_svfprintf_r+0x138>
8000930c:	e58dc01c 	str	ip, [sp, #28]
80009310:	e59dc018 	ldr	ip, [sp, #24]
80009314:	e38cc010 	orr	ip, ip, #16
80009318:	e58dc018 	str	ip, [sp, #24]
8000931c:	e59d0018 	ldr	r0, [sp, #24]
80009320:	e3100020 	tst	r0, #32
80009324:	e58d3048 	str	r3, [sp, #72]	; 0x48
80009328:	0a00015d 	beq	800098a4 <_svfprintf_r+0x968>
8000932c:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
80009330:	e2813007 	add	r3, r1, #7
80009334:	e3c33007 	bic	r3, r3, #7
80009338:	e2832008 	add	r2, r3, #8
8000933c:	e58d203c 	str	r2, [sp, #60]	; 0x3c
80009340:	e8930300 	ldm	r3, {r8, r9}
80009344:	e3580000 	cmp	r8, #0
80009348:	e2d93000 	sbcs	r3, r9, #0
8000934c:	ba000470 	blt	8000a514 <_svfprintf_r+0x15d8>
80009350:	e198c009 	orrs	ip, r8, r9
80009354:	03a02000 	moveq	r2, #0
80009358:	13a02001 	movne	r2, #1
8000935c:	e3a03001 	mov	r3, #1
80009360:	e3550000 	cmp	r5, #0
80009364:	a59dc018 	ldrge	ip, [sp, #24]
80009368:	a3ccc080 	bicge	ip, ip, #128	; 0x80
8000936c:	a58dc018 	strge	ip, [sp, #24]
80009370:	e3550000 	cmp	r5, #0
80009374:	13822001 	orrne	r2, r2, #1
80009378:	e3520000 	cmp	r2, #0
8000937c:	0a0002c7 	beq	80009ea0 <_svfprintf_r+0xf64>
80009380:	e3530001 	cmp	r3, #1
80009384:	0a0003c4 	beq	8000a29c <_svfprintf_r+0x1360>
80009388:	e3530002 	cmp	r3, #2
8000938c:	0a0003ad 	beq	8000a248 <_svfprintf_r+0x130c>
80009390:	e28dc0b4 	add	ip, sp, #180	; 0xb4
80009394:	e28c1027 	add	r1, ip, #39	; 0x27
80009398:	e1a021a9 	lsr	r2, r9, #3
8000939c:	e1a001a8 	lsr	r0, r8, #3
800093a0:	e1800e89 	orr	r0, r0, r9, lsl #29
800093a4:	e1a04002 	mov	r4, r2
800093a8:	e1a09004 	mov	r9, r4
800093ac:	e2082007 	and	r2, r8, #7
800093b0:	e1a08000 	mov	r8, r0
800093b4:	e2823030 	add	r3, r2, #48	; 0x30
800093b8:	e1a00001 	mov	r0, r1
800093bc:	e1981009 	orrs	r1, r8, r9
800093c0:	e5c03000 	strb	r3, [r0]
800093c4:	e2401001 	sub	r1, r0, #1
800093c8:	1afffff2 	bne	80009398 <_svfprintf_r+0x45c>
800093cc:	e59d2018 	ldr	r2, [sp, #24]
800093d0:	e3120001 	tst	r2, #1
800093d4:	e58d0040 	str	r0, [sp, #64]	; 0x40
800093d8:	1a000442 	bne	8000a4e8 <_svfprintf_r+0x15ac>
800093dc:	e28cc028 	add	ip, ip, #40	; 0x28
800093e0:	e060c00c 	rsb	ip, r0, ip
800093e4:	e58dc034 	str	ip, [sp, #52]	; 0x34
800093e8:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
800093ec:	e3a03000 	mov	r3, #0
800093f0:	e1510005 	cmp	r1, r5
800093f4:	b1a01005 	movlt	r1, r5
800093f8:	e58d1020 	str	r1, [sp, #32]
800093fc:	e5dd2107 	ldrb	r2, [sp, #263]	; 0x107
80009400:	e58d504c 	str	r5, [sp, #76]	; 0x4c
80009404:	e58d3050 	str	r3, [sp, #80]	; 0x50
80009408:	e3520000 	cmp	r2, #0
8000940c:	0a000002 	beq	8000941c <_svfprintf_r+0x4e0>
80009410:	e59d3020 	ldr	r3, [sp, #32]
80009414:	e2833001 	add	r3, r3, #1
80009418:	e58d3020 	str	r3, [sp, #32]
8000941c:	e59dc018 	ldr	ip, [sp, #24]
80009420:	e21cb002 	ands	fp, ip, #2
80009424:	159d0020 	ldrne	r0, [sp, #32]
80009428:	e59d1018 	ldr	r1, [sp, #24]
8000942c:	12800002 	addne	r0, r0, #2
80009430:	158d0020 	strne	r0, [sp, #32]
80009434:	e2111084 	ands	r1, r1, #132	; 0x84
80009438:	e58d1044 	str	r1, [sp, #68]	; 0x44
8000943c:	1a00017f 	bne	80009a40 <_svfprintf_r+0xb04>
80009440:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
80009444:	e59dc020 	ldr	ip, [sp, #32]
80009448:	e06c8003 	rsb	r8, ip, r3
8000944c:	e3580000 	cmp	r8, #0
80009450:	da00017a 	ble	80009a40 <_svfprintf_r+0xb04>
80009454:	e3580010 	cmp	r8, #16
80009458:	da00066f 	ble	8000ae1c <_svfprintf_r+0x1ee0>
8000945c:	e28d40e0 	add	r4, sp, #224	; 0xe0
80009460:	e8940030 	ldm	r4, {r4, r5}
80009464:	e1a01005 	mov	r1, r5
80009468:	e1a02004 	mov	r2, r4
8000946c:	e59faf48 	ldr	sl, [pc, #3912]	; 8000a3bc <_svfprintf_r+0x1480>
80009470:	e3a09010 	mov	r9, #16
80009474:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
80009478:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
8000947c:	ea000002 	b	8000948c <_svfprintf_r+0x550>
80009480:	e2488010 	sub	r8, r8, #16
80009484:	e3580010 	cmp	r8, #16
80009488:	da000016 	ble	800094e8 <_svfprintf_r+0x5ac>
8000948c:	e2822001 	add	r2, r2, #1
80009490:	e3520007 	cmp	r2, #7
80009494:	e586a000 	str	sl, [r6]
80009498:	e5869004 	str	r9, [r6, #4]
8000949c:	e2811010 	add	r1, r1, #16
800094a0:	d2866008 	addle	r6, r6, #8
800094a4:	e58d10e4 	str	r1, [sp, #228]	; 0xe4
800094a8:	e58d20e0 	str	r2, [sp, #224]	; 0xe0
800094ac:	d2863008 	addle	r3, r6, #8
800094b0:	dafffff2 	ble	80009480 <_svfprintf_r+0x544>
800094b4:	e1a00004 	mov	r0, r4
800094b8:	e1a01005 	mov	r1, r5
800094bc:	e28d20dc 	add	r2, sp, #220	; 0xdc
800094c0:	eb001330 	bl	8000e188 <__ssprint_r>
800094c4:	e3500000 	cmp	r0, #0
800094c8:	1affff5d 	bne	80009244 <_svfprintf_r+0x308>
800094cc:	e2488010 	sub	r8, r8, #16
800094d0:	e3580010 	cmp	r8, #16
800094d4:	e59d10e4 	ldr	r1, [sp, #228]	; 0xe4
800094d8:	e59d20e0 	ldr	r2, [sp, #224]	; 0xe0
800094dc:	e2873008 	add	r3, r7, #8
800094e0:	e1a06007 	mov	r6, r7
800094e4:	caffffe8 	bgt	8000948c <_svfprintf_r+0x550>
800094e8:	e1a04002 	mov	r4, r2
800094ec:	e1a05001 	mov	r5, r1
800094f0:	e2844001 	add	r4, r4, #1
800094f4:	e0855008 	add	r5, r5, r8
800094f8:	e3540007 	cmp	r4, #7
800094fc:	e586a000 	str	sl, [r6]
80009500:	e5868004 	str	r8, [r6, #4]
80009504:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009508:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000950c:	ca00036c 	bgt	8000a2c4 <_svfprintf_r+0x1388>
80009510:	e5dd2107 	ldrb	r2, [sp, #263]	; 0x107
80009514:	e1a06003 	mov	r6, r3
80009518:	ea000149 	b	80009a44 <_svfprintf_r+0xb08>
8000951c:	e59d1018 	ldr	r1, [sp, #24]
80009520:	e3110008 	tst	r1, #8
80009524:	e58dc01c 	str	ip, [sp, #28]
80009528:	e58d3048 	str	r3, [sp, #72]	; 0x48
8000952c:	e1a08003 	mov	r8, r3
80009530:	0a000416 	beq	8000a590 <_svfprintf_r+0x1654>
80009534:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
80009538:	e2823007 	add	r3, r2, #7
8000953c:	e3c33007 	bic	r3, r3, #7
80009540:	e5930000 	ldr	r0, [r3]
80009544:	e283c008 	add	ip, r3, #8
80009548:	e5933004 	ldr	r3, [r3, #4]
8000954c:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
80009550:	e58d0058 	str	r0, [sp, #88]	; 0x58
80009554:	e58d305c 	str	r3, [sp, #92]	; 0x5c
80009558:	e28d0058 	add	r0, sp, #88	; 0x58
8000955c:	e8900003 	ldm	r0, {r0, r1}
80009560:	eb001231 	bl	8000de2c <__fpclassifyd>
80009564:	e3500001 	cmp	r0, #1
80009568:	1a0003f2 	bne	8000a538 <_svfprintf_r+0x15fc>
8000956c:	e3a02000 	mov	r2, #0
80009570:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
80009574:	e3a03000 	mov	r3, #0
80009578:	e59d0058 	ldr	r0, [sp, #88]	; 0x58
8000957c:	eb001d1a 	bl	800109ec <__aeabi_dcmplt>
80009580:	e3a01000 	mov	r1, #0
80009584:	e3500000 	cmp	r0, #0
80009588:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
8000958c:	13a0202d 	movne	r2, #45	; 0x2d
80009590:	e3a00003 	mov	r0, #3
80009594:	e58d104c 	str	r1, [sp, #76]	; 0x4c
80009598:	e59f1e20 	ldr	r1, [pc, #3616]	; 8000a3c0 <_svfprintf_r+0x1484>
8000959c:	e59f3e20 	ldr	r3, [pc, #3616]	; 8000a3c4 <_svfprintf_r+0x1488>
800095a0:	05dd2107 	ldrbeq	r2, [sp, #263]	; 0x107
800095a4:	15cd2107 	strbne	r2, [sp, #263]	; 0x107
800095a8:	e58d0020 	str	r0, [sp, #32]
800095ac:	e35c0047 	cmp	ip, #71	; 0x47
800095b0:	e59d0018 	ldr	r0, [sp, #24]
800095b4:	d1a03001 	movle	r3, r1
800095b8:	e58d3040 	str	r3, [sp, #64]	; 0x40
800095bc:	e3c00080 	bic	r0, r0, #128	; 0x80
800095c0:	e3a01003 	mov	r1, #3
800095c4:	e3a03000 	mov	r3, #0
800095c8:	e58d0018 	str	r0, [sp, #24]
800095cc:	e58d1034 	str	r1, [sp, #52]	; 0x34
800095d0:	e58d3050 	str	r3, [sp, #80]	; 0x50
800095d4:	eaffff8b 	b	80009408 <_svfprintf_r+0x4cc>
800095d8:	e59d2018 	ldr	r2, [sp, #24]
800095dc:	e3822008 	orr	r2, r2, #8
800095e0:	e58d2018 	str	r2, [sp, #24]
800095e4:	e5dc3000 	ldrb	r3, [ip]
800095e8:	eafffea0 	b	80009070 <_svfprintf_r+0x134>
800095ec:	e59d1018 	ldr	r1, [sp, #24]
800095f0:	e3811010 	orr	r1, r1, #16
800095f4:	e58d1018 	str	r1, [sp, #24]
800095f8:	e59d2018 	ldr	r2, [sp, #24]
800095fc:	e58d3048 	str	r3, [sp, #72]	; 0x48
80009600:	e2123020 	ands	r3, r2, #32
80009604:	e58dc01c 	str	ip, [sp, #28]
80009608:	0a00005d 	beq	80009784 <_svfprintf_r+0x848>
8000960c:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
80009610:	e28c3007 	add	r3, ip, #7
80009614:	e3c33007 	bic	r3, r3, #7
80009618:	e8930300 	ldm	r3, {r8, r9}
8000961c:	e2833008 	add	r3, r3, #8
80009620:	e1980009 	orrs	r0, r8, r9
80009624:	e58d303c 	str	r3, [sp, #60]	; 0x3c
80009628:	03a02000 	moveq	r2, #0
8000962c:	13a02001 	movne	r2, #1
80009630:	e3a03000 	mov	r3, #0
80009634:	e3a01000 	mov	r1, #0
80009638:	e5cd1107 	strb	r1, [sp, #263]	; 0x107
8000963c:	eaffff47 	b	80009360 <_svfprintf_r+0x424>
80009640:	e59d0018 	ldr	r0, [sp, #24]
80009644:	e3800010 	orr	r0, r0, #16
80009648:	e58d0018 	str	r0, [sp, #24]
8000964c:	e59d1018 	ldr	r1, [sp, #24]
80009650:	e3110020 	tst	r1, #32
80009654:	e58dc01c 	str	ip, [sp, #28]
80009658:	e58d3048 	str	r3, [sp, #72]	; 0x48
8000965c:	0a00007e 	beq	8000985c <_svfprintf_r+0x920>
80009660:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
80009664:	e2823007 	add	r3, r2, #7
80009668:	e3c33007 	bic	r3, r3, #7
8000966c:	e8930300 	ldm	r3, {r8, r9}
80009670:	e2833008 	add	r3, r3, #8
80009674:	e198c009 	orrs	ip, r8, r9
80009678:	e58d303c 	str	r3, [sp, #60]	; 0x3c
8000967c:	03a02000 	moveq	r2, #0
80009680:	13a02001 	movne	r2, #1
80009684:	e3a03001 	mov	r3, #1
80009688:	eaffffe9 	b	80009634 <_svfprintf_r+0x6f8>
8000968c:	e58d3048 	str	r3, [sp, #72]	; 0x48
80009690:	e59d3018 	ldr	r3, [sp, #24]
80009694:	e59f2d2c 	ldr	r2, [pc, #3372]	; 8000a3c8 <_svfprintf_r+0x148c>
80009698:	e3130020 	tst	r3, #32
8000969c:	e58dc01c 	str	ip, [sp, #28]
800096a0:	e58d2068 	str	r2, [sp, #104]	; 0x68
800096a4:	0a0000dc 	beq	80009a1c <_svfprintf_r+0xae0>
800096a8:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
800096ac:	e28c3007 	add	r3, ip, #7
800096b0:	e3c33007 	bic	r3, r3, #7
800096b4:	e2830008 	add	r0, r3, #8
800096b8:	e58d003c 	str	r0, [sp, #60]	; 0x3c
800096bc:	e8930300 	ldm	r3, {r8, r9}
800096c0:	e59d3018 	ldr	r3, [sp, #24]
800096c4:	e1981009 	orrs	r1, r8, r9
800096c8:	03a02000 	moveq	r2, #0
800096cc:	13a02001 	movne	r2, #1
800096d0:	e1130002 	tst	r3, r2
800096d4:	159d0018 	ldrne	r0, [sp, #24]
800096d8:	159dc048 	ldrne	ip, [sp, #72]	; 0x48
800096dc:	13a03030 	movne	r3, #48	; 0x30
800096e0:	13800002 	orrne	r0, r0, #2
800096e4:	15cd3104 	strbne	r3, [sp, #260]	; 0x104
800096e8:	15cdc105 	strbne	ip, [sp, #261]	; 0x105
800096ec:	158d0018 	strne	r0, [sp, #24]
800096f0:	13a02001 	movne	r2, #1
800096f4:	e3a03002 	mov	r3, #2
800096f8:	eaffffcd 	b	80009634 <_svfprintf_r+0x6f8>
800096fc:	e59d3018 	ldr	r3, [sp, #24]
80009700:	e3833020 	orr	r3, r3, #32
80009704:	e58d3018 	str	r3, [sp, #24]
80009708:	e5dc3000 	ldrb	r3, [ip]
8000970c:	eafffe57 	b	80009070 <_svfprintf_r+0x134>
80009710:	e5dc3000 	ldrb	r3, [ip]
80009714:	e353006c 	cmp	r3, #108	; 0x6c
80009718:	059d0018 	ldreq	r0, [sp, #24]
8000971c:	159d2018 	ldrne	r2, [sp, #24]
80009720:	03800020 	orreq	r0, r0, #32
80009724:	058d0018 	streq	r0, [sp, #24]
80009728:	13822010 	orrne	r2, r2, #16
8000972c:	05fc3001 	ldrbeq	r3, [ip, #1]!
80009730:	158d2018 	strne	r2, [sp, #24]
80009734:	eafffe4d 	b	80009070 <_svfprintf_r+0x134>
80009738:	e59d1018 	ldr	r1, [sp, #24]
8000973c:	e3110020 	tst	r1, #32
80009740:	e58dc01c 	str	ip, [sp, #28]
80009744:	0a0003c2 	beq	8000a654 <_svfprintf_r+0x1718>
80009748:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
8000974c:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
80009750:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
80009754:	e5923000 	ldr	r3, [r2]
80009758:	e2800004 	add	r0, r0, #4
8000975c:	e1a0100c 	mov	r1, ip
80009760:	e1a02fc1 	asr	r2, r1, #31
80009764:	e8830006 	stm	r3, {r1, r2}
80009768:	e58d003c 	str	r0, [sp, #60]	; 0x3c
8000976c:	eafffe14 	b	80008fc4 <_svfprintf_r+0x88>
80009770:	e59d2018 	ldr	r2, [sp, #24]
80009774:	e58d3048 	str	r3, [sp, #72]	; 0x48
80009778:	e2123020 	ands	r3, r2, #32
8000977c:	e58dc01c 	str	ip, [sp, #28]
80009780:	1affffa1 	bne	8000960c <_svfprintf_r+0x6d0>
80009784:	e59d1018 	ldr	r1, [sp, #24]
80009788:	e2112010 	ands	r2, r1, #16
8000978c:	0a000396 	beq	8000a5ec <_svfprintf_r+0x16b0>
80009790:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
80009794:	e59c2000 	ldr	r2, [ip]
80009798:	e28cc004 	add	ip, ip, #4
8000979c:	e1a08002 	mov	r8, r2
800097a0:	e3a09000 	mov	r9, #0
800097a4:	e2522000 	subs	r2, r2, #0
800097a8:	13a02001 	movne	r2, #1
800097ac:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
800097b0:	eaffff9f 	b	80009634 <_svfprintf_r+0x6f8>
800097b4:	e3530000 	cmp	r3, #0
800097b8:	e58dc01c 	str	ip, [sp, #28]
800097bc:	e58d3048 	str	r3, [sp, #72]	; 0x48
800097c0:	0afffe99 	beq	8000922c <_svfprintf_r+0x2f0>
800097c4:	e3a02000 	mov	r2, #0
800097c8:	e3a0c001 	mov	ip, #1
800097cc:	e3a00000 	mov	r0, #0
800097d0:	e28d10b4 	add	r1, sp, #180	; 0xb4
800097d4:	e58dc020 	str	ip, [sp, #32]
800097d8:	e5cd30b4 	strb	r3, [sp, #180]	; 0xb4
800097dc:	e5cd0107 	strb	r0, [sp, #263]	; 0x107
800097e0:	e58dc034 	str	ip, [sp, #52]	; 0x34
800097e4:	e58d204c 	str	r2, [sp, #76]	; 0x4c
800097e8:	e58d2050 	str	r2, [sp, #80]	; 0x50
800097ec:	e58d1040 	str	r1, [sp, #64]	; 0x40
800097f0:	eaffff09 	b	8000941c <_svfprintf_r+0x4e0>
800097f4:	e5dd3107 	ldrb	r3, [sp, #263]	; 0x107
800097f8:	e3530000 	cmp	r3, #0
800097fc:	15dc3000 	ldrbne	r3, [ip]
80009800:	05cd4107 	strbeq	r4, [sp, #263]	; 0x107
80009804:	05dc3000 	ldrbeq	r3, [ip]
80009808:	eafffe18 	b	80009070 <_svfprintf_r+0x134>
8000980c:	e59d3018 	ldr	r3, [sp, #24]
80009810:	e3833001 	orr	r3, r3, #1
80009814:	e58d3018 	str	r3, [sp, #24]
80009818:	e5dc3000 	ldrb	r3, [ip]
8000981c:	eafffe13 	b	80009070 <_svfprintf_r+0x134>
80009820:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
80009824:	e5900000 	ldr	r0, [r0]
80009828:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
8000982c:	e3500000 	cmp	r0, #0
80009830:	e58d0028 	str	r0, [sp, #40]	; 0x28
80009834:	e2832004 	add	r2, r3, #4
80009838:	bafffe6a 	blt	800091e8 <_svfprintf_r+0x2ac>
8000983c:	e5dc3000 	ldrb	r3, [ip]
80009840:	e58d203c 	str	r2, [sp, #60]	; 0x3c
80009844:	eafffe09 	b	80009070 <_svfprintf_r+0x134>
80009848:	e59d1018 	ldr	r1, [sp, #24]
8000984c:	e3110020 	tst	r1, #32
80009850:	e58dc01c 	str	ip, [sp, #28]
80009854:	e58d3048 	str	r3, [sp, #72]	; 0x48
80009858:	1affff80 	bne	80009660 <_svfprintf_r+0x724>
8000985c:	e59d0018 	ldr	r0, [sp, #24]
80009860:	e3100010 	tst	r0, #16
80009864:	0a000352 	beq	8000a5b4 <_svfprintf_r+0x1678>
80009868:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
8000986c:	e5912000 	ldr	r2, [r1]
80009870:	e2811004 	add	r1, r1, #4
80009874:	e1a08002 	mov	r8, r2
80009878:	e3a09000 	mov	r9, #0
8000987c:	e2522000 	subs	r2, r2, #0
80009880:	e3a03001 	mov	r3, #1
80009884:	13a02001 	movne	r2, #1
80009888:	e58d103c 	str	r1, [sp, #60]	; 0x3c
8000988c:	eaffff68 	b	80009634 <_svfprintf_r+0x6f8>
80009890:	e59d0018 	ldr	r0, [sp, #24]
80009894:	e3100020 	tst	r0, #32
80009898:	e58dc01c 	str	ip, [sp, #28]
8000989c:	e58d3048 	str	r3, [sp, #72]	; 0x48
800098a0:	1afffea1 	bne	8000932c <_svfprintf_r+0x3f0>
800098a4:	e59d3018 	ldr	r3, [sp, #24]
800098a8:	e3130010 	tst	r3, #16
800098ac:	0a000372 	beq	8000a67c <_svfprintf_r+0x1740>
800098b0:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
800098b4:	e59c8000 	ldr	r8, [ip]
800098b8:	e28cc004 	add	ip, ip, #4
800098bc:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
800098c0:	e1a09fc8 	asr	r9, r8, #31
800098c4:	eafffe9e 	b	80009344 <_svfprintf_r+0x408>
800098c8:	e59d3018 	ldr	r3, [sp, #24]
800098cc:	e3833040 	orr	r3, r3, #64	; 0x40
800098d0:	e58d3018 	str	r3, [sp, #24]
800098d4:	e5dc3000 	ldrb	r3, [ip]
800098d8:	eafffde4 	b	80009070 <_svfprintf_r+0x134>
800098dc:	e58d3048 	str	r3, [sp, #72]	; 0x48
800098e0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
800098e4:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
800098e8:	e5933000 	ldr	r3, [r3]
800098ec:	e3a02000 	mov	r2, #0
800098f0:	e58dc01c 	str	ip, [sp, #28]
800098f4:	e2800004 	add	r0, r0, #4
800098f8:	e3a0c001 	mov	ip, #1
800098fc:	e5cd30b4 	strb	r3, [sp, #180]	; 0xb4
80009900:	e3a01000 	mov	r1, #0
80009904:	e28d30b4 	add	r3, sp, #180	; 0xb4
80009908:	e58dc020 	str	ip, [sp, #32]
8000990c:	e58d003c 	str	r0, [sp, #60]	; 0x3c
80009910:	e5cd1107 	strb	r1, [sp, #263]	; 0x107
80009914:	e58dc034 	str	ip, [sp, #52]	; 0x34
80009918:	e58d204c 	str	r2, [sp, #76]	; 0x4c
8000991c:	e58d2050 	str	r2, [sp, #80]	; 0x50
80009920:	e58d3040 	str	r3, [sp, #64]	; 0x40
80009924:	eafffebc 	b	8000941c <_svfprintf_r+0x4e0>
80009928:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
8000992c:	e58dc01c 	str	ip, [sp, #28]
80009930:	e5932000 	ldr	r2, [r3]
80009934:	e59dc018 	ldr	ip, [sp, #24]
80009938:	e2833004 	add	r3, r3, #4
8000993c:	e59f0a88 	ldr	r0, [pc, #2696]	; 8000a3cc <_svfprintf_r+0x1490>
80009940:	e3a01078 	mov	r1, #120	; 0x78
80009944:	e58d303c 	str	r3, [sp, #60]	; 0x3c
80009948:	e38cc002 	orr	ip, ip, #2
8000994c:	e3a03030 	mov	r3, #48	; 0x30
80009950:	e1a08002 	mov	r8, r2
80009954:	e3a09000 	mov	r9, #0
80009958:	e2522000 	subs	r2, r2, #0
8000995c:	e5cd3104 	strb	r3, [sp, #260]	; 0x104
80009960:	e58dc018 	str	ip, [sp, #24]
80009964:	e5cd1105 	strb	r1, [sp, #261]	; 0x105
80009968:	13a02001 	movne	r2, #1
8000996c:	e58d0068 	str	r0, [sp, #104]	; 0x68
80009970:	e3a03002 	mov	r3, #2
80009974:	e58d1048 	str	r1, [sp, #72]	; 0x48
80009978:	eaffff2d 	b	80009634 <_svfprintf_r+0x6f8>
8000997c:	e3a01000 	mov	r1, #0
80009980:	e5cd1107 	strb	r1, [sp, #263]	; 0x107
80009984:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
80009988:	e5922000 	ldr	r2, [r2]
8000998c:	e58d3048 	str	r3, [sp, #72]	; 0x48
80009990:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
80009994:	e3520000 	cmp	r2, #0
80009998:	e58dc01c 	str	ip, [sp, #28]
8000999c:	e58d2040 	str	r2, [sp, #64]	; 0x40
800099a0:	e2834004 	add	r4, r3, #4
800099a4:	0a000536 	beq	8000ae84 <_svfprintf_r+0x1f48>
800099a8:	e3550000 	cmp	r5, #0
800099ac:	ba00050e 	blt	8000adec <_svfprintf_r+0x1eb0>
800099b0:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
800099b4:	e3a01000 	mov	r1, #0
800099b8:	e1a02005 	mov	r2, r5
800099bc:	eb000d98 	bl	8000d024 <memchr>
800099c0:	e3500000 	cmp	r0, #0
800099c4:	0a00056b 	beq	8000af78 <_svfprintf_r+0x203c>
800099c8:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
800099cc:	e0620000 	rsb	r0, r2, r0
800099d0:	e1500005 	cmp	r0, r5
800099d4:	e58d0034 	str	r0, [sp, #52]	; 0x34
800099d8:	da0003e2 	ble	8000a968 <_svfprintf_r+0x1a2c>
800099dc:	e3a03000 	mov	r3, #0
800099e0:	e1c5cfc5 	bic	ip, r5, r5, asr #31
800099e4:	e58d304c 	str	r3, [sp, #76]	; 0x4c
800099e8:	e58dc020 	str	ip, [sp, #32]
800099ec:	e5dd2107 	ldrb	r2, [sp, #263]	; 0x107
800099f0:	e58d403c 	str	r4, [sp, #60]	; 0x3c
800099f4:	e58d5034 	str	r5, [sp, #52]	; 0x34
800099f8:	e58d3050 	str	r3, [sp, #80]	; 0x50
800099fc:	eafffe81 	b	80009408 <_svfprintf_r+0x4cc>
80009a00:	e58d3048 	str	r3, [sp, #72]	; 0x48
80009a04:	e59d3018 	ldr	r3, [sp, #24]
80009a08:	e59f19bc 	ldr	r1, [pc, #2492]	; 8000a3cc <_svfprintf_r+0x1490>
80009a0c:	e3130020 	tst	r3, #32
80009a10:	e58dc01c 	str	ip, [sp, #28]
80009a14:	e58d1068 	str	r1, [sp, #104]	; 0x68
80009a18:	1affff22 	bne	800096a8 <_svfprintf_r+0x76c>
80009a1c:	e59d1018 	ldr	r1, [sp, #24]
80009a20:	e3110010 	tst	r1, #16
80009a24:	0a0002fe 	beq	8000a624 <_svfprintf_r+0x16e8>
80009a28:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
80009a2c:	e5928000 	ldr	r8, [r2]
80009a30:	e2822004 	add	r2, r2, #4
80009a34:	e58d203c 	str	r2, [sp, #60]	; 0x3c
80009a38:	e3a09000 	mov	r9, #0
80009a3c:	eaffff1f 	b	800096c0 <_svfprintf_r+0x784>
80009a40:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
80009a44:	e3520000 	cmp	r2, #0
80009a48:	0a00000c 	beq	80009a80 <_svfprintf_r+0xb44>
80009a4c:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009a50:	e28d3f41 	add	r3, sp, #260	; 0x104
80009a54:	e2844001 	add	r4, r4, #1
80009a58:	e2833003 	add	r3, r3, #3
80009a5c:	e5863000 	str	r3, [r6]
80009a60:	e2855001 	add	r5, r5, #1
80009a64:	e3540007 	cmp	r4, #7
80009a68:	e3a03001 	mov	r3, #1
80009a6c:	e5863004 	str	r3, [r6, #4]
80009a70:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009a74:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009a78:	d2866008 	addle	r6, r6, #8
80009a7c:	ca00019f 	bgt	8000a100 <_svfprintf_r+0x11c4>
80009a80:	e35b0000 	cmp	fp, #0
80009a84:	0a00000b 	beq	80009ab8 <_svfprintf_r+0xb7c>
80009a88:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009a8c:	e28d3f41 	add	r3, sp, #260	; 0x104
80009a90:	e2844001 	add	r4, r4, #1
80009a94:	e5863000 	str	r3, [r6]
80009a98:	e2855002 	add	r5, r5, #2
80009a9c:	e3540007 	cmp	r4, #7
80009aa0:	e3a03002 	mov	r3, #2
80009aa4:	e5863004 	str	r3, [r6, #4]
80009aa8:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009aac:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009ab0:	d2866008 	addle	r6, r6, #8
80009ab4:	ca00019a 	bgt	8000a124 <_svfprintf_r+0x11e8>
80009ab8:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
80009abc:	e3500080 	cmp	r0, #128	; 0x80
80009ac0:	0a000102 	beq	80009ed0 <_svfprintf_r+0xf94>
80009ac4:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
80009ac8:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
80009acc:	e06c8003 	rsb	r8, ip, r3
80009ad0:	e3580000 	cmp	r8, #0
80009ad4:	da00013b 	ble	80009fc8 <_svfprintf_r+0x108c>
80009ad8:	e3580010 	cmp	r8, #16
80009adc:	da000352 	ble	8000a82c <_svfprintf_r+0x18f0>
80009ae0:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009ae4:	e59fa8fc 	ldr	sl, [pc, #2300]	; 8000a3e8 <_svfprintf_r+0x14ac>
80009ae8:	e1a03004 	mov	r3, r4
80009aec:	e3a0b010 	mov	fp, #16
80009af0:	e59d9038 	ldr	r9, [sp, #56]	; 0x38
80009af4:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
80009af8:	ea000002 	b	80009b08 <_svfprintf_r+0xbcc>
80009afc:	e2488010 	sub	r8, r8, #16
80009b00:	e3580010 	cmp	r8, #16
80009b04:	da000015 	ble	80009b60 <_svfprintf_r+0xc24>
80009b08:	e2833001 	add	r3, r3, #1
80009b0c:	e3530007 	cmp	r3, #7
80009b10:	e8860c00 	stm	r6, {sl, fp}
80009b14:	e2855010 	add	r5, r5, #16
80009b18:	d2866008 	addle	r6, r6, #8
80009b1c:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009b20:	e58d30e0 	str	r3, [sp, #224]	; 0xe0
80009b24:	d2862008 	addle	r2, r6, #8
80009b28:	dafffff3 	ble	80009afc <_svfprintf_r+0xbc0>
80009b2c:	e1a00009 	mov	r0, r9
80009b30:	e1a01004 	mov	r1, r4
80009b34:	e28d20dc 	add	r2, sp, #220	; 0xdc
80009b38:	eb001192 	bl	8000e188 <__ssprint_r>
80009b3c:	e3500000 	cmp	r0, #0
80009b40:	1afffdbf 	bne	80009244 <_svfprintf_r+0x308>
80009b44:	e2488010 	sub	r8, r8, #16
80009b48:	e3580010 	cmp	r8, #16
80009b4c:	e28d30e0 	add	r3, sp, #224	; 0xe0
80009b50:	e8930028 	ldm	r3, {r3, r5}
80009b54:	e2872008 	add	r2, r7, #8
80009b58:	e1a06007 	mov	r6, r7
80009b5c:	caffffe9 	bgt	80009b08 <_svfprintf_r+0xbcc>
80009b60:	e1a09002 	mov	r9, r2
80009b64:	e1a04003 	mov	r4, r3
80009b68:	e2844001 	add	r4, r4, #1
80009b6c:	e0855008 	add	r5, r5, r8
80009b70:	e3540007 	cmp	r4, #7
80009b74:	e586a000 	str	sl, [r6]
80009b78:	e5868004 	str	r8, [r6, #4]
80009b7c:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009b80:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009b84:	ca000154 	bgt	8000a0dc <_svfprintf_r+0x11a0>
80009b88:	e59d0018 	ldr	r0, [sp, #24]
80009b8c:	e3100c01 	tst	r0, #256	; 0x100
80009b90:	1a000075 	bne	80009d6c <_svfprintf_r+0xe30>
80009b94:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009b98:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
80009b9c:	e2844001 	add	r4, r4, #1
80009ba0:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
80009ba4:	e0855001 	add	r5, r5, r1
80009ba8:	e3540007 	cmp	r4, #7
80009bac:	e5892000 	str	r2, [r9]
80009bb0:	e5891004 	str	r1, [r9, #4]
80009bb4:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009bb8:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009bbc:	ca000061 	bgt	80009d48 <_svfprintf_r+0xe0c>
80009bc0:	e2899008 	add	r9, r9, #8
80009bc4:	e59d3018 	ldr	r3, [sp, #24]
80009bc8:	e3130004 	tst	r3, #4
80009bcc:	0a000037 	beq	80009cb0 <_svfprintf_r+0xd74>
80009bd0:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
80009bd4:	e59d0020 	ldr	r0, [sp, #32]
80009bd8:	e060600c 	rsb	r6, r0, ip
80009bdc:	e3560000 	cmp	r6, #0
80009be0:	da000032 	ble	80009cb0 <_svfprintf_r+0xd74>
80009be4:	e3560010 	cmp	r6, #16
80009be8:	d59d40e0 	ldrle	r4, [sp, #224]	; 0xe0
80009bec:	d59fa7c8 	ldrle	sl, [pc, #1992]	; 8000a3bc <_svfprintf_r+0x1480>
80009bf0:	da00001f 	ble	80009c74 <_svfprintf_r+0xd38>
80009bf4:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009bf8:	e59fa7bc 	ldr	sl, [pc, #1980]	; 8000a3bc <_svfprintf_r+0x1480>
80009bfc:	e1a03004 	mov	r3, r4
80009c00:	e3a08010 	mov	r8, #16
80009c04:	e59db038 	ldr	fp, [sp, #56]	; 0x38
80009c08:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
80009c0c:	ea000002 	b	80009c1c <_svfprintf_r+0xce0>
80009c10:	e2466010 	sub	r6, r6, #16
80009c14:	e3560010 	cmp	r6, #16
80009c18:	da000014 	ble	80009c70 <_svfprintf_r+0xd34>
80009c1c:	e2833001 	add	r3, r3, #1
80009c20:	e3530007 	cmp	r3, #7
80009c24:	e2855010 	add	r5, r5, #16
80009c28:	e589a000 	str	sl, [r9]
80009c2c:	e5898004 	str	r8, [r9, #4]
80009c30:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009c34:	e58d30e0 	str	r3, [sp, #224]	; 0xe0
80009c38:	d2899008 	addle	r9, r9, #8
80009c3c:	dafffff3 	ble	80009c10 <_svfprintf_r+0xcd4>
80009c40:	e1a0000b 	mov	r0, fp
80009c44:	e1a01004 	mov	r1, r4
80009c48:	e28d20dc 	add	r2, sp, #220	; 0xdc
80009c4c:	eb00114d 	bl	8000e188 <__ssprint_r>
80009c50:	e3500000 	cmp	r0, #0
80009c54:	1afffd7a 	bne	80009244 <_svfprintf_r+0x308>
80009c58:	e2466010 	sub	r6, r6, #16
80009c5c:	e3560010 	cmp	r6, #16
80009c60:	e28d30e0 	add	r3, sp, #224	; 0xe0
80009c64:	e8930028 	ldm	r3, {r3, r5}
80009c68:	e1a09007 	mov	r9, r7
80009c6c:	caffffea 	bgt	80009c1c <_svfprintf_r+0xce0>
80009c70:	e1a04003 	mov	r4, r3
80009c74:	e2844001 	add	r4, r4, #1
80009c78:	e0865005 	add	r5, r6, r5
80009c7c:	e3540007 	cmp	r4, #7
80009c80:	e589a000 	str	sl, [r9]
80009c84:	e5896004 	str	r6, [r9, #4]
80009c88:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009c8c:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009c90:	da000006 	ble	80009cb0 <_svfprintf_r+0xd74>
80009c94:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
80009c98:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
80009c9c:	e28d20dc 	add	r2, sp, #220	; 0xdc
80009ca0:	eb001138 	bl	8000e188 <__ssprint_r>
80009ca4:	e3500000 	cmp	r0, #0
80009ca8:	1afffd65 	bne	80009244 <_svfprintf_r+0x308>
80009cac:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
80009cb0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
80009cb4:	e59d2020 	ldr	r2, [sp, #32]
80009cb8:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
80009cbc:	e1520003 	cmp	r2, r3
80009cc0:	a0811002 	addge	r1, r1, r2
80009cc4:	b0811003 	addlt	r1, r1, r3
80009cc8:	e3550000 	cmp	r5, #0
80009ccc:	e58d1030 	str	r1, [sp, #48]	; 0x30
80009cd0:	1a0000f6 	bne	8000a0b0 <_svfprintf_r+0x1174>
80009cd4:	e3a0c000 	mov	ip, #0
80009cd8:	e58dc0e0 	str	ip, [sp, #224]	; 0xe0
80009cdc:	e1a06007 	mov	r6, r7
80009ce0:	eafffcb7 	b	80008fc4 <_svfprintf_r+0x88>
80009ce4:	e59d2018 	ldr	r2, [sp, #24]
80009ce8:	e3120001 	tst	r2, #1
80009cec:	1a0000ba 	bne	80009fdc <_svfprintf_r+0x10a0>
80009cf0:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009cf4:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
80009cf8:	e2844001 	add	r4, r4, #1
80009cfc:	e2855001 	add	r5, r5, #1
80009d00:	e3a03001 	mov	r3, #1
80009d04:	e3540007 	cmp	r4, #7
80009d08:	e889000a 	stm	r9, {r1, r3}
80009d0c:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009d10:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009d14:	ca0003ff 	bgt	8000ad18 <_svfprintf_r+0x1ddc>
80009d18:	e289b008 	add	fp, r9, #8
80009d1c:	e28b9008 	add	r9, fp, #8
80009d20:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
80009d24:	e2844001 	add	r4, r4, #1
80009d28:	e0855002 	add	r5, r5, r2
80009d2c:	e28d30f0 	add	r3, sp, #240	; 0xf0
80009d30:	e3540007 	cmp	r4, #7
80009d34:	e58b3000 	str	r3, [fp]
80009d38:	e58b2004 	str	r2, [fp, #4]
80009d3c:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009d40:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009d44:	daffff9e 	ble	80009bc4 <_svfprintf_r+0xc88>
80009d48:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
80009d4c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
80009d50:	e28d20dc 	add	r2, sp, #220	; 0xdc
80009d54:	eb00110b 	bl	8000e188 <__ssprint_r>
80009d58:	e3500000 	cmp	r0, #0
80009d5c:	1afffd38 	bne	80009244 <_svfprintf_r+0x308>
80009d60:	e1a09007 	mov	r9, r7
80009d64:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
80009d68:	eaffff95 	b	80009bc4 <_svfprintf_r+0xc88>
80009d6c:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
80009d70:	e3530065 	cmp	r3, #101	; 0x65
80009d74:	da000095 	ble	80009fd0 <_svfprintf_r+0x1094>
80009d78:	e28d0058 	add	r0, sp, #88	; 0x58
80009d7c:	e8900003 	ldm	r0, {r0, r1}
80009d80:	e3a02000 	mov	r2, #0
80009d84:	e3a03000 	mov	r3, #0
80009d88:	eb001b11 	bl	800109d4 <__aeabi_dcmpeq>
80009d8c:	e3500000 	cmp	r0, #0
80009d90:	0a0000ec 	beq	8000a148 <_svfprintf_r+0x120c>
80009d94:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009d98:	e59f3638 	ldr	r3, [pc, #1592]	; 8000a3d8 <_svfprintf_r+0x149c>
80009d9c:	e2844001 	add	r4, r4, #1
80009da0:	e5893000 	str	r3, [r9]
80009da4:	e2855001 	add	r5, r5, #1
80009da8:	e3540007 	cmp	r4, #7
80009dac:	e3a03001 	mov	r3, #1
80009db0:	e5893004 	str	r3, [r9, #4]
80009db4:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009db8:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009dbc:	d2899008 	addle	r9, r9, #8
80009dc0:	ca00029d 	bgt	8000a83c <_svfprintf_r+0x1900>
80009dc4:	e59d3100 	ldr	r3, [sp, #256]	; 0x100
80009dc8:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
80009dcc:	e153000c 	cmp	r3, ip
80009dd0:	ba000002 	blt	80009de0 <_svfprintf_r+0xea4>
80009dd4:	e59d0018 	ldr	r0, [sp, #24]
80009dd8:	e3100001 	tst	r0, #1
80009ddc:	0affff78 	beq	80009bc4 <_svfprintf_r+0xc88>
80009de0:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009de4:	e59d1060 	ldr	r1, [sp, #96]	; 0x60
80009de8:	e2844001 	add	r4, r4, #1
80009dec:	e59d2054 	ldr	r2, [sp, #84]	; 0x54
80009df0:	e0855001 	add	r5, r5, r1
80009df4:	e3540007 	cmp	r4, #7
80009df8:	e5892000 	str	r2, [r9]
80009dfc:	e5891004 	str	r1, [r9, #4]
80009e00:	d2893008 	addle	r3, r9, #8
80009e04:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009e08:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009e0c:	ca00037f 	bgt	8000ac10 <_svfprintf_r+0x1cd4>
80009e10:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
80009e14:	e24c6001 	sub	r6, ip, #1
80009e18:	e3560000 	cmp	r6, #0
80009e1c:	da000280 	ble	8000a824 <_svfprintf_r+0x18e8>
80009e20:	e3560010 	cmp	r6, #16
80009e24:	da00046a 	ble	8000afd4 <_svfprintf_r+0x2098>
80009e28:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009e2c:	e59fa5b4 	ldr	sl, [pc, #1460]	; 8000a3e8 <_svfprintf_r+0x14ac>
80009e30:	e3a08010 	mov	r8, #16
80009e34:	e59db038 	ldr	fp, [sp, #56]	; 0x38
80009e38:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
80009e3c:	ea000002 	b	80009e4c <_svfprintf_r+0xf10>
80009e40:	e2466010 	sub	r6, r6, #16
80009e44:	e3560010 	cmp	r6, #16
80009e48:	da000167 	ble	8000a3ec <_svfprintf_r+0x14b0>
80009e4c:	e2844001 	add	r4, r4, #1
80009e50:	e3540007 	cmp	r4, #7
80009e54:	e583a000 	str	sl, [r3]
80009e58:	e5838004 	str	r8, [r3, #4]
80009e5c:	e2855010 	add	r5, r5, #16
80009e60:	d2833008 	addle	r3, r3, #8
80009e64:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009e68:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009e6c:	d2832008 	addle	r2, r3, #8
80009e70:	dafffff2 	ble	80009e40 <_svfprintf_r+0xf04>
80009e74:	e1a0000b 	mov	r0, fp
80009e78:	e1a01009 	mov	r1, r9
80009e7c:	e28d20dc 	add	r2, sp, #220	; 0xdc
80009e80:	eb0010c0 	bl	8000e188 <__ssprint_r>
80009e84:	e3500000 	cmp	r0, #0
80009e88:	1afffced 	bne	80009244 <_svfprintf_r+0x308>
80009e8c:	e28d40e0 	add	r4, sp, #224	; 0xe0
80009e90:	e8940030 	ldm	r4, {r4, r5}
80009e94:	e2872008 	add	r2, r7, #8
80009e98:	e1a03007 	mov	r3, r7
80009e9c:	eaffffe7 	b	80009e40 <_svfprintf_r+0xf04>
80009ea0:	e3530000 	cmp	r3, #0
80009ea4:	1a000088 	bne	8000a0cc <_svfprintf_r+0x1190>
80009ea8:	e59d1018 	ldr	r1, [sp, #24]
80009eac:	e3110001 	tst	r1, #1
80009eb0:	0a0000e0 	beq	8000a238 <_svfprintf_r+0x12fc>
80009eb4:	e3a03030 	mov	r3, #48	; 0x30
80009eb8:	e5cd30db 	strb	r3, [sp, #219]	; 0xdb
80009ebc:	e3a02001 	mov	r2, #1
80009ec0:	e28d30db 	add	r3, sp, #219	; 0xdb
80009ec4:	e58d2034 	str	r2, [sp, #52]	; 0x34
80009ec8:	e58d3040 	str	r3, [sp, #64]	; 0x40
80009ecc:	eafffd45 	b	800093e8 <_svfprintf_r+0x4ac>
80009ed0:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
80009ed4:	e59d2020 	ldr	r2, [sp, #32]
80009ed8:	e0628001 	rsb	r8, r2, r1
80009edc:	e3580000 	cmp	r8, #0
80009ee0:	dafffef7 	ble	80009ac4 <_svfprintf_r+0xb88>
80009ee4:	e3580010 	cmp	r8, #16
80009ee8:	da000413 	ble	8000af3c <_svfprintf_r+0x2000>
80009eec:	e1a03006 	mov	r3, r6
80009ef0:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009ef4:	e59fa4ec 	ldr	sl, [pc, #1260]	; 8000a3e8 <_svfprintf_r+0x14ac>
80009ef8:	e3a09010 	mov	r9, #16
80009efc:	e59db038 	ldr	fp, [sp, #56]	; 0x38
80009f00:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
80009f04:	ea000002 	b	80009f14 <_svfprintf_r+0xfd8>
80009f08:	e2488010 	sub	r8, r8, #16
80009f0c:	e3580010 	cmp	r8, #16
80009f10:	da000016 	ble	80009f70 <_svfprintf_r+0x1034>
80009f14:	e2844001 	add	r4, r4, #1
80009f18:	e3540007 	cmp	r4, #7
80009f1c:	e583a000 	str	sl, [r3]
80009f20:	e5839004 	str	r9, [r3, #4]
80009f24:	e2855010 	add	r5, r5, #16
80009f28:	d2833008 	addle	r3, r3, #8
80009f2c:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009f30:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009f34:	d2832008 	addle	r2, r3, #8
80009f38:	dafffff2 	ble	80009f08 <_svfprintf_r+0xfcc>
80009f3c:	e1a0000b 	mov	r0, fp
80009f40:	e1a01006 	mov	r1, r6
80009f44:	e28d20dc 	add	r2, sp, #220	; 0xdc
80009f48:	eb00108e 	bl	8000e188 <__ssprint_r>
80009f4c:	e3500000 	cmp	r0, #0
80009f50:	1afffcbb 	bne	80009244 <_svfprintf_r+0x308>
80009f54:	e2488010 	sub	r8, r8, #16
80009f58:	e3580010 	cmp	r8, #16
80009f5c:	e28d40e0 	add	r4, sp, #224	; 0xe0
80009f60:	e8940030 	ldm	r4, {r4, r5}
80009f64:	e2872008 	add	r2, r7, #8
80009f68:	e1a03007 	mov	r3, r7
80009f6c:	caffffe8 	bgt	80009f14 <_svfprintf_r+0xfd8>
80009f70:	e1a06002 	mov	r6, r2
80009f74:	e2844001 	add	r4, r4, #1
80009f78:	e0855008 	add	r5, r5, r8
80009f7c:	e3540007 	cmp	r4, #7
80009f80:	e583a000 	str	sl, [r3]
80009f84:	e5838004 	str	r8, [r3, #4]
80009f88:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
80009f8c:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
80009f90:	dafffecb 	ble	80009ac4 <_svfprintf_r+0xb88>
80009f94:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
80009f98:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
80009f9c:	e28d20dc 	add	r2, sp, #220	; 0xdc
80009fa0:	eb001078 	bl	8000e188 <__ssprint_r>
80009fa4:	e3500000 	cmp	r0, #0
80009fa8:	1afffca5 	bne	80009244 <_svfprintf_r+0x308>
80009fac:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
80009fb0:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
80009fb4:	e06c8003 	rsb	r8, ip, r3
80009fb8:	e3580000 	cmp	r8, #0
80009fbc:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
80009fc0:	e1a06007 	mov	r6, r7
80009fc4:	cafffec3 	bgt	80009ad8 <_svfprintf_r+0xb9c>
80009fc8:	e1a09006 	mov	r9, r6
80009fcc:	eafffeed 	b	80009b88 <_svfprintf_r+0xc4c>
80009fd0:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
80009fd4:	e3510001 	cmp	r1, #1
80009fd8:	daffff41 	ble	80009ce4 <_svfprintf_r+0xda8>
80009fdc:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
80009fe0:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
80009fe4:	e2844001 	add	r4, r4, #1
80009fe8:	e5893000 	str	r3, [r9]
80009fec:	e3540007 	cmp	r4, #7
80009ff0:	e3a03001 	mov	r3, #1
80009ff4:	e5893004 	str	r3, [r9, #4]
80009ff8:	e2855001 	add	r5, r5, #1
80009ffc:	d2899008 	addle	r9, r9, #8
8000a000:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a004:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a008:	d2896008 	addle	r6, r9, #8
8000a00c:	ca00010b 	bgt	8000a440 <_svfprintf_r+0x1504>
8000a010:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
8000a014:	e2844001 	add	r4, r4, #1
8000a018:	e59d0054 	ldr	r0, [sp, #84]	; 0x54
8000a01c:	e085500c 	add	r5, r5, ip
8000a020:	e3540007 	cmp	r4, #7
8000a024:	e8891001 	stm	r9, {r0, ip}
8000a028:	d286b008 	addle	fp, r6, #8
8000a02c:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a030:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a034:	ca0000f6 	bgt	8000a414 <_svfprintf_r+0x14d8>
8000a038:	e28d0058 	add	r0, sp, #88	; 0x58
8000a03c:	e8900003 	ldm	r0, {r0, r1}
8000a040:	e3a02000 	mov	r2, #0
8000a044:	e3a03000 	mov	r3, #0
8000a048:	eb001a61 	bl	800109d4 <__aeabi_dcmpeq>
8000a04c:	e3500000 	cmp	r0, #0
8000a050:	1a0000a5 	bne	8000a2ec <_svfprintf_r+0x13b0>
8000a054:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
8000a058:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
8000a05c:	e2412001 	sub	r2, r1, #1
8000a060:	e2844001 	add	r4, r4, #1
8000a064:	e28c3001 	add	r3, ip, #1
8000a068:	e0855002 	add	r5, r5, r2
8000a06c:	e3540007 	cmp	r4, #7
8000a070:	e5863000 	str	r3, [r6]
8000a074:	e5862004 	str	r2, [r6, #4]
8000a078:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a07c:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a080:	daffff25 	ble	80009d1c <_svfprintf_r+0xde0>
8000a084:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a088:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a08c:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a090:	eb00103c 	bl	8000e188 <__ssprint_r>
8000a094:	e3500000 	cmp	r0, #0
8000a098:	1afffc69 	bne	80009244 <_svfprintf_r+0x308>
8000a09c:	e2879008 	add	r9, r7, #8
8000a0a0:	e1a0b007 	mov	fp, r7
8000a0a4:	e28d40e0 	add	r4, sp, #224	; 0xe0
8000a0a8:	e8940030 	ldm	r4, {r4, r5}
8000a0ac:	eaffff1b 	b	80009d20 <_svfprintf_r+0xde4>
8000a0b0:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a0b4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a0b8:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a0bc:	eb001031 	bl	8000e188 <__ssprint_r>
8000a0c0:	e3500000 	cmp	r0, #0
8000a0c4:	0affff02 	beq	80009cd4 <_svfprintf_r+0xd98>
8000a0c8:	eafffc5d 	b	80009244 <_svfprintf_r+0x308>
8000a0cc:	e28dc0dc 	add	ip, sp, #220	; 0xdc
8000a0d0:	e58d2034 	str	r2, [sp, #52]	; 0x34
8000a0d4:	e58dc040 	str	ip, [sp, #64]	; 0x40
8000a0d8:	eafffcc2 	b	800093e8 <_svfprintf_r+0x4ac>
8000a0dc:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a0e0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a0e4:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a0e8:	eb001026 	bl	8000e188 <__ssprint_r>
8000a0ec:	e3500000 	cmp	r0, #0
8000a0f0:	1afffc53 	bne	80009244 <_svfprintf_r+0x308>
8000a0f4:	e1a09007 	mov	r9, r7
8000a0f8:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000a0fc:	eafffea1 	b	80009b88 <_svfprintf_r+0xc4c>
8000a100:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a104:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a108:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a10c:	eb00101d 	bl	8000e188 <__ssprint_r>
8000a110:	e3500000 	cmp	r0, #0
8000a114:	1afffc4a 	bne	80009244 <_svfprintf_r+0x308>
8000a118:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000a11c:	e1a06007 	mov	r6, r7
8000a120:	eafffe56 	b	80009a80 <_svfprintf_r+0xb44>
8000a124:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a128:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a12c:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a130:	eb001014 	bl	8000e188 <__ssprint_r>
8000a134:	e3500000 	cmp	r0, #0
8000a138:	1afffc41 	bne	80009244 <_svfprintf_r+0x308>
8000a13c:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000a140:	e1a06007 	mov	r6, r7
8000a144:	eafffe5b 	b	80009ab8 <_svfprintf_r+0xb7c>
8000a148:	e59d6100 	ldr	r6, [sp, #256]	; 0x100
8000a14c:	e3560000 	cmp	r6, #0
8000a150:	da0001c2 	ble	8000a860 <_svfprintf_r+0x1924>
8000a154:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
8000a158:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
8000a15c:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
8000a160:	e1560001 	cmp	r6, r1
8000a164:	a1a06001 	movge	r6, r1
8000a168:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
8000a16c:	e3560000 	cmp	r6, #0
8000a170:	e082b003 	add	fp, r2, r3
8000a174:	da000008 	ble	8000a19c <_svfprintf_r+0x1260>
8000a178:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000a17c:	e2844001 	add	r4, r4, #1
8000a180:	e0855006 	add	r5, r5, r6
8000a184:	e3540007 	cmp	r4, #7
8000a188:	e8890044 	stm	r9, {r2, r6}
8000a18c:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a190:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a194:	d2899008 	addle	r9, r9, #8
8000a198:	ca000324 	bgt	8000ae30 <_svfprintf_r+0x1ef4>
8000a19c:	e59dc050 	ldr	ip, [sp, #80]	; 0x50
8000a1a0:	e1c66fc6 	bic	r6, r6, r6, asr #31
8000a1a4:	e066600c 	rsb	r6, r6, ip
8000a1a8:	e3560000 	cmp	r6, #0
8000a1ac:	da00030c 	ble	8000ade4 <_svfprintf_r+0x1ea8>
8000a1b0:	e3560010 	cmp	r6, #16
8000a1b4:	da00038f 	ble	8000aff8 <_svfprintf_r+0x20bc>
8000a1b8:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000a1bc:	e1a01005 	mov	r1, r5
8000a1c0:	e1a02004 	mov	r2, r4
8000a1c4:	e59fa21c 	ldr	sl, [pc, #540]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000a1c8:	e3a08010 	mov	r8, #16
8000a1cc:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
8000a1d0:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
8000a1d4:	ea000002 	b	8000a1e4 <_svfprintf_r+0x12a8>
8000a1d8:	e2466010 	sub	r6, r6, #16
8000a1dc:	e3560010 	cmp	r6, #16
8000a1e0:	da000131 	ble	8000a6ac <_svfprintf_r+0x1770>
8000a1e4:	e2822001 	add	r2, r2, #1
8000a1e8:	e3520007 	cmp	r2, #7
8000a1ec:	e589a000 	str	sl, [r9]
8000a1f0:	e5898004 	str	r8, [r9, #4]
8000a1f4:	e2811010 	add	r1, r1, #16
8000a1f8:	d2899008 	addle	r9, r9, #8
8000a1fc:	e58d10e4 	str	r1, [sp, #228]	; 0xe4
8000a200:	e58d20e0 	str	r2, [sp, #224]	; 0xe0
8000a204:	d2893008 	addle	r3, r9, #8
8000a208:	dafffff2 	ble	8000a1d8 <_svfprintf_r+0x129c>
8000a20c:	e1a00004 	mov	r0, r4
8000a210:	e1a01005 	mov	r1, r5
8000a214:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a218:	eb000fda 	bl	8000e188 <__ssprint_r>
8000a21c:	e3500000 	cmp	r0, #0
8000a220:	1afffc07 	bne	80009244 <_svfprintf_r+0x308>
8000a224:	e59d10e4 	ldr	r1, [sp, #228]	; 0xe4
8000a228:	e59d20e0 	ldr	r2, [sp, #224]	; 0xe0
8000a22c:	e2873008 	add	r3, r7, #8
8000a230:	e1a09007 	mov	r9, r7
8000a234:	eaffffe7 	b	8000a1d8 <_svfprintf_r+0x129c>
8000a238:	e28d00dc 	add	r0, sp, #220	; 0xdc
8000a23c:	e58d3034 	str	r3, [sp, #52]	; 0x34
8000a240:	e58d0040 	str	r0, [sp, #64]	; 0x40
8000a244:	eafffc67 	b	800093e8 <_svfprintf_r+0x4ac>
8000a248:	e28dc0b4 	add	ip, sp, #180	; 0xb4
8000a24c:	e59da068 	ldr	sl, [sp, #104]	; 0x68
8000a250:	e28c1027 	add	r1, ip, #39	; 0x27
8000a254:	e1a02229 	lsr	r2, r9, #4
8000a258:	e1a00228 	lsr	r0, r8, #4
8000a25c:	e1800e09 	orr	r0, r0, r9, lsl #28
8000a260:	e208800f 	and	r8, r8, #15
8000a264:	e1a04002 	mov	r4, r2
8000a268:	e1a09004 	mov	r9, r4
8000a26c:	e7da2008 	ldrb	r2, [sl, r8]
8000a270:	e1a08000 	mov	r8, r0
8000a274:	e1980009 	orrs	r0, r8, r9
8000a278:	e1a03001 	mov	r3, r1
8000a27c:	e5c12000 	strb	r2, [r1]
8000a280:	e2411001 	sub	r1, r1, #1
8000a284:	1afffff2 	bne	8000a254 <_svfprintf_r+0x1318>
8000a288:	e28cc028 	add	ip, ip, #40	; 0x28
8000a28c:	e063c00c 	rsb	ip, r3, ip
8000a290:	e58d3040 	str	r3, [sp, #64]	; 0x40
8000a294:	e58dc034 	str	ip, [sp, #52]	; 0x34
8000a298:	eafffc52 	b	800093e8 <_svfprintf_r+0x4ac>
8000a29c:	e3590000 	cmp	r9, #0
8000a2a0:	03580009 	cmpeq	r8, #9
8000a2a4:	8a000070 	bhi	8000a46c <_svfprintf_r+0x1530>
8000a2a8:	e2888030 	add	r8, r8, #48	; 0x30
8000a2ac:	e3a0c001 	mov	ip, #1
8000a2b0:	e28d00db 	add	r0, sp, #219	; 0xdb
8000a2b4:	e5cd80db 	strb	r8, [sp, #219]	; 0xdb
8000a2b8:	e58dc034 	str	ip, [sp, #52]	; 0x34
8000a2bc:	e58d0040 	str	r0, [sp, #64]	; 0x40
8000a2c0:	eafffc48 	b	800093e8 <_svfprintf_r+0x4ac>
8000a2c4:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a2c8:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a2cc:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a2d0:	eb000fac 	bl	8000e188 <__ssprint_r>
8000a2d4:	e3500000 	cmp	r0, #0
8000a2d8:	1afffbd9 	bne	80009244 <_svfprintf_r+0x308>
8000a2dc:	e5dd2107 	ldrb	r2, [sp, #263]	; 0x107
8000a2e0:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000a2e4:	e1a06007 	mov	r6, r7
8000a2e8:	eafffdd5 	b	80009a44 <_svfprintf_r+0xb08>
8000a2ec:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
8000a2f0:	e2408001 	sub	r8, r0, #1
8000a2f4:	e3580000 	cmp	r8, #0
8000a2f8:	d2869008 	addle	r9, r6, #8
8000a2fc:	d1a0b006 	movle	fp, r6
8000a300:	dafffe86 	ble	80009d20 <_svfprintf_r+0xde4>
8000a304:	e3580010 	cmp	r8, #16
8000a308:	d59fa0d8 	ldrle	sl, [pc, #216]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000a30c:	da000021 	ble	8000a398 <_svfprintf_r+0x145c>
8000a310:	e1a03004 	mov	r3, r4
8000a314:	e59fa0cc 	ldr	sl, [pc, #204]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000a318:	e3a09010 	mov	r9, #16
8000a31c:	e59db038 	ldr	fp, [sp, #56]	; 0x38
8000a320:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
8000a324:	ea000002 	b	8000a334 <_svfprintf_r+0x13f8>
8000a328:	e2488010 	sub	r8, r8, #16
8000a32c:	e3580010 	cmp	r8, #16
8000a330:	da000016 	ble	8000a390 <_svfprintf_r+0x1454>
8000a334:	e2833001 	add	r3, r3, #1
8000a338:	e3530007 	cmp	r3, #7
8000a33c:	e586a000 	str	sl, [r6]
8000a340:	e5869004 	str	r9, [r6, #4]
8000a344:	e2855010 	add	r5, r5, #16
8000a348:	d2866008 	addle	r6, r6, #8
8000a34c:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a350:	e58d30e0 	str	r3, [sp, #224]	; 0xe0
8000a354:	d2862008 	addle	r2, r6, #8
8000a358:	dafffff2 	ble	8000a328 <_svfprintf_r+0x13ec>
8000a35c:	e1a0000b 	mov	r0, fp
8000a360:	e1a01004 	mov	r1, r4
8000a364:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a368:	eb000f86 	bl	8000e188 <__ssprint_r>
8000a36c:	e3500000 	cmp	r0, #0
8000a370:	1afffbb3 	bne	80009244 <_svfprintf_r+0x308>
8000a374:	e2488010 	sub	r8, r8, #16
8000a378:	e3580010 	cmp	r8, #16
8000a37c:	e28d30e0 	add	r3, sp, #224	; 0xe0
8000a380:	e8930028 	ldm	r3, {r3, r5}
8000a384:	e2872008 	add	r2, r7, #8
8000a388:	e1a06007 	mov	r6, r7
8000a38c:	caffffe8 	bgt	8000a334 <_svfprintf_r+0x13f8>
8000a390:	e1a0b002 	mov	fp, r2
8000a394:	e1a04003 	mov	r4, r3
8000a398:	e2844001 	add	r4, r4, #1
8000a39c:	e0855008 	add	r5, r5, r8
8000a3a0:	e3540007 	cmp	r4, #7
8000a3a4:	e586a000 	str	sl, [r6]
8000a3a8:	e5868004 	str	r8, [r6, #4]
8000a3ac:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a3b0:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a3b4:	dafffe58 	ble	80009d1c <_svfprintf_r+0xde0>
8000a3b8:	eaffff31 	b	8000a084 <_svfprintf_r+0x1148>
8000a3bc:	80012574 	.word	0x80012574
8000a3c0:	800126e4 	.word	0x800126e4
8000a3c4:	800126e8 	.word	0x800126e8
8000a3c8:	800126f4 	.word	0x800126f4
8000a3cc:	80012708 	.word	0x80012708
8000a3d0:	800126ec 	.word	0x800126ec
8000a3d4:	800126f0 	.word	0x800126f0
8000a3d8:	80012724 	.word	0x80012724
8000a3dc:	66666667 	.word	0x66666667
8000a3e0:	80012574 	.word	0x80012574
8000a3e4:	8001271c 	.word	0x8001271c
8000a3e8:	80012584 	.word	0x80012584
8000a3ec:	e1a09002 	mov	r9, r2
8000a3f0:	e2844001 	add	r4, r4, #1
8000a3f4:	e0855006 	add	r5, r5, r6
8000a3f8:	e3540007 	cmp	r4, #7
8000a3fc:	e583a000 	str	sl, [r3]
8000a400:	e5836004 	str	r6, [r3, #4]
8000a404:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a408:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a40c:	dafffdec 	ble	80009bc4 <_svfprintf_r+0xc88>
8000a410:	eafffe4c 	b	80009d48 <_svfprintf_r+0xe0c>
8000a414:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a418:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a41c:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a420:	eb000f58 	bl	8000e188 <__ssprint_r>
8000a424:	e3500000 	cmp	r0, #0
8000a428:	1afffb85 	bne	80009244 <_svfprintf_r+0x308>
8000a42c:	e28d40e0 	add	r4, sp, #224	; 0xe0
8000a430:	e8940030 	ldm	r4, {r4, r5}
8000a434:	e287b008 	add	fp, r7, #8
8000a438:	e1a06007 	mov	r6, r7
8000a43c:	eafffefd 	b	8000a038 <_svfprintf_r+0x10fc>
8000a440:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a444:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a448:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a44c:	eb000f4d 	bl	8000e188 <__ssprint_r>
8000a450:	e3500000 	cmp	r0, #0
8000a454:	1afffb7a 	bne	80009244 <_svfprintf_r+0x308>
8000a458:	e28d40e0 	add	r4, sp, #224	; 0xe0
8000a45c:	e8940030 	ldm	r4, {r4, r5}
8000a460:	e2876008 	add	r6, r7, #8
8000a464:	e1a09007 	mov	r9, r7
8000a468:	eafffee8 	b	8000a010 <_svfprintf_r+0x10d4>
8000a46c:	e28dc0b4 	add	ip, sp, #180	; 0xb4
8000a470:	e1a0a006 	mov	sl, r6
8000a474:	e28c4027 	add	r4, ip, #39	; 0x27
8000a478:	e1a06005 	mov	r6, r5
8000a47c:	e1a0b00c 	mov	fp, ip
8000a480:	e1a00008 	mov	r0, r8
8000a484:	e1a01009 	mov	r1, r9
8000a488:	e3a0200a 	mov	r2, #10
8000a48c:	e3a03000 	mov	r3, #0
8000a490:	eb001984 	bl	80010aa8 <__aeabi_uldivmod>
8000a494:	e2822030 	add	r2, r2, #48	; 0x30
8000a498:	e5c42000 	strb	r2, [r4]
8000a49c:	e1a00008 	mov	r0, r8
8000a4a0:	e1a01009 	mov	r1, r9
8000a4a4:	e3a0200a 	mov	r2, #10
8000a4a8:	e3a03000 	mov	r3, #0
8000a4ac:	eb00197d 	bl	80010aa8 <__aeabi_uldivmod>
8000a4b0:	e1a08000 	mov	r8, r0
8000a4b4:	e1a09001 	mov	r9, r1
8000a4b8:	e1981009 	orrs	r1, r8, r9
8000a4bc:	e1a05004 	mov	r5, r4
8000a4c0:	e2444001 	sub	r4, r4, #1
8000a4c4:	1affffed 	bne	8000a480 <_svfprintf_r+0x1544>
8000a4c8:	e58d5040 	str	r5, [sp, #64]	; 0x40
8000a4cc:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
8000a4d0:	e28bc028 	add	ip, fp, #40	; 0x28
8000a4d4:	e062c00c 	rsb	ip, r2, ip
8000a4d8:	e1a05006 	mov	r5, r6
8000a4dc:	e58dc034 	str	ip, [sp, #52]	; 0x34
8000a4e0:	e1a0600a 	mov	r6, sl
8000a4e4:	eafffbbf 	b	800093e8 <_svfprintf_r+0x4ac>
8000a4e8:	e3530030 	cmp	r3, #48	; 0x30
8000a4ec:	059d3040 	ldreq	r3, [sp, #64]	; 0x40
8000a4f0:	028cc028 	addeq	ip, ip, #40	; 0x28
8000a4f4:	128cc028 	addne	ip, ip, #40	; 0x28
8000a4f8:	0063c00c 	rsbeq	ip, r3, ip
8000a4fc:	13a03030 	movne	r3, #48	; 0x30
8000a500:	1061c00c 	rsbne	ip, r1, ip
8000a504:	158d1040 	strne	r1, [sp, #64]	; 0x40
8000a508:	15c13000 	strbne	r3, [r1]
8000a50c:	e58dc034 	str	ip, [sp, #52]	; 0x34
8000a510:	eafffbb4 	b	800093e8 <_svfprintf_r+0x4ac>
8000a514:	e2788000 	rsbs	r8, r8, #0
8000a518:	e2e99000 	rsc	r9, r9, #0
8000a51c:	e3a0302d 	mov	r3, #45	; 0x2d
8000a520:	e1980009 	orrs	r0, r8, r9
8000a524:	e5cd3107 	strb	r3, [sp, #263]	; 0x107
8000a528:	03a02000 	moveq	r2, #0
8000a52c:	13a02001 	movne	r2, #1
8000a530:	e3a03001 	mov	r3, #1
8000a534:	eafffb89 	b	80009360 <_svfprintf_r+0x424>
8000a538:	e28d0058 	add	r0, sp, #88	; 0x58
8000a53c:	e8900003 	ldm	r0, {r0, r1}
8000a540:	eb000e39 	bl	8000de2c <__fpclassifyd>
8000a544:	e3500000 	cmp	r0, #0
8000a548:	1a00010f 	bne	8000a98c <_svfprintf_r+0x1a50>
8000a54c:	e58d004c 	str	r0, [sp, #76]	; 0x4c
8000a550:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
8000a554:	e51f218c 	ldr	r2, [pc, #-396]	; 8000a3d0 <_svfprintf_r+0x1494>
8000a558:	e51f318c 	ldr	r3, [pc, #-396]	; 8000a3d4 <_svfprintf_r+0x1498>
8000a55c:	e3500047 	cmp	r0, #71	; 0x47
8000a560:	d1a03002 	movle	r3, r2
8000a564:	e59d1018 	ldr	r1, [sp, #24]
8000a568:	e58d3040 	str	r3, [sp, #64]	; 0x40
8000a56c:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
8000a570:	e3a0c003 	mov	ip, #3
8000a574:	e3c11080 	bic	r1, r1, #128	; 0x80
8000a578:	e58dc020 	str	ip, [sp, #32]
8000a57c:	e58d1018 	str	r1, [sp, #24]
8000a580:	e5dd2107 	ldrb	r2, [sp, #263]	; 0x107
8000a584:	e58dc034 	str	ip, [sp, #52]	; 0x34
8000a588:	e58d3050 	str	r3, [sp, #80]	; 0x50
8000a58c:	eafffb9d 	b	80009408 <_svfprintf_r+0x4cc>
8000a590:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
8000a594:	e2813007 	add	r3, r1, #7
8000a598:	e3c33007 	bic	r3, r3, #7
8000a59c:	e8931004 	ldm	r3, {r2, ip}
8000a5a0:	e2833008 	add	r3, r3, #8
8000a5a4:	e58d2058 	str	r2, [sp, #88]	; 0x58
8000a5a8:	e58dc05c 	str	ip, [sp, #92]	; 0x5c
8000a5ac:	e58d303c 	str	r3, [sp, #60]	; 0x3c
8000a5b0:	eafffbe8 	b	80009558 <_svfprintf_r+0x61c>
8000a5b4:	e59d2018 	ldr	r2, [sp, #24]
8000a5b8:	e3120040 	tst	r2, #64	; 0x40
8000a5bc:	0a0001a6 	beq	8000ac5c <_svfprintf_r+0x1d20>
8000a5c0:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
8000a5c4:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
8000a5c8:	e1d320b0 	ldrh	r2, [r3]
8000a5cc:	e28cc004 	add	ip, ip, #4
8000a5d0:	e1a08002 	mov	r8, r2
8000a5d4:	e3a09000 	mov	r9, #0
8000a5d8:	e2522000 	subs	r2, r2, #0
8000a5dc:	e3a03001 	mov	r3, #1
8000a5e0:	13a02001 	movne	r2, #1
8000a5e4:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
8000a5e8:	eafffc11 	b	80009634 <_svfprintf_r+0x6f8>
8000a5ec:	e59d0018 	ldr	r0, [sp, #24]
8000a5f0:	e2103040 	ands	r3, r0, #64	; 0x40
8000a5f4:	0a0001a2 	beq	8000ac84 <_svfprintf_r+0x1d48>
8000a5f8:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
8000a5fc:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
8000a600:	e1d310b0 	ldrh	r1, [r3]
8000a604:	e28cc004 	add	ip, ip, #4
8000a608:	e1a03002 	mov	r3, r2
8000a60c:	e2512000 	subs	r2, r1, #0
8000a610:	e1a08001 	mov	r8, r1
8000a614:	e3a09000 	mov	r9, #0
8000a618:	13a02001 	movne	r2, #1
8000a61c:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
8000a620:	eafffc03 	b	80009634 <_svfprintf_r+0x6f8>
8000a624:	e59d3018 	ldr	r3, [sp, #24]
8000a628:	e3130040 	tst	r3, #64	; 0x40
8000a62c:	159dc03c 	ldrne	ip, [sp, #60]	; 0x3c
8000a630:	059d003c 	ldreq	r0, [sp, #60]	; 0x3c
8000a634:	11dc80b0 	ldrhne	r8, [ip]
8000a638:	05908000 	ldreq	r8, [r0]
8000a63c:	128cc004 	addne	ip, ip, #4
8000a640:	02800004 	addeq	r0, r0, #4
8000a644:	158dc03c 	strne	ip, [sp, #60]	; 0x3c
8000a648:	058d003c 	streq	r0, [sp, #60]	; 0x3c
8000a64c:	e3a09000 	mov	r9, #0
8000a650:	eafffc1a 	b	800096c0 <_svfprintf_r+0x784>
8000a654:	e59d1018 	ldr	r1, [sp, #24]
8000a658:	e3110010 	tst	r1, #16
8000a65c:	0a000174 	beq	8000ac34 <_svfprintf_r+0x1cf8>
8000a660:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
8000a664:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
8000a668:	e5923000 	ldr	r3, [r2]
8000a66c:	e2822004 	add	r2, r2, #4
8000a670:	e58d203c 	str	r2, [sp, #60]	; 0x3c
8000a674:	e583c000 	str	ip, [r3]
8000a678:	eafffa51 	b	80008fc4 <_svfprintf_r+0x88>
8000a67c:	e59d0018 	ldr	r0, [sp, #24]
8000a680:	e3100040 	tst	r0, #64	; 0x40
8000a684:	159d103c 	ldrne	r1, [sp, #60]	; 0x3c
8000a688:	059d203c 	ldreq	r2, [sp, #60]	; 0x3c
8000a68c:	11d180f0 	ldrshne	r8, [r1]
8000a690:	05928000 	ldreq	r8, [r2]
8000a694:	12811004 	addne	r1, r1, #4
8000a698:	02822004 	addeq	r2, r2, #4
8000a69c:	158d103c 	strne	r1, [sp, #60]	; 0x3c
8000a6a0:	058d203c 	streq	r2, [sp, #60]	; 0x3c
8000a6a4:	e1a09fc8 	asr	r9, r8, #31
8000a6a8:	eafffb25 	b	80009344 <_svfprintf_r+0x408>
8000a6ac:	e1a04002 	mov	r4, r2
8000a6b0:	e1a05001 	mov	r5, r1
8000a6b4:	e2844001 	add	r4, r4, #1
8000a6b8:	e0855006 	add	r5, r5, r6
8000a6bc:	e3540007 	cmp	r4, #7
8000a6c0:	e589a000 	str	sl, [r9]
8000a6c4:	e5896004 	str	r6, [r9, #4]
8000a6c8:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a6cc:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a6d0:	ca0001f6 	bgt	8000aeb0 <_svfprintf_r+0x1f74>
8000a6d4:	e59d2100 	ldr	r2, [sp, #256]	; 0x100
8000a6d8:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
8000a6dc:	e1520000 	cmp	r2, r0
8000a6e0:	ba00003a 	blt	8000a7d0 <_svfprintf_r+0x1894>
8000a6e4:	e59d1018 	ldr	r1, [sp, #24]
8000a6e8:	e3110001 	tst	r1, #1
8000a6ec:	1a000037 	bne	8000a7d0 <_svfprintf_r+0x1894>
8000a6f0:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
8000a6f4:	e59d0050 	ldr	r0, [sp, #80]	; 0x50
8000a6f8:	e08c1000 	add	r1, ip, r0
8000a6fc:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
8000a700:	e061800b 	rsb	r8, r1, fp
8000a704:	e062200c 	rsb	r2, r2, ip
8000a708:	e1520008 	cmp	r2, r8
8000a70c:	b1a08002 	movlt	r8, r2
8000a710:	a1a08008 	movge	r8, r8
8000a714:	e3580000 	cmp	r8, #0
8000a718:	da000008 	ble	8000a740 <_svfprintf_r+0x1804>
8000a71c:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000a720:	e2844001 	add	r4, r4, #1
8000a724:	e0855008 	add	r5, r5, r8
8000a728:	e3540007 	cmp	r4, #7
8000a72c:	e8830102 	stm	r3, {r1, r8}
8000a730:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a734:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a738:	d2833008 	addle	r3, r3, #8
8000a73c:	ca0001c4 	bgt	8000ae54 <_svfprintf_r+0x1f18>
8000a740:	e1c86fc8 	bic	r6, r8, r8, asr #31
8000a744:	e0666002 	rsb	r6, r6, r2
8000a748:	e3560000 	cmp	r6, #0
8000a74c:	da000034 	ble	8000a824 <_svfprintf_r+0x18e8>
8000a750:	e3560010 	cmp	r6, #16
8000a754:	da00021e 	ble	8000afd4 <_svfprintf_r+0x2098>
8000a758:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000a75c:	e51fa37c 	ldr	sl, [pc, #-892]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000a760:	e3a08010 	mov	r8, #16
8000a764:	e59db038 	ldr	fp, [sp, #56]	; 0x38
8000a768:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
8000a76c:	ea000002 	b	8000a77c <_svfprintf_r+0x1840>
8000a770:	e2466010 	sub	r6, r6, #16
8000a774:	e3560010 	cmp	r6, #16
8000a778:	daffff1b 	ble	8000a3ec <_svfprintf_r+0x14b0>
8000a77c:	e2844001 	add	r4, r4, #1
8000a780:	e3540007 	cmp	r4, #7
8000a784:	e583a000 	str	sl, [r3]
8000a788:	e5838004 	str	r8, [r3, #4]
8000a78c:	e2855010 	add	r5, r5, #16
8000a790:	d2833008 	addle	r3, r3, #8
8000a794:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a798:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a79c:	d2832008 	addle	r2, r3, #8
8000a7a0:	dafffff2 	ble	8000a770 <_svfprintf_r+0x1834>
8000a7a4:	e1a0000b 	mov	r0, fp
8000a7a8:	e1a01009 	mov	r1, r9
8000a7ac:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a7b0:	eb000e74 	bl	8000e188 <__ssprint_r>
8000a7b4:	e3500000 	cmp	r0, #0
8000a7b8:	1afffaa1 	bne	80009244 <_svfprintf_r+0x308>
8000a7bc:	e28d40e0 	add	r4, sp, #224	; 0xe0
8000a7c0:	e8940030 	ldm	r4, {r4, r5}
8000a7c4:	e2872008 	add	r2, r7, #8
8000a7c8:	e1a03007 	mov	r3, r7
8000a7cc:	eaffffe7 	b	8000a770 <_svfprintf_r+0x1834>
8000a7d0:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000a7d4:	e59dc060 	ldr	ip, [sp, #96]	; 0x60
8000a7d8:	e2844001 	add	r4, r4, #1
8000a7dc:	e59d0054 	ldr	r0, [sp, #84]	; 0x54
8000a7e0:	e085500c 	add	r5, r5, ip
8000a7e4:	e3540007 	cmp	r4, #7
8000a7e8:	e8831001 	stm	r3, {r0, ip}
8000a7ec:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a7f0:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a7f4:	d2833008 	addle	r3, r3, #8
8000a7f8:	daffffbc 	ble	8000a6f0 <_svfprintf_r+0x17b4>
8000a7fc:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a800:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a804:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a808:	eb000e5e 	bl	8000e188 <__ssprint_r>
8000a80c:	e3500000 	cmp	r0, #0
8000a810:	1afffa8b 	bne	80009244 <_svfprintf_r+0x308>
8000a814:	e59d2100 	ldr	r2, [sp, #256]	; 0x100
8000a818:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000a81c:	e1a03007 	mov	r3, r7
8000a820:	eaffffb2 	b	8000a6f0 <_svfprintf_r+0x17b4>
8000a824:	e1a09003 	mov	r9, r3
8000a828:	eafffce5 	b	80009bc4 <_svfprintf_r+0xc88>
8000a82c:	e2869008 	add	r9, r6, #8
8000a830:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000a834:	e51fa454 	ldr	sl, [pc, #-1108]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000a838:	eafffcca 	b	80009b68 <_svfprintf_r+0xc2c>
8000a83c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000a840:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000a844:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a848:	eb000e4e 	bl	8000e188 <__ssprint_r>
8000a84c:	e3500000 	cmp	r0, #0
8000a850:	1afffa7b 	bne	80009244 <_svfprintf_r+0x308>
8000a854:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000a858:	e1a09007 	mov	r9, r7
8000a85c:	eafffd58 	b	80009dc4 <_svfprintf_r+0xe88>
8000a860:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000a864:	e51f3494 	ldr	r3, [pc, #-1172]	; 8000a3d8 <_svfprintf_r+0x149c>
8000a868:	e2844001 	add	r4, r4, #1
8000a86c:	e5893000 	str	r3, [r9]
8000a870:	e2855001 	add	r5, r5, #1
8000a874:	e3540007 	cmp	r4, #7
8000a878:	e3a03001 	mov	r3, #1
8000a87c:	e5893004 	str	r3, [r9, #4]
8000a880:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a884:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a888:	d2899008 	addle	r9, r9, #8
8000a88c:	ca000117 	bgt	8000acf0 <_svfprintf_r+0x1db4>
8000a890:	e3560000 	cmp	r6, #0
8000a894:	1a000005 	bne	8000a8b0 <_svfprintf_r+0x1974>
8000a898:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
8000a89c:	e3500000 	cmp	r0, #0
8000a8a0:	1a000002 	bne	8000a8b0 <_svfprintf_r+0x1974>
8000a8a4:	e59d1018 	ldr	r1, [sp, #24]
8000a8a8:	e3110001 	tst	r1, #1
8000a8ac:	0afffcc4 	beq	80009bc4 <_svfprintf_r+0xc88>
8000a8b0:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000a8b4:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
8000a8b8:	e2844001 	add	r4, r4, #1
8000a8bc:	e59d3054 	ldr	r3, [sp, #84]	; 0x54
8000a8c0:	e0855002 	add	r5, r5, r2
8000a8c4:	e3540007 	cmp	r4, #7
8000a8c8:	e5893000 	str	r3, [r9]
8000a8cc:	e5892004 	str	r2, [r9, #4]
8000a8d0:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a8d4:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000a8d8:	d2899008 	addle	r9, r9, #8
8000a8dc:	ca000135 	bgt	8000adb8 <_svfprintf_r+0x1e7c>
8000a8e0:	e2666000 	rsb	r6, r6, #0
8000a8e4:	e3560000 	cmp	r6, #0
8000a8e8:	da000128 	ble	8000ad90 <_svfprintf_r+0x1e54>
8000a8ec:	e3560010 	cmp	r6, #16
8000a8f0:	d51fa510 	ldrle	sl, [pc, #-1296]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000a8f4:	da000113 	ble	8000ad48 <_svfprintf_r+0x1e0c>
8000a8f8:	e1a03004 	mov	r3, r4
8000a8fc:	e51fa51c 	ldr	sl, [pc, #-1308]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000a900:	e3a08010 	mov	r8, #16
8000a904:	e59db038 	ldr	fp, [sp, #56]	; 0x38
8000a908:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
8000a90c:	ea000002 	b	8000a91c <_svfprintf_r+0x19e0>
8000a910:	e2466010 	sub	r6, r6, #16
8000a914:	e3560010 	cmp	r6, #16
8000a918:	da000109 	ble	8000ad44 <_svfprintf_r+0x1e08>
8000a91c:	e2833001 	add	r3, r3, #1
8000a920:	e3530007 	cmp	r3, #7
8000a924:	e2855010 	add	r5, r5, #16
8000a928:	e589a000 	str	sl, [r9]
8000a92c:	e5898004 	str	r8, [r9, #4]
8000a930:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000a934:	e58d30e0 	str	r3, [sp, #224]	; 0xe0
8000a938:	d2899008 	addle	r9, r9, #8
8000a93c:	dafffff3 	ble	8000a910 <_svfprintf_r+0x19d4>
8000a940:	e1a0000b 	mov	r0, fp
8000a944:	e1a01004 	mov	r1, r4
8000a948:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000a94c:	eb000e0d 	bl	8000e188 <__ssprint_r>
8000a950:	e3500000 	cmp	r0, #0
8000a954:	1afffa3a 	bne	80009244 <_svfprintf_r+0x308>
8000a958:	e28d30e0 	add	r3, sp, #224	; 0xe0
8000a95c:	e8930028 	ldm	r3, {r3, r5}
8000a960:	e1a09007 	mov	r9, r7
8000a964:	eaffffe9 	b	8000a910 <_svfprintf_r+0x19d4>
8000a968:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
8000a96c:	e3a00000 	mov	r0, #0
8000a970:	e1c11fc1 	bic	r1, r1, r1, asr #31
8000a974:	e58d004c 	str	r0, [sp, #76]	; 0x4c
8000a978:	e58d1020 	str	r1, [sp, #32]
8000a97c:	e5dd2107 	ldrb	r2, [sp, #263]	; 0x107
8000a980:	e58d403c 	str	r4, [sp, #60]	; 0x3c
8000a984:	e58d0050 	str	r0, [sp, #80]	; 0x50
8000a988:	eafffa9e 	b	80009408 <_svfprintf_r+0x4cc>
8000a98c:	e3750001 	cmn	r5, #1
8000a990:	03a05006 	moveq	r5, #6
8000a994:	0a000005 	beq	8000a9b0 <_svfprintf_r+0x1a74>
8000a998:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
8000a99c:	e35c0067 	cmp	ip, #103	; 0x67
8000a9a0:	135c0047 	cmpne	ip, #71	; 0x47
8000a9a4:	1a000001 	bne	8000a9b0 <_svfprintf_r+0x1a74>
8000a9a8:	e3550000 	cmp	r5, #0
8000a9ac:	03a05001 	moveq	r5, #1
8000a9b0:	e59d305c 	ldr	r3, [sp, #92]	; 0x5c
8000a9b4:	e59d0018 	ldr	r0, [sp, #24]
8000a9b8:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
8000a9bc:	e3530000 	cmp	r3, #0
8000a9c0:	e3800c01 	orr	r0, r0, #256	; 0x100
8000a9c4:	b2839102 	addlt	r9, r3, #-2147483648	; 0x80000000
8000a9c8:	b3a0b02d 	movlt	fp, #45	; 0x2d
8000a9cc:	a59d905c 	ldrge	r9, [sp, #92]	; 0x5c
8000a9d0:	a3a0b000 	movge	fp, #0
8000a9d4:	e3510066 	cmp	r1, #102	; 0x66
8000a9d8:	13510046 	cmpne	r1, #70	; 0x46
8000a9dc:	e58d0018 	str	r0, [sp, #24]
8000a9e0:	13a04000 	movne	r4, #0
8000a9e4:	03a04001 	moveq	r4, #1
8000a9e8:	01a0a005 	moveq	sl, r5
8000a9ec:	03a01003 	moveq	r1, #3
8000a9f0:	0a000005 	beq	8000aa0c <_svfprintf_r+0x1ad0>
8000a9f4:	e3510065 	cmp	r1, #101	; 0x65
8000a9f8:	13510045 	cmpne	r1, #69	; 0x45
8000a9fc:	0285a001 	addeq	sl, r5, #1
8000aa00:	03a01002 	moveq	r1, #2
8000aa04:	11a0a005 	movne	sl, r5
8000aa08:	13a01002 	movne	r1, #2
8000aa0c:	e58d1000 	str	r1, [sp]
8000aa10:	e28d1c01 	add	r1, sp, #256	; 0x100
8000aa14:	e58d1008 	str	r1, [sp, #8]
8000aa18:	e28d10fc 	add	r1, sp, #252	; 0xfc
8000aa1c:	e59d2058 	ldr	r2, [sp, #88]	; 0x58
8000aa20:	e58d100c 	str	r1, [sp, #12]
8000aa24:	e1a03009 	mov	r3, r9
8000aa28:	e28d10f8 	add	r1, sp, #248	; 0xf8
8000aa2c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000aa30:	e58da004 	str	sl, [sp, #4]
8000aa34:	e58d1010 	str	r1, [sp, #16]
8000aa38:	eb000202 	bl	8000b248 <_dtoa_r>
8000aa3c:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
8000aa40:	e3520047 	cmp	r2, #71	; 0x47
8000aa44:	13520067 	cmpne	r2, #103	; 0x67
8000aa48:	e58d0040 	str	r0, [sp, #64]	; 0x40
8000aa4c:	0a0000a2 	beq	8000acdc <_svfprintf_r+0x1da0>
8000aa50:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
8000aa54:	e3540000 	cmp	r4, #0
8000aa58:	e08c400a 	add	r4, ip, sl
8000aa5c:	0a00000c 	beq	8000aa94 <_svfprintf_r+0x1b58>
8000aa60:	e5dc3000 	ldrb	r3, [ip]
8000aa64:	e3530030 	cmp	r3, #48	; 0x30
8000aa68:	1a000007 	bne	8000aa8c <_svfprintf_r+0x1b50>
8000aa6c:	e59d0058 	ldr	r0, [sp, #88]	; 0x58
8000aa70:	e1a01009 	mov	r1, r9
8000aa74:	e3a02000 	mov	r2, #0
8000aa78:	e3a03000 	mov	r3, #0
8000aa7c:	eb0017d4 	bl	800109d4 <__aeabi_dcmpeq>
8000aa80:	e3500000 	cmp	r0, #0
8000aa84:	026aa001 	rsbeq	sl, sl, #1
8000aa88:	058da100 	streq	sl, [sp, #256]	; 0x100
8000aa8c:	e59d3100 	ldr	r3, [sp, #256]	; 0x100
8000aa90:	e0844003 	add	r4, r4, r3
8000aa94:	e3a03000 	mov	r3, #0
8000aa98:	e59d0058 	ldr	r0, [sp, #88]	; 0x58
8000aa9c:	e1a01009 	mov	r1, r9
8000aaa0:	e3a02000 	mov	r2, #0
8000aaa4:	eb0017ca 	bl	800109d4 <__aeabi_dcmpeq>
8000aaa8:	e3500000 	cmp	r0, #0
8000aaac:	158d40f8 	strne	r4, [sp, #248]	; 0xf8
8000aab0:	11a03004 	movne	r3, r4
8000aab4:	1a000007 	bne	8000aad8 <_svfprintf_r+0x1b9c>
8000aab8:	e59d30f8 	ldr	r3, [sp, #248]	; 0xf8
8000aabc:	e1540003 	cmp	r4, r3
8000aac0:	9a000004 	bls	8000aad8 <_svfprintf_r+0x1b9c>
8000aac4:	e3a02030 	mov	r2, #48	; 0x30
8000aac8:	e4c32001 	strb	r2, [r3], #1
8000aacc:	e1530004 	cmp	r3, r4
8000aad0:	e58d30f8 	str	r3, [sp, #248]	; 0xf8
8000aad4:	1afffffb 	bne	8000aac8 <_svfprintf_r+0x1b8c>
8000aad8:	e59d0048 	ldr	r0, [sp, #72]	; 0x48
8000aadc:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
8000aae0:	e3500067 	cmp	r0, #103	; 0x67
8000aae4:	13500047 	cmpne	r0, #71	; 0x47
8000aae8:	e0613003 	rsb	r3, r1, r3
8000aaec:	e58d302c 	str	r3, [sp, #44]	; 0x2c
8000aaf0:	1a0000ff 	bne	8000aef4 <_svfprintf_r+0x1fb8>
8000aaf4:	e59d3100 	ldr	r3, [sp, #256]	; 0x100
8000aaf8:	e3730003 	cmn	r3, #3
8000aafc:	e58d3034 	str	r3, [sp, #52]	; 0x34
8000ab00:	ba000001 	blt	8000ab0c <_svfprintf_r+0x1bd0>
8000ab04:	e1550003 	cmp	r5, r3
8000ab08:	aa000110 	bge	8000af50 <_svfprintf_r+0x2014>
8000ab0c:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
8000ab10:	e2422002 	sub	r2, r2, #2
8000ab14:	e58d2048 	str	r2, [sp, #72]	; 0x48
8000ab18:	e2433001 	sub	r3, r3, #1
8000ab1c:	e3530000 	cmp	r3, #0
8000ab20:	e58d3100 	str	r3, [sp, #256]	; 0x100
8000ab24:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
8000ab28:	b2633000 	rsblt	r3, r3, #0
8000ab2c:	b3a0202d 	movlt	r2, #45	; 0x2d
8000ab30:	a3a0202b 	movge	r2, #43	; 0x2b
8000ab34:	e3530009 	cmp	r3, #9
8000ab38:	e5cdc0f0 	strb	ip, [sp, #240]	; 0xf0
8000ab3c:	e5cd20f1 	strb	r2, [sp, #241]	; 0xf1
8000ab40:	da000114 	ble	8000af98 <_svfprintf_r+0x205c>
8000ab44:	e51fc770 	ldr	ip, [pc, #-1904]	; 8000a3dc <_svfprintf_r+0x14a0>
8000ab48:	e28d00ee 	add	r0, sp, #238	; 0xee
8000ab4c:	e0c1239c 	smull	r2, r1, ip, r3
8000ab50:	e1a02fc3 	asr	r2, r3, #31
8000ab54:	e0622141 	rsb	r2, r2, r1, asr #2
8000ab58:	e0821102 	add	r1, r2, r2, lsl #2
8000ab5c:	e0431081 	sub	r1, r3, r1, lsl #1
8000ab60:	e2811030 	add	r1, r1, #48	; 0x30
8000ab64:	e3520009 	cmp	r2, #9
8000ab68:	e1a03002 	mov	r3, r2
8000ab6c:	e1a02000 	mov	r2, r0
8000ab70:	e4401001 	strb	r1, [r0], #-1
8000ab74:	cafffff4 	bgt	8000ab4c <_svfprintf_r+0x1c10>
8000ab78:	e59dc06c 	ldr	ip, [sp, #108]	; 0x6c
8000ab7c:	e2421001 	sub	r1, r2, #1
8000ab80:	e151000c 	cmp	r1, ip
8000ab84:	e2833030 	add	r3, r3, #48	; 0x30
8000ab88:	e5423001 	strb	r3, [r2, #-1]
8000ab8c:	228d00f0 	addcs	r0, sp, #240	; 0xf0
8000ab90:	228d10f2 	addcs	r1, sp, #242	; 0xf2
8000ab94:	2a000008 	bcs	8000abbc <_svfprintf_r+0x1c80>
8000ab98:	e28d00f0 	add	r0, sp, #240	; 0xf0
8000ab9c:	e59dc06c 	ldr	ip, [sp, #108]	; 0x6c
8000aba0:	e1a02001 	mov	r2, r1
8000aba4:	e2803002 	add	r3, r0, #2
8000aba8:	e4d21001 	ldrb	r1, [r2], #1
8000abac:	e4c31001 	strb	r1, [r3], #1
8000abb0:	e15c0002 	cmp	ip, r2
8000abb4:	e1a01003 	mov	r1, r3
8000abb8:	8afffffa 	bhi	8000aba8 <_svfprintf_r+0x1c6c>
8000abbc:	e0600001 	rsb	r0, r0, r1
8000abc0:	e58d0064 	str	r0, [sp, #100]	; 0x64
8000abc4:	e59d1064 	ldr	r1, [sp, #100]	; 0x64
8000abc8:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
8000abcc:	e0811000 	add	r1, r1, r0
8000abd0:	e3500001 	cmp	r0, #1
8000abd4:	e58d1034 	str	r1, [sp, #52]	; 0x34
8000abd8:	da000101 	ble	8000afe4 <_svfprintf_r+0x20a8>
8000abdc:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
8000abe0:	e3a0c000 	mov	ip, #0
8000abe4:	e2833001 	add	r3, r3, #1
8000abe8:	e58d3034 	str	r3, [sp, #52]	; 0x34
8000abec:	e58dc050 	str	ip, [sp, #80]	; 0x50
8000abf0:	e35b0000 	cmp	fp, #0
8000abf4:	1a0000b6 	bne	8000aed4 <_svfprintf_r+0x1f98>
8000abf8:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
8000abfc:	e1c33fc3 	bic	r3, r3, r3, asr #31
8000ac00:	e58d3020 	str	r3, [sp, #32]
8000ac04:	e5dd2107 	ldrb	r2, [sp, #263]	; 0x107
8000ac08:	e58db04c 	str	fp, [sp, #76]	; 0x4c
8000ac0c:	eafff9fd 	b	80009408 <_svfprintf_r+0x4cc>
8000ac10:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000ac14:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000ac18:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000ac1c:	eb000d59 	bl	8000e188 <__ssprint_r>
8000ac20:	e3500000 	cmp	r0, #0
8000ac24:	1afff986 	bne	80009244 <_svfprintf_r+0x308>
8000ac28:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000ac2c:	e1a03007 	mov	r3, r7
8000ac30:	eafffc76 	b	80009e10 <_svfprintf_r+0xed4>
8000ac34:	e59d0018 	ldr	r0, [sp, #24]
8000ac38:	e3100040 	tst	r0, #64	; 0x40
8000ac3c:	0a00001f 	beq	8000acc0 <_svfprintf_r+0x1d84>
8000ac40:	e59d103c 	ldr	r1, [sp, #60]	; 0x3c
8000ac44:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
8000ac48:	e5913000 	ldr	r3, [r1]
8000ac4c:	e2811004 	add	r1, r1, #4
8000ac50:	e58d103c 	str	r1, [sp, #60]	; 0x3c
8000ac54:	e1c320b0 	strh	r2, [r3]
8000ac58:	eafff8d9 	b	80008fc4 <_svfprintf_r+0x88>
8000ac5c:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
8000ac60:	e5902000 	ldr	r2, [r0]
8000ac64:	e3a03001 	mov	r3, #1
8000ac68:	e1a08002 	mov	r8, r2
8000ac6c:	e3a09000 	mov	r9, #0
8000ac70:	e2800004 	add	r0, r0, #4
8000ac74:	e2522000 	subs	r2, r2, #0
8000ac78:	13a02001 	movne	r2, #1
8000ac7c:	e58d003c 	str	r0, [sp, #60]	; 0x3c
8000ac80:	eafffa6b 	b	80009634 <_svfprintf_r+0x6f8>
8000ac84:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
8000ac88:	e5902000 	ldr	r2, [r0]
8000ac8c:	eafffff5 	b	8000ac68 <_svfprintf_r+0x1d2c>
8000ac90:	e3a01040 	mov	r1, #64	; 0x40
8000ac94:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000ac98:	eb00071e 	bl	8000c918 <_malloc_r>
8000ac9c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000aca0:	e3500000 	cmp	r0, #0
8000aca4:	e5810000 	str	r0, [r1]
8000aca8:	e5810010 	str	r0, [r1, #16]
8000acac:	0a0000ea 	beq	8000b05c <_svfprintf_r+0x2120>
8000acb0:	e59dc024 	ldr	ip, [sp, #36]	; 0x24
8000acb4:	e3a03040 	mov	r3, #64	; 0x40
8000acb8:	e58c3014 	str	r3, [ip, #20]
8000acbc:	eafff8b0 	b	80008f84 <_svfprintf_r+0x48>
8000acc0:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
8000acc4:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
8000acc8:	e59c3000 	ldr	r3, [ip]
8000accc:	e28cc004 	add	ip, ip, #4
8000acd0:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
8000acd4:	e5830000 	str	r0, [r3]
8000acd8:	eafff8b9 	b	80008fc4 <_svfprintf_r+0x88>
8000acdc:	e59d3018 	ldr	r3, [sp, #24]
8000ace0:	e3130001 	tst	r3, #1
8000ace4:	059d30f8 	ldreq	r3, [sp, #248]	; 0xf8
8000ace8:	1affff58 	bne	8000aa50 <_svfprintf_r+0x1b14>
8000acec:	eaffff79 	b	8000aad8 <_svfprintf_r+0x1b9c>
8000acf0:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000acf4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000acf8:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000acfc:	eb000d21 	bl	8000e188 <__ssprint_r>
8000ad00:	e3500000 	cmp	r0, #0
8000ad04:	1afff94e 	bne	80009244 <_svfprintf_r+0x308>
8000ad08:	e59d6100 	ldr	r6, [sp, #256]	; 0x100
8000ad0c:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000ad10:	e1a09007 	mov	r9, r7
8000ad14:	eafffedd 	b	8000a890 <_svfprintf_r+0x1954>
8000ad18:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000ad1c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000ad20:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000ad24:	eb000d17 	bl	8000e188 <__ssprint_r>
8000ad28:	e3500000 	cmp	r0, #0
8000ad2c:	1afff944 	bne	80009244 <_svfprintf_r+0x308>
8000ad30:	e28d40e0 	add	r4, sp, #224	; 0xe0
8000ad34:	e8940030 	ldm	r4, {r4, r5}
8000ad38:	e2879008 	add	r9, r7, #8
8000ad3c:	e1a0b007 	mov	fp, r7
8000ad40:	eafffbf6 	b	80009d20 <_svfprintf_r+0xde4>
8000ad44:	e1a04003 	mov	r4, r3
8000ad48:	e2844001 	add	r4, r4, #1
8000ad4c:	e0855006 	add	r5, r5, r6
8000ad50:	e3540007 	cmp	r4, #7
8000ad54:	e589a000 	str	sl, [r9]
8000ad58:	e5896004 	str	r6, [r9, #4]
8000ad5c:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000ad60:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000ad64:	d2899008 	addle	r9, r9, #8
8000ad68:	da000008 	ble	8000ad90 <_svfprintf_r+0x1e54>
8000ad6c:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000ad70:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000ad74:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000ad78:	eb000d02 	bl	8000e188 <__ssprint_r>
8000ad7c:	e3500000 	cmp	r0, #0
8000ad80:	1afff92f 	bne	80009244 <_svfprintf_r+0x308>
8000ad84:	e28d40e0 	add	r4, sp, #224	; 0xe0
8000ad88:	e8940030 	ldm	r4, {r4, r5}
8000ad8c:	e1a09007 	mov	r9, r7
8000ad90:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
8000ad94:	e2844001 	add	r4, r4, #1
8000ad98:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
8000ad9c:	e085500c 	add	r5, r5, ip
8000ada0:	e3540007 	cmp	r4, #7
8000ada4:	e8891001 	stm	r9, {r0, ip}
8000ada8:	e58d50e4 	str	r5, [sp, #228]	; 0xe4
8000adac:	e58d40e0 	str	r4, [sp, #224]	; 0xe0
8000adb0:	dafffb82 	ble	80009bc0 <_svfprintf_r+0xc84>
8000adb4:	eafffbe3 	b	80009d48 <_svfprintf_r+0xe0c>
8000adb8:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000adbc:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000adc0:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000adc4:	eb000cef 	bl	8000e188 <__ssprint_r>
8000adc8:	e3500000 	cmp	r0, #0
8000adcc:	1afff91c 	bne	80009244 <_svfprintf_r+0x308>
8000add0:	e59d6100 	ldr	r6, [sp, #256]	; 0x100
8000add4:	e28d40e0 	add	r4, sp, #224	; 0xe0
8000add8:	e8940030 	ldm	r4, {r4, r5}
8000addc:	e1a09007 	mov	r9, r7
8000ade0:	eafffebe 	b	8000a8e0 <_svfprintf_r+0x19a4>
8000ade4:	e1a03009 	mov	r3, r9
8000ade8:	eafffe39 	b	8000a6d4 <_svfprintf_r+0x1798>
8000adec:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
8000adf0:	eb000ccc 	bl	8000e128 <strlen>
8000adf4:	e3a02000 	mov	r2, #0
8000adf8:	e1c03fc0 	bic	r3, r0, r0, asr #31
8000adfc:	e3a0c000 	mov	ip, #0
8000ae00:	e58d204c 	str	r2, [sp, #76]	; 0x4c
8000ae04:	e58d0034 	str	r0, [sp, #52]	; 0x34
8000ae08:	e58d3020 	str	r3, [sp, #32]
8000ae0c:	e5dd2107 	ldrb	r2, [sp, #263]	; 0x107
8000ae10:	e58d403c 	str	r4, [sp, #60]	; 0x3c
8000ae14:	e58dc050 	str	ip, [sp, #80]	; 0x50
8000ae18:	eafff97a 	b	80009408 <_svfprintf_r+0x4cc>
8000ae1c:	e2863008 	add	r3, r6, #8
8000ae20:	e28d40e0 	add	r4, sp, #224	; 0xe0
8000ae24:	e8940030 	ldm	r4, {r4, r5}
8000ae28:	e51faa50 	ldr	sl, [pc, #-2640]	; 8000a3e0 <_svfprintf_r+0x14a4>
8000ae2c:	eafff9af 	b	800094f0 <_svfprintf_r+0x5b4>
8000ae30:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000ae34:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000ae38:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000ae3c:	eb000cd1 	bl	8000e188 <__ssprint_r>
8000ae40:	e3500000 	cmp	r0, #0
8000ae44:	1afff8fe 	bne	80009244 <_svfprintf_r+0x308>
8000ae48:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000ae4c:	e1a09007 	mov	r9, r7
8000ae50:	eafffcd1 	b	8000a19c <_svfprintf_r+0x1260>
8000ae54:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000ae58:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000ae5c:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000ae60:	eb000cc8 	bl	8000e188 <__ssprint_r>
8000ae64:	e3500000 	cmp	r0, #0
8000ae68:	1afff8f5 	bne	80009244 <_svfprintf_r+0x308>
8000ae6c:	e59d2100 	ldr	r2, [sp, #256]	; 0x100
8000ae70:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
8000ae74:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000ae78:	e0622000 	rsb	r2, r2, r0
8000ae7c:	e1a03007 	mov	r3, r7
8000ae80:	eafffe2e 	b	8000a740 <_svfprintf_r+0x1804>
8000ae84:	e3550006 	cmp	r5, #6
8000ae88:	23a05006 	movcs	r5, #6
8000ae8c:	e51f0ab0 	ldr	r0, [pc, #-2736]	; 8000a3e4 <_svfprintf_r+0x14a8>
8000ae90:	e1c5cfc5 	bic	ip, r5, r5, asr #31
8000ae94:	e58d5034 	str	r5, [sp, #52]	; 0x34
8000ae98:	e58dc020 	str	ip, [sp, #32]
8000ae9c:	e58d403c 	str	r4, [sp, #60]	; 0x3c
8000aea0:	e58d204c 	str	r2, [sp, #76]	; 0x4c
8000aea4:	e58d2050 	str	r2, [sp, #80]	; 0x50
8000aea8:	e58d0040 	str	r0, [sp, #64]	; 0x40
8000aeac:	eafff955 	b	80009408 <_svfprintf_r+0x4cc>
8000aeb0:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
8000aeb4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
8000aeb8:	e28d20dc 	add	r2, sp, #220	; 0xdc
8000aebc:	eb000cb1 	bl	8000e188 <__ssprint_r>
8000aec0:	e3500000 	cmp	r0, #0
8000aec4:	1afff8de 	bne	80009244 <_svfprintf_r+0x308>
8000aec8:	e1a03007 	mov	r3, r7
8000aecc:	e59d50e4 	ldr	r5, [sp, #228]	; 0xe4
8000aed0:	eafffdff 	b	8000a6d4 <_svfprintf_r+0x1798>
8000aed4:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
8000aed8:	e3a0202d 	mov	r2, #45	; 0x2d
8000aedc:	e1cccfcc 	bic	ip, ip, ip, asr #31
8000aee0:	e3a00000 	mov	r0, #0
8000aee4:	e5cd2107 	strb	r2, [sp, #263]	; 0x107
8000aee8:	e58dc020 	str	ip, [sp, #32]
8000aeec:	e58d004c 	str	r0, [sp, #76]	; 0x4c
8000aef0:	eafff946 	b	80009410 <_svfprintf_r+0x4d4>
8000aef4:	e59d3048 	ldr	r3, [sp, #72]	; 0x48
8000aef8:	e3530066 	cmp	r3, #102	; 0x66
8000aefc:	1a000041 	bne	8000b008 <_svfprintf_r+0x20cc>
8000af00:	e59d3100 	ldr	r3, [sp, #256]	; 0x100
8000af04:	e3530000 	cmp	r3, #0
8000af08:	e58d3034 	str	r3, [sp, #52]	; 0x34
8000af0c:	da00003f 	ble	8000b010 <_svfprintf_r+0x20d4>
8000af10:	e3550000 	cmp	r5, #0
8000af14:	1a000002 	bne	8000af24 <_svfprintf_r+0x1fe8>
8000af18:	e59d0018 	ldr	r0, [sp, #24]
8000af1c:	e3100001 	tst	r0, #1
8000af20:	0a000002 	beq	8000af30 <_svfprintf_r+0x1ff4>
8000af24:	e2832001 	add	r2, r3, #1
8000af28:	e0822005 	add	r2, r2, r5
8000af2c:	e58d2034 	str	r2, [sp, #52]	; 0x34
8000af30:	e58d3050 	str	r3, [sp, #80]	; 0x50
8000af34:	e58d8048 	str	r8, [sp, #72]	; 0x48
8000af38:	eaffff2c 	b	8000abf0 <_svfprintf_r+0x1cb4>
8000af3c:	e1a03006 	mov	r3, r6
8000af40:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000af44:	e2866008 	add	r6, r6, #8
8000af48:	e51fab68 	ldr	sl, [pc, #-2920]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000af4c:	eafffc08 	b	80009f74 <_svfprintf_r+0x1038>
8000af50:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
8000af54:	e1530002 	cmp	r3, r2
8000af58:	ba000015 	blt	8000afb4 <_svfprintf_r+0x2078>
8000af5c:	e59dc018 	ldr	ip, [sp, #24]
8000af60:	e31c0001 	tst	ip, #1
8000af64:	12830001 	addne	r0, r3, #1
8000af68:	158d0034 	strne	r0, [sp, #52]	; 0x34
8000af6c:	13a08067 	movne	r8, #103	; 0x67
8000af70:	03a08067 	moveq	r8, #103	; 0x67
8000af74:	eaffffed 	b	8000af30 <_svfprintf_r+0x1ff4>
8000af78:	e1c51fc5 	bic	r1, r5, r5, asr #31
8000af7c:	e58d004c 	str	r0, [sp, #76]	; 0x4c
8000af80:	e58d1020 	str	r1, [sp, #32]
8000af84:	e5dd2107 	ldrb	r2, [sp, #263]	; 0x107
8000af88:	e58d403c 	str	r4, [sp, #60]	; 0x3c
8000af8c:	e58d5034 	str	r5, [sp, #52]	; 0x34
8000af90:	e58d0050 	str	r0, [sp, #80]	; 0x50
8000af94:	eafff91b 	b	80009408 <_svfprintf_r+0x4cc>
8000af98:	e2832030 	add	r2, r3, #48	; 0x30
8000af9c:	e28d00f0 	add	r0, sp, #240	; 0xf0
8000afa0:	e3a03030 	mov	r3, #48	; 0x30
8000afa4:	e5cd30f2 	strb	r3, [sp, #242]	; 0xf2
8000afa8:	e5cd20f3 	strb	r2, [sp, #243]	; 0xf3
8000afac:	e2801004 	add	r1, r0, #4
8000afb0:	eaffff01 	b	8000abbc <_svfprintf_r+0x1c80>
8000afb4:	e3530000 	cmp	r3, #0
8000afb8:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
8000afbc:	d2632002 	rsble	r2, r3, #2
8000afc0:	c3a02001 	movgt	r2, #1
8000afc4:	e0822001 	add	r2, r2, r1
8000afc8:	e58d2034 	str	r2, [sp, #52]	; 0x34
8000afcc:	e3a08067 	mov	r8, #103	; 0x67
8000afd0:	eaffffd6 	b	8000af30 <_svfprintf_r+0x1ff4>
8000afd4:	e2839008 	add	r9, r3, #8
8000afd8:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000afdc:	e51fabfc 	ldr	sl, [pc, #-3068]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000afe0:	eafffd02 	b	8000a3f0 <_svfprintf_r+0x14b4>
8000afe4:	e59d2018 	ldr	r2, [sp, #24]
8000afe8:	e2123001 	ands	r3, r2, #1
8000afec:	058d3050 	streq	r3, [sp, #80]	; 0x50
8000aff0:	0afffefe 	beq	8000abf0 <_svfprintf_r+0x1cb4>
8000aff4:	eafffef8 	b	8000abdc <_svfprintf_r+0x1ca0>
8000aff8:	e2893008 	add	r3, r9, #8
8000affc:	e59d40e0 	ldr	r4, [sp, #224]	; 0xe0
8000b000:	e51fac20 	ldr	sl, [pc, #-3104]	; 8000a3e8 <_svfprintf_r+0x14ac>
8000b004:	eafffdaa 	b	8000a6b4 <_svfprintf_r+0x1778>
8000b008:	e59d3100 	ldr	r3, [sp, #256]	; 0x100
8000b00c:	eafffec1 	b	8000ab18 <_svfprintf_r+0x1bdc>
8000b010:	e3550000 	cmp	r5, #0
8000b014:	1a000004 	bne	8000b02c <_svfprintf_r+0x20f0>
8000b018:	e59d1018 	ldr	r1, [sp, #24]
8000b01c:	e3110001 	tst	r1, #1
8000b020:	03a02001 	moveq	r2, #1
8000b024:	058d2034 	streq	r2, [sp, #52]	; 0x34
8000b028:	0affffc0 	beq	8000af30 <_svfprintf_r+0x1ff4>
8000b02c:	e2855002 	add	r5, r5, #2
8000b030:	e58d5034 	str	r5, [sp, #52]	; 0x34
8000b034:	eaffffbd 	b	8000af30 <_svfprintf_r+0x1ff4>
8000b038:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
8000b03c:	e5935000 	ldr	r5, [r3]
8000b040:	e2832004 	add	r2, r3, #4
8000b044:	e3550000 	cmp	r5, #0
8000b048:	b5dc3000 	ldrblt	r3, [ip]
8000b04c:	b3e05000 	mvnlt	r5, #0
8000b050:	b58d203c 	strlt	r2, [sp, #60]	; 0x3c
8000b054:	aafff9f8 	bge	8000983c <_svfprintf_r+0x900>
8000b058:	eafff804 	b	80009070 <_svfprintf_r+0x134>
8000b05c:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
8000b060:	e3a0300c 	mov	r3, #12
8000b064:	e5823000 	str	r3, [r2]
8000b068:	e3e03000 	mvn	r3, #0
8000b06c:	e58d3030 	str	r3, [sp, #48]	; 0x30
8000b070:	eafff879 	b	8000925c <_svfprintf_r+0x320>
8000b074:	00000000 	andeq	r0, r0, r0

8000b078 <quorem>:
8000b078:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000b07c:	e5903010 	ldr	r3, [r0, #16]
8000b080:	e5915010 	ldr	r5, [r1, #16]
8000b084:	e1550003 	cmp	r5, r3
8000b088:	e1a0a000 	mov	sl, r0
8000b08c:	e1a09001 	mov	r9, r1
8000b090:	c3a00000 	movgt	r0, #0
8000b094:	ca000069 	bgt	8000b240 <quorem+0x1c8>
8000b098:	e2853003 	add	r3, r5, #3
8000b09c:	e1a03103 	lsl	r3, r3, #2
8000b0a0:	e0817003 	add	r7, r1, r3
8000b0a4:	e5971004 	ldr	r1, [r7, #4]
8000b0a8:	e0803003 	add	r3, r0, r3
8000b0ac:	e5930004 	ldr	r0, [r3, #4]
8000b0b0:	e2811001 	add	r1, r1, #1
8000b0b4:	ebfff5f3 	bl	80008888 <__aeabi_uidiv>
8000b0b8:	e2506000 	subs	r6, r0, #0
8000b0bc:	e2455001 	sub	r5, r5, #1
8000b0c0:	e2877004 	add	r7, r7, #4
8000b0c4:	e2894014 	add	r4, r9, #20
8000b0c8:	e28a8014 	add	r8, sl, #20
8000b0cc:	0a00002e 	beq	8000b18c <quorem+0x114>
8000b0d0:	e3a00000 	mov	r0, #0
8000b0d4:	e1a02008 	mov	r2, r8
8000b0d8:	e1a03004 	mov	r3, r4
8000b0dc:	e1a01000 	mov	r1, r0
8000b0e0:	e493e004 	ldr	lr, [r3], #4
8000b0e4:	e1a0b80e 	lsl	fp, lr, #16
8000b0e8:	e1a0b82b 	lsr	fp, fp, #16
8000b0ec:	e1a0e82e 	lsr	lr, lr, #16
8000b0f0:	e02b0b96 	mla	fp, r6, fp, r0
8000b0f4:	e000069e 	mul	r0, lr, r6
8000b0f8:	e592e000 	ldr	lr, [r2]
8000b0fc:	e080082b 	add	r0, r0, fp, lsr #16
8000b100:	e1a0c80e 	lsl	ip, lr, #16
8000b104:	e081c82c 	add	ip, r1, ip, lsr #16
8000b108:	e1a0b80b 	lsl	fp, fp, #16
8000b10c:	e1a01800 	lsl	r1, r0, #16
8000b110:	e04cc82b 	sub	ip, ip, fp, lsr #16
8000b114:	e1a01821 	lsr	r1, r1, #16
8000b118:	e061182e 	rsb	r1, r1, lr, lsr #16
8000b11c:	e1a0b80c 	lsl	fp, ip, #16
8000b120:	e081184c 	add	r1, r1, ip, asr #16
8000b124:	e1a0c82b 	lsr	ip, fp, #16
8000b128:	e18cc801 	orr	ip, ip, r1, lsl #16
8000b12c:	e1570003 	cmp	r7, r3
8000b130:	e1a00820 	lsr	r0, r0, #16
8000b134:	e1a01841 	asr	r1, r1, #16
8000b138:	e482c004 	str	ip, [r2], #4
8000b13c:	2affffe7 	bcs	8000b0e0 <quorem+0x68>
8000b140:	e2852004 	add	r2, r5, #4
8000b144:	e08a3102 	add	r3, sl, r2, lsl #2
8000b148:	e5931004 	ldr	r1, [r3, #4]
8000b14c:	e3510000 	cmp	r1, #0
8000b150:	1a00000d 	bne	8000b18c <quorem+0x114>
8000b154:	e1580003 	cmp	r8, r3
8000b158:	2a00000a 	bcs	8000b188 <quorem+0x110>
8000b15c:	e79a2102 	ldr	r2, [sl, r2, lsl #2]
8000b160:	e3520000 	cmp	r2, #0
8000b164:	1a000007 	bne	8000b188 <quorem+0x110>
8000b168:	e2433004 	sub	r3, r3, #4
8000b16c:	ea000002 	b	8000b17c <quorem+0x104>
8000b170:	e4132004 	ldr	r2, [r3], #-4
8000b174:	e3520000 	cmp	r2, #0
8000b178:	1a000002 	bne	8000b188 <quorem+0x110>
8000b17c:	e1580003 	cmp	r8, r3
8000b180:	e2455001 	sub	r5, r5, #1
8000b184:	3afffff9 	bcc	8000b170 <quorem+0xf8>
8000b188:	e58a5010 	str	r5, [sl, #16]
8000b18c:	e1a0000a 	mov	r0, sl
8000b190:	e1a01009 	mov	r1, r9
8000b194:	eb0009b9 	bl	8000d880 <__mcmp>
8000b198:	e3500000 	cmp	r0, #0
8000b19c:	ba000026 	blt	8000b23c <quorem+0x1c4>
8000b1a0:	e2866001 	add	r6, r6, #1
8000b1a4:	e1a03008 	mov	r3, r8
8000b1a8:	e3a02000 	mov	r2, #0
8000b1ac:	e494c004 	ldr	ip, [r4], #4
8000b1b0:	e5930000 	ldr	r0, [r3]
8000b1b4:	e1a0180c 	lsl	r1, ip, #16
8000b1b8:	e1a09800 	lsl	r9, r0, #16
8000b1bc:	e1a01821 	lsr	r1, r1, #16
8000b1c0:	e0611829 	rsb	r1, r1, r9, lsr #16
8000b1c4:	e0811002 	add	r1, r1, r2
8000b1c8:	e1a0282c 	lsr	r2, ip, #16
8000b1cc:	e0622820 	rsb	r2, r2, r0, lsr #16
8000b1d0:	e1a09801 	lsl	r9, r1, #16
8000b1d4:	e0822841 	add	r2, r2, r1, asr #16
8000b1d8:	e1a01829 	lsr	r1, r9, #16
8000b1dc:	e1811802 	orr	r1, r1, r2, lsl #16
8000b1e0:	e1570004 	cmp	r7, r4
8000b1e4:	e1a02842 	asr	r2, r2, #16
8000b1e8:	e4831004 	str	r1, [r3], #4
8000b1ec:	2affffee 	bcs	8000b1ac <quorem+0x134>
8000b1f0:	e2852004 	add	r2, r5, #4
8000b1f4:	e08a3102 	add	r3, sl, r2, lsl #2
8000b1f8:	e5931004 	ldr	r1, [r3, #4]
8000b1fc:	e3510000 	cmp	r1, #0
8000b200:	1a00000d 	bne	8000b23c <quorem+0x1c4>
8000b204:	e1580003 	cmp	r8, r3
8000b208:	2a00000a 	bcs	8000b238 <quorem+0x1c0>
8000b20c:	e79a2102 	ldr	r2, [sl, r2, lsl #2]
8000b210:	e3520000 	cmp	r2, #0
8000b214:	1a000007 	bne	8000b238 <quorem+0x1c0>
8000b218:	e2433004 	sub	r3, r3, #4
8000b21c:	ea000002 	b	8000b22c <quorem+0x1b4>
8000b220:	e4132004 	ldr	r2, [r3], #-4
8000b224:	e3520000 	cmp	r2, #0
8000b228:	1a000002 	bne	8000b238 <quorem+0x1c0>
8000b22c:	e1580003 	cmp	r8, r3
8000b230:	e2455001 	sub	r5, r5, #1
8000b234:	3afffff9 	bcc	8000b220 <quorem+0x1a8>
8000b238:	e58a5010 	str	r5, [sl, #16]
8000b23c:	e1a00006 	mov	r0, r6
8000b240:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000b244:	e12fff1e 	bx	lr

8000b248 <_dtoa_r>:
8000b248:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000b24c:	e5901040 	ldr	r1, [r0, #64]	; 0x40
8000b250:	e24dd08c 	sub	sp, sp, #140	; 0x8c
8000b254:	e3510000 	cmp	r1, #0
8000b258:	e1a04000 	mov	r4, r0
8000b25c:	e28d80bc 	add	r8, sp, #188	; 0xbc
8000b260:	e8980900 	ldm	r8, {r8, fp}
8000b264:	e1a05002 	mov	r5, r2
8000b268:	e1a06003 	mov	r6, r3
8000b26c:	0a000007 	beq	8000b290 <_dtoa_r+0x48>
8000b270:	e5903044 	ldr	r3, [r0, #68]	; 0x44
8000b274:	e3a02001 	mov	r2, #1
8000b278:	e1a02312 	lsl	r2, r2, r3
8000b27c:	e5813004 	str	r3, [r1, #4]
8000b280:	e5812008 	str	r2, [r1, #8]
8000b284:	eb0007cb 	bl	8000d1b8 <_Bfree>
8000b288:	e3a03000 	mov	r3, #0
8000b28c:	e5843040 	str	r3, [r4, #64]	; 0x40
8000b290:	e2567000 	subs	r7, r6, #0
8000b294:	b3a03001 	movlt	r3, #1
8000b298:	a3a03000 	movge	r3, #0
8000b29c:	b5883000 	strlt	r3, [r8]
8000b2a0:	a5883000 	strge	r3, [r8]
8000b2a4:	e59f34e0 	ldr	r3, [pc, #1248]	; 8000b78c <_dtoa_r+0x544>
8000b2a8:	b3c77102 	biclt	r7, r7, #-2147483648	; 0x80000000
8000b2ac:	e59f24d8 	ldr	r2, [pc, #1240]	; 8000b78c <_dtoa_r+0x544>
8000b2b0:	e0073003 	and	r3, r7, r3
8000b2b4:	b1a06007 	movlt	r6, r7
8000b2b8:	e1530002 	cmp	r3, r2
8000b2bc:	0a000016 	beq	8000b31c <_dtoa_r+0xd4>
8000b2c0:	e3a03000 	mov	r3, #0
8000b2c4:	e1a00005 	mov	r0, r5
8000b2c8:	e1a01006 	mov	r1, r6
8000b2cc:	e3a02000 	mov	r2, #0
8000b2d0:	eb0015bf 	bl	800109d4 <__aeabi_dcmpeq>
8000b2d4:	e3500000 	cmp	r0, #0
8000b2d8:	e3a03001 	mov	r3, #1
8000b2dc:	13a03000 	movne	r3, #0
8000b2e0:	e31300ff 	tst	r3, #255	; 0xff
8000b2e4:	e1a09005 	mov	r9, r5
8000b2e8:	e1a0a006 	mov	sl, r6
8000b2ec:	1a000018 	bne	8000b354 <_dtoa_r+0x10c>
8000b2f0:	e59d20b8 	ldr	r2, [sp, #184]	; 0xb8
8000b2f4:	e35b0000 	cmp	fp, #0
8000b2f8:	e3a03001 	mov	r3, #1
8000b2fc:	e5823000 	str	r3, [r2]
8000b300:	059f0450 	ldreq	r0, [pc, #1104]	; 8000b758 <_dtoa_r+0x510>
8000b304:	159f0450 	ldrne	r0, [pc, #1104]	; 8000b75c <_dtoa_r+0x514>
8000b308:	158b0000 	strne	r0, [fp]
8000b30c:	12400001 	subne	r0, r0, #1
8000b310:	e28dd08c 	add	sp, sp, #140	; 0x8c
8000b314:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000b318:	e12fff1e 	bx	lr
8000b31c:	e59f343c 	ldr	r3, [pc, #1084]	; 8000b760 <_dtoa_r+0x518>
8000b320:	e59d10b8 	ldr	r1, [sp, #184]	; 0xb8
8000b324:	e3550000 	cmp	r5, #0
8000b328:	e5813000 	str	r3, [r1]
8000b32c:	159f0430 	ldrne	r0, [pc, #1072]	; 8000b764 <_dtoa_r+0x51c>
8000b330:	0a000086 	beq	8000b550 <_dtoa_r+0x308>
8000b334:	e35b0000 	cmp	fp, #0
8000b338:	0afffff4 	beq	8000b310 <_dtoa_r+0xc8>
8000b33c:	e5d03003 	ldrb	r3, [r0, #3]
8000b340:	e3530000 	cmp	r3, #0
8000b344:	e2803003 	add	r3, r0, #3
8000b348:	12803008 	addne	r3, r0, #8
8000b34c:	e58b3000 	str	r3, [fp]
8000b350:	eaffffee 	b	8000b310 <_dtoa_r+0xc8>
8000b354:	e28d1080 	add	r1, sp, #128	; 0x80
8000b358:	e1a03006 	mov	r3, r6
8000b35c:	e58d1000 	str	r1, [sp]
8000b360:	e1a00004 	mov	r0, r4
8000b364:	e28d1084 	add	r1, sp, #132	; 0x84
8000b368:	e1a02005 	mov	r2, r5
8000b36c:	e58d1004 	str	r1, [sp, #4]
8000b370:	eb0009f9 	bl	8000db5c <__d2b>
8000b374:	e1a03087 	lsl	r3, r7, #1
8000b378:	e1b03aa3 	lsrs	r3, r3, #21
8000b37c:	e1a08000 	mov	r8, r0
8000b380:	1a00007a 	bne	8000b570 <_dtoa_r+0x328>
8000b384:	e28d3080 	add	r3, sp, #128	; 0x80
8000b388:	e8930208 	ldm	r3, {r3, r9}
8000b38c:	e0893003 	add	r3, r9, r3
8000b390:	e2833e43 	add	r3, r3, #1072	; 0x430
8000b394:	e283a002 	add	sl, r3, #2
8000b398:	e35a0020 	cmp	sl, #32
8000b39c:	c243301e 	subgt	r3, r3, #30
8000b3a0:	c1a03335 	lsrgt	r3, r5, r3
8000b3a4:	c26a0040 	rsbgt	r0, sl, #64	; 0x40
8000b3a8:	d26a0020 	rsble	r0, sl, #32
8000b3ac:	c1830017 	orrgt	r0, r3, r7, lsl r0
8000b3b0:	d1a00015 	lslle	r0, r5, r0
8000b3b4:	eb0013ec 	bl	8001036c <__aeabi_ui2d>
8000b3b8:	e1a03001 	mov	r3, r1
8000b3bc:	e1a02000 	mov	r2, r0
8000b3c0:	e58d2038 	str	r2, [sp, #56]	; 0x38
8000b3c4:	e58d303c 	str	r3, [sp, #60]	; 0x3c
8000b3c8:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
8000b3cc:	e3a0c001 	mov	ip, #1
8000b3d0:	e243361f 	sub	r3, r3, #32505856	; 0x1f00000
8000b3d4:	e24aae43 	sub	sl, sl, #1072	; 0x430
8000b3d8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
8000b3dc:	e58dc068 	str	ip, [sp, #104]	; 0x68
8000b3e0:	e24aa003 	sub	sl, sl, #3
8000b3e4:	e3a02000 	mov	r2, #0
8000b3e8:	e59f3378 	ldr	r3, [pc, #888]	; 8000b768 <_dtoa_r+0x520>
8000b3ec:	e28d1038 	add	r1, sp, #56	; 0x38
8000b3f0:	e8910003 	ldm	r1, {r0, r1}
8000b3f4:	eb001317 	bl	80010058 <__aeabi_dsub>
8000b3f8:	e28f3d0d 	add	r3, pc, #832	; 0x340
8000b3fc:	e893000c 	ldm	r3, {r2, r3}
8000b400:	eb001419 	bl	8001046c <__aeabi_dmul>
8000b404:	e28f3fcf 	add	r3, pc, #828	; 0x33c
8000b408:	e893000c 	ldm	r3, {r2, r3}
8000b40c:	eb001312 	bl	8001005c <__adddf3>
8000b410:	e58d0020 	str	r0, [sp, #32]
8000b414:	e58d1024 	str	r1, [sp, #36]	; 0x24
8000b418:	e1a0000a 	mov	r0, sl
8000b41c:	eb0013db 	bl	80010390 <__aeabi_i2d>
8000b420:	e28f3fca 	add	r3, pc, #808	; 0x328
8000b424:	e893000c 	ldm	r3, {r2, r3}
8000b428:	eb00140f 	bl	8001046c <__aeabi_dmul>
8000b42c:	e1a02000 	mov	r2, r0
8000b430:	e1a03001 	mov	r3, r1
8000b434:	e28d1020 	add	r1, sp, #32
8000b438:	e8910003 	ldm	r1, {r0, r1}
8000b43c:	eb001306 	bl	8001005c <__adddf3>
8000b440:	e58d0020 	str	r0, [sp, #32]
8000b444:	e58d1024 	str	r1, [sp, #36]	; 0x24
8000b448:	eb00157f 	bl	80010a4c <__aeabi_d2iz>
8000b44c:	e3a02000 	mov	r2, #0
8000b450:	e1a07000 	mov	r7, r0
8000b454:	e3a03000 	mov	r3, #0
8000b458:	e28d1020 	add	r1, sp, #32
8000b45c:	e8910003 	ldm	r1, {r0, r1}
8000b460:	eb001561 	bl	800109ec <__aeabi_dcmplt>
8000b464:	e3500000 	cmp	r0, #0
8000b468:	0a000006 	beq	8000b488 <_dtoa_r+0x240>
8000b46c:	e1a00007 	mov	r0, r7
8000b470:	eb0013c6 	bl	80010390 <__aeabi_i2d>
8000b474:	e28d3020 	add	r3, sp, #32
8000b478:	e893000c 	ldm	r3, {r2, r3}
8000b47c:	eb001554 	bl	800109d4 <__aeabi_dcmpeq>
8000b480:	e3500000 	cmp	r0, #0
8000b484:	02477001 	subeq	r7, r7, #1
8000b488:	e3570016 	cmp	r7, #22
8000b48c:	83a02001 	movhi	r2, #1
8000b490:	858d2064 	strhi	r2, [sp, #100]	; 0x64
8000b494:	8a00000b 	bhi	8000b4c8 <_dtoa_r+0x280>
8000b498:	e59f32e0 	ldr	r3, [pc, #736]	; 8000b780 <_dtoa_r+0x538>
8000b49c:	e0833187 	add	r3, r3, r7, lsl #3
8000b4a0:	e8930003 	ldm	r3, {r0, r1}
8000b4a4:	e1a02005 	mov	r2, r5
8000b4a8:	e1a03006 	mov	r3, r6
8000b4ac:	eb001560 	bl	80010a34 <__aeabi_dcmpgt>
8000b4b0:	e3500000 	cmp	r0, #0
8000b4b4:	13a01000 	movne	r1, #0
8000b4b8:	03a03000 	moveq	r3, #0
8000b4bc:	158d1064 	strne	r1, [sp, #100]	; 0x64
8000b4c0:	058d3064 	streq	r3, [sp, #100]	; 0x64
8000b4c4:	12477001 	subne	r7, r7, #1
8000b4c8:	e2499001 	sub	r9, r9, #1
8000b4cc:	e059900a 	subs	r9, r9, sl
8000b4d0:	42699000 	rsbmi	r9, r9, #0
8000b4d4:	43a0c000 	movmi	ip, #0
8000b4d8:	53a01000 	movpl	r1, #0
8000b4dc:	458d9044 	strmi	r9, [sp, #68]	; 0x44
8000b4e0:	458dc034 	strmi	ip, [sp, #52]	; 0x34
8000b4e4:	558d9034 	strpl	r9, [sp, #52]	; 0x34
8000b4e8:	558d1044 	strpl	r1, [sp, #68]	; 0x44
8000b4ec:	e3570000 	cmp	r7, #0
8000b4f0:	ba000203 	blt	8000bd04 <_dtoa_r+0xabc>
8000b4f4:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
8000b4f8:	e3a03000 	mov	r3, #0
8000b4fc:	e0822007 	add	r2, r2, r7
8000b500:	e58d2034 	str	r2, [sp, #52]	; 0x34
8000b504:	e58d7054 	str	r7, [sp, #84]	; 0x54
8000b508:	e58d304c 	str	r3, [sp, #76]	; 0x4c
8000b50c:	e59d30b0 	ldr	r3, [sp, #176]	; 0xb0
8000b510:	e3530009 	cmp	r3, #9
8000b514:	8a000025 	bhi	8000b5b0 <_dtoa_r+0x368>
8000b518:	e3530005 	cmp	r3, #5
8000b51c:	c2433004 	subgt	r3, r3, #4
8000b520:	c58d30b0 	strgt	r3, [sp, #176]	; 0xb0
8000b524:	e59dc0b0 	ldr	ip, [sp, #176]	; 0xb0
8000b528:	e24c3002 	sub	r3, ip, #2
8000b52c:	c3a0a000 	movgt	sl, #0
8000b530:	d3a0a001 	movle	sl, #1
8000b534:	e3530003 	cmp	r3, #3
8000b538:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
8000b53c:	ea0002d3 	b	8000c090 <_dtoa_r+0xe48>
8000b540:	8000c040 	.word	0x8000c040
8000b544:	8000c084 	.word	0x8000c084
8000b548:	8000c078 	.word	0x8000c078
8000b54c:	8000bfdc 	.word	0x8000bfdc
8000b550:	e3c704ff 	bic	r0, r7, #-16777216	; 0xff000000
8000b554:	e3c0060f 	bic	r0, r0, #15728640	; 0xf00000
8000b558:	e59f3204 	ldr	r3, [pc, #516]	; 8000b764 <_dtoa_r+0x51c>
8000b55c:	e59f2208 	ldr	r2, [pc, #520]	; 8000b76c <_dtoa_r+0x524>
8000b560:	e3500000 	cmp	r0, #0
8000b564:	01a00002 	moveq	r0, r2
8000b568:	11a00003 	movne	r0, r3
8000b56c:	eaffff70 	b	8000b334 <_dtoa_r+0xec>
8000b570:	e1a01005 	mov	r1, r5
8000b574:	e1a02006 	mov	r2, r6
8000b578:	e58d1038 	str	r1, [sp, #56]	; 0x38
8000b57c:	e58d203c 	str	r2, [sp, #60]	; 0x3c
8000b580:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
8000b584:	e3cc24ff 	bic	r2, ip, #-16777216	; 0xff000000
8000b588:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
8000b58c:	e38225ff 	orr	r2, r2, #1069547520	; 0x3fc00000
8000b590:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
8000b594:	e3822603 	orr	r2, r2, #3145728	; 0x300000
8000b598:	e3a01000 	mov	r1, #0
8000b59c:	e58d203c 	str	r2, [sp, #60]	; 0x3c
8000b5a0:	e243a003 	sub	sl, r3, #3
8000b5a4:	e59d9084 	ldr	r9, [sp, #132]	; 0x84
8000b5a8:	e58d1068 	str	r1, [sp, #104]	; 0x68
8000b5ac:	eaffff8c 	b	8000b3e4 <_dtoa_r+0x19c>
8000b5b0:	e3a01000 	mov	r1, #0
8000b5b4:	e3e02000 	mvn	r2, #0
8000b5b8:	e3a03001 	mov	r3, #1
8000b5bc:	e58d10b0 	str	r1, [sp, #176]	; 0xb0
8000b5c0:	e58d2048 	str	r2, [sp, #72]	; 0x48
8000b5c4:	e58d3050 	str	r3, [sp, #80]	; 0x50
8000b5c8:	e58d2040 	str	r2, [sp, #64]	; 0x40
8000b5cc:	e58d10b4 	str	r1, [sp, #180]	; 0xb4
8000b5d0:	e1a0a001 	mov	sl, r1
8000b5d4:	e3a01000 	mov	r1, #0
8000b5d8:	e5841044 	str	r1, [r4, #68]	; 0x44
8000b5dc:	e1a00004 	mov	r0, r4
8000b5e0:	eb0006d2 	bl	8000d130 <_Balloc>
8000b5e4:	e35a0000 	cmp	sl, #0
8000b5e8:	e58d0020 	str	r0, [sp, #32]
8000b5ec:	e5840040 	str	r0, [r4, #64]	; 0x40
8000b5f0:	0a0000ad 	beq	8000b8ac <_dtoa_r+0x664>
8000b5f4:	e1a01005 	mov	r1, r5
8000b5f8:	e1a02006 	mov	r2, r6
8000b5fc:	e3570000 	cmp	r7, #0
8000b600:	e58d5028 	str	r5, [sp, #40]	; 0x28
8000b604:	e58d602c 	str	r6, [sp, #44]	; 0x2c
8000b608:	e58d1038 	str	r1, [sp, #56]	; 0x38
8000b60c:	e58d203c 	str	r2, [sp, #60]	; 0x3c
8000b610:	da00031d 	ble	8000c28c <_dtoa_r+0x1044>
8000b614:	e59f3164 	ldr	r3, [pc, #356]	; 8000b780 <_dtoa_r+0x538>
8000b618:	e207200f 	and	r2, r7, #15
8000b61c:	e0833182 	add	r3, r3, r2, lsl #3
8000b620:	e1a05247 	asr	r5, r7, #4
8000b624:	e8930006 	ldm	r3, {r1, r2}
8000b628:	e3150010 	tst	r5, #16
8000b62c:	e58d1058 	str	r1, [sp, #88]	; 0x58
8000b630:	e58d205c 	str	r2, [sp, #92]	; 0x5c
8000b634:	03a0a002 	moveq	sl, #2
8000b638:	1a0001b9 	bne	8000bd24 <_dtoa_r+0xadc>
8000b63c:	e3550000 	cmp	r5, #0
8000b640:	0a00000c 	beq	8000b678 <_dtoa_r+0x430>
8000b644:	e59f6130 	ldr	r6, [pc, #304]	; 8000b77c <_dtoa_r+0x534>
8000b648:	e28d1058 	add	r1, sp, #88	; 0x58
8000b64c:	e8910003 	ldm	r1, {r0, r1}
8000b650:	e3150001 	tst	r5, #1
8000b654:	0a000002 	beq	8000b664 <_dtoa_r+0x41c>
8000b658:	e896000c 	ldm	r6, {r2, r3}
8000b65c:	eb001382 	bl	8001046c <__aeabi_dmul>
8000b660:	e28aa001 	add	sl, sl, #1
8000b664:	e1b050c5 	asrs	r5, r5, #1
8000b668:	e2866008 	add	r6, r6, #8
8000b66c:	1afffff7 	bne	8000b650 <_dtoa_r+0x408>
8000b670:	e58d0058 	str	r0, [sp, #88]	; 0x58
8000b674:	e58d105c 	str	r1, [sp, #92]	; 0x5c
8000b678:	e28d1028 	add	r1, sp, #40	; 0x28
8000b67c:	e8910003 	ldm	r1, {r0, r1}
8000b680:	e28d3058 	add	r3, sp, #88	; 0x58
8000b684:	e893000c 	ldm	r3, {r2, r3}
8000b688:	eb00141b 	bl	800106fc <__aeabi_ddiv>
8000b68c:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000b690:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000b694:	e59d2064 	ldr	r2, [sp, #100]	; 0x64
8000b698:	e3520000 	cmp	r2, #0
8000b69c:	0a00003b 	beq	8000b790 <_dtoa_r+0x548>
8000b6a0:	e59f30d0 	ldr	r3, [pc, #208]	; 8000b778 <_dtoa_r+0x530>
8000b6a4:	e28d1028 	add	r1, sp, #40	; 0x28
8000b6a8:	e8910003 	ldm	r1, {r0, r1}
8000b6ac:	e3a02000 	mov	r2, #0
8000b6b0:	eb0014cd 	bl	800109ec <__aeabi_dcmplt>
8000b6b4:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
8000b6b8:	e3500000 	cmp	r0, #0
8000b6bc:	e3a03001 	mov	r3, #1
8000b6c0:	03a03000 	moveq	r3, #0
8000b6c4:	e35c0000 	cmp	ip, #0
8000b6c8:	d3a03000 	movle	r3, #0
8000b6cc:	c2033001 	andgt	r3, r3, #1
8000b6d0:	e3530000 	cmp	r3, #0
8000b6d4:	0a00002d 	beq	8000b790 <_dtoa_r+0x548>
8000b6d8:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
8000b6dc:	e3510000 	cmp	r1, #0
8000b6e0:	da00006d 	ble	8000b89c <_dtoa_r+0x654>
8000b6e4:	e3a02000 	mov	r2, #0
8000b6e8:	e59f3094 	ldr	r3, [pc, #148]	; 8000b784 <_dtoa_r+0x53c>
8000b6ec:	e28d1028 	add	r1, sp, #40	; 0x28
8000b6f0:	e8910003 	ldm	r1, {r0, r1}
8000b6f4:	eb00135c 	bl	8001046c <__aeabi_dmul>
8000b6f8:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000b6fc:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000b700:	e28a0001 	add	r0, sl, #1
8000b704:	eb001321 	bl	80010390 <__aeabi_i2d>
8000b708:	e1a02000 	mov	r2, r0
8000b70c:	e1a03001 	mov	r3, r1
8000b710:	e28d1028 	add	r1, sp, #40	; 0x28
8000b714:	e8910003 	ldm	r1, {r0, r1}
8000b718:	eb001353 	bl	8001046c <__aeabi_dmul>
8000b71c:	e3a02000 	mov	r2, #0
8000b720:	e59f3048 	ldr	r3, [pc, #72]	; 8000b770 <_dtoa_r+0x528>
8000b724:	eb00124c 	bl	8001005c <__adddf3>
8000b728:	e2472001 	sub	r2, r7, #1
8000b72c:	e1a09000 	mov	r9, r0
8000b730:	e58d2058 	str	r2, [sp, #88]	; 0x58
8000b734:	e241a50d 	sub	sl, r1, #54525952	; 0x3400000
8000b738:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
8000b73c:	ea0001b6 	b	8000be1c <_dtoa_r+0xbd4>
8000b740:	636f4361 	.word	0x636f4361
8000b744:	3fd287a7 	.word	0x3fd287a7
8000b748:	8b60c8b3 	.word	0x8b60c8b3
8000b74c:	3fc68a28 	.word	0x3fc68a28
8000b750:	509f79fb 	.word	0x509f79fb
8000b754:	3fd34413 	.word	0x3fd34413
8000b758:	80012724 	.word	0x80012724
8000b75c:	80012725 	.word	0x80012725
8000b760:	0000270f 	.word	0x0000270f
8000b764:	80012734 	.word	0x80012734
8000b768:	3ff80000 	.word	0x3ff80000
8000b76c:	80012728 	.word	0x80012728
8000b770:	401c0000 	.word	0x401c0000
8000b774:	40140000 	.word	0x40140000
8000b778:	3ff00000 	.word	0x3ff00000
8000b77c:	80012670 	.word	0x80012670
8000b780:	800125a8 	.word	0x800125a8
8000b784:	40240000 	.word	0x40240000
8000b788:	3fe00000 	.word	0x3fe00000
8000b78c:	7ff00000 	.word	0x7ff00000
8000b790:	e1a0000a 	mov	r0, sl
8000b794:	eb0012fd 	bl	80010390 <__aeabi_i2d>
8000b798:	e28d3028 	add	r3, sp, #40	; 0x28
8000b79c:	e893000c 	ldm	r3, {r2, r3}
8000b7a0:	eb001331 	bl	8001046c <__aeabi_dmul>
8000b7a4:	e51f303c 	ldr	r3, [pc, #-60]	; 8000b770 <_dtoa_r+0x528>
8000b7a8:	e3a02000 	mov	r2, #0
8000b7ac:	eb00122a 	bl	8001005c <__adddf3>
8000b7b0:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
8000b7b4:	e241550d 	sub	r5, r1, #54525952	; 0x3400000
8000b7b8:	e3530000 	cmp	r3, #0
8000b7bc:	e1a09000 	mov	r9, r0
8000b7c0:	e1a0a005 	mov	sl, r5
8000b7c4:	1a000192 	bne	8000be14 <_dtoa_r+0xbcc>
8000b7c8:	e3a02000 	mov	r2, #0
8000b7cc:	e51f3060 	ldr	r3, [pc, #-96]	; 8000b774 <_dtoa_r+0x52c>
8000b7d0:	e28d1028 	add	r1, sp, #40	; 0x28
8000b7d4:	e8910003 	ldm	r1, {r0, r1}
8000b7d8:	eb00121e 	bl	80010058 <__aeabi_dsub>
8000b7dc:	e1a02009 	mov	r2, r9
8000b7e0:	e1a03005 	mov	r3, r5
8000b7e4:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000b7e8:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000b7ec:	eb001490 	bl	80010a34 <__aeabi_dcmpgt>
8000b7f0:	e3500000 	cmp	r0, #0
8000b7f4:	1a000183 	bne	8000be08 <_dtoa_r+0xbc0>
8000b7f8:	e1a02009 	mov	r2, r9
8000b7fc:	e2853102 	add	r3, r5, #-2147483648	; 0x80000000
8000b800:	e28d1028 	add	r1, sp, #40	; 0x28
8000b804:	e8910003 	ldm	r1, {r0, r1}
8000b808:	eb001477 	bl	800109ec <__aeabi_dcmplt>
8000b80c:	e3500000 	cmp	r0, #0
8000b810:	0a000021 	beq	8000b89c <_dtoa_r+0x654>
8000b814:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
8000b818:	e58d9038 	str	r9, [sp, #56]	; 0x38
8000b81c:	e59d20b4 	ldr	r2, [sp, #180]	; 0xb4
8000b820:	e59d5020 	ldr	r5, [sp, #32]
8000b824:	e1e07002 	mvn	r7, r2
8000b828:	e3a0a000 	mov	sl, #0
8000b82c:	e1a00004 	mov	r0, r4
8000b830:	e1a01009 	mov	r1, r9
8000b834:	eb00065f 	bl	8000d1b8 <_Bfree>
8000b838:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
8000b83c:	e3530000 	cmp	r3, #0
8000b840:	0a000005 	beq	8000b85c <_dtoa_r+0x614>
8000b844:	e15a0003 	cmp	sl, r3
8000b848:	135a0000 	cmpne	sl, #0
8000b84c:	1a000282 	bne	8000c25c <_dtoa_r+0x1014>
8000b850:	e1a00004 	mov	r0, r4
8000b854:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
8000b858:	eb000656 	bl	8000d1b8 <_Bfree>
8000b85c:	e1a00004 	mov	r0, r4
8000b860:	e1a01008 	mov	r1, r8
8000b864:	eb000653 	bl	8000d1b8 <_Bfree>
8000b868:	e3a03000 	mov	r3, #0
8000b86c:	e5c53000 	strb	r3, [r5]
8000b870:	e59dc0b8 	ldr	ip, [sp, #184]	; 0xb8
8000b874:	e2877001 	add	r7, r7, #1
8000b878:	e35b0000 	cmp	fp, #0
8000b87c:	e58c7000 	str	r7, [ip]
8000b880:	e59d0020 	ldr	r0, [sp, #32]
8000b884:	158b5000 	strne	r5, [fp]
8000b888:	eafffea0 	b	8000b310 <_dtoa_r+0xc8>
8000b88c:	e59d707c 	ldr	r7, [sp, #124]	; 0x7c
8000b890:	e59d806c 	ldr	r8, [sp, #108]	; 0x6c
8000b894:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
8000b898:	e59db070 	ldr	fp, [sp, #112]	; 0x70
8000b89c:	e28d2038 	add	r2, sp, #56	; 0x38
8000b8a0:	e8920006 	ldm	r2, {r1, r2}
8000b8a4:	e1a05001 	mov	r5, r1
8000b8a8:	e1a06002 	mov	r6, r2
8000b8ac:	e59d3080 	ldr	r3, [sp, #128]	; 0x80
8000b8b0:	e357000e 	cmp	r7, #14
8000b8b4:	c3a09000 	movgt	r9, #0
8000b8b8:	d3a09001 	movle	r9, #1
8000b8bc:	e3530000 	cmp	r3, #0
8000b8c0:	b3a09000 	movlt	r9, #0
8000b8c4:	e3590000 	cmp	r9, #0
8000b8c8:	0a00008f 	beq	8000bb0c <_dtoa_r+0x8c4>
8000b8cc:	e59d20b4 	ldr	r2, [sp, #180]	; 0xb4
8000b8d0:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
8000b8d4:	e1a09fa2 	lsr	r9, r2, #31
8000b8d8:	e3530000 	cmp	r3, #0
8000b8dc:	c3a09000 	movgt	r9, #0
8000b8e0:	d2099001 	andle	r9, r9, #1
8000b8e4:	e51f316c 	ldr	r3, [pc, #-364]	; 8000b780 <_dtoa_r+0x538>
8000b8e8:	e0833187 	add	r3, r3, r7, lsl #3
8000b8ec:	e8930006 	ldm	r3, {r1, r2}
8000b8f0:	e3590000 	cmp	r9, #0
8000b8f4:	e58d1010 	str	r1, [sp, #16]
8000b8f8:	e58d2014 	str	r2, [sp, #20]
8000b8fc:	1a000134 	bne	8000bdd4 <_dtoa_r+0xb8c>
8000b900:	e1a03002 	mov	r3, r2
8000b904:	e1a00005 	mov	r0, r5
8000b908:	e1a02001 	mov	r2, r1
8000b90c:	e1a01006 	mov	r1, r6
8000b910:	eb001379 	bl	800106fc <__aeabi_ddiv>
8000b914:	eb00144c 	bl	80010a4c <__aeabi_d2iz>
8000b918:	e1a0a000 	mov	sl, r0
8000b91c:	eb00129b 	bl	80010390 <__aeabi_i2d>
8000b920:	e28d3010 	add	r3, sp, #16
8000b924:	e893000c 	ldm	r3, {r2, r3}
8000b928:	eb0012cf 	bl	8001046c <__aeabi_dmul>
8000b92c:	e1a02000 	mov	r2, r0
8000b930:	e1a03001 	mov	r3, r1
8000b934:	e1a00005 	mov	r0, r5
8000b938:	e1a01006 	mov	r1, r6
8000b93c:	eb0011c5 	bl	80010058 <__aeabi_dsub>
8000b940:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
8000b944:	e59d5020 	ldr	r5, [sp, #32]
8000b948:	e28a3030 	add	r3, sl, #48	; 0x30
8000b94c:	e3520001 	cmp	r2, #1
8000b950:	e58d0018 	str	r0, [sp, #24]
8000b954:	e58d101c 	str	r1, [sp, #28]
8000b958:	e4c53001 	strb	r3, [r5], #1
8000b95c:	0a000040 	beq	8000ba64 <_dtoa_r+0x81c>
8000b960:	e3a02000 	mov	r2, #0
8000b964:	e51f31e8 	ldr	r3, [pc, #-488]	; 8000b784 <_dtoa_r+0x53c>
8000b968:	eb0012bf 	bl	8001046c <__aeabi_dmul>
8000b96c:	e3a03000 	mov	r3, #0
8000b970:	e3a02000 	mov	r2, #0
8000b974:	e58d0018 	str	r0, [sp, #24]
8000b978:	e58d101c 	str	r1, [sp, #28]
8000b97c:	eb001414 	bl	800109d4 <__aeabi_dcmpeq>
8000b980:	e3500000 	cmp	r0, #0
8000b984:	e3a03001 	mov	r3, #1
8000b988:	11a03009 	movne	r3, r9
8000b98c:	e31300ff 	tst	r3, #255	; 0xff
8000b990:	0affffb1 	beq	8000b85c <_dtoa_r+0x614>
8000b994:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
8000b998:	e59dc020 	ldr	ip, [sp, #32]
8000b99c:	e1a06005 	mov	r6, r5
8000b9a0:	e58d8034 	str	r8, [sp, #52]	; 0x34
8000b9a4:	e08c9001 	add	r9, ip, r1
8000b9a8:	e1a08004 	mov	r8, r4
8000b9ac:	e58d7040 	str	r7, [sp, #64]	; 0x40
8000b9b0:	e28d5018 	add	r5, sp, #24
8000b9b4:	e8950030 	ldm	r5, {r4, r5}
8000b9b8:	ea00000a 	b	8000b9e8 <_dtoa_r+0x7a0>
8000b9bc:	eb0012aa 	bl	8001046c <__aeabi_dmul>
8000b9c0:	e3a03000 	mov	r3, #0
8000b9c4:	e3a02000 	mov	r2, #0
8000b9c8:	e1a04000 	mov	r4, r0
8000b9cc:	e1a05001 	mov	r5, r1
8000b9d0:	eb0013ff 	bl	800109d4 <__aeabi_dcmpeq>
8000b9d4:	e3500000 	cmp	r0, #0
8000b9d8:	e3a03001 	mov	r3, #1
8000b9dc:	13a03000 	movne	r3, #0
8000b9e0:	e31300ff 	tst	r3, #255	; 0xff
8000b9e4:	0a000316 	beq	8000c644 <_dtoa_r+0x13fc>
8000b9e8:	e28d3010 	add	r3, sp, #16
8000b9ec:	e893000c 	ldm	r3, {r2, r3}
8000b9f0:	e1a00004 	mov	r0, r4
8000b9f4:	e1a01005 	mov	r1, r5
8000b9f8:	eb00133f 	bl	800106fc <__aeabi_ddiv>
8000b9fc:	eb001412 	bl	80010a4c <__aeabi_d2iz>
8000ba00:	e1a0a000 	mov	sl, r0
8000ba04:	eb001261 	bl	80010390 <__aeabi_i2d>
8000ba08:	e28d3010 	add	r3, sp, #16
8000ba0c:	e893000c 	ldm	r3, {r2, r3}
8000ba10:	eb001295 	bl	8001046c <__aeabi_dmul>
8000ba14:	e1a02000 	mov	r2, r0
8000ba18:	e1a03001 	mov	r3, r1
8000ba1c:	e1a00004 	mov	r0, r4
8000ba20:	e1a01005 	mov	r1, r5
8000ba24:	eb00118b 	bl	80010058 <__aeabi_dsub>
8000ba28:	e28ac030 	add	ip, sl, #48	; 0x30
8000ba2c:	e4c6c001 	strb	ip, [r6], #1
8000ba30:	e1560009 	cmp	r6, r9
8000ba34:	e1a04000 	mov	r4, r0
8000ba38:	e1a05001 	mov	r5, r1
8000ba3c:	e3a02000 	mov	r2, #0
8000ba40:	e51f32c4 	ldr	r3, [pc, #-708]	; 8000b784 <_dtoa_r+0x53c>
8000ba44:	e1a07006 	mov	r7, r6
8000ba48:	1affffdb 	bne	8000b9bc <_dtoa_r+0x774>
8000ba4c:	e58d4018 	str	r4, [sp, #24]
8000ba50:	e58d501c 	str	r5, [sp, #28]
8000ba54:	e59d7040 	ldr	r7, [sp, #64]	; 0x40
8000ba58:	e1a04008 	mov	r4, r8
8000ba5c:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
8000ba60:	e1a05006 	mov	r5, r6
8000ba64:	e28d1018 	add	r1, sp, #24
8000ba68:	e8910003 	ldm	r1, {r0, r1}
8000ba6c:	e1a02000 	mov	r2, r0
8000ba70:	e1a03001 	mov	r3, r1
8000ba74:	eb001178 	bl	8001005c <__adddf3>
8000ba78:	e58d0018 	str	r0, [sp, #24]
8000ba7c:	e58d101c 	str	r1, [sp, #28]
8000ba80:	e28d3018 	add	r3, sp, #24
8000ba84:	e893000c 	ldm	r3, {r2, r3}
8000ba88:	e28d1010 	add	r1, sp, #16
8000ba8c:	e8910003 	ldm	r1, {r0, r1}
8000ba90:	eb0013d5 	bl	800109ec <__aeabi_dcmplt>
8000ba94:	e3500000 	cmp	r0, #0
8000ba98:	1a000008 	bne	8000bac0 <_dtoa_r+0x878>
8000ba9c:	e28d1010 	add	r1, sp, #16
8000baa0:	e8910003 	ldm	r1, {r0, r1}
8000baa4:	e28d3018 	add	r3, sp, #24
8000baa8:	e893000c 	ldm	r3, {r2, r3}
8000baac:	eb0013c8 	bl	800109d4 <__aeabi_dcmpeq>
8000bab0:	e3500000 	cmp	r0, #0
8000bab4:	0affff68 	beq	8000b85c <_dtoa_r+0x614>
8000bab8:	e31a0001 	tst	sl, #1
8000babc:	0affff66 	beq	8000b85c <_dtoa_r+0x614>
8000bac0:	e58d7058 	str	r7, [sp, #88]	; 0x58
8000bac4:	e59d0020 	ldr	r0, [sp, #32]
8000bac8:	e1a03005 	mov	r3, r5
8000bacc:	e5531001 	ldrb	r1, [r3, #-1]
8000bad0:	e2432001 	sub	r2, r3, #1
8000bad4:	e3510039 	cmp	r1, #57	; 0x39
8000bad8:	e1a05003 	mov	r5, r3
8000badc:	e1a03002 	mov	r3, r2
8000bae0:	1a0002f4 	bne	8000c6b8 <_dtoa_r+0x1470>
8000bae4:	e1530000 	cmp	r3, r0
8000bae8:	1afffff7 	bne	8000bacc <_dtoa_r+0x884>
8000baec:	e59d3058 	ldr	r3, [sp, #88]	; 0x58
8000baf0:	e59dc020 	ldr	ip, [sp, #32]
8000baf4:	e2837001 	add	r7, r3, #1
8000baf8:	e3a01031 	mov	r1, #49	; 0x31
8000bafc:	e3a03030 	mov	r3, #48	; 0x30
8000bb00:	e5cc3000 	strb	r3, [ip]
8000bb04:	e5c21000 	strb	r1, [r2]
8000bb08:	eaffff53 	b	8000b85c <_dtoa_r+0x614>
8000bb0c:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
8000bb10:	e3510000 	cmp	r1, #0
8000bb14:	1a00008d 	bne	8000bd50 <_dtoa_r+0xb08>
8000bb18:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
8000bb1c:	e59d904c 	ldr	r9, [sp, #76]	; 0x4c
8000bb20:	e59da044 	ldr	sl, [sp, #68]	; 0x44
8000bb24:	e58d3038 	str	r3, [sp, #56]	; 0x38
8000bb28:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
8000bb2c:	e35c0000 	cmp	ip, #0
8000bb30:	c35a0000 	cmpgt	sl, #0
8000bb34:	da000008 	ble	8000bb5c <_dtoa_r+0x914>
8000bb38:	e1a0300c 	mov	r3, ip
8000bb3c:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
8000bb40:	e153000a 	cmp	r3, sl
8000bb44:	a1a0300a 	movge	r3, sl
8000bb48:	e0631001 	rsb	r1, r3, r1
8000bb4c:	e063c00c 	rsb	ip, r3, ip
8000bb50:	e58d1044 	str	r1, [sp, #68]	; 0x44
8000bb54:	e58dc034 	str	ip, [sp, #52]	; 0x34
8000bb58:	e063a00a 	rsb	sl, r3, sl
8000bb5c:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
8000bb60:	e3520000 	cmp	r2, #0
8000bb64:	da000017 	ble	8000bbc8 <_dtoa_r+0x980>
8000bb68:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
8000bb6c:	e3530000 	cmp	r3, #0
8000bb70:	0a0002b8 	beq	8000c658 <_dtoa_r+0x1410>
8000bb74:	e3590000 	cmp	r9, #0
8000bb78:	da00000f 	ble	8000bbbc <_dtoa_r+0x974>
8000bb7c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
8000bb80:	e1a02009 	mov	r2, r9
8000bb84:	e1a00004 	mov	r0, r4
8000bb88:	eb0006be 	bl	8000d688 <__pow5mult>
8000bb8c:	e58d0038 	str	r0, [sp, #56]	; 0x38
8000bb90:	e1a02008 	mov	r2, r8
8000bb94:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
8000bb98:	e1a00004 	mov	r0, r4
8000bb9c:	eb00063f 	bl	8000d4a0 <__multiply>
8000bba0:	e1a01008 	mov	r1, r8
8000bba4:	e1a03000 	mov	r3, r0
8000bba8:	e1a00004 	mov	r0, r4
8000bbac:	e58d300c 	str	r3, [sp, #12]
8000bbb0:	eb000580 	bl	8000d1b8 <_Bfree>
8000bbb4:	e59d300c 	ldr	r3, [sp, #12]
8000bbb8:	e1a08003 	mov	r8, r3
8000bbbc:	e59dc04c 	ldr	ip, [sp, #76]	; 0x4c
8000bbc0:	e05c2009 	subs	r2, ip, r9
8000bbc4:	1a0002a9 	bne	8000c670 <_dtoa_r+0x1428>
8000bbc8:	e3a01001 	mov	r1, #1
8000bbcc:	e1a00004 	mov	r0, r4
8000bbd0:	eb000629 	bl	8000d47c <__i2b>
8000bbd4:	e59d1054 	ldr	r1, [sp, #84]	; 0x54
8000bbd8:	e3510000 	cmp	r1, #0
8000bbdc:	e1a09000 	mov	r9, r0
8000bbe0:	da000004 	ble	8000bbf8 <_dtoa_r+0x9b0>
8000bbe4:	e1a01009 	mov	r1, r9
8000bbe8:	e1a00004 	mov	r0, r4
8000bbec:	e59d2054 	ldr	r2, [sp, #84]	; 0x54
8000bbf0:	eb0006a4 	bl	8000d688 <__pow5mult>
8000bbf4:	e1a09000 	mov	r9, r0
8000bbf8:	e59d20b0 	ldr	r2, [sp, #176]	; 0xb0
8000bbfc:	e3520001 	cmp	r2, #1
8000bc00:	c3a02000 	movgt	r2, #0
8000bc04:	c58d2028 	strgt	r2, [sp, #40]	; 0x28
8000bc08:	da00023d 	ble	8000c504 <_dtoa_r+0x12bc>
8000bc0c:	e59dc054 	ldr	ip, [sp, #84]	; 0x54
8000bc10:	e35c0000 	cmp	ip, #0
8000bc14:	03a03001 	moveq	r3, #1
8000bc18:	1a00022e 	bne	8000c4d8 <_dtoa_r+0x1290>
8000bc1c:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
8000bc20:	e0833001 	add	r3, r3, r1
8000bc24:	e213301f 	ands	r3, r3, #31
8000bc28:	03a0301c 	moveq	r3, #28
8000bc2c:	1a00011f 	bne	8000c0b0 <_dtoa_r+0xe68>
8000bc30:	e59dc044 	ldr	ip, [sp, #68]	; 0x44
8000bc34:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
8000bc38:	e08cc003 	add	ip, ip, r3
8000bc3c:	e0811003 	add	r1, r1, r3
8000bc40:	e58dc044 	str	ip, [sp, #68]	; 0x44
8000bc44:	e58d1034 	str	r1, [sp, #52]	; 0x34
8000bc48:	e08aa003 	add	sl, sl, r3
8000bc4c:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
8000bc50:	e3520000 	cmp	r2, #0
8000bc54:	da000003 	ble	8000bc68 <_dtoa_r+0xa20>
8000bc58:	e1a01008 	mov	r1, r8
8000bc5c:	e1a00004 	mov	r0, r4
8000bc60:	eb0006c5 	bl	8000d77c <__lshift>
8000bc64:	e1a08000 	mov	r8, r0
8000bc68:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
8000bc6c:	e3530000 	cmp	r3, #0
8000bc70:	da000004 	ble	8000bc88 <_dtoa_r+0xa40>
8000bc74:	e1a01009 	mov	r1, r9
8000bc78:	e1a00004 	mov	r0, r4
8000bc7c:	e1a02003 	mov	r2, r3
8000bc80:	eb0006bd 	bl	8000d77c <__lshift>
8000bc84:	e1a09000 	mov	r9, r0
8000bc88:	e59dc064 	ldr	ip, [sp, #100]	; 0x64
8000bc8c:	e35c0000 	cmp	ip, #0
8000bc90:	1a0001f6 	bne	8000c470 <_dtoa_r+0x1228>
8000bc94:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
8000bc98:	e59d10b0 	ldr	r1, [sp, #176]	; 0xb0
8000bc9c:	e35c0000 	cmp	ip, #0
8000bca0:	c3a03000 	movgt	r3, #0
8000bca4:	d3a03001 	movle	r3, #1
8000bca8:	e3510002 	cmp	r1, #2
8000bcac:	d3a03000 	movle	r3, #0
8000bcb0:	e3530000 	cmp	r3, #0
8000bcb4:	0a000108 	beq	8000c0dc <_dtoa_r+0xe94>
8000bcb8:	e35c0000 	cmp	ip, #0
8000bcbc:	1afffed6 	bne	8000b81c <_dtoa_r+0x5d4>
8000bcc0:	e1a01009 	mov	r1, r9
8000bcc4:	e3a02005 	mov	r2, #5
8000bcc8:	e1a0300c 	mov	r3, ip
8000bccc:	e1a00004 	mov	r0, r4
8000bcd0:	eb00053f 	bl	8000d1d4 <__multadd>
8000bcd4:	e1a09000 	mov	r9, r0
8000bcd8:	e1a01009 	mov	r1, r9
8000bcdc:	e1a00008 	mov	r0, r8
8000bce0:	eb0006e6 	bl	8000d880 <__mcmp>
8000bce4:	e3500000 	cmp	r0, #0
8000bce8:	dafffecb 	ble	8000b81c <_dtoa_r+0x5d4>
8000bcec:	e59d5020 	ldr	r5, [sp, #32]
8000bcf0:	e3a03031 	mov	r3, #49	; 0x31
8000bcf4:	e4c53001 	strb	r3, [r5], #1
8000bcf8:	e2877001 	add	r7, r7, #1
8000bcfc:	e3a0a000 	mov	sl, #0
8000bd00:	eafffec9 	b	8000b82c <_dtoa_r+0x5e4>
8000bd04:	e59dc044 	ldr	ip, [sp, #68]	; 0x44
8000bd08:	e2671000 	rsb	r1, r7, #0
8000bd0c:	e067c00c 	rsb	ip, r7, ip
8000bd10:	e3a02000 	mov	r2, #0
8000bd14:	e58dc044 	str	ip, [sp, #68]	; 0x44
8000bd18:	e58d104c 	str	r1, [sp, #76]	; 0x4c
8000bd1c:	e58d2054 	str	r2, [sp, #84]	; 0x54
8000bd20:	eafffdf9 	b	8000b50c <_dtoa_r+0x2c4>
8000bd24:	e51f35b0 	ldr	r3, [pc, #-1456]	; 8000b77c <_dtoa_r+0x534>
8000bd28:	e28d1028 	add	r1, sp, #40	; 0x28
8000bd2c:	e8910003 	ldm	r1, {r0, r1}
8000bd30:	e2833020 	add	r3, r3, #32
8000bd34:	e893000c 	ldm	r3, {r2, r3}
8000bd38:	eb00126f 	bl	800106fc <__aeabi_ddiv>
8000bd3c:	e205500f 	and	r5, r5, #15
8000bd40:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000bd44:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000bd48:	e3a0a003 	mov	sl, #3
8000bd4c:	eafffe3a 	b	8000b63c <_dtoa_r+0x3f4>
8000bd50:	e59d20b0 	ldr	r2, [sp, #176]	; 0xb0
8000bd54:	e3520001 	cmp	r2, #1
8000bd58:	da00024c 	ble	8000c690 <_dtoa_r+0x1448>
8000bd5c:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
8000bd60:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
8000bd64:	e2413001 	sub	r3, r1, #1
8000bd68:	e1520003 	cmp	r2, r3
8000bd6c:	b59dc04c 	ldrlt	ip, [sp, #76]	; 0x4c
8000bd70:	b59d1054 	ldrlt	r1, [sp, #84]	; 0x54
8000bd74:	b06c3003 	rsblt	r3, ip, r3
8000bd78:	a0639002 	rsbge	r9, r3, r2
8000bd7c:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
8000bd80:	b0811003 	addlt	r1, r1, r3
8000bd84:	b08cc003 	addlt	ip, ip, r3
8000bd88:	b58d1054 	strlt	r1, [sp, #84]	; 0x54
8000bd8c:	b58dc04c 	strlt	ip, [sp, #76]	; 0x4c
8000bd90:	e3520000 	cmp	r2, #0
8000bd94:	b59d3044 	ldrlt	r3, [sp, #68]	; 0x44
8000bd98:	a59da044 	ldrge	sl, [sp, #68]	; 0x44
8000bd9c:	a59d3040 	ldrge	r3, [sp, #64]	; 0x40
8000bda0:	b062a003 	rsblt	sl, r2, r3
8000bda4:	b3a03000 	movlt	r3, #0
8000bda8:	e59dc044 	ldr	ip, [sp, #68]	; 0x44
8000bdac:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
8000bdb0:	e08cc003 	add	ip, ip, r3
8000bdb4:	e0822003 	add	r2, r2, r3
8000bdb8:	e1a00004 	mov	r0, r4
8000bdbc:	e3a01001 	mov	r1, #1
8000bdc0:	e58dc044 	str	ip, [sp, #68]	; 0x44
8000bdc4:	e58d2034 	str	r2, [sp, #52]	; 0x34
8000bdc8:	eb0005ab 	bl	8000d47c <__i2b>
8000bdcc:	e58d0038 	str	r0, [sp, #56]	; 0x38
8000bdd0:	eaffff54 	b	8000bb28 <_dtoa_r+0x8e0>
8000bdd4:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
8000bdd8:	e3530000 	cmp	r3, #0
8000bddc:	1a000228 	bne	8000c684 <_dtoa_r+0x143c>
8000bde0:	e3a02000 	mov	r2, #0
8000bde4:	e51f3678 	ldr	r3, [pc, #-1656]	; 8000b774 <_dtoa_r+0x52c>
8000bde8:	e28d1010 	add	r1, sp, #16
8000bdec:	e8910003 	ldm	r1, {r0, r1}
8000bdf0:	eb00119d 	bl	8001046c <__aeabi_dmul>
8000bdf4:	e1a02005 	mov	r2, r5
8000bdf8:	e1a03006 	mov	r3, r6
8000bdfc:	eb001306 	bl	80010a1c <__aeabi_dcmpge>
8000be00:	e3500000 	cmp	r0, #0
8000be04:	1afffe82 	bne	8000b814 <_dtoa_r+0x5cc>
8000be08:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
8000be0c:	e58d9038 	str	r9, [sp, #56]	; 0x38
8000be10:	eaffffb5 	b	8000bcec <_dtoa_r+0xaa4>
8000be14:	e58d7058 	str	r7, [sp, #88]	; 0x58
8000be18:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
8000be1c:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
8000be20:	e3510000 	cmp	r1, #0
8000be24:	0a000133 	beq	8000c2f8 <_dtoa_r+0x10b0>
8000be28:	e51f36b0 	ldr	r3, [pc, #-1712]	; 8000b780 <_dtoa_r+0x538>
8000be2c:	e083318c 	add	r3, r3, ip, lsl #3
8000be30:	e913000c 	ldmdb	r3, {r2, r3}
8000be34:	e3a00000 	mov	r0, #0
8000be38:	e51f16b8 	ldr	r1, [pc, #-1720]	; 8000b788 <_dtoa_r+0x540>
8000be3c:	e58dc00c 	str	ip, [sp, #12]
8000be40:	eb00122d 	bl	800106fc <__aeabi_ddiv>
8000be44:	e1a02009 	mov	r2, r9
8000be48:	e1a0300a 	mov	r3, sl
8000be4c:	eb001081 	bl	80010058 <__aeabi_dsub>
8000be50:	e1a09000 	mov	r9, r0
8000be54:	e1a0a001 	mov	sl, r1
8000be58:	e28d1028 	add	r1, sp, #40	; 0x28
8000be5c:	e8910003 	ldm	r1, {r0, r1}
8000be60:	eb0012f9 	bl	80010a4c <__aeabi_d2iz>
8000be64:	e1a05000 	mov	r5, r0
8000be68:	eb001148 	bl	80010390 <__aeabi_i2d>
8000be6c:	e1a02000 	mov	r2, r0
8000be70:	e1a03001 	mov	r3, r1
8000be74:	e28d1028 	add	r1, sp, #40	; 0x28
8000be78:	e8910003 	ldm	r1, {r0, r1}
8000be7c:	eb001075 	bl	80010058 <__aeabi_dsub>
8000be80:	e2853030 	add	r3, r5, #48	; 0x30
8000be84:	e59d5020 	ldr	r5, [sp, #32]
8000be88:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000be8c:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000be90:	e4c53001 	strb	r3, [r5], #1
8000be94:	e1a00009 	mov	r0, r9
8000be98:	e1a0100a 	mov	r1, sl
8000be9c:	e28d3028 	add	r3, sp, #40	; 0x28
8000bea0:	e893000c 	ldm	r3, {r2, r3}
8000bea4:	eb0012e2 	bl	80010a34 <__aeabi_dcmpgt>
8000bea8:	e3500000 	cmp	r0, #0
8000beac:	1a00016d 	bne	8000c468 <_dtoa_r+0x1220>
8000beb0:	e28d3028 	add	r3, sp, #40	; 0x28
8000beb4:	e893000c 	ldm	r3, {r2, r3}
8000beb8:	e3a00000 	mov	r0, #0
8000bebc:	e51f174c 	ldr	r1, [pc, #-1868]	; 8000b778 <_dtoa_r+0x530>
8000bec0:	eb001064 	bl	80010058 <__aeabi_dsub>
8000bec4:	e1a02000 	mov	r2, r0
8000bec8:	e1a03001 	mov	r3, r1
8000becc:	e1a00009 	mov	r0, r9
8000bed0:	e1a0100a 	mov	r1, sl
8000bed4:	eb0012d6 	bl	80010a34 <__aeabi_dcmpgt>
8000bed8:	e3500000 	cmp	r0, #0
8000bedc:	e59dc00c 	ldr	ip, [sp, #12]
8000bee0:	1afffef7 	bne	8000bac4 <_dtoa_r+0x87c>
8000bee4:	e35c0001 	cmp	ip, #1
8000bee8:	dafffe6b 	ble	8000b89c <_dtoa_r+0x654>
8000beec:	e59d2020 	ldr	r2, [sp, #32]
8000bef0:	e082c00c 	add	ip, r2, ip
8000bef4:	e58d707c 	str	r7, [sp, #124]	; 0x7c
8000bef8:	e58d806c 	str	r8, [sp, #108]	; 0x6c
8000befc:	e58db070 	str	fp, [sp, #112]	; 0x70
8000bf00:	e28d8028 	add	r8, sp, #40	; 0x28
8000bf04:	e8980180 	ldm	r8, {r7, r8}
8000bf08:	e1a06005 	mov	r6, r5
8000bf0c:	e58d4028 	str	r4, [sp, #40]	; 0x28
8000bf10:	e1a0b00c 	mov	fp, ip
8000bf14:	ea000007 	b	8000bf38 <_dtoa_r+0xcf0>
8000bf18:	eb00104e 	bl	80010058 <__aeabi_dsub>
8000bf1c:	e1a02009 	mov	r2, r9
8000bf20:	e1a0300a 	mov	r3, sl
8000bf24:	eb0012b0 	bl	800109ec <__aeabi_dcmplt>
8000bf28:	e3500000 	cmp	r0, #0
8000bf2c:	1a0001e5 	bne	8000c6c8 <_dtoa_r+0x1480>
8000bf30:	e156000b 	cmp	r6, fp
8000bf34:	0afffe54 	beq	8000b88c <_dtoa_r+0x644>
8000bf38:	e3a02000 	mov	r2, #0
8000bf3c:	e51f37c0 	ldr	r3, [pc, #-1984]	; 8000b784 <_dtoa_r+0x53c>
8000bf40:	e1a00009 	mov	r0, r9
8000bf44:	e1a0100a 	mov	r1, sl
8000bf48:	eb001147 	bl	8001046c <__aeabi_dmul>
8000bf4c:	e3a02000 	mov	r2, #0
8000bf50:	e51f37d4 	ldr	r3, [pc, #-2004]	; 8000b784 <_dtoa_r+0x53c>
8000bf54:	e1a09000 	mov	r9, r0
8000bf58:	e1a0a001 	mov	sl, r1
8000bf5c:	e1a00007 	mov	r0, r7
8000bf60:	e1a01008 	mov	r1, r8
8000bf64:	eb001140 	bl	8001046c <__aeabi_dmul>
8000bf68:	e1a08001 	mov	r8, r1
8000bf6c:	e1a07000 	mov	r7, r0
8000bf70:	eb0012b5 	bl	80010a4c <__aeabi_d2iz>
8000bf74:	e1a04000 	mov	r4, r0
8000bf78:	eb001104 	bl	80010390 <__aeabi_i2d>
8000bf7c:	e1a02000 	mov	r2, r0
8000bf80:	e1a03001 	mov	r3, r1
8000bf84:	e1a00007 	mov	r0, r7
8000bf88:	e1a01008 	mov	r1, r8
8000bf8c:	eb001031 	bl	80010058 <__aeabi_dsub>
8000bf90:	e2844030 	add	r4, r4, #48	; 0x30
8000bf94:	e4c64001 	strb	r4, [r6], #1
8000bf98:	e1a02009 	mov	r2, r9
8000bf9c:	e1a0300a 	mov	r3, sl
8000bfa0:	e1a08001 	mov	r8, r1
8000bfa4:	e1a07000 	mov	r7, r0
8000bfa8:	eb00128f 	bl	800109ec <__aeabi_dcmplt>
8000bfac:	e3500000 	cmp	r0, #0
8000bfb0:	e1a02007 	mov	r2, r7
8000bfb4:	e1a03008 	mov	r3, r8
8000bfb8:	e3a00000 	mov	r0, #0
8000bfbc:	e51f184c 	ldr	r1, [pc, #-2124]	; 8000b778 <_dtoa_r+0x530>
8000bfc0:	e1a05006 	mov	r5, r6
8000bfc4:	0affffd3 	beq	8000bf18 <_dtoa_r+0xcd0>
8000bfc8:	e59d806c 	ldr	r8, [sp, #108]	; 0x6c
8000bfcc:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
8000bfd0:	e59db070 	ldr	fp, [sp, #112]	; 0x70
8000bfd4:	e59d7058 	ldr	r7, [sp, #88]	; 0x58
8000bfd8:	eafffe1f 	b	8000b85c <_dtoa_r+0x614>
8000bfdc:	e3a01001 	mov	r1, #1
8000bfe0:	e58d1050 	str	r1, [sp, #80]	; 0x50
8000bfe4:	e59d30b4 	ldr	r3, [sp, #180]	; 0xb4
8000bfe8:	e0873003 	add	r3, r7, r3
8000bfec:	e2830001 	add	r0, r3, #1
8000bff0:	e3500000 	cmp	r0, #0
8000bff4:	e58d3048 	str	r3, [sp, #72]	; 0x48
8000bff8:	c58d0040 	strgt	r0, [sp, #64]	; 0x40
8000bffc:	da00013b 	ble	8000c4f0 <_dtoa_r+0x12a8>
8000c000:	e3a01000 	mov	r1, #0
8000c004:	e3500017 	cmp	r0, #23
8000c008:	e5841044 	str	r1, [r4, #68]	; 0x44
8000c00c:	83a03004 	movhi	r3, #4
8000c010:	9a000206 	bls	8000c830 <_dtoa_r+0x15e8>
8000c014:	e1a03083 	lsl	r3, r3, #1
8000c018:	e2832014 	add	r2, r3, #20
8000c01c:	e1520000 	cmp	r2, r0
8000c020:	e2811001 	add	r1, r1, #1
8000c024:	9afffffa 	bls	8000c014 <_dtoa_r+0xdcc>
8000c028:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
8000c02c:	e5841044 	str	r1, [r4, #68]	; 0x44
8000c030:	e352000e 	cmp	r2, #14
8000c034:	83a0a000 	movhi	sl, #0
8000c038:	920aa001 	andls	sl, sl, #1
8000c03c:	eafffd66 	b	8000b5dc <_dtoa_r+0x394>
8000c040:	e3a03000 	mov	r3, #0
8000c044:	e58d3050 	str	r3, [sp, #80]	; 0x50
8000c048:	e59dc0b4 	ldr	ip, [sp, #180]	; 0xb4
8000c04c:	e35c0000 	cmp	ip, #0
8000c050:	c1a0000c 	movgt	r0, ip
8000c054:	c58dc048 	strgt	ip, [sp, #72]	; 0x48
8000c058:	c58dc040 	strgt	ip, [sp, #64]	; 0x40
8000c05c:	caffffe7 	bgt	8000c000 <_dtoa_r+0xdb8>
8000c060:	e3a01001 	mov	r1, #1
8000c064:	e58d1048 	str	r1, [sp, #72]	; 0x48
8000c068:	e00aa001 	and	sl, sl, r1
8000c06c:	e58d1040 	str	r1, [sp, #64]	; 0x40
8000c070:	e58d10b4 	str	r1, [sp, #180]	; 0xb4
8000c074:	eafffd56 	b	8000b5d4 <_dtoa_r+0x38c>
8000c078:	e3a02001 	mov	r2, #1
8000c07c:	e58d2050 	str	r2, [sp, #80]	; 0x50
8000c080:	eafffff0 	b	8000c048 <_dtoa_r+0xe00>
8000c084:	e3a02000 	mov	r2, #0
8000c088:	e58d2050 	str	r2, [sp, #80]	; 0x50
8000c08c:	eaffffd4 	b	8000bfe4 <_dtoa_r+0xd9c>
8000c090:	e3e0c000 	mvn	ip, #0
8000c094:	e3a0a000 	mov	sl, #0
8000c098:	e3a01001 	mov	r1, #1
8000c09c:	e58dc048 	str	ip, [sp, #72]	; 0x48
8000c0a0:	e58d1050 	str	r1, [sp, #80]	; 0x50
8000c0a4:	e58dc040 	str	ip, [sp, #64]	; 0x40
8000c0a8:	e58da0b4 	str	sl, [sp, #180]	; 0xb4
8000c0ac:	eafffd48 	b	8000b5d4 <_dtoa_r+0x38c>
8000c0b0:	e2633020 	rsb	r3, r3, #32
8000c0b4:	e3530004 	cmp	r3, #4
8000c0b8:	da0001d9 	ble	8000c824 <_dtoa_r+0x15dc>
8000c0bc:	e59d2044 	ldr	r2, [sp, #68]	; 0x44
8000c0c0:	e2433004 	sub	r3, r3, #4
8000c0c4:	e0822003 	add	r2, r2, r3
8000c0c8:	e0811003 	add	r1, r1, r3
8000c0cc:	e58d2044 	str	r2, [sp, #68]	; 0x44
8000c0d0:	e08aa003 	add	sl, sl, r3
8000c0d4:	e58d1034 	str	r1, [sp, #52]	; 0x34
8000c0d8:	eafffedb 	b	8000bc4c <_dtoa_r+0xa04>
8000c0dc:	e59d3050 	ldr	r3, [sp, #80]	; 0x50
8000c0e0:	e3530000 	cmp	r3, #0
8000c0e4:	0a00011c 	beq	8000c55c <_dtoa_r+0x1314>
8000c0e8:	e35a0000 	cmp	sl, #0
8000c0ec:	da000004 	ble	8000c104 <_dtoa_r+0xebc>
8000c0f0:	e1a00004 	mov	r0, r4
8000c0f4:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
8000c0f8:	e1a0200a 	mov	r2, sl
8000c0fc:	eb00059e 	bl	8000d77c <__lshift>
8000c100:	e58d0038 	str	r0, [sp, #56]	; 0x38
8000c104:	e59dc028 	ldr	ip, [sp, #40]	; 0x28
8000c108:	e35c0000 	cmp	ip, #0
8000c10c:	1a00018b 	bne	8000c740 <_dtoa_r+0x14f8>
8000c110:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
8000c114:	e58dc034 	str	ip, [sp, #52]	; 0x34
8000c118:	e59d1020 	ldr	r1, [sp, #32]
8000c11c:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
8000c120:	e2053001 	and	r3, r5, #1
8000c124:	e0812002 	add	r2, r1, r2
8000c128:	e59da038 	ldr	sl, [sp, #56]	; 0x38
8000c12c:	e58d1018 	str	r1, [sp, #24]
8000c130:	e58d2028 	str	r2, [sp, #40]	; 0x28
8000c134:	e58d3038 	str	r3, [sp, #56]	; 0x38
8000c138:	e58d7044 	str	r7, [sp, #68]	; 0x44
8000c13c:	e1a01009 	mov	r1, r9
8000c140:	e1a00008 	mov	r0, r8
8000c144:	ebfffbcb 	bl	8000b078 <quorem>
8000c148:	e2800030 	add	r0, r0, #48	; 0x30
8000c14c:	e1a0100a 	mov	r1, sl
8000c150:	e58d0040 	str	r0, [sp, #64]	; 0x40
8000c154:	e1a00008 	mov	r0, r8
8000c158:	eb0005c8 	bl	8000d880 <__mcmp>
8000c15c:	e1a01009 	mov	r1, r9
8000c160:	e1a05000 	mov	r5, r0
8000c164:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
8000c168:	e1a00004 	mov	r0, r4
8000c16c:	eb0005db 	bl	8000d8e0 <__mdiff>
8000c170:	e590300c 	ldr	r3, [r0, #12]
8000c174:	e3530000 	cmp	r3, #0
8000c178:	e1a07000 	mov	r7, r0
8000c17c:	13a06001 	movne	r6, #1
8000c180:	0a000030 	beq	8000c248 <_dtoa_r+0x1000>
8000c184:	e1a00004 	mov	r0, r4
8000c188:	e1a01007 	mov	r1, r7
8000c18c:	eb000409 	bl	8000d1b8 <_Bfree>
8000c190:	e59dc0b0 	ldr	ip, [sp, #176]	; 0xb0
8000c194:	e196c00c 	orrs	ip, r6, ip
8000c198:	1a000002 	bne	8000c1a8 <_dtoa_r+0xf60>
8000c19c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
8000c1a0:	e3510000 	cmp	r1, #0
8000c1a4:	0a00018c 	beq	8000c7dc <_dtoa_r+0x1594>
8000c1a8:	e3550000 	cmp	r5, #0
8000c1ac:	ba000149 	blt	8000c6d8 <_dtoa_r+0x1490>
8000c1b0:	e59d10b0 	ldr	r1, [sp, #176]	; 0xb0
8000c1b4:	e1951001 	orrs	r1, r5, r1
8000c1b8:	1a000002 	bne	8000c1c8 <_dtoa_r+0xf80>
8000c1bc:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
8000c1c0:	e3520000 	cmp	r2, #0
8000c1c4:	0a000143 	beq	8000c6d8 <_dtoa_r+0x1490>
8000c1c8:	e3560000 	cmp	r6, #0
8000c1cc:	ca000171 	bgt	8000c798 <_dtoa_r+0x1550>
8000c1d0:	e59dc018 	ldr	ip, [sp, #24]
8000c1d4:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
8000c1d8:	e4cc3001 	strb	r3, [ip], #1
8000c1dc:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
8000c1e0:	e15c0001 	cmp	ip, r1
8000c1e4:	e58dc018 	str	ip, [sp, #24]
8000c1e8:	e1a0300c 	mov	r3, ip
8000c1ec:	0a000165 	beq	8000c788 <_dtoa_r+0x1540>
8000c1f0:	e1a01008 	mov	r1, r8
8000c1f4:	e3a0200a 	mov	r2, #10
8000c1f8:	e1a00004 	mov	r0, r4
8000c1fc:	e3a03000 	mov	r3, #0
8000c200:	eb0003f3 	bl	8000d1d4 <__multadd>
8000c204:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
8000c208:	e15a0002 	cmp	sl, r2
8000c20c:	e1a08000 	mov	r8, r0
8000c210:	0a000015 	beq	8000c26c <_dtoa_r+0x1024>
8000c214:	e1a0100a 	mov	r1, sl
8000c218:	e3a0200a 	mov	r2, #10
8000c21c:	e3a03000 	mov	r3, #0
8000c220:	e1a00004 	mov	r0, r4
8000c224:	eb0003ea 	bl	8000d1d4 <__multadd>
8000c228:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
8000c22c:	e1a0a000 	mov	sl, r0
8000c230:	e3a0200a 	mov	r2, #10
8000c234:	e1a00004 	mov	r0, r4
8000c238:	e3a03000 	mov	r3, #0
8000c23c:	eb0003e4 	bl	8000d1d4 <__multadd>
8000c240:	e58d0034 	str	r0, [sp, #52]	; 0x34
8000c244:	eaffffbc 	b	8000c13c <_dtoa_r+0xef4>
8000c248:	e1a00008 	mov	r0, r8
8000c24c:	e1a01007 	mov	r1, r7
8000c250:	eb00058a 	bl	8000d880 <__mcmp>
8000c254:	e1a06000 	mov	r6, r0
8000c258:	eaffffc9 	b	8000c184 <_dtoa_r+0xf3c>
8000c25c:	e1a00004 	mov	r0, r4
8000c260:	e1a0100a 	mov	r1, sl
8000c264:	eb0003d3 	bl	8000d1b8 <_Bfree>
8000c268:	eafffd78 	b	8000b850 <_dtoa_r+0x608>
8000c26c:	e1a0100a 	mov	r1, sl
8000c270:	e1a00004 	mov	r0, r4
8000c274:	e3a0200a 	mov	r2, #10
8000c278:	e3a03000 	mov	r3, #0
8000c27c:	eb0003d4 	bl	8000d1d4 <__multadd>
8000c280:	e1a0a000 	mov	sl, r0
8000c284:	e58d0034 	str	r0, [sp, #52]	; 0x34
8000c288:	eaffffab 	b	8000c13c <_dtoa_r+0xef4>
8000c28c:	e2675000 	rsb	r5, r7, #0
8000c290:	e3550000 	cmp	r5, #0
8000c294:	0a0000e8 	beq	8000c63c <_dtoa_r+0x13f4>
8000c298:	e51f3b20 	ldr	r3, [pc, #-2848]	; 8000b780 <_dtoa_r+0x538>
8000c29c:	e205200f 	and	r2, r5, #15
8000c2a0:	e0833182 	add	r3, r3, r2, lsl #3
8000c2a4:	e28d1028 	add	r1, sp, #40	; 0x28
8000c2a8:	e8910003 	ldm	r1, {r0, r1}
8000c2ac:	e893000c 	ldm	r3, {r2, r3}
8000c2b0:	eb00106d 	bl	8001046c <__aeabi_dmul>
8000c2b4:	e1b05245 	asrs	r5, r5, #4
8000c2b8:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000c2bc:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000c2c0:	0a0000dd 	beq	8000c63c <_dtoa_r+0x13f4>
8000c2c4:	e51f6b50 	ldr	r6, [pc, #-2896]	; 8000b77c <_dtoa_r+0x534>
8000c2c8:	e3a0a002 	mov	sl, #2
8000c2cc:	e3150001 	tst	r5, #1
8000c2d0:	0a000002 	beq	8000c2e0 <_dtoa_r+0x1098>
8000c2d4:	e896000c 	ldm	r6, {r2, r3}
8000c2d8:	eb001063 	bl	8001046c <__aeabi_dmul>
8000c2dc:	e28aa001 	add	sl, sl, #1
8000c2e0:	e1b050c5 	asrs	r5, r5, #1
8000c2e4:	e2866008 	add	r6, r6, #8
8000c2e8:	1afffff7 	bne	8000c2cc <_dtoa_r+0x1084>
8000c2ec:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000c2f0:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000c2f4:	eafffce6 	b	8000b694 <_dtoa_r+0x44c>
8000c2f8:	e51f1b80 	ldr	r1, [pc, #-2944]	; 8000b780 <_dtoa_r+0x538>
8000c2fc:	e24c3001 	sub	r3, ip, #1
8000c300:	e0811183 	add	r1, r1, r3, lsl #3
8000c304:	e1a02009 	mov	r2, r9
8000c308:	e58d306c 	str	r3, [sp, #108]	; 0x6c
8000c30c:	e8910003 	ldm	r1, {r0, r1}
8000c310:	e1a0300a 	mov	r3, sl
8000c314:	e58dc00c 	str	ip, [sp, #12]
8000c318:	eb001053 	bl	8001046c <__aeabi_dmul>
8000c31c:	e58d0070 	str	r0, [sp, #112]	; 0x70
8000c320:	e58d1074 	str	r1, [sp, #116]	; 0x74
8000c324:	e28d1028 	add	r1, sp, #40	; 0x28
8000c328:	e8910003 	ldm	r1, {r0, r1}
8000c32c:	eb0011c6 	bl	80010a4c <__aeabi_d2iz>
8000c330:	e1a05000 	mov	r5, r0
8000c334:	eb001015 	bl	80010390 <__aeabi_i2d>
8000c338:	e1a03001 	mov	r3, r1
8000c33c:	e1a02000 	mov	r2, r0
8000c340:	e28d1028 	add	r1, sp, #40	; 0x28
8000c344:	e8910003 	ldm	r1, {r0, r1}
8000c348:	eb000f42 	bl	80010058 <__aeabi_dsub>
8000c34c:	e59dc00c 	ldr	ip, [sp, #12]
8000c350:	e2853030 	add	r3, r5, #48	; 0x30
8000c354:	e59d5020 	ldr	r5, [sp, #32]
8000c358:	e35c0001 	cmp	ip, #1
8000c35c:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000c360:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000c364:	e4c53001 	strb	r3, [r5], #1
8000c368:	0a000020 	beq	8000c3f0 <_dtoa_r+0x11a8>
8000c36c:	e59d1020 	ldr	r1, [sp, #32]
8000c370:	e2419001 	sub	r9, r1, #1
8000c374:	e1a06001 	mov	r6, r1
8000c378:	e28d1028 	add	r1, sp, #40	; 0x28
8000c37c:	e8910003 	ldm	r1, {r0, r1}
8000c380:	e1a0a007 	mov	sl, r7
8000c384:	e089900c 	add	r9, r9, ip
8000c388:	e1a07005 	mov	r7, r5
8000c38c:	e1a05004 	mov	r5, r4
8000c390:	e3a02000 	mov	r2, #0
8000c394:	e51f3c18 	ldr	r3, [pc, #-3096]	; 8000b784 <_dtoa_r+0x53c>
8000c398:	eb001033 	bl	8001046c <__aeabi_dmul>
8000c39c:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000c3a0:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000c3a4:	eb0011a8 	bl	80010a4c <__aeabi_d2iz>
8000c3a8:	e1a04000 	mov	r4, r0
8000c3ac:	eb000ff7 	bl	80010390 <__aeabi_i2d>
8000c3b0:	e2844030 	add	r4, r4, #48	; 0x30
8000c3b4:	e1a02000 	mov	r2, r0
8000c3b8:	e1a03001 	mov	r3, r1
8000c3bc:	e28d1028 	add	r1, sp, #40	; 0x28
8000c3c0:	e8910003 	ldm	r1, {r0, r1}
8000c3c4:	eb000f23 	bl	80010058 <__aeabi_dsub>
8000c3c8:	e5e64001 	strb	r4, [r6, #1]!
8000c3cc:	e1560009 	cmp	r6, r9
8000c3d0:	1affffee 	bne	8000c390 <_dtoa_r+0x1148>
8000c3d4:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
8000c3d8:	e58d0028 	str	r0, [sp, #40]	; 0x28
8000c3dc:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000c3e0:	e1a04005 	mov	r4, r5
8000c3e4:	e1a05007 	mov	r5, r7
8000c3e8:	e0855002 	add	r5, r5, r2
8000c3ec:	e1a0700a 	mov	r7, sl
8000c3f0:	e3a02000 	mov	r2, #0
8000c3f4:	e51f3c74 	ldr	r3, [pc, #-3188]	; 8000b788 <_dtoa_r+0x540>
8000c3f8:	e28d1070 	add	r1, sp, #112	; 0x70
8000c3fc:	e8910003 	ldm	r1, {r0, r1}
8000c400:	eb000f15 	bl	8001005c <__adddf3>
8000c404:	e1a02000 	mov	r2, r0
8000c408:	e1a03001 	mov	r3, r1
8000c40c:	e28d1028 	add	r1, sp, #40	; 0x28
8000c410:	e8910003 	ldm	r1, {r0, r1}
8000c414:	eb001186 	bl	80010a34 <__aeabi_dcmpgt>
8000c418:	e3500000 	cmp	r0, #0
8000c41c:	1afffda8 	bne	8000bac4 <_dtoa_r+0x87c>
8000c420:	e28d3070 	add	r3, sp, #112	; 0x70
8000c424:	e893000c 	ldm	r3, {r2, r3}
8000c428:	e3a00000 	mov	r0, #0
8000c42c:	e51f1cac 	ldr	r1, [pc, #-3244]	; 8000b788 <_dtoa_r+0x540>
8000c430:	eb000f08 	bl	80010058 <__aeabi_dsub>
8000c434:	e1a02000 	mov	r2, r0
8000c438:	e1a03001 	mov	r3, r1
8000c43c:	e28d1028 	add	r1, sp, #40	; 0x28
8000c440:	e8910003 	ldm	r1, {r0, r1}
8000c444:	eb001168 	bl	800109ec <__aeabi_dcmplt>
8000c448:	e3500000 	cmp	r0, #0
8000c44c:	0afffd12 	beq	8000b89c <_dtoa_r+0x654>
8000c450:	e1a03005 	mov	r3, r5
8000c454:	e1a05003 	mov	r5, r3
8000c458:	e5533001 	ldrb	r3, [r3, #-1]
8000c45c:	e3530030 	cmp	r3, #48	; 0x30
8000c460:	e2453001 	sub	r3, r5, #1
8000c464:	0afffffa 	beq	8000c454 <_dtoa_r+0x120c>
8000c468:	e59d7058 	ldr	r7, [sp, #88]	; 0x58
8000c46c:	eafffcfa 	b	8000b85c <_dtoa_r+0x614>
8000c470:	e1a00008 	mov	r0, r8
8000c474:	e1a01009 	mov	r1, r9
8000c478:	eb000500 	bl	8000d880 <__mcmp>
8000c47c:	e3500000 	cmp	r0, #0
8000c480:	aafffe03 	bge	8000bc94 <_dtoa_r+0xa4c>
8000c484:	e1a01008 	mov	r1, r8
8000c488:	e3a03000 	mov	r3, #0
8000c48c:	e1a00004 	mov	r0, r4
8000c490:	e3a0200a 	mov	r2, #10
8000c494:	eb00034e 	bl	8000d1d4 <__multadd>
8000c498:	e59d1050 	ldr	r1, [sp, #80]	; 0x50
8000c49c:	e3510000 	cmp	r1, #0
8000c4a0:	059d3048 	ldreq	r3, [sp, #72]	; 0x48
8000c4a4:	e1a08000 	mov	r8, r0
8000c4a8:	e2477001 	sub	r7, r7, #1
8000c4ac:	058d3040 	streq	r3, [sp, #64]	; 0x40
8000c4b0:	0afffdf7 	beq	8000bc94 <_dtoa_r+0xa4c>
8000c4b4:	e3a0200a 	mov	r2, #10
8000c4b8:	e1a00004 	mov	r0, r4
8000c4bc:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
8000c4c0:	e3a03000 	mov	r3, #0
8000c4c4:	eb000342 	bl	8000d1d4 <__multadd>
8000c4c8:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
8000c4cc:	e58d0038 	str	r0, [sp, #56]	; 0x38
8000c4d0:	e58d2040 	str	r2, [sp, #64]	; 0x40
8000c4d4:	eafffdee 	b	8000bc94 <_dtoa_r+0xa4c>
8000c4d8:	e5993010 	ldr	r3, [r9, #16]
8000c4dc:	e0893103 	add	r3, r9, r3, lsl #2
8000c4e0:	e5930010 	ldr	r0, [r3, #16]
8000c4e4:	eb0003ac 	bl	8000d39c <__hi0bits>
8000c4e8:	e2603020 	rsb	r3, r0, #32
8000c4ec:	eafffdca 	b	8000bc1c <_dtoa_r+0x9d4>
8000c4f0:	e350000e 	cmp	r0, #14
8000c4f4:	83a0a000 	movhi	sl, #0
8000c4f8:	920aa001 	andls	sl, sl, #1
8000c4fc:	e58d0040 	str	r0, [sp, #64]	; 0x40
8000c500:	eafffc33 	b	8000b5d4 <_dtoa_r+0x38c>
8000c504:	e3550000 	cmp	r5, #0
8000c508:	13a03000 	movne	r3, #0
8000c50c:	158d3028 	strne	r3, [sp, #40]	; 0x28
8000c510:	1afffdbd 	bne	8000bc0c <_dtoa_r+0x9c4>
8000c514:	e3c634ff 	bic	r3, r6, #-16777216	; 0xff000000
8000c518:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
8000c51c:	e3530000 	cmp	r3, #0
8000c520:	158d5028 	strne	r5, [sp, #40]	; 0x28
8000c524:	1afffdb8 	bne	8000bc0c <_dtoa_r+0x9c4>
8000c528:	e51f3da4 	ldr	r3, [pc, #-3492]	; 8000b78c <_dtoa_r+0x544>
8000c52c:	e0063003 	and	r3, r6, r3
8000c530:	e3530000 	cmp	r3, #0
8000c534:	159d3044 	ldrne	r3, [sp, #68]	; 0x44
8000c538:	159dc034 	ldrne	ip, [sp, #52]	; 0x34
8000c53c:	12833001 	addne	r3, r3, #1
8000c540:	128cc001 	addne	ip, ip, #1
8000c544:	13a01001 	movne	r1, #1
8000c548:	158d3044 	strne	r3, [sp, #68]	; 0x44
8000c54c:	158dc034 	strne	ip, [sp, #52]	; 0x34
8000c550:	158d1028 	strne	r1, [sp, #40]	; 0x28
8000c554:	058d3028 	streq	r3, [sp, #40]	; 0x28
8000c558:	eafffdab 	b	8000bc0c <_dtoa_r+0x9c4>
8000c55c:	e1a0a007 	mov	sl, r7
8000c560:	e59d5020 	ldr	r5, [sp, #32]
8000c564:	e3a06001 	mov	r6, #1
8000c568:	e59d7040 	ldr	r7, [sp, #64]	; 0x40
8000c56c:	ea000006 	b	8000c58c <_dtoa_r+0x1344>
8000c570:	e1a01008 	mov	r1, r8
8000c574:	e1a00004 	mov	r0, r4
8000c578:	e3a0200a 	mov	r2, #10
8000c57c:	e3a03000 	mov	r3, #0
8000c580:	eb000313 	bl	8000d1d4 <__multadd>
8000c584:	e2866001 	add	r6, r6, #1
8000c588:	e1a08000 	mov	r8, r0
8000c58c:	e1a01009 	mov	r1, r9
8000c590:	e1a00008 	mov	r0, r8
8000c594:	ebfffab7 	bl	8000b078 <quorem>
8000c598:	e2800030 	add	r0, r0, #48	; 0x30
8000c59c:	e4c50001 	strb	r0, [r5], #1
8000c5a0:	e1560007 	cmp	r6, r7
8000c5a4:	e1a03005 	mov	r3, r5
8000c5a8:	bafffff0 	blt	8000c570 <_dtoa_r+0x1328>
8000c5ac:	e58d0040 	str	r0, [sp, #64]	; 0x40
8000c5b0:	e1a0700a 	mov	r7, sl
8000c5b4:	e3a0a000 	mov	sl, #0
8000c5b8:	e1a01008 	mov	r1, r8
8000c5bc:	e3a02001 	mov	r2, #1
8000c5c0:	e1a00004 	mov	r0, r4
8000c5c4:	e58d300c 	str	r3, [sp, #12]
8000c5c8:	eb00046b 	bl	8000d77c <__lshift>
8000c5cc:	e1a01009 	mov	r1, r9
8000c5d0:	e1a08000 	mov	r8, r0
8000c5d4:	eb0004a9 	bl	8000d880 <__mcmp>
8000c5d8:	e3500000 	cmp	r0, #0
8000c5dc:	e59d300c 	ldr	r3, [sp, #12]
8000c5e0:	da00000c 	ble	8000c618 <_dtoa_r+0x13d0>
8000c5e4:	e59d1020 	ldr	r1, [sp, #32]
8000c5e8:	e5532001 	ldrb	r2, [r3, #-1]
8000c5ec:	e3520039 	cmp	r2, #57	; 0x39
8000c5f0:	e1a05003 	mov	r5, r3
8000c5f4:	e2433001 	sub	r3, r3, #1
8000c5f8:	1a00004d 	bne	8000c734 <_dtoa_r+0x14ec>
8000c5fc:	e1530001 	cmp	r3, r1
8000c600:	1afffff8 	bne	8000c5e8 <_dtoa_r+0x13a0>
8000c604:	e59d2020 	ldr	r2, [sp, #32]
8000c608:	e3a03031 	mov	r3, #49	; 0x31
8000c60c:	e2877001 	add	r7, r7, #1
8000c610:	e5c23000 	strb	r3, [r2]
8000c614:	eafffc84 	b	8000b82c <_dtoa_r+0x5e4>
8000c618:	1a000002 	bne	8000c628 <_dtoa_r+0x13e0>
8000c61c:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
8000c620:	e3110001 	tst	r1, #1
8000c624:	1affffee 	bne	8000c5e4 <_dtoa_r+0x139c>
8000c628:	e1a05003 	mov	r5, r3
8000c62c:	e5732001 	ldrb	r2, [r3, #-1]!
8000c630:	e3520030 	cmp	r2, #48	; 0x30
8000c634:	0afffffb 	beq	8000c628 <_dtoa_r+0x13e0>
8000c638:	eafffc7b 	b	8000b82c <_dtoa_r+0x5e4>
8000c63c:	e3a0a002 	mov	sl, #2
8000c640:	eafffc13 	b	8000b694 <_dtoa_r+0x44c>
8000c644:	e1a05007 	mov	r5, r7
8000c648:	e1a04008 	mov	r4, r8
8000c64c:	e59d7040 	ldr	r7, [sp, #64]	; 0x40
8000c650:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
8000c654:	eafffc80 	b	8000b85c <_dtoa_r+0x614>
8000c658:	e1a01008 	mov	r1, r8
8000c65c:	e1a00004 	mov	r0, r4
8000c660:	e59d204c 	ldr	r2, [sp, #76]	; 0x4c
8000c664:	eb000407 	bl	8000d688 <__pow5mult>
8000c668:	e1a08000 	mov	r8, r0
8000c66c:	eafffd55 	b	8000bbc8 <_dtoa_r+0x980>
8000c670:	e1a01008 	mov	r1, r8
8000c674:	e1a00004 	mov	r0, r4
8000c678:	eb000402 	bl	8000d688 <__pow5mult>
8000c67c:	e1a08000 	mov	r8, r0
8000c680:	eafffd50 	b	8000bbc8 <_dtoa_r+0x980>
8000c684:	e3a09000 	mov	r9, #0
8000c688:	e58d9038 	str	r9, [sp, #56]	; 0x38
8000c68c:	eafffc62 	b	8000b81c <_dtoa_r+0x5d4>
8000c690:	e59dc068 	ldr	ip, [sp, #104]	; 0x68
8000c694:	e35c0000 	cmp	ip, #0
8000c698:	059d3084 	ldreq	r3, [sp, #132]	; 0x84
8000c69c:	12833e43 	addne	r3, r3, #1072	; 0x430
8000c6a0:	12833003 	addne	r3, r3, #3
8000c6a4:	159d904c 	ldrne	r9, [sp, #76]	; 0x4c
8000c6a8:	059d904c 	ldreq	r9, [sp, #76]	; 0x4c
8000c6ac:	02633036 	rsbeq	r3, r3, #54	; 0x36
8000c6b0:	e59da044 	ldr	sl, [sp, #68]	; 0x44
8000c6b4:	eafffdbb 	b	8000bda8 <_dtoa_r+0xb60>
8000c6b8:	e2811001 	add	r1, r1, #1
8000c6bc:	e59d7058 	ldr	r7, [sp, #88]	; 0x58
8000c6c0:	e5c21000 	strb	r1, [r2]
8000c6c4:	eafffc64 	b	8000b85c <_dtoa_r+0x614>
8000c6c8:	e59d806c 	ldr	r8, [sp, #108]	; 0x6c
8000c6cc:	e59d4028 	ldr	r4, [sp, #40]	; 0x28
8000c6d0:	e59db070 	ldr	fp, [sp, #112]	; 0x70
8000c6d4:	eafffcfa 	b	8000bac4 <_dtoa_r+0x87c>
8000c6d8:	e3560000 	cmp	r6, #0
8000c6dc:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
8000c6e0:	da00000d 	ble	8000c71c <_dtoa_r+0x14d4>
8000c6e4:	e1a01008 	mov	r1, r8
8000c6e8:	e3a02001 	mov	r2, #1
8000c6ec:	e1a00004 	mov	r0, r4
8000c6f0:	eb000421 	bl	8000d77c <__lshift>
8000c6f4:	e1a01009 	mov	r1, r9
8000c6f8:	e1a08000 	mov	r8, r0
8000c6fc:	eb00045f 	bl	8000d880 <__mcmp>
8000c700:	e3500000 	cmp	r0, #0
8000c704:	da000041 	ble	8000c810 <_dtoa_r+0x15c8>
8000c708:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
8000c70c:	e35c0039 	cmp	ip, #57	; 0x39
8000c710:	0a00002b 	beq	8000c7c4 <_dtoa_r+0x157c>
8000c714:	e28cc001 	add	ip, ip, #1
8000c718:	e58dc040 	str	ip, [sp, #64]	; 0x40
8000c71c:	e59d5018 	ldr	r5, [sp, #24]
8000c720:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
8000c724:	e4c51001 	strb	r1, [r5], #1
8000c728:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
8000c72c:	e58d2038 	str	r2, [sp, #56]	; 0x38
8000c730:	eafffc3d 	b	8000b82c <_dtoa_r+0x5e4>
8000c734:	e2822001 	add	r2, r2, #1
8000c738:	e5c32000 	strb	r2, [r3]
8000c73c:	eafffc3a 	b	8000b82c <_dtoa_r+0x5e4>
8000c740:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
8000c744:	e1a00004 	mov	r0, r4
8000c748:	e5921004 	ldr	r1, [r2, #4]
8000c74c:	eb000277 	bl	8000d130 <_Balloc>
8000c750:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
8000c754:	e5932010 	ldr	r2, [r3, #16]
8000c758:	e2822002 	add	r2, r2, #2
8000c75c:	e283100c 	add	r1, r3, #12
8000c760:	e1a0a000 	mov	sl, r0
8000c764:	e1a02102 	lsl	r2, r2, #2
8000c768:	e280000c 	add	r0, r0, #12
8000c76c:	ebfff10b 	bl	80008ba0 <memcpy>
8000c770:	e1a00004 	mov	r0, r4
8000c774:	e1a0100a 	mov	r1, sl
8000c778:	e3a02001 	mov	r2, #1
8000c77c:	eb0003fe 	bl	8000d77c <__lshift>
8000c780:	e58d0034 	str	r0, [sp, #52]	; 0x34
8000c784:	eafffe63 	b	8000c118 <_dtoa_r+0xed0>
8000c788:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
8000c78c:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
8000c790:	e58dc038 	str	ip, [sp, #56]	; 0x38
8000c794:	eaffff87 	b	8000c5b8 <_dtoa_r+0x1370>
8000c798:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
8000c79c:	e3530039 	cmp	r3, #57	; 0x39
8000c7a0:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
8000c7a4:	0a000006 	beq	8000c7c4 <_dtoa_r+0x157c>
8000c7a8:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
8000c7ac:	e59d5018 	ldr	r5, [sp, #24]
8000c7b0:	e2813001 	add	r3, r1, #1
8000c7b4:	e4c53001 	strb	r3, [r5], #1
8000c7b8:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
8000c7bc:	e58d2038 	str	r2, [sp, #56]	; 0x38
8000c7c0:	eafffc19 	b	8000b82c <_dtoa_r+0x5e4>
8000c7c4:	e59d3018 	ldr	r3, [sp, #24]
8000c7c8:	e3a02039 	mov	r2, #57	; 0x39
8000c7cc:	e4c32001 	strb	r2, [r3], #1
8000c7d0:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
8000c7d4:	e58dc038 	str	ip, [sp, #56]	; 0x38
8000c7d8:	eaffff81 	b	8000c5e4 <_dtoa_r+0x139c>
8000c7dc:	e59d2040 	ldr	r2, [sp, #64]	; 0x40
8000c7e0:	e3520039 	cmp	r2, #57	; 0x39
8000c7e4:	e59d7044 	ldr	r7, [sp, #68]	; 0x44
8000c7e8:	0afffff5 	beq	8000c7c4 <_dtoa_r+0x157c>
8000c7ec:	e3550000 	cmp	r5, #0
8000c7f0:	c2822001 	addgt	r2, r2, #1
8000c7f4:	c58d2040 	strgt	r2, [sp, #64]	; 0x40
8000c7f8:	e59d5018 	ldr	r5, [sp, #24]
8000c7fc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
8000c800:	e4c53001 	strb	r3, [r5], #1
8000c804:	e59dc034 	ldr	ip, [sp, #52]	; 0x34
8000c808:	e58dc038 	str	ip, [sp, #56]	; 0x38
8000c80c:	eafffc06 	b	8000b82c <_dtoa_r+0x5e4>
8000c810:	1affffc1 	bne	8000c71c <_dtoa_r+0x14d4>
8000c814:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
8000c818:	e3130001 	tst	r3, #1
8000c81c:	0affffbe 	beq	8000c71c <_dtoa_r+0x14d4>
8000c820:	eaffffb8 	b	8000c708 <_dtoa_r+0x14c0>
8000c824:	1283301c 	addne	r3, r3, #28
8000c828:	0afffd07 	beq	8000bc4c <_dtoa_r+0xa04>
8000c82c:	eafffcff 	b	8000bc30 <_dtoa_r+0x9e8>
8000c830:	e59dc040 	ldr	ip, [sp, #64]	; 0x40
8000c834:	e35c000e 	cmp	ip, #14
8000c838:	83a0a000 	movhi	sl, #0
8000c83c:	920aa001 	andls	sl, sl, #1
8000c840:	eafffb65 	b	8000b5dc <_dtoa_r+0x394>
8000c844:	e1a00000 	nop			; (mov r0, r0)

8000c848 <_setlocale_r>:
8000c848:	e92d4010 	push	{r4, lr}
8000c84c:	e2524000 	subs	r4, r2, #0
8000c850:	0a000004 	beq	8000c868 <_setlocale_r+0x20>
8000c854:	e1a00004 	mov	r0, r4
8000c858:	e59f1048 	ldr	r1, [pc, #72]	; 8000c8a8 <_setlocale_r+0x60>
8000c85c:	eb0005a5 	bl	8000def8 <strcmp>
8000c860:	e3500000 	cmp	r0, #0
8000c864:	1a000002 	bne	8000c874 <_setlocale_r+0x2c>
8000c868:	e59f003c 	ldr	r0, [pc, #60]	; 8000c8ac <_setlocale_r+0x64>
8000c86c:	e8bd4010 	pop	{r4, lr}
8000c870:	e12fff1e 	bx	lr
8000c874:	e1a00004 	mov	r0, r4
8000c878:	e59f102c 	ldr	r1, [pc, #44]	; 8000c8ac <_setlocale_r+0x64>
8000c87c:	eb00059d 	bl	8000def8 <strcmp>
8000c880:	e3500000 	cmp	r0, #0
8000c884:	0afffff7 	beq	8000c868 <_setlocale_r+0x20>
8000c888:	e1a00004 	mov	r0, r4
8000c88c:	e59f101c 	ldr	r1, [pc, #28]	; 8000c8b0 <_setlocale_r+0x68>
8000c890:	eb000598 	bl	8000def8 <strcmp>
8000c894:	e59f3010 	ldr	r3, [pc, #16]	; 8000c8ac <_setlocale_r+0x64>
8000c898:	e3500000 	cmp	r0, #0
8000c89c:	01a00003 	moveq	r0, r3
8000c8a0:	13a00000 	movne	r0, #0
8000c8a4:	eafffff0 	b	8000c86c <_setlocale_r+0x24>
8000c8a8:	80012738 	.word	0x80012738
8000c8ac:	800126e0 	.word	0x800126e0
8000c8b0:	80012704 	.word	0x80012704

8000c8b4 <__locale_charset>:
8000c8b4:	e51f0000 	ldr	r0, [pc, #-0]	; 8000c8bc <__locale_charset+0x8>
8000c8b8:	e12fff1e 	bx	lr
8000c8bc:	800118d8 	.word	0x800118d8

8000c8c0 <__locale_mb_cur_max>:
8000c8c0:	e59f3004 	ldr	r3, [pc, #4]	; 8000c8cc <__locale_mb_cur_max+0xc>
8000c8c4:	e5930020 	ldr	r0, [r3, #32]
8000c8c8:	e12fff1e 	bx	lr
8000c8cc:	800118d8 	.word	0x800118d8

8000c8d0 <__locale_msgcharset>:
8000c8d0:	e51f0000 	ldr	r0, [pc, #-0]	; 8000c8d8 <__locale_msgcharset+0x8>
8000c8d4:	e12fff1e 	bx	lr
8000c8d8:	800118fc 	.word	0x800118fc

8000c8dc <__locale_cjk_lang>:
8000c8dc:	e3a00000 	mov	r0, #0
8000c8e0:	e12fff1e 	bx	lr

8000c8e4 <_localeconv_r>:
8000c8e4:	e51f0000 	ldr	r0, [pc, #-0]	; 8000c8ec <_localeconv_r+0x8>
8000c8e8:	e12fff1e 	bx	lr
8000c8ec:	8001191c 	.word	0x8001191c

8000c8f0 <setlocale>:
8000c8f0:	e1a02001 	mov	r2, r1
8000c8f4:	e59f100c 	ldr	r1, [pc, #12]	; 8000c908 <setlocale+0x18>
8000c8f8:	e1a03000 	mov	r3, r0
8000c8fc:	e5910000 	ldr	r0, [r1]
8000c900:	e1a01003 	mov	r1, r3
8000c904:	eaffffcf 	b	8000c848 <_setlocale_r>
8000c908:	800114a8 	.word	0x800114a8

8000c90c <localeconv>:
8000c90c:	e51f0000 	ldr	r0, [pc, #-0]	; 8000c914 <localeconv+0x8>
8000c910:	e12fff1e 	bx	lr
8000c914:	8001191c 	.word	0x8001191c

8000c918 <_malloc_r>:
8000c918:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000c91c:	e281400b 	add	r4, r1, #11
8000c920:	e3540016 	cmp	r4, #22
8000c924:	83c44007 	bichi	r4, r4, #7
8000c928:	81a03fa4 	lsrhi	r3, r4, #31
8000c92c:	93a03000 	movls	r3, #0
8000c930:	93a04010 	movls	r4, #16
8000c934:	e1540001 	cmp	r4, r1
8000c938:	21a01003 	movcs	r1, r3
8000c93c:	33831001 	orrcc	r1, r3, #1
8000c940:	e3510000 	cmp	r1, #0
8000c944:	13a0300c 	movne	r3, #12
8000c948:	e24dd00c 	sub	sp, sp, #12
8000c94c:	e1a05000 	mov	r5, r0
8000c950:	15803000 	strne	r3, [r0]
8000c954:	13a08000 	movne	r8, #0
8000c958:	1a000016 	bne	8000c9b8 <_malloc_r+0xa0>
8000c95c:	eb0001f1 	bl	8000d128 <__malloc_lock>
8000c960:	e3540f7e 	cmp	r4, #504	; 0x1f8
8000c964:	2a000017 	bcs	8000c9c8 <_malloc_r+0xb0>
8000c968:	e59f66a4 	ldr	r6, [pc, #1700]	; 8000d014 <_malloc_r+0x6fc>
8000c96c:	e1a0a1a4 	lsr	sl, r4, #3
8000c970:	e086318a 	add	r3, r6, sl, lsl #3
8000c974:	e593800c 	ldr	r8, [r3, #12]
8000c978:	e1580003 	cmp	r8, r3
8000c97c:	e1a07006 	mov	r7, r6
8000c980:	0a000157 	beq	8000cee4 <_malloc_r+0x5cc>
8000c984:	e5983004 	ldr	r3, [r8, #4]
8000c988:	e3c33003 	bic	r3, r3, #3
8000c98c:	e0883003 	add	r3, r8, r3
8000c990:	e5930004 	ldr	r0, [r3, #4]
8000c994:	e2881008 	add	r1, r8, #8
8000c998:	e8910006 	ldm	r1, {r1, r2}
8000c99c:	e3800001 	orr	r0, r0, #1
8000c9a0:	e5830004 	str	r0, [r3, #4]
8000c9a4:	e581200c 	str	r2, [r1, #12]
8000c9a8:	e5821008 	str	r1, [r2, #8]
8000c9ac:	e1a00005 	mov	r0, r5
8000c9b0:	eb0001dd 	bl	8000d12c <__malloc_unlock>
8000c9b4:	e2888008 	add	r8, r8, #8
8000c9b8:	e1a00008 	mov	r0, r8
8000c9bc:	e28dd00c 	add	sp, sp, #12
8000c9c0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000c9c4:	e12fff1e 	bx	lr
8000c9c8:	e1b0a4a4 	lsrs	sl, r4, #9
8000c9cc:	01a0a1a4 	lsreq	sl, r4, #3
8000c9d0:	01a0118a 	lsleq	r1, sl, #3
8000c9d4:	1a000060 	bne	8000cb5c <_malloc_r+0x244>
8000c9d8:	e59f6634 	ldr	r6, [pc, #1588]	; 8000d014 <_malloc_r+0x6fc>
8000c9dc:	e0861001 	add	r1, r6, r1
8000c9e0:	e591800c 	ldr	r8, [r1, #12]
8000c9e4:	e1510008 	cmp	r1, r8
8000c9e8:	e1a07006 	mov	r7, r6
8000c9ec:	1a000005 	bne	8000ca08 <_malloc_r+0xf0>
8000c9f0:	ea00000a 	b	8000ca20 <_malloc_r+0x108>
8000c9f4:	e3530000 	cmp	r3, #0
8000c9f8:	aa000110 	bge	8000ce40 <_malloc_r+0x528>
8000c9fc:	e598800c 	ldr	r8, [r8, #12]
8000ca00:	e1510008 	cmp	r1, r8
8000ca04:	0a000005 	beq	8000ca20 <_malloc_r+0x108>
8000ca08:	e5982004 	ldr	r2, [r8, #4]
8000ca0c:	e3c22003 	bic	r2, r2, #3
8000ca10:	e0643002 	rsb	r3, r4, r2
8000ca14:	e353000f 	cmp	r3, #15
8000ca18:	dafffff5 	ble	8000c9f4 <_malloc_r+0xdc>
8000ca1c:	e24aa001 	sub	sl, sl, #1
8000ca20:	e28aa001 	add	sl, sl, #1
8000ca24:	e59f05ec 	ldr	r0, [pc, #1516]	; 8000d018 <_malloc_r+0x700>
8000ca28:	e5908008 	ldr	r8, [r0, #8]
8000ca2c:	e1500008 	cmp	r0, r8
8000ca30:	0a000092 	beq	8000cc80 <_malloc_r+0x368>
8000ca34:	e5982004 	ldr	r2, [r8, #4]
8000ca38:	e3c22003 	bic	r2, r2, #3
8000ca3c:	e0643002 	rsb	r3, r4, r2
8000ca40:	e353000f 	cmp	r3, #15
8000ca44:	ca000113 	bgt	8000ce98 <_malloc_r+0x580>
8000ca48:	e3530000 	cmp	r3, #0
8000ca4c:	e580000c 	str	r0, [r0, #12]
8000ca50:	e5800008 	str	r0, [r0, #8]
8000ca54:	aa00005b 	bge	8000cbc8 <_malloc_r+0x2b0>
8000ca58:	e3520c02 	cmp	r2, #512	; 0x200
8000ca5c:	2a000061 	bcs	8000cbe8 <_malloc_r+0x2d0>
8000ca60:	e5971004 	ldr	r1, [r7, #4]
8000ca64:	e1a021a2 	lsr	r2, r2, #3
8000ca68:	e1a03142 	asr	r3, r2, #2
8000ca6c:	e3a0c001 	mov	ip, #1
8000ca70:	e0872182 	add	r2, r7, r2, lsl #3
8000ca74:	e181331c 	orr	r3, r1, ip, lsl r3
8000ca78:	e5921008 	ldr	r1, [r2, #8]
8000ca7c:	e588200c 	str	r2, [r8, #12]
8000ca80:	e5881008 	str	r1, [r8, #8]
8000ca84:	e3a0c001 	mov	ip, #1
8000ca88:	e5828008 	str	r8, [r2, #8]
8000ca8c:	e1a0214a 	asr	r2, sl, #2
8000ca90:	e1a0c21c 	lsl	ip, ip, r2
8000ca94:	e15c0003 	cmp	ip, r3
8000ca98:	e5873004 	str	r3, [r7, #4]
8000ca9c:	e581800c 	str	r8, [r1, #12]
8000caa0:	8a00007c 	bhi	8000cc98 <_malloc_r+0x380>
8000caa4:	e113000c 	tst	r3, ip
8000caa8:	1a000008 	bne	8000cad0 <_malloc_r+0x1b8>
8000caac:	e1a0c08c 	lsl	ip, ip, #1
8000cab0:	e3caa003 	bic	sl, sl, #3
8000cab4:	e113000c 	tst	r3, ip
8000cab8:	e28aa004 	add	sl, sl, #4
8000cabc:	1a000003 	bne	8000cad0 <_malloc_r+0x1b8>
8000cac0:	e1a0c08c 	lsl	ip, ip, #1
8000cac4:	e11c0003 	tst	ip, r3
8000cac8:	e28aa004 	add	sl, sl, #4
8000cacc:	0afffffb 	beq	8000cac0 <_malloc_r+0x1a8>
8000cad0:	e087918a 	add	r9, r7, sl, lsl #3
8000cad4:	e1a0e009 	mov	lr, r9
8000cad8:	e1a0800a 	mov	r8, sl
8000cadc:	e59e300c 	ldr	r3, [lr, #12]
8000cae0:	e15e0003 	cmp	lr, r3
8000cae4:	1a000005 	bne	8000cb00 <_malloc_r+0x1e8>
8000cae8:	ea0000f8 	b	8000ced0 <_malloc_r+0x5b8>
8000caec:	e3520000 	cmp	r2, #0
8000caf0:	aa000101 	bge	8000cefc <_malloc_r+0x5e4>
8000caf4:	e593300c 	ldr	r3, [r3, #12]
8000caf8:	e15e0003 	cmp	lr, r3
8000cafc:	0a0000f3 	beq	8000ced0 <_malloc_r+0x5b8>
8000cb00:	e5931004 	ldr	r1, [r3, #4]
8000cb04:	e3c11003 	bic	r1, r1, #3
8000cb08:	e0642001 	rsb	r2, r4, r1
8000cb0c:	e352000f 	cmp	r2, #15
8000cb10:	dafffff5 	ble	8000caec <_malloc_r+0x1d4>
8000cb14:	e1a08003 	mov	r8, r3
8000cb18:	e593c00c 	ldr	ip, [r3, #12]
8000cb1c:	e5b8e008 	ldr	lr, [r8, #8]!
8000cb20:	e0831004 	add	r1, r3, r4
8000cb24:	e3826001 	orr	r6, r2, #1
8000cb28:	e3844001 	orr	r4, r4, #1
8000cb2c:	e58ec00c 	str	ip, [lr, #12]
8000cb30:	e58ce008 	str	lr, [ip, #8]
8000cb34:	e580100c 	str	r1, [r0, #12]
8000cb38:	e5801008 	str	r1, [r0, #8]
8000cb3c:	e5834004 	str	r4, [r3, #4]
8000cb40:	e581000c 	str	r0, [r1, #12]
8000cb44:	e5810008 	str	r0, [r1, #8]
8000cb48:	e5816004 	str	r6, [r1, #4]
8000cb4c:	e7812002 	str	r2, [r1, r2]
8000cb50:	e1a00005 	mov	r0, r5
8000cb54:	eb000174 	bl	8000d12c <__malloc_unlock>
8000cb58:	eaffff96 	b	8000c9b8 <_malloc_r+0xa0>
8000cb5c:	e35a0004 	cmp	sl, #4
8000cb60:	91a0a324 	lsrls	sl, r4, #6
8000cb64:	928aa038 	addls	sl, sl, #56	; 0x38
8000cb68:	91a0118a 	lslls	r1, sl, #3
8000cb6c:	9affff99 	bls	8000c9d8 <_malloc_r+0xc0>
8000cb70:	e35a0014 	cmp	sl, #20
8000cb74:	928aa05b 	addls	sl, sl, #91	; 0x5b
8000cb78:	91a0118a 	lslls	r1, sl, #3
8000cb7c:	9affff95 	bls	8000c9d8 <_malloc_r+0xc0>
8000cb80:	e35a0054 	cmp	sl, #84	; 0x54
8000cb84:	91a0a624 	lsrls	sl, r4, #12
8000cb88:	928aa06e 	addls	sl, sl, #110	; 0x6e
8000cb8c:	91a0118a 	lslls	r1, sl, #3
8000cb90:	9affff90 	bls	8000c9d8 <_malloc_r+0xc0>
8000cb94:	e35a0f55 	cmp	sl, #340	; 0x154
8000cb98:	91a0a7a4 	lsrls	sl, r4, #15
8000cb9c:	928aa077 	addls	sl, sl, #119	; 0x77
8000cba0:	91a0118a 	lslls	r1, sl, #3
8000cba4:	9affff8b 	bls	8000c9d8 <_malloc_r+0xc0>
8000cba8:	e59f346c 	ldr	r3, [pc, #1132]	; 8000d01c <_malloc_r+0x704>
8000cbac:	e15a0003 	cmp	sl, r3
8000cbb0:	91a0a924 	lsrls	sl, r4, #18
8000cbb4:	928aa07c 	addls	sl, sl, #124	; 0x7c
8000cbb8:	91a0118a 	lslls	r1, sl, #3
8000cbbc:	83a01e3f 	movhi	r1, #1008	; 0x3f0
8000cbc0:	83a0a07e 	movhi	sl, #126	; 0x7e
8000cbc4:	eaffff83 	b	8000c9d8 <_malloc_r+0xc0>
8000cbc8:	e0882002 	add	r2, r8, r2
8000cbcc:	e5923004 	ldr	r3, [r2, #4]
8000cbd0:	e3833001 	orr	r3, r3, #1
8000cbd4:	e5823004 	str	r3, [r2, #4]
8000cbd8:	e1a00005 	mov	r0, r5
8000cbdc:	eb000152 	bl	8000d12c <__malloc_unlock>
8000cbe0:	e2888008 	add	r8, r8, #8
8000cbe4:	eaffff73 	b	8000c9b8 <_malloc_r+0xa0>
8000cbe8:	e1a034a2 	lsr	r3, r2, #9
8000cbec:	e3530004 	cmp	r3, #4
8000cbf0:	91a01322 	lsrls	r1, r2, #6
8000cbf4:	92811038 	addls	r1, r1, #56	; 0x38
8000cbf8:	9a00000f 	bls	8000cc3c <_malloc_r+0x324>
8000cbfc:	e3530014 	cmp	r3, #20
8000cc00:	9283105b 	addls	r1, r3, #91	; 0x5b
8000cc04:	9a00000c 	bls	8000cc3c <_malloc_r+0x324>
8000cc08:	e3530054 	cmp	r3, #84	; 0x54
8000cc0c:	91a01622 	lsrls	r1, r2, #12
8000cc10:	9281106e 	addls	r1, r1, #110	; 0x6e
8000cc14:	9a000008 	bls	8000cc3c <_malloc_r+0x324>
8000cc18:	e3530f55 	cmp	r3, #340	; 0x154
8000cc1c:	91a017a2 	lsrls	r1, r2, #15
8000cc20:	92811077 	addls	r1, r1, #119	; 0x77
8000cc24:	9a000004 	bls	8000cc3c <_malloc_r+0x324>
8000cc28:	e59f13ec 	ldr	r1, [pc, #1004]	; 8000d01c <_malloc_r+0x704>
8000cc2c:	e1530001 	cmp	r3, r1
8000cc30:	91a01922 	lsrls	r1, r2, #18
8000cc34:	9281107c 	addls	r1, r1, #124	; 0x7c
8000cc38:	83a0107e 	movhi	r1, #126	; 0x7e
8000cc3c:	e087c181 	add	ip, r7, r1, lsl #3
8000cc40:	e59c3008 	ldr	r3, [ip, #8]
8000cc44:	e153000c 	cmp	r3, ip
8000cc48:	1a000003 	bne	8000cc5c <_malloc_r+0x344>
8000cc4c:	ea0000d3 	b	8000cfa0 <_malloc_r+0x688>
8000cc50:	e5933008 	ldr	r3, [r3, #8]
8000cc54:	e15c0003 	cmp	ip, r3
8000cc58:	0a000003 	beq	8000cc6c <_malloc_r+0x354>
8000cc5c:	e5931004 	ldr	r1, [r3, #4]
8000cc60:	e3c11003 	bic	r1, r1, #3
8000cc64:	e1520001 	cmp	r2, r1
8000cc68:	3afffff8 	bcc	8000cc50 <_malloc_r+0x338>
8000cc6c:	e593200c 	ldr	r2, [r3, #12]
8000cc70:	e588200c 	str	r2, [r8, #12]
8000cc74:	e5883008 	str	r3, [r8, #8]
8000cc78:	e583800c 	str	r8, [r3, #12]
8000cc7c:	e5828008 	str	r8, [r2, #8]
8000cc80:	e1a0214a 	asr	r2, sl, #2
8000cc84:	e3a0c001 	mov	ip, #1
8000cc88:	e1a0c21c 	lsl	ip, ip, r2
8000cc8c:	e5973004 	ldr	r3, [r7, #4]
8000cc90:	e15c0003 	cmp	ip, r3
8000cc94:	9affff82 	bls	8000caa4 <_malloc_r+0x18c>
8000cc98:	e5978008 	ldr	r8, [r7, #8]
8000cc9c:	e598a004 	ldr	sl, [r8, #4]
8000cca0:	e3caa003 	bic	sl, sl, #3
8000cca4:	e154000a 	cmp	r4, sl
8000cca8:	93a03000 	movls	r3, #0
8000ccac:	83a03001 	movhi	r3, #1
8000ccb0:	e064200a 	rsb	r2, r4, sl
8000ccb4:	e352000f 	cmp	r2, #15
8000ccb8:	d3833001 	orrle	r3, r3, #1
8000ccbc:	e3530000 	cmp	r3, #0
8000ccc0:	0a00006a 	beq	8000ce70 <_malloc_r+0x558>
8000ccc4:	e59f9354 	ldr	r9, [pc, #852]	; 8000d020 <_malloc_r+0x708>
8000ccc8:	e599b000 	ldr	fp, [r9]
8000cccc:	e5963408 	ldr	r3, [r6, #1032]	; 0x408
8000ccd0:	e28bb010 	add	fp, fp, #16
8000ccd4:	e3730001 	cmn	r3, #1
8000ccd8:	e08bb004 	add	fp, fp, r4
8000ccdc:	128bbeff 	addne	fp, fp, #4080	; 0xff0
8000cce0:	128bb00f 	addne	fp, fp, #15
8000cce4:	13cbbeff 	bicne	fp, fp, #4080	; 0xff0
8000cce8:	13cbb00f 	bicne	fp, fp, #15
8000ccec:	e1a00005 	mov	r0, r5
8000ccf0:	e1a0100b 	mov	r1, fp
8000ccf4:	eb00046f 	bl	8000deb8 <_sbrk_r>
8000ccf8:	e3700001 	cmn	r0, #1
8000ccfc:	e1a03000 	mov	r3, r0
8000cd00:	0a00009c 	beq	8000cf78 <_malloc_r+0x660>
8000cd04:	e088100a 	add	r1, r8, sl
8000cd08:	e1510000 	cmp	r1, r0
8000cd0c:	8a000097 	bhi	8000cf70 <_malloc_r+0x658>
8000cd10:	e5992004 	ldr	r2, [r9, #4]
8000cd14:	e1510000 	cmp	r1, r0
8000cd18:	e08b2002 	add	r2, fp, r2
8000cd1c:	e5892004 	str	r2, [r9, #4]
8000cd20:	0a0000aa 	beq	8000cfd0 <_malloc_r+0x6b8>
8000cd24:	e596c408 	ldr	ip, [r6, #1032]	; 0x408
8000cd28:	e37c0001 	cmn	ip, #1
8000cd2c:	10802002 	addne	r2, r0, r2
8000cd30:	059f22dc 	ldreq	r2, [pc, #732]	; 8000d014 <_malloc_r+0x6fc>
8000cd34:	10611002 	rsbne	r1, r1, r2
8000cd38:	05820408 	streq	r0, [r2, #1032]	; 0x408
8000cd3c:	15891004 	strne	r1, [r9, #4]
8000cd40:	e2106007 	ands	r6, r0, #7
8000cd44:	12666008 	rsbne	r6, r6, #8
8000cd48:	10803006 	addne	r3, r0, r6
8000cd4c:	e083200b 	add	r2, r3, fp
8000cd50:	12866a01 	addne	r6, r6, #4096	; 0x1000
8000cd54:	03a06a01 	moveq	r6, #4096	; 0x1000
8000cd58:	e1a02a02 	lsl	r2, r2, #20
8000cd5c:	e0466a22 	sub	r6, r6, r2, lsr #20
8000cd60:	e1a01006 	mov	r1, r6
8000cd64:	e1a00005 	mov	r0, r5
8000cd68:	e58d3004 	str	r3, [sp, #4]
8000cd6c:	eb000451 	bl	8000deb8 <_sbrk_r>
8000cd70:	e59d3004 	ldr	r3, [sp, #4]
8000cd74:	e3700001 	cmn	r0, #1
8000cd78:	10631000 	rsbne	r1, r3, r0
8000cd7c:	e5992004 	ldr	r2, [r9, #4]
8000cd80:	10811006 	addne	r1, r1, r6
8000cd84:	03a06000 	moveq	r6, #0
8000cd88:	13811001 	orrne	r1, r1, #1
8000cd8c:	03a01001 	moveq	r1, #1
8000cd90:	e0862002 	add	r2, r6, r2
8000cd94:	e1580007 	cmp	r8, r7
8000cd98:	e5892004 	str	r2, [r9, #4]
8000cd9c:	e5873008 	str	r3, [r7, #8]
8000cda0:	e5831004 	str	r1, [r3, #4]
8000cda4:	0a00000d 	beq	8000cde0 <_malloc_r+0x4c8>
8000cda8:	e35a000f 	cmp	sl, #15
8000cdac:	9a000082 	bls	8000cfbc <_malloc_r+0x6a4>
8000cdb0:	e598c004 	ldr	ip, [r8, #4]
8000cdb4:	e24a300c 	sub	r3, sl, #12
8000cdb8:	e3c33007 	bic	r3, r3, #7
8000cdbc:	e20cc001 	and	ip, ip, #1
8000cdc0:	e0881003 	add	r1, r8, r3
8000cdc4:	e3a00005 	mov	r0, #5
8000cdc8:	e183c00c 	orr	ip, r3, ip
8000cdcc:	e353000f 	cmp	r3, #15
8000cdd0:	e588c004 	str	ip, [r8, #4]
8000cdd4:	e5810004 	str	r0, [r1, #4]
8000cdd8:	e5810008 	str	r0, [r1, #8]
8000cddc:	8a000082 	bhi	8000cfec <_malloc_r+0x6d4>
8000cde0:	e599302c 	ldr	r3, [r9, #44]	; 0x2c
8000cde4:	e1520003 	cmp	r2, r3
8000cde8:	859f3230 	ldrhi	r3, [pc, #560]	; 8000d020 <_malloc_r+0x708>
8000cdec:	8583202c 	strhi	r2, [r3, #44]	; 0x2c
8000cdf0:	e5993030 	ldr	r3, [r9, #48]	; 0x30
8000cdf4:	e1520003 	cmp	r2, r3
8000cdf8:	9a00005e 	bls	8000cf78 <_malloc_r+0x660>
8000cdfc:	e5978008 	ldr	r8, [r7, #8]
8000ce00:	e59f1218 	ldr	r1, [pc, #536]	; 8000d020 <_malloc_r+0x708>
8000ce04:	e5983004 	ldr	r3, [r8, #4]
8000ce08:	e5812030 	str	r2, [r1, #48]	; 0x30
8000ce0c:	e3c32003 	bic	r2, r3, #3
8000ce10:	e1540002 	cmp	r4, r2
8000ce14:	93a03000 	movls	r3, #0
8000ce18:	83a03001 	movhi	r3, #1
8000ce1c:	e0642002 	rsb	r2, r4, r2
8000ce20:	e352000f 	cmp	r2, #15
8000ce24:	d3833001 	orrle	r3, r3, #1
8000ce28:	e3530000 	cmp	r3, #0
8000ce2c:	0a00000f 	beq	8000ce70 <_malloc_r+0x558>
8000ce30:	e1a00005 	mov	r0, r5
8000ce34:	eb0000bc 	bl	8000d12c <__malloc_unlock>
8000ce38:	e3a08000 	mov	r8, #0
8000ce3c:	eafffedd 	b	8000c9b8 <_malloc_r+0xa0>
8000ce40:	e0882002 	add	r2, r8, r2
8000ce44:	e5920004 	ldr	r0, [r2, #4]
8000ce48:	e2881008 	add	r1, r8, #8
8000ce4c:	e891000a 	ldm	r1, {r1, r3}
8000ce50:	e3800001 	orr	r0, r0, #1
8000ce54:	e5820004 	str	r0, [r2, #4]
8000ce58:	e581300c 	str	r3, [r1, #12]
8000ce5c:	e5831008 	str	r1, [r3, #8]
8000ce60:	e1a00005 	mov	r0, r5
8000ce64:	eb0000b0 	bl	8000d12c <__malloc_unlock>
8000ce68:	e2888008 	add	r8, r8, #8
8000ce6c:	eafffed1 	b	8000c9b8 <_malloc_r+0xa0>
8000ce70:	e0883004 	add	r3, r8, r4
8000ce74:	e3822001 	orr	r2, r2, #1
8000ce78:	e3844001 	orr	r4, r4, #1
8000ce7c:	e5884004 	str	r4, [r8, #4]
8000ce80:	e1a00005 	mov	r0, r5
8000ce84:	e5832004 	str	r2, [r3, #4]
8000ce88:	e5873008 	str	r3, [r7, #8]
8000ce8c:	eb0000a6 	bl	8000d12c <__malloc_unlock>
8000ce90:	e2888008 	add	r8, r8, #8
8000ce94:	eafffec7 	b	8000c9b8 <_malloc_r+0xa0>
8000ce98:	e0882004 	add	r2, r8, r4
8000ce9c:	e3831001 	orr	r1, r3, #1
8000cea0:	e3844001 	orr	r4, r4, #1
8000cea4:	e5884004 	str	r4, [r8, #4]
8000cea8:	e580200c 	str	r2, [r0, #12]
8000ceac:	e5802008 	str	r2, [r0, #8]
8000ceb0:	e582000c 	str	r0, [r2, #12]
8000ceb4:	e5820008 	str	r0, [r2, #8]
8000ceb8:	e5821004 	str	r1, [r2, #4]
8000cebc:	e7823003 	str	r3, [r2, r3]
8000cec0:	e1a00005 	mov	r0, r5
8000cec4:	eb000098 	bl	8000d12c <__malloc_unlock>
8000cec8:	e2888008 	add	r8, r8, #8
8000cecc:	eafffeb9 	b	8000c9b8 <_malloc_r+0xa0>
8000ced0:	e2888001 	add	r8, r8, #1
8000ced4:	e3180003 	tst	r8, #3
8000ced8:	0a000014 	beq	8000cf30 <_malloc_r+0x618>
8000cedc:	e28ee008 	add	lr, lr, #8
8000cee0:	eafffefd 	b	8000cadc <_malloc_r+0x1c4>
8000cee4:	e2883008 	add	r3, r8, #8
8000cee8:	e5988014 	ldr	r8, [r8, #20]
8000ceec:	e1530008 	cmp	r3, r8
8000cef0:	028aa002 	addeq	sl, sl, #2
8000cef4:	0afffeca 	beq	8000ca24 <_malloc_r+0x10c>
8000cef8:	eafffea1 	b	8000c984 <_malloc_r+0x6c>
8000cefc:	e0831001 	add	r1, r3, r1
8000cf00:	e5910004 	ldr	r0, [r1, #4]
8000cf04:	e1a08003 	mov	r8, r3
8000cf08:	e5b82008 	ldr	r2, [r8, #8]!
8000cf0c:	e593300c 	ldr	r3, [r3, #12]
8000cf10:	e3800001 	orr	r0, r0, #1
8000cf14:	e5810004 	str	r0, [r1, #4]
8000cf18:	e582300c 	str	r3, [r2, #12]
8000cf1c:	e5832008 	str	r2, [r3, #8]
8000cf20:	e1a00005 	mov	r0, r5
8000cf24:	eb000080 	bl	8000d12c <__malloc_unlock>
8000cf28:	eafffea2 	b	8000c9b8 <_malloc_r+0xa0>
8000cf2c:	e24aa001 	sub	sl, sl, #1
8000cf30:	e31a0003 	tst	sl, #3
8000cf34:	e1a03009 	mov	r3, r9
8000cf38:	0a000031 	beq	8000d004 <_malloc_r+0x6ec>
8000cf3c:	e4139008 	ldr	r9, [r3], #-8
8000cf40:	e1590003 	cmp	r9, r3
8000cf44:	0afffff8 	beq	8000cf2c <_malloc_r+0x614>
8000cf48:	e5973004 	ldr	r3, [r7, #4]
8000cf4c:	e1a0c08c 	lsl	ip, ip, #1
8000cf50:	e15c0003 	cmp	ip, r3
8000cf54:	8affff4f 	bhi	8000cc98 <_malloc_r+0x380>
8000cf58:	e35c0000 	cmp	ip, #0
8000cf5c:	0affff4d 	beq	8000cc98 <_malloc_r+0x380>
8000cf60:	e11c0003 	tst	ip, r3
8000cf64:	0a000007 	beq	8000cf88 <_malloc_r+0x670>
8000cf68:	e1a0a008 	mov	sl, r8
8000cf6c:	eafffed7 	b	8000cad0 <_malloc_r+0x1b8>
8000cf70:	e1580007 	cmp	r8, r7
8000cf74:	0affff65 	beq	8000cd10 <_malloc_r+0x3f8>
8000cf78:	e5978008 	ldr	r8, [r7, #8]
8000cf7c:	e5982004 	ldr	r2, [r8, #4]
8000cf80:	e3c22003 	bic	r2, r2, #3
8000cf84:	eaffffa1 	b	8000ce10 <_malloc_r+0x4f8>
8000cf88:	e1a0c08c 	lsl	ip, ip, #1
8000cf8c:	e11c0003 	tst	ip, r3
8000cf90:	e2888004 	add	r8, r8, #4
8000cf94:	0afffffb 	beq	8000cf88 <_malloc_r+0x670>
8000cf98:	e1a0a008 	mov	sl, r8
8000cf9c:	eafffecb 	b	8000cad0 <_malloc_r+0x1b8>
8000cfa0:	e5972004 	ldr	r2, [r7, #4]
8000cfa4:	e1a01141 	asr	r1, r1, #2
8000cfa8:	e3a0c001 	mov	ip, #1
8000cfac:	e182111c 	orr	r1, r2, ip, lsl r1
8000cfb0:	e1a02003 	mov	r2, r3
8000cfb4:	e5871004 	str	r1, [r7, #4]
8000cfb8:	eaffff2c 	b	8000cc70 <_malloc_r+0x358>
8000cfbc:	e3a02001 	mov	r2, #1
8000cfc0:	e5832004 	str	r2, [r3, #4]
8000cfc4:	e1a08003 	mov	r8, r3
8000cfc8:	e3a02000 	mov	r2, #0
8000cfcc:	eaffff8f 	b	8000ce10 <_malloc_r+0x4f8>
8000cfd0:	e1b0ca01 	lsls	ip, r1, #20
8000cfd4:	1affff52 	bne	8000cd24 <_malloc_r+0x40c>
8000cfd8:	e5973008 	ldr	r3, [r7, #8]
8000cfdc:	e08b100a 	add	r1, fp, sl
8000cfe0:	e3811001 	orr	r1, r1, #1
8000cfe4:	e5831004 	str	r1, [r3, #4]
8000cfe8:	eaffff7c 	b	8000cde0 <_malloc_r+0x4c8>
8000cfec:	e1a00005 	mov	r0, r5
8000cff0:	e2881008 	add	r1, r8, #8
8000cff4:	eb000957 	bl	8000f558 <_free_r>
8000cff8:	e59f3020 	ldr	r3, [pc, #32]	; 8000d020 <_malloc_r+0x708>
8000cffc:	e5932004 	ldr	r2, [r3, #4]
8000d000:	eaffff76 	b	8000cde0 <_malloc_r+0x4c8>
8000d004:	e5973004 	ldr	r3, [r7, #4]
8000d008:	e1c3300c 	bic	r3, r3, ip
8000d00c:	e5873004 	str	r3, [r7, #4]
8000d010:	eaffffcc 	b	8000cf48 <_malloc_r+0x630>
8000d014:	80011954 	.word	0x80011954
8000d018:	8001195c 	.word	0x8001195c
8000d01c:	00000554 	.word	0x00000554
8000d020:	80012784 	.word	0x80012784

8000d024 <memchr>:
8000d024:	e3100003 	tst	r0, #3
8000d028:	e92d0070 	push	{r4, r5, r6}
8000d02c:	e20110ff 	and	r1, r1, #255	; 0xff
8000d030:	e1a04000 	mov	r4, r0
8000d034:	0a000010 	beq	8000d07c <memchr+0x58>
8000d038:	e3520000 	cmp	r2, #0
8000d03c:	0a000021 	beq	8000d0c8 <memchr+0xa4>
8000d040:	e5d03000 	ldrb	r3, [r0]
8000d044:	e1530001 	cmp	r3, r1
8000d048:	12422001 	subne	r2, r2, #1
8000d04c:	12803001 	addne	r3, r0, #1
8000d050:	1a000006 	bne	8000d070 <memchr+0x4c>
8000d054:	ea000019 	b	8000d0c0 <memchr+0x9c>
8000d058:	e3520000 	cmp	r2, #0
8000d05c:	0a000019 	beq	8000d0c8 <memchr+0xa4>
8000d060:	e4d3c001 	ldrb	ip, [r3], #1
8000d064:	e15c0001 	cmp	ip, r1
8000d068:	0a000018 	beq	8000d0d0 <memchr+0xac>
8000d06c:	e2422001 	sub	r2, r2, #1
8000d070:	e3130003 	tst	r3, #3
8000d074:	e1a04003 	mov	r4, r3
8000d078:	1afffff6 	bne	8000d058 <memchr+0x34>
8000d07c:	e3520003 	cmp	r2, #3
8000d080:	8a000014 	bhi	8000d0d8 <memchr+0xb4>
8000d084:	e3520000 	cmp	r2, #0
8000d088:	0a00000e 	beq	8000d0c8 <memchr+0xa4>
8000d08c:	e5d43000 	ldrb	r3, [r4]
8000d090:	e1530001 	cmp	r3, r1
8000d094:	12423001 	subne	r3, r2, #1
8000d098:	1284c001 	addne	ip, r4, #1
8000d09c:	1a000003 	bne	8000d0b0 <memchr+0x8c>
8000d0a0:	ea00000a 	b	8000d0d0 <memchr+0xac>
8000d0a4:	e4dc5001 	ldrb	r5, [ip], #1
8000d0a8:	e1550001 	cmp	r5, r1
8000d0ac:	0a000003 	beq	8000d0c0 <memchr+0x9c>
8000d0b0:	e2533001 	subs	r3, r3, #1
8000d0b4:	e1a0000c 	mov	r0, ip
8000d0b8:	2afffff9 	bcs	8000d0a4 <memchr+0x80>
8000d0bc:	e3a00000 	mov	r0, #0
8000d0c0:	e8bd0070 	pop	{r4, r5, r6}
8000d0c4:	e12fff1e 	bx	lr
8000d0c8:	e1a00002 	mov	r0, r2
8000d0cc:	eafffffb 	b	8000d0c0 <memchr+0x9c>
8000d0d0:	e1a00004 	mov	r0, r4
8000d0d4:	eafffff9 	b	8000d0c0 <memchr+0x9c>
8000d0d8:	e1810401 	orr	r0, r1, r1, lsl #8
8000d0dc:	e1800800 	orr	r0, r0, r0, lsl #16
8000d0e0:	e1a03004 	mov	r3, r4
8000d0e4:	e1a04003 	mov	r4, r3
8000d0e8:	e4936004 	ldr	r6, [r3], #4
8000d0ec:	e59f502c 	ldr	r5, [pc, #44]	; 8000d120 <memchr+0xfc>
8000d0f0:	e0206006 	eor	r6, r0, r6
8000d0f4:	e0865005 	add	r5, r6, r5
8000d0f8:	e59fc024 	ldr	ip, [pc, #36]	; 8000d124 <memchr+0x100>
8000d0fc:	e1c55006 	bic	r5, r5, r6
8000d100:	e005c00c 	and	ip, r5, ip
8000d104:	e35c0000 	cmp	ip, #0
8000d108:	1affffdd 	bne	8000d084 <memchr+0x60>
8000d10c:	e2422004 	sub	r2, r2, #4
8000d110:	e3520003 	cmp	r2, #3
8000d114:	e1a04003 	mov	r4, r3
8000d118:	8afffff1 	bhi	8000d0e4 <memchr+0xc0>
8000d11c:	eaffffd8 	b	8000d084 <memchr+0x60>
8000d120:	fefefeff 	.word	0xfefefeff
8000d124:	80808080 	.word	0x80808080

8000d128 <__malloc_lock>:
8000d128:	e12fff1e 	bx	lr

8000d12c <__malloc_unlock>:
8000d12c:	e12fff1e 	bx	lr

8000d130 <_Balloc>:
8000d130:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
8000d134:	e3530000 	cmp	r3, #0
8000d138:	e92d4070 	push	{r4, r5, r6, lr}
8000d13c:	e1a05000 	mov	r5, r0
8000d140:	e1a04001 	mov	r4, r1
8000d144:	0a000009 	beq	8000d170 <_Balloc+0x40>
8000d148:	e7930104 	ldr	r0, [r3, r4, lsl #2]
8000d14c:	e3500000 	cmp	r0, #0
8000d150:	0a00000e 	beq	8000d190 <_Balloc+0x60>
8000d154:	e5902000 	ldr	r2, [r0]
8000d158:	e7832104 	str	r2, [r3, r4, lsl #2]
8000d15c:	e3a03000 	mov	r3, #0
8000d160:	e5803010 	str	r3, [r0, #16]
8000d164:	e580300c 	str	r3, [r0, #12]
8000d168:	e8bd4070 	pop	{r4, r5, r6, lr}
8000d16c:	e12fff1e 	bx	lr
8000d170:	e3a01004 	mov	r1, #4
8000d174:	e3a02021 	mov	r2, #33	; 0x21
8000d178:	eb000890 	bl	8000f3c0 <_calloc_r>
8000d17c:	e3500000 	cmp	r0, #0
8000d180:	e1a03000 	mov	r3, r0
8000d184:	e585004c 	str	r0, [r5, #76]	; 0x4c
8000d188:	1affffee 	bne	8000d148 <_Balloc+0x18>
8000d18c:	eafffff5 	b	8000d168 <_Balloc+0x38>
8000d190:	e3a01001 	mov	r1, #1
8000d194:	e1a06411 	lsl	r6, r1, r4
8000d198:	e2862005 	add	r2, r6, #5
8000d19c:	e1a00005 	mov	r0, r5
8000d1a0:	e1a02102 	lsl	r2, r2, #2
8000d1a4:	eb000885 	bl	8000f3c0 <_calloc_r>
8000d1a8:	e3500000 	cmp	r0, #0
8000d1ac:	0affffed 	beq	8000d168 <_Balloc+0x38>
8000d1b0:	e9800050 	stmib	r0, {r4, r6}
8000d1b4:	eaffffe8 	b	8000d15c <_Balloc+0x2c>

8000d1b8 <_Bfree>:
8000d1b8:	e3510000 	cmp	r1, #0
8000d1bc:	1590304c 	ldrne	r3, [r0, #76]	; 0x4c
8000d1c0:	15912004 	ldrne	r2, [r1, #4]
8000d1c4:	17930102 	ldrne	r0, [r3, r2, lsl #2]
8000d1c8:	15810000 	strne	r0, [r1]
8000d1cc:	17831102 	strne	r1, [r3, r2, lsl #2]
8000d1d0:	e12fff1e 	bx	lr

8000d1d4 <__multadd>:
8000d1d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
8000d1d8:	e1a05001 	mov	r5, r1
8000d1dc:	e5914010 	ldr	r4, [r1, #16]
8000d1e0:	e1a06000 	mov	r6, r0
8000d1e4:	e24dd00c 	sub	sp, sp, #12
8000d1e8:	e2810014 	add	r0, r1, #20
8000d1ec:	e3a01000 	mov	r1, #0
8000d1f0:	e590c000 	ldr	ip, [r0]
8000d1f4:	e1a0780c 	lsl	r7, ip, #16
8000d1f8:	e1a07827 	lsr	r7, r7, #16
8000d1fc:	e0233297 	mla	r3, r7, r2, r3
8000d200:	e1a0c82c 	lsr	ip, ip, #16
8000d204:	e007029c 	mul	r7, ip, r2
8000d208:	e1a0c803 	lsl	ip, r3, #16
8000d20c:	e1a0c82c 	lsr	ip, ip, #16
8000d210:	e0873823 	add	r3, r7, r3, lsr #16
8000d214:	e2811001 	add	r1, r1, #1
8000d218:	e08cc803 	add	ip, ip, r3, lsl #16
8000d21c:	e1540001 	cmp	r4, r1
8000d220:	e1a03823 	lsr	r3, r3, #16
8000d224:	e480c004 	str	ip, [r0], #4
8000d228:	cafffff0 	bgt	8000d1f0 <__multadd+0x1c>
8000d22c:	e3530000 	cmp	r3, #0
8000d230:	0a000006 	beq	8000d250 <__multadd+0x7c>
8000d234:	e5952008 	ldr	r2, [r5, #8]
8000d238:	e1540002 	cmp	r4, r2
8000d23c:	aa000007 	bge	8000d260 <__multadd+0x8c>
8000d240:	e0852104 	add	r2, r5, r4, lsl #2
8000d244:	e2844001 	add	r4, r4, #1
8000d248:	e5823014 	str	r3, [r2, #20]
8000d24c:	e5854010 	str	r4, [r5, #16]
8000d250:	e1a00005 	mov	r0, r5
8000d254:	e28dd00c 	add	sp, sp, #12
8000d258:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
8000d25c:	e12fff1e 	bx	lr
8000d260:	e5951004 	ldr	r1, [r5, #4]
8000d264:	e1a00006 	mov	r0, r6
8000d268:	e2811001 	add	r1, r1, #1
8000d26c:	e58d3004 	str	r3, [sp, #4]
8000d270:	ebffffae 	bl	8000d130 <_Balloc>
8000d274:	e5952010 	ldr	r2, [r5, #16]
8000d278:	e2822002 	add	r2, r2, #2
8000d27c:	e285100c 	add	r1, r5, #12
8000d280:	e1a07000 	mov	r7, r0
8000d284:	e1a02102 	lsl	r2, r2, #2
8000d288:	e280000c 	add	r0, r0, #12
8000d28c:	ebffee43 	bl	80008ba0 <memcpy>
8000d290:	e5951004 	ldr	r1, [r5, #4]
8000d294:	e596204c 	ldr	r2, [r6, #76]	; 0x4c
8000d298:	e7920101 	ldr	r0, [r2, r1, lsl #2]
8000d29c:	e59d3004 	ldr	r3, [sp, #4]
8000d2a0:	e5850000 	str	r0, [r5]
8000d2a4:	e7825101 	str	r5, [r2, r1, lsl #2]
8000d2a8:	e1a05007 	mov	r5, r7
8000d2ac:	eaffffe3 	b	8000d240 <__multadd+0x6c>

8000d2b0 <__s2b>:
8000d2b0:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
8000d2b4:	e283c008 	add	ip, r3, #8
8000d2b8:	e1a07003 	mov	r7, r3
8000d2bc:	e59f30d4 	ldr	r3, [pc, #212]	; 8000d398 <__s2b+0xe8>
8000d2c0:	e0c3e39c 	smull	lr, r3, ip, r3
8000d2c4:	e1a0cfcc 	asr	ip, ip, #31
8000d2c8:	e06c30c3 	rsb	r3, ip, r3, asr #1
8000d2cc:	e3530001 	cmp	r3, #1
8000d2d0:	e1a06001 	mov	r6, r1
8000d2d4:	e1a04000 	mov	r4, r0
8000d2d8:	e1a08002 	mov	r8, r2
8000d2dc:	d3a01000 	movle	r1, #0
8000d2e0:	da000005 	ble	8000d2fc <__s2b+0x4c>
8000d2e4:	e3a02001 	mov	r2, #1
8000d2e8:	e3a01000 	mov	r1, #0
8000d2ec:	e1a02082 	lsl	r2, r2, #1
8000d2f0:	e1530002 	cmp	r3, r2
8000d2f4:	e2811001 	add	r1, r1, #1
8000d2f8:	cafffffb 	bgt	8000d2ec <__s2b+0x3c>
8000d2fc:	e1a00004 	mov	r0, r4
8000d300:	ebffff8a 	bl	8000d130 <_Balloc>
8000d304:	e59d3020 	ldr	r3, [sp, #32]
8000d308:	e3580009 	cmp	r8, #9
8000d30c:	e5803014 	str	r3, [r0, #20]
8000d310:	e3a03001 	mov	r3, #1
8000d314:	e1a01000 	mov	r1, r0
8000d318:	e5803010 	str	r3, [r0, #16]
8000d31c:	d286600a 	addle	r6, r6, #10
8000d320:	d3a08009 	movle	r8, #9
8000d324:	da00000c 	ble	8000d35c <__s2b+0xac>
8000d328:	e286a009 	add	sl, r6, #9
8000d32c:	e1a0500a 	mov	r5, sl
8000d330:	e0866008 	add	r6, r6, r8
8000d334:	e4d53001 	ldrb	r3, [r5], #1
8000d338:	e1a00004 	mov	r0, r4
8000d33c:	e3a0200a 	mov	r2, #10
8000d340:	e2433030 	sub	r3, r3, #48	; 0x30
8000d344:	ebffffa2 	bl	8000d1d4 <__multadd>
8000d348:	e1550006 	cmp	r5, r6
8000d34c:	e1a01000 	mov	r1, r0
8000d350:	1afffff7 	bne	8000d334 <__s2b+0x84>
8000d354:	e08a6008 	add	r6, sl, r8
8000d358:	e2466008 	sub	r6, r6, #8
8000d35c:	e1570008 	cmp	r7, r8
8000d360:	da000009 	ble	8000d38c <__s2b+0xdc>
8000d364:	e0867007 	add	r7, r6, r7
8000d368:	e0687007 	rsb	r7, r8, r7
8000d36c:	e4d63001 	ldrb	r3, [r6], #1
8000d370:	e1a00004 	mov	r0, r4
8000d374:	e3a0200a 	mov	r2, #10
8000d378:	e2433030 	sub	r3, r3, #48	; 0x30
8000d37c:	ebffff94 	bl	8000d1d4 <__multadd>
8000d380:	e1560007 	cmp	r6, r7
8000d384:	e1a01000 	mov	r1, r0
8000d388:	1afffff7 	bne	8000d36c <__s2b+0xbc>
8000d38c:	e1a00001 	mov	r0, r1
8000d390:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, sl, lr}
8000d394:	e12fff1e 	bx	lr
8000d398:	38e38e39 	.word	0x38e38e39

8000d39c <__hi0bits>:
8000d39c:	e1b02820 	lsrs	r2, r0, #16
8000d3a0:	e1a03000 	mov	r3, r0
8000d3a4:	01a03800 	lsleq	r3, r0, #16
8000d3a8:	13a00000 	movne	r0, #0
8000d3ac:	03a00010 	moveq	r0, #16
8000d3b0:	e31304ff 	tst	r3, #-16777216	; 0xff000000
8000d3b4:	01a03403 	lsleq	r3, r3, #8
8000d3b8:	02800008 	addeq	r0, r0, #8
8000d3bc:	e313020f 	tst	r3, #-268435456	; 0xf0000000
8000d3c0:	01a03203 	lsleq	r3, r3, #4
8000d3c4:	02800004 	addeq	r0, r0, #4
8000d3c8:	e3130103 	tst	r3, #-1073741824	; 0xc0000000
8000d3cc:	01a03103 	lsleq	r3, r3, #2
8000d3d0:	02800002 	addeq	r0, r0, #2
8000d3d4:	e3530000 	cmp	r3, #0
8000d3d8:	b12fff1e 	bxlt	lr
8000d3dc:	e3130101 	tst	r3, #1073741824	; 0x40000000
8000d3e0:	12800001 	addne	r0, r0, #1
8000d3e4:	03a00020 	moveq	r0, #32
8000d3e8:	e12fff1e 	bx	lr

8000d3ec <__lo0bits>:
8000d3ec:	e5903000 	ldr	r3, [r0]
8000d3f0:	e1a02000 	mov	r2, r0
8000d3f4:	e2130007 	ands	r0, r3, #7
8000d3f8:	0a00000a 	beq	8000d428 <__lo0bits+0x3c>
8000d3fc:	e3130001 	tst	r3, #1
8000d400:	13a00000 	movne	r0, #0
8000d404:	112fff1e 	bxne	lr
8000d408:	e3130002 	tst	r3, #2
8000d40c:	11a030a3 	lsrne	r3, r3, #1
8000d410:	01a03123 	lsreq	r3, r3, #2
8000d414:	15823000 	strne	r3, [r2]
8000d418:	13a00001 	movne	r0, #1
8000d41c:	05823000 	streq	r3, [r2]
8000d420:	03a00002 	moveq	r0, #2
8000d424:	e12fff1e 	bx	lr
8000d428:	e1b01803 	lsls	r1, r3, #16
8000d42c:	01a03823 	lsreq	r3, r3, #16
8000d430:	03a00010 	moveq	r0, #16
8000d434:	e31300ff 	tst	r3, #255	; 0xff
8000d438:	01a03423 	lsreq	r3, r3, #8
8000d43c:	02800008 	addeq	r0, r0, #8
8000d440:	e313000f 	tst	r3, #15
8000d444:	01a03223 	lsreq	r3, r3, #4
8000d448:	02800004 	addeq	r0, r0, #4
8000d44c:	e3130003 	tst	r3, #3
8000d450:	01a03123 	lsreq	r3, r3, #2
8000d454:	02800002 	addeq	r0, r0, #2
8000d458:	e3130001 	tst	r3, #1
8000d45c:	1a000002 	bne	8000d46c <__lo0bits+0x80>
8000d460:	e1b030a3 	lsrs	r3, r3, #1
8000d464:	0a000002 	beq	8000d474 <__lo0bits+0x88>
8000d468:	e2800001 	add	r0, r0, #1
8000d46c:	e5823000 	str	r3, [r2]
8000d470:	e12fff1e 	bx	lr
8000d474:	e3a00020 	mov	r0, #32
8000d478:	e12fff1e 	bx	lr

8000d47c <__i2b>:
8000d47c:	e92d4010 	push	{r4, lr}
8000d480:	e1a04001 	mov	r4, r1
8000d484:	e3a01001 	mov	r1, #1
8000d488:	ebffff28 	bl	8000d130 <_Balloc>
8000d48c:	e3a02001 	mov	r2, #1
8000d490:	e5804014 	str	r4, [r0, #20]
8000d494:	e5802010 	str	r2, [r0, #16]
8000d498:	e8bd4010 	pop	{r4, lr}
8000d49c:	e12fff1e 	bx	lr

8000d4a0 <__multiply>:
8000d4a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000d4a4:	e5918010 	ldr	r8, [r1, #16]
8000d4a8:	e592a010 	ldr	sl, [r2, #16]
8000d4ac:	e1a06002 	mov	r6, r2
8000d4b0:	e158000a 	cmp	r8, sl
8000d4b4:	b1a02008 	movlt	r2, r8
8000d4b8:	e1a07001 	mov	r7, r1
8000d4bc:	b1a07006 	movlt	r7, r6
8000d4c0:	b1a0800a 	movlt	r8, sl
8000d4c4:	e5973008 	ldr	r3, [r7, #8]
8000d4c8:	b1a0a002 	movlt	sl, r2
8000d4cc:	b1a06001 	movlt	r6, r1
8000d4d0:	e08a4008 	add	r4, sl, r8
8000d4d4:	e5971004 	ldr	r1, [r7, #4]
8000d4d8:	e1540003 	cmp	r4, r3
8000d4dc:	e24dd014 	sub	sp, sp, #20
8000d4e0:	c2811001 	addgt	r1, r1, #1
8000d4e4:	ebffff11 	bl	8000d130 <_Balloc>
8000d4e8:	e080b104 	add	fp, r0, r4, lsl #2
8000d4ec:	e2805014 	add	r5, r0, #20
8000d4f0:	e28bb014 	add	fp, fp, #20
8000d4f4:	e155000b 	cmp	r5, fp
8000d4f8:	e58d0004 	str	r0, [sp, #4]
8000d4fc:	2a000004 	bcs	8000d514 <__multiply+0x74>
8000d500:	e1a03005 	mov	r3, r5
8000d504:	e3a02000 	mov	r2, #0
8000d508:	e4832004 	str	r2, [r3], #4
8000d50c:	e15b0003 	cmp	fp, r3
8000d510:	8afffffc 	bhi	8000d508 <__multiply+0x68>
8000d514:	e086a10a 	add	sl, r6, sl, lsl #2
8000d518:	e28aa014 	add	sl, sl, #20
8000d51c:	e2866014 	add	r6, r6, #20
8000d520:	e087c108 	add	ip, r7, r8, lsl #2
8000d524:	e156000a 	cmp	r6, sl
8000d528:	e2877014 	add	r7, r7, #20
8000d52c:	e28cc014 	add	ip, ip, #20
8000d530:	2a000042 	bcs	8000d640 <__multiply+0x1a0>
8000d534:	e58db008 	str	fp, [sp, #8]
8000d538:	e58d400c 	str	r4, [sp, #12]
8000d53c:	e1a0b007 	mov	fp, r7
8000d540:	e1a0400a 	mov	r4, sl
8000d544:	e4968004 	ldr	r8, [r6], #4
8000d548:	e1a0a808 	lsl	sl, r8, #16
8000d54c:	e1b0a82a 	lsrs	sl, sl, #16
8000d550:	0a000019 	beq	8000d5bc <__multiply+0x11c>
8000d554:	e1a0200b 	mov	r2, fp
8000d558:	e1a03005 	mov	r3, r5
8000d55c:	e3a07000 	mov	r7, #0
8000d560:	e1a09006 	mov	r9, r6
8000d564:	e4920004 	ldr	r0, [r2], #4
8000d568:	e5931000 	ldr	r1, [r3]
8000d56c:	e1a08800 	lsl	r8, r0, #16
8000d570:	e1a06801 	lsl	r6, r1, #16
8000d574:	e1a08828 	lsr	r8, r8, #16
8000d578:	e1a06826 	lsr	r6, r6, #16
8000d57c:	e026689a 	mla	r6, sl, r8, r6
8000d580:	e1a01821 	lsr	r1, r1, #16
8000d584:	e1a00820 	lsr	r0, r0, #16
8000d588:	e020109a 	mla	r0, sl, r0, r1
8000d58c:	e0867007 	add	r7, r6, r7
8000d590:	e1a01807 	lsl	r1, r7, #16
8000d594:	e1a01821 	lsr	r1, r1, #16
8000d598:	e0807827 	add	r7, r0, r7, lsr #16
8000d59c:	e1811807 	orr	r1, r1, r7, lsl #16
8000d5a0:	e15c0002 	cmp	ip, r2
8000d5a4:	e1a07827 	lsr	r7, r7, #16
8000d5a8:	e4831004 	str	r1, [r3], #4
8000d5ac:	8affffec 	bhi	8000d564 <__multiply+0xc4>
8000d5b0:	e5837000 	str	r7, [r3]
8000d5b4:	e5198004 	ldr	r8, [r9, #-4]
8000d5b8:	e1a06009 	mov	r6, r9
8000d5bc:	e1b08828 	lsrs	r8, r8, #16
8000d5c0:	0a000019 	beq	8000d62c <__multiply+0x18c>
8000d5c4:	e5952000 	ldr	r2, [r5]
8000d5c8:	e1a0300b 	mov	r3, fp
8000d5cc:	e1a07005 	mov	r7, r5
8000d5d0:	e1a0a005 	mov	sl, r5
8000d5d4:	e1a01002 	mov	r1, r2
8000d5d8:	e3a00000 	mov	r0, #0
8000d5dc:	e1a09006 	mov	r9, r6
8000d5e0:	e1d360b0 	ldrh	r6, [r3]
8000d5e4:	e0200896 	mla	r0, r6, r8, r0
8000d5e8:	e1a02802 	lsl	r2, r2, #16
8000d5ec:	e0800821 	add	r0, r0, r1, lsr #16
8000d5f0:	e1a02822 	lsr	r2, r2, #16
8000d5f4:	e1822800 	orr	r2, r2, r0, lsl #16
8000d5f8:	e4872004 	str	r2, [r7], #4
8000d5fc:	e5ba1004 	ldr	r1, [sl, #4]!
8000d600:	e4936004 	ldr	r6, [r3], #4
8000d604:	e1a02801 	lsl	r2, r1, #16
8000d608:	e1a06826 	lsr	r6, r6, #16
8000d60c:	e1a02822 	lsr	r2, r2, #16
8000d610:	e0222896 	mla	r2, r6, r8, r2
8000d614:	e15c0003 	cmp	ip, r3
8000d618:	e0822820 	add	r2, r2, r0, lsr #16
8000d61c:	e1a00822 	lsr	r0, r2, #16
8000d620:	8affffee 	bhi	8000d5e0 <__multiply+0x140>
8000d624:	e5872000 	str	r2, [r7]
8000d628:	e1a06009 	mov	r6, r9
8000d62c:	e1540006 	cmp	r4, r6
8000d630:	82855004 	addhi	r5, r5, #4
8000d634:	8affffc2 	bhi	8000d544 <__multiply+0xa4>
8000d638:	e59db008 	ldr	fp, [sp, #8]
8000d63c:	e59d400c 	ldr	r4, [sp, #12]
8000d640:	e3540000 	cmp	r4, #0
8000d644:	da000009 	ble	8000d670 <__multiply+0x1d0>
8000d648:	e51b3004 	ldr	r3, [fp, #-4]
8000d64c:	e3530000 	cmp	r3, #0
8000d650:	e24bb004 	sub	fp, fp, #4
8000d654:	0a000003 	beq	8000d668 <__multiply+0x1c8>
8000d658:	ea000004 	b	8000d670 <__multiply+0x1d0>
8000d65c:	e53b3004 	ldr	r3, [fp, #-4]!
8000d660:	e3530000 	cmp	r3, #0
8000d664:	1a000001 	bne	8000d670 <__multiply+0x1d0>
8000d668:	e2544001 	subs	r4, r4, #1
8000d66c:	1afffffa 	bne	8000d65c <__multiply+0x1bc>
8000d670:	e59d3004 	ldr	r3, [sp, #4]
8000d674:	e5834010 	str	r4, [r3, #16]
8000d678:	e1a00003 	mov	r0, r3
8000d67c:	e28dd014 	add	sp, sp, #20
8000d680:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000d684:	e12fff1e 	bx	lr

8000d688 <__pow5mult>:
8000d688:	e2123003 	ands	r3, r2, #3
8000d68c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
8000d690:	e1a05002 	mov	r5, r2
8000d694:	e1a04000 	mov	r4, r0
8000d698:	e1a08001 	mov	r8, r1
8000d69c:	1a000025 	bne	8000d738 <__pow5mult+0xb0>
8000d6a0:	e1b05145 	asrs	r5, r5, #2
8000d6a4:	0a000018 	beq	8000d70c <__pow5mult+0x84>
8000d6a8:	e5947048 	ldr	r7, [r4, #72]	; 0x48
8000d6ac:	e3570000 	cmp	r7, #0
8000d6b0:	1a000006 	bne	8000d6d0 <__pow5mult+0x48>
8000d6b4:	ea000026 	b	8000d754 <__pow5mult+0xcc>
8000d6b8:	e1b050c5 	asrs	r5, r5, #1
8000d6bc:	0a000012 	beq	8000d70c <__pow5mult+0x84>
8000d6c0:	e5976000 	ldr	r6, [r7]
8000d6c4:	e3560000 	cmp	r6, #0
8000d6c8:	11a07006 	movne	r7, r6
8000d6cc:	0a000011 	beq	8000d718 <__pow5mult+0x90>
8000d6d0:	e3150001 	tst	r5, #1
8000d6d4:	0afffff7 	beq	8000d6b8 <__pow5mult+0x30>
8000d6d8:	e1a01008 	mov	r1, r8
8000d6dc:	e1a02007 	mov	r2, r7
8000d6e0:	e1a00004 	mov	r0, r4
8000d6e4:	ebffff6d 	bl	8000d4a0 <__multiply>
8000d6e8:	e3580000 	cmp	r8, #0
8000d6ec:	15982004 	ldrne	r2, [r8, #4]
8000d6f0:	1594304c 	ldrne	r3, [r4, #76]	; 0x4c
8000d6f4:	17931102 	ldrne	r1, [r3, r2, lsl #2]
8000d6f8:	15881000 	strne	r1, [r8]
8000d6fc:	17838102 	strne	r8, [r3, r2, lsl #2]
8000d700:	e1b050c5 	asrs	r5, r5, #1
8000d704:	e1a08000 	mov	r8, r0
8000d708:	1affffec 	bne	8000d6c0 <__pow5mult+0x38>
8000d70c:	e1a00008 	mov	r0, r8
8000d710:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
8000d714:	e12fff1e 	bx	lr
8000d718:	e1a01007 	mov	r1, r7
8000d71c:	e1a02007 	mov	r2, r7
8000d720:	e1a00004 	mov	r0, r4
8000d724:	ebffff5d 	bl	8000d4a0 <__multiply>
8000d728:	e5870000 	str	r0, [r7]
8000d72c:	e5806000 	str	r6, [r0]
8000d730:	e1a07000 	mov	r7, r0
8000d734:	eaffffe5 	b	8000d6d0 <__pow5mult+0x48>
8000d738:	e59f2034 	ldr	r2, [pc, #52]	; 8000d774 <__pow5mult+0xec>
8000d73c:	e2433001 	sub	r3, r3, #1
8000d740:	e7922103 	ldr	r2, [r2, r3, lsl #2]
8000d744:	e3a03000 	mov	r3, #0
8000d748:	ebfffea1 	bl	8000d1d4 <__multadd>
8000d74c:	e1a08000 	mov	r8, r0
8000d750:	eaffffd2 	b	8000d6a0 <__pow5mult+0x18>
8000d754:	e1a00004 	mov	r0, r4
8000d758:	e59f1018 	ldr	r1, [pc, #24]	; 8000d778 <__pow5mult+0xf0>
8000d75c:	ebffff46 	bl	8000d47c <__i2b>
8000d760:	e3a03000 	mov	r3, #0
8000d764:	e5840048 	str	r0, [r4, #72]	; 0x48
8000d768:	e1a07000 	mov	r7, r0
8000d76c:	e5803000 	str	r3, [r0]
8000d770:	eaffffd6 	b	8000d6d0 <__pow5mult+0x48>
8000d774:	80012598 	.word	0x80012598
8000d778:	00000271 	.word	0x00000271

8000d77c <__lshift>:
8000d77c:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, sl, lr}
8000d780:	e5915010 	ldr	r5, [r1, #16]
8000d784:	e5913008 	ldr	r3, [r1, #8]
8000d788:	e1a062c2 	asr	r6, r2, #5
8000d78c:	e2855001 	add	r5, r5, #1
8000d790:	e0855006 	add	r5, r5, r6
8000d794:	e1550003 	cmp	r5, r3
8000d798:	e1a04001 	mov	r4, r1
8000d79c:	e1a07002 	mov	r7, r2
8000d7a0:	e1a08000 	mov	r8, r0
8000d7a4:	e5911004 	ldr	r1, [r1, #4]
8000d7a8:	da000003 	ble	8000d7bc <__lshift+0x40>
8000d7ac:	e1a03083 	lsl	r3, r3, #1
8000d7b0:	e1550003 	cmp	r5, r3
8000d7b4:	e2811001 	add	r1, r1, #1
8000d7b8:	cafffffb 	bgt	8000d7ac <__lshift+0x30>
8000d7bc:	e1a00008 	mov	r0, r8
8000d7c0:	ebfffe5a 	bl	8000d130 <_Balloc>
8000d7c4:	e3560000 	cmp	r6, #0
8000d7c8:	e2802014 	add	r2, r0, #20
8000d7cc:	da000007 	ble	8000d7f0 <__lshift+0x74>
8000d7d0:	e3a03000 	mov	r3, #0
8000d7d4:	e1a01003 	mov	r1, r3
8000d7d8:	e2833001 	add	r3, r3, #1
8000d7dc:	e1530006 	cmp	r3, r6
8000d7e0:	e4821004 	str	r1, [r2], #4
8000d7e4:	1afffffb 	bne	8000d7d8 <__lshift+0x5c>
8000d7e8:	e0803103 	add	r3, r0, r3, lsl #2
8000d7ec:	e2832014 	add	r2, r3, #20
8000d7f0:	e5946010 	ldr	r6, [r4, #16]
8000d7f4:	e217701f 	ands	r7, r7, #31
8000d7f8:	e0846106 	add	r6, r4, r6, lsl #2
8000d7fc:	e2841014 	add	r1, r4, #20
8000d800:	e2866014 	add	r6, r6, #20
8000d804:	0a000014 	beq	8000d85c <__lshift+0xe0>
8000d808:	e2673020 	rsb	r3, r7, #32
8000d80c:	e3a0c000 	mov	ip, #0
8000d810:	e591a000 	ldr	sl, [r1]
8000d814:	e18cc71a 	orr	ip, ip, sl, lsl r7
8000d818:	e482c004 	str	ip, [r2], #4
8000d81c:	e491c004 	ldr	ip, [r1], #4
8000d820:	e1560001 	cmp	r6, r1
8000d824:	e1a0c33c 	lsr	ip, ip, r3
8000d828:	8afffff8 	bhi	8000d810 <__lshift+0x94>
8000d82c:	e35c0000 	cmp	ip, #0
8000d830:	e582c000 	str	ip, [r2]
8000d834:	12855001 	addne	r5, r5, #1
8000d838:	e598304c 	ldr	r3, [r8, #76]	; 0x4c
8000d83c:	e5942004 	ldr	r2, [r4, #4]
8000d840:	e7931102 	ldr	r1, [r3, r2, lsl #2]
8000d844:	e2455001 	sub	r5, r5, #1
8000d848:	e5805010 	str	r5, [r0, #16]
8000d84c:	e5841000 	str	r1, [r4]
8000d850:	e7834102 	str	r4, [r3, r2, lsl #2]
8000d854:	e8bd45f8 	pop	{r3, r4, r5, r6, r7, r8, sl, lr}
8000d858:	e12fff1e 	bx	lr
8000d85c:	e4913004 	ldr	r3, [r1], #4
8000d860:	e1560001 	cmp	r6, r1
8000d864:	e4823004 	str	r3, [r2], #4
8000d868:	9afffff2 	bls	8000d838 <__lshift+0xbc>
8000d86c:	e4913004 	ldr	r3, [r1], #4
8000d870:	e1560001 	cmp	r6, r1
8000d874:	e4823004 	str	r3, [r2], #4
8000d878:	8afffff7 	bhi	8000d85c <__lshift+0xe0>
8000d87c:	eaffffed 	b	8000d838 <__lshift+0xbc>

8000d880 <__mcmp>:
8000d880:	e1a03000 	mov	r3, r0
8000d884:	e5912010 	ldr	r2, [r1, #16]
8000d888:	e5900010 	ldr	r0, [r0, #16]
8000d88c:	e0500002 	subs	r0, r0, r2
8000d890:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
8000d894:	1a00000c 	bne	8000d8cc <__mcmp+0x4c>
8000d898:	e2822004 	add	r2, r2, #4
8000d89c:	e1a0c102 	lsl	ip, r2, #2
8000d8a0:	e083200c 	add	r2, r3, ip
8000d8a4:	e081100c 	add	r1, r1, ip
8000d8a8:	e2833014 	add	r3, r3, #20
8000d8ac:	e2822004 	add	r2, r2, #4
8000d8b0:	e2811004 	add	r1, r1, #4
8000d8b4:	e5324004 	ldr	r4, [r2, #-4]!
8000d8b8:	e531c004 	ldr	ip, [r1, #-4]!
8000d8bc:	e154000c 	cmp	r4, ip
8000d8c0:	1a000003 	bne	8000d8d4 <__mcmp+0x54>
8000d8c4:	e1530002 	cmp	r3, r2
8000d8c8:	3afffff9 	bcc	8000d8b4 <__mcmp+0x34>
8000d8cc:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
8000d8d0:	e12fff1e 	bx	lr
8000d8d4:	33e00000 	mvncc	r0, #0
8000d8d8:	23a00001 	movcs	r0, #1
8000d8dc:	eafffffa 	b	8000d8cc <__mcmp+0x4c>

8000d8e0 <__mdiff>:
8000d8e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
8000d8e4:	e1a04001 	mov	r4, r1
8000d8e8:	e1a06000 	mov	r6, r0
8000d8ec:	e1a01002 	mov	r1, r2
8000d8f0:	e1a00004 	mov	r0, r4
8000d8f4:	e1a05002 	mov	r5, r2
8000d8f8:	ebffffe0 	bl	8000d880 <__mcmp>
8000d8fc:	e2507000 	subs	r7, r0, #0
8000d900:	0a000045 	beq	8000da1c <__mdiff+0x13c>
8000d904:	b1a03004 	movlt	r3, r4
8000d908:	b1a04005 	movlt	r4, r5
8000d90c:	e5941004 	ldr	r1, [r4, #4]
8000d910:	e1a00006 	mov	r0, r6
8000d914:	b1a05003 	movlt	r5, r3
8000d918:	a3a07000 	movge	r7, #0
8000d91c:	b3a07001 	movlt	r7, #1
8000d920:	ebfffe02 	bl	8000d130 <_Balloc>
8000d924:	e5946010 	ldr	r6, [r4, #16]
8000d928:	e595c010 	ldr	ip, [r5, #16]
8000d92c:	e0843106 	add	r3, r4, r6, lsl #2
8000d930:	e085c10c 	add	ip, r5, ip, lsl #2
8000d934:	e580700c 	str	r7, [r0, #12]
8000d938:	e28cc014 	add	ip, ip, #20
8000d93c:	e2837014 	add	r7, r3, #20
8000d940:	e2844014 	add	r4, r4, #20
8000d944:	e2855014 	add	r5, r5, #20
8000d948:	e2808014 	add	r8, r0, #20
8000d94c:	e3a01000 	mov	r1, #0
8000d950:	e4952004 	ldr	r2, [r5], #4
8000d954:	e4943004 	ldr	r3, [r4], #4
8000d958:	e1a0a802 	lsl	sl, r2, #16
8000d95c:	e1a09803 	lsl	r9, r3, #16
8000d960:	e1a0a82a 	lsr	sl, sl, #16
8000d964:	e06aa829 	rsb	sl, sl, r9, lsr #16
8000d968:	e08a1001 	add	r1, sl, r1
8000d96c:	e1a02822 	lsr	r2, r2, #16
8000d970:	e0623823 	rsb	r3, r2, r3, lsr #16
8000d974:	e1a02801 	lsl	r2, r1, #16
8000d978:	e1a02822 	lsr	r2, r2, #16
8000d97c:	e0831841 	add	r1, r3, r1, asr #16
8000d980:	e1822801 	orr	r2, r2, r1, lsl #16
8000d984:	e1a03008 	mov	r3, r8
8000d988:	e4832004 	str	r2, [r3], #4
8000d98c:	e15c0005 	cmp	ip, r5
8000d990:	e1a02004 	mov	r2, r4
8000d994:	e1a01841 	asr	r1, r1, #16
8000d998:	e1a08003 	mov	r8, r3
8000d99c:	8affffeb 	bhi	8000d950 <__mdiff+0x70>
8000d9a0:	e1570004 	cmp	r7, r4
8000d9a4:	e1a05003 	mov	r5, r3
8000d9a8:	9a000010 	bls	8000d9f0 <__mdiff+0x110>
8000d9ac:	e492c004 	ldr	ip, [r2], #4
8000d9b0:	e1a0880c 	lsl	r8, ip, #16
8000d9b4:	e0811828 	add	r1, r1, r8, lsr #16
8000d9b8:	e1a0882c 	lsr	r8, ip, #16
8000d9bc:	e1a0c801 	lsl	ip, r1, #16
8000d9c0:	e1a0c82c 	lsr	ip, ip, #16
8000d9c4:	e0881841 	add	r1, r8, r1, asr #16
8000d9c8:	e18cc801 	orr	ip, ip, r1, lsl #16
8000d9cc:	e1570002 	cmp	r7, r2
8000d9d0:	e1a01841 	asr	r1, r1, #16
8000d9d4:	e483c004 	str	ip, [r3], #4
8000d9d8:	8afffff3 	bhi	8000d9ac <__mdiff+0xcc>
8000d9dc:	e1e03004 	mvn	r3, r4
8000d9e0:	e0833007 	add	r3, r3, r7
8000d9e4:	e3c33003 	bic	r3, r3, #3
8000d9e8:	e2833004 	add	r3, r3, #4
8000d9ec:	e0853003 	add	r3, r5, r3
8000d9f0:	e5132004 	ldr	r2, [r3, #-4]
8000d9f4:	e3520000 	cmp	r2, #0
8000d9f8:	e2433004 	sub	r3, r3, #4
8000d9fc:	1a000003 	bne	8000da10 <__mdiff+0x130>
8000da00:	e5332004 	ldr	r2, [r3, #-4]!
8000da04:	e3520000 	cmp	r2, #0
8000da08:	e2466001 	sub	r6, r6, #1
8000da0c:	0afffffb 	beq	8000da00 <__mdiff+0x120>
8000da10:	e5806010 	str	r6, [r0, #16]
8000da14:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
8000da18:	e12fff1e 	bx	lr
8000da1c:	e1a00006 	mov	r0, r6
8000da20:	e1a01007 	mov	r1, r7
8000da24:	ebfffdc1 	bl	8000d130 <_Balloc>
8000da28:	e3a03001 	mov	r3, #1
8000da2c:	e5803010 	str	r3, [r0, #16]
8000da30:	e5807014 	str	r7, [r0, #20]
8000da34:	eafffff6 	b	8000da14 <__mdiff+0x134>

8000da38 <__ulp>:
8000da38:	e59f3054 	ldr	r3, [pc, #84]	; 8000da94 <__ulp+0x5c>
8000da3c:	e0013003 	and	r3, r1, r3
8000da40:	e243350d 	sub	r3, r3, #54525952	; 0x3400000
8000da44:	e3530000 	cmp	r3, #0
8000da48:	c1a01003 	movgt	r1, r3
8000da4c:	c3a00000 	movgt	r0, #0
8000da50:	c12fff1e 	bxgt	lr
8000da54:	e2633000 	rsb	r3, r3, #0
8000da58:	e1a03a43 	asr	r3, r3, #20
8000da5c:	e3530013 	cmp	r3, #19
8000da60:	d3a02702 	movle	r2, #524288	; 0x80000
8000da64:	d1a01352 	asrle	r1, r2, r3
8000da68:	d3a00000 	movle	r0, #0
8000da6c:	d12fff1e 	bxle	lr
8000da70:	e2433014 	sub	r3, r3, #20
8000da74:	e353001e 	cmp	r3, #30
8000da78:	d263301f 	rsble	r3, r3, #31
8000da7c:	d3a02001 	movle	r2, #1
8000da80:	d1a03312 	lslle	r3, r2, r3
8000da84:	c3a03001 	movgt	r3, #1
8000da88:	e3a01000 	mov	r1, #0
8000da8c:	e1a00003 	mov	r0, r3
8000da90:	e12fff1e 	bx	lr
8000da94:	7ff00000 	.word	0x7ff00000

8000da98 <__b2d>:
8000da98:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
8000da9c:	e5905010 	ldr	r5, [r0, #16]
8000daa0:	e2855004 	add	r5, r5, #4
8000daa4:	e7904105 	ldr	r4, [r0, r5, lsl #2]
8000daa8:	e1a03000 	mov	r3, r0
8000daac:	e1a00004 	mov	r0, r4
8000dab0:	e0835105 	add	r5, r3, r5, lsl #2
8000dab4:	e1a07001 	mov	r7, r1
8000dab8:	e2836014 	add	r6, r3, #20
8000dabc:	ebfffe36 	bl	8000d39c <__hi0bits>
8000dac0:	e2603020 	rsb	r3, r0, #32
8000dac4:	e350000a 	cmp	r0, #10
8000dac8:	e1a02005 	mov	r2, r5
8000dacc:	e5873000 	str	r3, [r7]
8000dad0:	ca00000d 	bgt	8000db0c <__b2d+0x74>
8000dad4:	e260100b 	rsb	r1, r0, #11
8000dad8:	e1a0c134 	lsr	ip, r4, r1
8000dadc:	e1560005 	cmp	r6, r5
8000dae0:	e38cc5ff 	orr	ip, ip, #1069547520	; 0x3fc00000
8000dae4:	e38c3603 	orr	r3, ip, #3145728	; 0x300000
8000dae8:	3515c004 	ldrcc	ip, [r5, #-4]
8000daec:	31a0113c 	lsrcc	r1, ip, r1
8000daf0:	23a01000 	movcs	r1, #0
8000daf4:	e2800015 	add	r0, r0, #21
8000daf8:	e1812014 	orr	r2, r1, r4, lsl r0
8000dafc:	e1a00002 	mov	r0, r2
8000db00:	e1a01003 	mov	r1, r3
8000db04:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
8000db08:	e12fff1e 	bx	lr
8000db0c:	e1560005 	cmp	r6, r5
8000db10:	35121004 	ldrcc	r1, [r2, #-4]
8000db14:	23a01000 	movcs	r1, #0
8000db18:	32455004 	subcc	r5, r5, #4
8000db1c:	e250000b 	subs	r0, r0, #11
8000db20:	038445ff 	orreq	r4, r4, #1069547520	; 0x3fc00000
8000db24:	03843603 	orreq	r3, r4, #3145728	; 0x300000
8000db28:	01a02001 	moveq	r2, r1
8000db2c:	0afffff2 	beq	8000dafc <__b2d+0x64>
8000db30:	e1a04014 	lsl	r4, r4, r0
8000db34:	e38445ff 	orr	r4, r4, #1069547520	; 0x3fc00000
8000db38:	e260c020 	rsb	ip, r0, #32
8000db3c:	e3844603 	orr	r4, r4, #3145728	; 0x300000
8000db40:	e1550006 	cmp	r5, r6
8000db44:	e1843c31 	orr	r3, r4, r1, lsr ip
8000db48:	85154004 	ldrhi	r4, [r5, #-4]
8000db4c:	81a0cc34 	lsrhi	ip, r4, ip
8000db50:	93a0c000 	movls	ip, #0
8000db54:	e18c2011 	orr	r2, ip, r1, lsl r0
8000db58:	eaffffe7 	b	8000dafc <__b2d+0x64>

8000db5c <__d2b>:
8000db5c:	e92d45f0 	push	{r4, r5, r6, r7, r8, sl, lr}
8000db60:	e3a01001 	mov	r1, #1
8000db64:	e24dd00c 	sub	sp, sp, #12
8000db68:	e1a05003 	mov	r5, r3
8000db6c:	e1a04002 	mov	r4, r2
8000db70:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
8000db74:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
8000db78:	ebfffd6c 	bl	8000d130 <_Balloc>
8000db7c:	e3c5a102 	bic	sl, r5, #-2147483648	; 0x80000000
8000db80:	e3c534ff 	bic	r3, r5, #-16777216	; 0xff000000
8000db84:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
8000db88:	e1b0aa2a 	lsrs	sl, sl, #20
8000db8c:	e58d3000 	str	r3, [sp]
8000db90:	13833601 	orrne	r3, r3, #1048576	; 0x100000
8000db94:	158d3000 	strne	r3, [sp]
8000db98:	e3540000 	cmp	r4, #0
8000db9c:	e1a08000 	mov	r8, r0
8000dba0:	0a00001f 	beq	8000dc24 <__d2b+0xc8>
8000dba4:	e28d0008 	add	r0, sp, #8
8000dba8:	e5204004 	str	r4, [r0, #-4]!
8000dbac:	ebfffe0e 	bl	8000d3ec <__lo0bits>
8000dbb0:	e3500000 	cmp	r0, #0
8000dbb4:	e59d3000 	ldr	r3, [sp]
8000dbb8:	159d2004 	ldrne	r2, [sp, #4]
8000dbbc:	12601020 	rsbne	r1, r0, #32
8000dbc0:	11822113 	orrne	r2, r2, r3, lsl r1
8000dbc4:	11a03033 	lsrne	r3, r3, r0
8000dbc8:	059d2004 	ldreq	r2, [sp, #4]
8000dbcc:	15882014 	strne	r2, [r8, #20]
8000dbd0:	158d3000 	strne	r3, [sp]
8000dbd4:	05882014 	streq	r2, [r8, #20]
8000dbd8:	e3530000 	cmp	r3, #0
8000dbdc:	03a04001 	moveq	r4, #1
8000dbe0:	13a04002 	movne	r4, #2
8000dbe4:	e35a0000 	cmp	sl, #0
8000dbe8:	e5883018 	str	r3, [r8, #24]
8000dbec:	e5884010 	str	r4, [r8, #16]
8000dbf0:	1a000014 	bne	8000dc48 <__d2b+0xec>
8000dbf4:	e2400e43 	sub	r0, r0, #1072	; 0x430
8000dbf8:	e2403002 	sub	r3, r0, #2
8000dbfc:	e0882104 	add	r2, r8, r4, lsl #2
8000dc00:	e5920010 	ldr	r0, [r2, #16]
8000dc04:	e5873000 	str	r3, [r7]
8000dc08:	ebfffde3 	bl	8000d39c <__hi0bits>
8000dc0c:	e0600284 	rsb	r0, r0, r4, lsl #5
8000dc10:	e5860000 	str	r0, [r6]
8000dc14:	e1a00008 	mov	r0, r8
8000dc18:	e28dd00c 	add	sp, sp, #12
8000dc1c:	e8bd45f0 	pop	{r4, r5, r6, r7, r8, sl, lr}
8000dc20:	e12fff1e 	bx	lr
8000dc24:	e1a0000d 	mov	r0, sp
8000dc28:	ebfffdef 	bl	8000d3ec <__lo0bits>
8000dc2c:	e59d3000 	ldr	r3, [sp]
8000dc30:	e3a04001 	mov	r4, #1
8000dc34:	e35a0000 	cmp	sl, #0
8000dc38:	e5883014 	str	r3, [r8, #20]
8000dc3c:	e5884010 	str	r4, [r8, #16]
8000dc40:	e2800020 	add	r0, r0, #32
8000dc44:	0affffea 	beq	8000dbf4 <__d2b+0x98>
8000dc48:	e24aae43 	sub	sl, sl, #1072	; 0x430
8000dc4c:	e24aa003 	sub	sl, sl, #3
8000dc50:	e08aa000 	add	sl, sl, r0
8000dc54:	e2600035 	rsb	r0, r0, #53	; 0x35
8000dc58:	e587a000 	str	sl, [r7]
8000dc5c:	e5860000 	str	r0, [r6]
8000dc60:	eaffffeb 	b	8000dc14 <__d2b+0xb8>

8000dc64 <__ratio>:
8000dc64:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
8000dc68:	e24dd00c 	sub	sp, sp, #12
8000dc6c:	e1a06001 	mov	r6, r1
8000dc70:	e28d1004 	add	r1, sp, #4
8000dc74:	e1a07000 	mov	r7, r0
8000dc78:	ebffff86 	bl	8000da98 <__b2d>
8000dc7c:	e1a05001 	mov	r5, r1
8000dc80:	e1a04000 	mov	r4, r0
8000dc84:	e1a0100d 	mov	r1, sp
8000dc88:	e1a00006 	mov	r0, r6
8000dc8c:	ebffff81 	bl	8000da98 <__b2d>
8000dc90:	e596c010 	ldr	ip, [r6, #16]
8000dc94:	e1a03001 	mov	r3, r1
8000dc98:	e1a02000 	mov	r2, r0
8000dc9c:	e5971010 	ldr	r1, [r7, #16]
8000dca0:	e89d4001 	ldm	sp, {r0, lr}
8000dca4:	e06c1001 	rsb	r1, ip, r1
8000dca8:	e060000e 	rsb	r0, r0, lr
8000dcac:	e0801281 	add	r1, r0, r1, lsl #5
8000dcb0:	e3510000 	cmp	r1, #0
8000dcb4:	c0857a01 	addgt	r7, r5, r1, lsl #20
8000dcb8:	d0439a01 	suble	r9, r3, r1, lsl #20
8000dcbc:	c1a05007 	movgt	r5, r7
8000dcc0:	d1a03009 	movle	r3, r9
8000dcc4:	e1a00004 	mov	r0, r4
8000dcc8:	e1a01005 	mov	r1, r5
8000dccc:	eb000a8a 	bl	800106fc <__aeabi_ddiv>
8000dcd0:	e28dd00c 	add	sp, sp, #12
8000dcd4:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
8000dcd8:	e12fff1e 	bx	lr

8000dcdc <_mprec_log10>:
8000dcdc:	e3500017 	cmp	r0, #23
8000dce0:	e92d4010 	push	{r4, lr}
8000dce4:	c59f1038 	ldrgt	r1, [pc, #56]	; 8000dd24 <_mprec_log10+0x48>
8000dce8:	e1a04000 	mov	r4, r0
8000dcec:	c3a00000 	movgt	r0, #0
8000dcf0:	da000006 	ble	8000dd10 <_mprec_log10+0x34>
8000dcf4:	e3a02000 	mov	r2, #0
8000dcf8:	e59f3028 	ldr	r3, [pc, #40]	; 8000dd28 <_mprec_log10+0x4c>
8000dcfc:	eb0009da 	bl	8001046c <__aeabi_dmul>
8000dd00:	e2544001 	subs	r4, r4, #1
8000dd04:	1afffffa 	bne	8000dcf4 <_mprec_log10+0x18>
8000dd08:	e8bd4010 	pop	{r4, lr}
8000dd0c:	e12fff1e 	bx	lr
8000dd10:	e59f3014 	ldr	r3, [pc, #20]	; 8000dd2c <_mprec_log10+0x50>
8000dd14:	e0834180 	add	r4, r3, r0, lsl #3
8000dd18:	e2841010 	add	r1, r4, #16
8000dd1c:	e8910003 	ldm	r1, {r0, r1}
8000dd20:	eafffff8 	b	8000dd08 <_mprec_log10+0x2c>
8000dd24:	3ff00000 	.word	0x3ff00000
8000dd28:	40240000 	.word	0x40240000
8000dd2c:	80012598 	.word	0x80012598

8000dd30 <__copybits>:
8000dd30:	e5923010 	ldr	r3, [r2, #16]
8000dd34:	e2411001 	sub	r1, r1, #1
8000dd38:	e0823103 	add	r3, r2, r3, lsl #2
8000dd3c:	e1a0c2c1 	asr	ip, r1, #5
8000dd40:	e2833014 	add	r3, r3, #20
8000dd44:	e2821014 	add	r1, r2, #20
8000dd48:	e28cc001 	add	ip, ip, #1
8000dd4c:	e1510003 	cmp	r1, r3
8000dd50:	e92d0030 	push	{r4, r5}
8000dd54:	e080c10c 	add	ip, r0, ip, lsl #2
8000dd58:	2a000009 	bcs	8000dd84 <__copybits+0x54>
8000dd5c:	e1a04000 	mov	r4, r0
8000dd60:	e4915004 	ldr	r5, [r1], #4
8000dd64:	e1530001 	cmp	r3, r1
8000dd68:	e4845004 	str	r5, [r4], #4
8000dd6c:	8afffffb 	bhi	8000dd60 <__copybits+0x30>
8000dd70:	e0623003 	rsb	r3, r2, r3
8000dd74:	e2433015 	sub	r3, r3, #21
8000dd78:	e3c33003 	bic	r3, r3, #3
8000dd7c:	e2833004 	add	r3, r3, #4
8000dd80:	e0800003 	add	r0, r0, r3
8000dd84:	e15c0000 	cmp	ip, r0
8000dd88:	9a000003 	bls	8000dd9c <__copybits+0x6c>
8000dd8c:	e3a03000 	mov	r3, #0
8000dd90:	e4803004 	str	r3, [r0], #4
8000dd94:	e15c0000 	cmp	ip, r0
8000dd98:	8afffffc 	bhi	8000dd90 <__copybits+0x60>
8000dd9c:	e8bd0030 	pop	{r4, r5}
8000dda0:	e12fff1e 	bx	lr

8000dda4 <__any_on>:
8000dda4:	e5902010 	ldr	r2, [r0, #16]
8000dda8:	e1a032c1 	asr	r3, r1, #5
8000ddac:	e1520003 	cmp	r2, r3
8000ddb0:	ba00000b 	blt	8000dde4 <__any_on+0x40>
8000ddb4:	da000009 	ble	8000dde0 <__any_on+0x3c>
8000ddb8:	e211101f 	ands	r1, r1, #31
8000ddbc:	0a000007 	beq	8000dde0 <__any_on+0x3c>
8000ddc0:	e1a02003 	mov	r2, r3
8000ddc4:	e0803103 	add	r3, r0, r3, lsl #2
8000ddc8:	e5933014 	ldr	r3, [r3, #20]
8000ddcc:	e1a0c133 	lsr	ip, r3, r1
8000ddd0:	e153011c 	cmp	r3, ip, lsl r1
8000ddd4:	0a000002 	beq	8000dde4 <__any_on+0x40>
8000ddd8:	e3a00001 	mov	r0, #1
8000dddc:	e12fff1e 	bx	lr
8000dde0:	e1a02003 	mov	r2, r3
8000dde4:	e2822004 	add	r2, r2, #4
8000dde8:	e0803102 	add	r3, r0, r2, lsl #2
8000ddec:	e2801014 	add	r1, r0, #20
8000ddf0:	e283c004 	add	ip, r3, #4
8000ddf4:	e151000c 	cmp	r1, ip
8000ddf8:	2a000009 	bcs	8000de24 <__any_on+0x80>
8000ddfc:	e7902102 	ldr	r2, [r0, r2, lsl #2]
8000de00:	e3520000 	cmp	r2, #0
8000de04:	1afffff3 	bne	8000ddd8 <__any_on+0x34>
8000de08:	e1510003 	cmp	r1, r3
8000de0c:	2a000004 	bcs	8000de24 <__any_on+0x80>
8000de10:	e5332004 	ldr	r2, [r3, #-4]!
8000de14:	e3520000 	cmp	r2, #0
8000de18:	0afffffa 	beq	8000de08 <__any_on+0x64>
8000de1c:	e3a00001 	mov	r0, #1
8000de20:	e12fff1e 	bx	lr
8000de24:	e3a00000 	mov	r0, #0
8000de28:	e12fff1e 	bx	lr

8000de2c <__fpclassifyd>:
8000de2c:	e1a02001 	mov	r2, r1
8000de30:	e1a03001 	mov	r3, r1
8000de34:	e1901002 	orrs	r1, r0, r2
8000de38:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
8000de3c:	0a000018 	beq	8000dea4 <__fpclassifyd+0x78>
8000de40:	e2704001 	rsbs	r4, r0, #1
8000de44:	33a04000 	movcc	r4, #0
8000de48:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
8000de4c:	03500000 	cmpeq	r0, #0
8000de50:	0a000013 	beq	8000dea4 <__fpclassifyd+0x78>
8000de54:	e282c47f 	add	ip, r2, #2130706432	; 0x7f000000
8000de58:	e59f2050 	ldr	r2, [pc, #80]	; 8000deb0 <__fpclassifyd+0x84>
8000de5c:	e28cc60f 	add	ip, ip, #15728640	; 0xf00000
8000de60:	e2431601 	sub	r1, r3, #1048576	; 0x100000
8000de64:	e1510002 	cmp	r1, r2
8000de68:	815c0002 	cmphi	ip, r2
8000de6c:	93a00004 	movls	r0, #4
8000de70:	9a00000c 	bls	8000dea8 <__fpclassifyd+0x7c>
8000de74:	e2832102 	add	r2, r3, #-2147483648	; 0x80000000
8000de78:	e3530601 	cmp	r3, #1048576	; 0x100000
8000de7c:	23520601 	cmpcs	r2, #1048576	; 0x100000
8000de80:	33a00003 	movcc	r0, #3
8000de84:	3a000007 	bcc	8000dea8 <__fpclassifyd+0x7c>
8000de88:	e59f0024 	ldr	r0, [pc, #36]	; 8000deb4 <__fpclassifyd+0x88>
8000de8c:	e3730601 	cmn	r3, #1048576	; 0x100000
8000de90:	11530000 	cmpne	r3, r0
8000de94:	13a03000 	movne	r3, #0
8000de98:	03a03001 	moveq	r3, #1
8000de9c:	e0040003 	and	r0, r4, r3
8000dea0:	ea000000 	b	8000dea8 <__fpclassifyd+0x7c>
8000dea4:	e3a00002 	mov	r0, #2
8000dea8:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
8000deac:	e12fff1e 	bx	lr
8000deb0:	7fdfffff 	.word	0x7fdfffff
8000deb4:	7ff00000 	.word	0x7ff00000

8000deb8 <_sbrk_r>:
8000deb8:	e92d4038 	push	{r3, r4, r5, lr}
8000debc:	e59f4030 	ldr	r4, [pc, #48]	; 8000def4 <_sbrk_r+0x3c>
8000dec0:	e3a03000 	mov	r3, #0
8000dec4:	e1a05000 	mov	r5, r0
8000dec8:	e1a00001 	mov	r0, r1
8000decc:	e5843000 	str	r3, [r4]
8000ded0:	ebffcdae 	bl	80001590 <_sbrk>
8000ded4:	e3700001 	cmn	r0, #1
8000ded8:	0a000001 	beq	8000dee4 <_sbrk_r+0x2c>
8000dedc:	e8bd4038 	pop	{r3, r4, r5, lr}
8000dee0:	e12fff1e 	bx	lr
8000dee4:	e5943000 	ldr	r3, [r4]
8000dee8:	e3530000 	cmp	r3, #0
8000deec:	15853000 	strne	r3, [r5]
8000def0:	eafffff9 	b	8000dedc <_sbrk_r+0x24>
8000def4:	80021f08 	.word	0x80021f08

8000def8 <strcmp>:
8000def8:	e0202001 	eor	r2, r0, r1
8000defc:	e3120003 	tst	r2, #3
8000df00:	1a000021 	bne	8000df8c <strcmp_unaligned>
8000df04:	e2102003 	ands	r2, r0, #3
8000df08:	e3c00003 	bic	r0, r0, #3
8000df0c:	e3c11003 	bic	r1, r1, #3
8000df10:	e490c004 	ldr	ip, [r0], #4
8000df14:	04913004 	ldreq	r3, [r1], #4
8000df18:	0a000006 	beq	8000df38 <strcmp+0x40>
8000df1c:	e2222003 	eor	r2, r2, #3
8000df20:	e1a02182 	lsl	r2, r2, #3
8000df24:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
8000df28:	e1a02233 	lsr	r2, r3, r2
8000df2c:	e4913004 	ldr	r3, [r1], #4
8000df30:	e18cc002 	orr	ip, ip, r2
8000df34:	e1833002 	orr	r3, r3, r2
8000df38:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
8000df3c:	e3a04001 	mov	r4, #1
8000df40:	e1844404 	orr	r4, r4, r4, lsl #8
8000df44:	e1844804 	orr	r4, r4, r4, lsl #16
8000df48:	e04c2004 	sub	r2, ip, r4
8000df4c:	e15c0003 	cmp	ip, r3
8000df50:	01c2200c 	biceq	r2, r2, ip
8000df54:	01120384 	tsteq	r2, r4, lsl #7
8000df58:	0490c004 	ldreq	ip, [r0], #4
8000df5c:	04913004 	ldreq	r3, [r1], #4
8000df60:	0afffff8 	beq	8000df48 <strcmp+0x50>
8000df64:	e1a00c0c 	lsl	r0, ip, #24
8000df68:	e1a0c42c 	lsr	ip, ip, #8
8000df6c:	e3500001 	cmp	r0, #1
8000df70:	21500c03 	cmpcs	r0, r3, lsl #24
8000df74:	01a03423 	lsreq	r3, r3, #8
8000df78:	0afffff9 	beq	8000df64 <strcmp+0x6c>
8000df7c:	e20330ff 	and	r3, r3, #255	; 0xff
8000df80:	e0630c20 	rsb	r0, r3, r0, lsr #24
8000df84:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
8000df88:	e12fff1e 	bx	lr

8000df8c <strcmp_unaligned>:
8000df8c:	e3100003 	tst	r0, #3
8000df90:	0a000006 	beq	8000dfb0 <strcmp_unaligned+0x24>
8000df94:	e4d02001 	ldrb	r2, [r0], #1
8000df98:	e4d13001 	ldrb	r3, [r1], #1
8000df9c:	e3520001 	cmp	r2, #1
8000dfa0:	21520003 	cmpcs	r2, r3
8000dfa4:	0afffff8 	beq	8000df8c <strcmp_unaligned>
8000dfa8:	e0420003 	sub	r0, r2, r3
8000dfac:	e12fff1e 	bx	lr
8000dfb0:	e52d5004 	push	{r5}		; (str r5, [sp, #-4]!)
8000dfb4:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
8000dfb8:	e3a02001 	mov	r2, #1
8000dfbc:	e1822402 	orr	r2, r2, r2, lsl #8
8000dfc0:	e1822802 	orr	r2, r2, r2, lsl #16
8000dfc4:	e201c003 	and	ip, r1, #3
8000dfc8:	e3c11003 	bic	r1, r1, #3
8000dfcc:	e4904004 	ldr	r4, [r0], #4
8000dfd0:	e4915004 	ldr	r5, [r1], #4
8000dfd4:	e35c0002 	cmp	ip, #2
8000dfd8:	0a000017 	beq	8000e03c <strcmp_unaligned+0xb0>
8000dfdc:	8a00002d 	bhi	8000e098 <strcmp_unaligned+0x10c>
8000dfe0:	e3c4c4ff 	bic	ip, r4, #-16777216	; 0xff000000
8000dfe4:	e15c0425 	cmp	ip, r5, lsr #8
8000dfe8:	e0443002 	sub	r3, r4, r2
8000dfec:	e1c33004 	bic	r3, r3, r4
8000dff0:	1a000007 	bne	8000e014 <strcmp_unaligned+0x88>
8000dff4:	e0133382 	ands	r3, r3, r2, lsl #7
8000dff8:	04915004 	ldreq	r5, [r1], #4
8000dffc:	1a000006 	bne	8000e01c <strcmp_unaligned+0x90>
8000e000:	e02cc004 	eor	ip, ip, r4
8000e004:	e15c0c05 	cmp	ip, r5, lsl #24
8000e008:	1a000008 	bne	8000e030 <strcmp_unaligned+0xa4>
8000e00c:	e4904004 	ldr	r4, [r0], #4
8000e010:	eafffff2 	b	8000dfe0 <strcmp_unaligned+0x54>
8000e014:	e1a05425 	lsr	r5, r5, #8
8000e018:	ea000037 	b	8000e0fc <strcmp_unaligned+0x170>
8000e01c:	e3d334ff 	bics	r3, r3, #-16777216	; 0xff000000
8000e020:	1a000031 	bne	8000e0ec <strcmp_unaligned+0x160>
8000e024:	e5d15000 	ldrb	r5, [r1]
8000e028:	e1a0cc24 	lsr	ip, r4, #24
8000e02c:	ea000032 	b	8000e0fc <strcmp_unaligned+0x170>
8000e030:	e1a0cc24 	lsr	ip, r4, #24
8000e034:	e20550ff 	and	r5, r5, #255	; 0xff
8000e038:	ea00002f 	b	8000e0fc <strcmp_unaligned+0x170>
8000e03c:	e1a0c804 	lsl	ip, r4, #16
8000e040:	e0443002 	sub	r3, r4, r2
8000e044:	e1a0c82c 	lsr	ip, ip, #16
8000e048:	e1c33004 	bic	r3, r3, r4
8000e04c:	e15c0825 	cmp	ip, r5, lsr #16
8000e050:	1a00000e 	bne	8000e090 <strcmp_unaligned+0x104>
8000e054:	e0133382 	ands	r3, r3, r2, lsl #7
8000e058:	04915004 	ldreq	r5, [r1], #4
8000e05c:	1a000004 	bne	8000e074 <strcmp_unaligned+0xe8>
8000e060:	e02cc004 	eor	ip, ip, r4
8000e064:	e15c0805 	cmp	ip, r5, lsl #16
8000e068:	1a000006 	bne	8000e088 <strcmp_unaligned+0xfc>
8000e06c:	e4904004 	ldr	r4, [r0], #4
8000e070:	eafffff1 	b	8000e03c <strcmp_unaligned+0xb0>
8000e074:	e1b03803 	lsls	r3, r3, #16
8000e078:	1a00001b 	bne	8000e0ec <strcmp_unaligned+0x160>
8000e07c:	e1d150b0 	ldrh	r5, [r1]
8000e080:	e1a0c824 	lsr	ip, r4, #16
8000e084:	ea00001c 	b	8000e0fc <strcmp_unaligned+0x170>
8000e088:	e1a05805 	lsl	r5, r5, #16
8000e08c:	e1a0c824 	lsr	ip, r4, #16
8000e090:	e1a05825 	lsr	r5, r5, #16
8000e094:	ea000018 	b	8000e0fc <strcmp_unaligned+0x170>
8000e098:	e204c0ff 	and	ip, r4, #255	; 0xff
8000e09c:	e15c0c25 	cmp	ip, r5, lsr #24
8000e0a0:	e0443002 	sub	r3, r4, r2
8000e0a4:	e1c33004 	bic	r3, r3, r4
8000e0a8:	1a000007 	bne	8000e0cc <strcmp_unaligned+0x140>
8000e0ac:	e0133382 	ands	r3, r3, r2, lsl #7
8000e0b0:	04915004 	ldreq	r5, [r1], #4
8000e0b4:	1a000006 	bne	8000e0d4 <strcmp_unaligned+0x148>
8000e0b8:	e02cc004 	eor	ip, ip, r4
8000e0bc:	e15c0405 	cmp	ip, r5, lsl #8
8000e0c0:	1a000006 	bne	8000e0e0 <strcmp_unaligned+0x154>
8000e0c4:	e4904004 	ldr	r4, [r0], #4
8000e0c8:	eafffff2 	b	8000e098 <strcmp_unaligned+0x10c>
8000e0cc:	e1a05c25 	lsr	r5, r5, #24
8000e0d0:	ea000009 	b	8000e0fc <strcmp_unaligned+0x170>
8000e0d4:	e31400ff 	tst	r4, #255	; 0xff
8000e0d8:	0a000003 	beq	8000e0ec <strcmp_unaligned+0x160>
8000e0dc:	e4915004 	ldr	r5, [r1], #4
8000e0e0:	e1a0c424 	lsr	ip, r4, #8
8000e0e4:	e3c554ff 	bic	r5, r5, #-16777216	; 0xff000000
8000e0e8:	ea000003 	b	8000e0fc <strcmp_unaligned+0x170>
8000e0ec:	e3a00000 	mov	r0, #0
8000e0f0:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
8000e0f4:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
8000e0f8:	e12fff1e 	bx	lr
8000e0fc:	e20c20ff 	and	r2, ip, #255	; 0xff
8000e100:	e20500ff 	and	r0, r5, #255	; 0xff
8000e104:	e3500001 	cmp	r0, #1
8000e108:	21500002 	cmpcs	r0, r2
8000e10c:	01a0c42c 	lsreq	ip, ip, #8
8000e110:	01a05425 	lsreq	r5, r5, #8
8000e114:	0afffff8 	beq	8000e0fc <strcmp_unaligned+0x170>
8000e118:	e0420000 	sub	r0, r2, r0
8000e11c:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
8000e120:	e49d5004 	pop	{r5}		; (ldr r5, [sp], #4)
8000e124:	e12fff1e 	bx	lr

8000e128 <strlen>:
8000e128:	e3c01003 	bic	r1, r0, #3
8000e12c:	e2100003 	ands	r0, r0, #3
8000e130:	e2600000 	rsb	r0, r0, #0
8000e134:	e4913004 	ldr	r3, [r1], #4
8000e138:	e280c004 	add	ip, r0, #4
8000e13c:	e1a0c18c 	lsl	ip, ip, #3
8000e140:	e3e02000 	mvn	r2, #0
8000e144:	11833c32 	orrne	r3, r3, r2, lsr ip
8000e148:	e3a0c001 	mov	ip, #1
8000e14c:	e18cc40c 	orr	ip, ip, ip, lsl #8
8000e150:	e18cc80c 	orr	ip, ip, ip, lsl #16
8000e154:	e043200c 	sub	r2, r3, ip
8000e158:	e1c22003 	bic	r2, r2, r3
8000e15c:	e012238c 	ands	r2, r2, ip, lsl #7
8000e160:	04913004 	ldreq	r3, [r1], #4
8000e164:	02800004 	addeq	r0, r0, #4
8000e168:	0afffff9 	beq	8000e154 <strlen+0x2c>
8000e16c:	e31300ff 	tst	r3, #255	; 0xff
8000e170:	12800001 	addne	r0, r0, #1
8000e174:	13130cff 	tstne	r3, #65280	; 0xff00
8000e178:	12800001 	addne	r0, r0, #1
8000e17c:	131308ff 	tstne	r3, #16711680	; 0xff0000
8000e180:	12800001 	addne	r0, r0, #1
8000e184:	e12fff1e 	bx	lr

8000e188 <__ssprint_r>:
8000e188:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000e18c:	e5924008 	ldr	r4, [r2, #8]
8000e190:	e24dd00c 	sub	sp, sp, #12
8000e194:	e3540000 	cmp	r4, #0
8000e198:	e58d0004 	str	r0, [sp, #4]
8000e19c:	e1a0a002 	mov	sl, r2
8000e1a0:	e1a05001 	mov	r5, r1
8000e1a4:	e5927000 	ldr	r7, [r2]
8000e1a8:	05824004 	streq	r4, [r2, #4]
8000e1ac:	01a00004 	moveq	r0, r4
8000e1b0:	0a000055 	beq	8000e30c <__ssprint_r+0x184>
8000e1b4:	e3a09000 	mov	r9, #0
8000e1b8:	e1a04009 	mov	r4, r9
8000e1bc:	e3540000 	cmp	r4, #0
8000e1c0:	e5910000 	ldr	r0, [r1]
8000e1c4:	e5913008 	ldr	r3, [r1, #8]
8000e1c8:	0a000038 	beq	8000e2b0 <__ssprint_r+0x128>
8000e1cc:	e1540003 	cmp	r4, r3
8000e1d0:	e1a06003 	mov	r6, r3
8000e1d4:	e1a08003 	mov	r8, r3
8000e1d8:	31a06004 	movcc	r6, r4
8000e1dc:	31a08004 	movcc	r8, r4
8000e1e0:	3a000024 	bcc	8000e278 <__ssprint_r+0xf0>
8000e1e4:	e1d530bc 	ldrh	r3, [r5, #12]
8000e1e8:	e3130d12 	tst	r3, #1152	; 0x480
8000e1ec:	0a000021 	beq	8000e278 <__ssprint_r+0xf0>
8000e1f0:	e2851010 	add	r1, r5, #16
8000e1f4:	e8910042 	ldm	r1, {r1, r6}
8000e1f8:	e0866086 	add	r6, r6, r6, lsl #1
8000e1fc:	e0618000 	rsb	r8, r1, r0
8000e200:	e0866fa6 	add	r6, r6, r6, lsr #31
8000e204:	e2840001 	add	r0, r4, #1
8000e208:	e1a060c6 	asr	r6, r6, #1
8000e20c:	e0800008 	add	r0, r0, r8
8000e210:	e1560000 	cmp	r6, r0
8000e214:	e1a02006 	mov	r2, r6
8000e218:	31a06000 	movcc	r6, r0
8000e21c:	31a02000 	movcc	r2, r0
8000e220:	e3130b01 	tst	r3, #1024	; 0x400
8000e224:	0a000027 	beq	8000e2c8 <__ssprint_r+0x140>
8000e228:	e59d0004 	ldr	r0, [sp, #4]
8000e22c:	e1a01002 	mov	r1, r2
8000e230:	ebfff9b8 	bl	8000c918 <_malloc_r>
8000e234:	e250b000 	subs	fp, r0, #0
8000e238:	0a000029 	beq	8000e2e4 <__ssprint_r+0x15c>
8000e23c:	e5951010 	ldr	r1, [r5, #16]
8000e240:	e1a02008 	mov	r2, r8
8000e244:	ebffea55 	bl	80008ba0 <memcpy>
8000e248:	e1d530bc 	ldrh	r3, [r5, #12]
8000e24c:	e3c33d12 	bic	r3, r3, #1152	; 0x480
8000e250:	e3833080 	orr	r3, r3, #128	; 0x80
8000e254:	e1c530bc 	strh	r3, [r5, #12]
8000e258:	e08b0008 	add	r0, fp, r8
8000e25c:	e585b010 	str	fp, [r5, #16]
8000e260:	e0688006 	rsb	r8, r8, r6
8000e264:	e5850000 	str	r0, [r5]
8000e268:	e5856014 	str	r6, [r5, #20]
8000e26c:	e5858008 	str	r8, [r5, #8]
8000e270:	e1a06004 	mov	r6, r4
8000e274:	e1a08004 	mov	r8, r4
8000e278:	e1a02008 	mov	r2, r8
8000e27c:	e1a01009 	mov	r1, r9
8000e280:	eb00054d 	bl	8000f7bc <memmove>
8000e284:	e59a2008 	ldr	r2, [sl, #8]
8000e288:	e5953008 	ldr	r3, [r5, #8]
8000e28c:	e5950000 	ldr	r0, [r5]
8000e290:	e0644002 	rsb	r4, r4, r2
8000e294:	e0663003 	rsb	r3, r6, r3
8000e298:	e0800008 	add	r0, r0, r8
8000e29c:	e3540000 	cmp	r4, #0
8000e2a0:	e5853008 	str	r3, [r5, #8]
8000e2a4:	e5850000 	str	r0, [r5]
8000e2a8:	e58a4008 	str	r4, [sl, #8]
8000e2ac:	0a000019 	beq	8000e318 <__ssprint_r+0x190>
8000e2b0:	e5974004 	ldr	r4, [r7, #4]
8000e2b4:	e3540000 	cmp	r4, #0
8000e2b8:	e5979000 	ldr	r9, [r7]
8000e2bc:	e2877008 	add	r7, r7, #8
8000e2c0:	0afffffa 	beq	8000e2b0 <__ssprint_r+0x128>
8000e2c4:	eaffffc0 	b	8000e1cc <__ssprint_r+0x44>
8000e2c8:	e59d0004 	ldr	r0, [sp, #4]
8000e2cc:	eb000584 	bl	8000f8e4 <_realloc_r>
8000e2d0:	e250b000 	subs	fp, r0, #0
8000e2d4:	1affffdf 	bne	8000e258 <__ssprint_r+0xd0>
8000e2d8:	e59d0004 	ldr	r0, [sp, #4]
8000e2dc:	e5951010 	ldr	r1, [r5, #16]
8000e2e0:	eb00049c 	bl	8000f558 <_free_r>
8000e2e4:	e59d2004 	ldr	r2, [sp, #4]
8000e2e8:	e3a0300c 	mov	r3, #12
8000e2ec:	e5823000 	str	r3, [r2]
8000e2f0:	e1d520bc 	ldrh	r2, [r5, #12]
8000e2f4:	e3a03000 	mov	r3, #0
8000e2f8:	e3822040 	orr	r2, r2, #64	; 0x40
8000e2fc:	e1c520bc 	strh	r2, [r5, #12]
8000e300:	e58a3008 	str	r3, [sl, #8]
8000e304:	e58a3004 	str	r3, [sl, #4]
8000e308:	e3e00000 	mvn	r0, #0
8000e30c:	e28dd00c 	add	sp, sp, #12
8000e310:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000e314:	e12fff1e 	bx	lr
8000e318:	e58a4004 	str	r4, [sl, #4]
8000e31c:	e1a00004 	mov	r0, r4
8000e320:	eafffff9 	b	8000e30c <__ssprint_r+0x184>

8000e324 <_svfiprintf_r>:
8000e324:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000e328:	e1a06001 	mov	r6, r1
8000e32c:	e1d110bc 	ldrh	r1, [r1, #12]
8000e330:	e24dd0ac 	sub	sp, sp, #172	; 0xac
8000e334:	e3110080 	tst	r1, #128	; 0x80
8000e338:	e58d0018 	str	r0, [sp, #24]
8000e33c:	e58d3014 	str	r3, [sp, #20]
8000e340:	0a000002 	beq	8000e350 <_svfiprintf_r+0x2c>
8000e344:	e5963010 	ldr	r3, [r6, #16]
8000e348:	e3530000 	cmp	r3, #0
8000e34c:	0a0003ee 	beq	8000f30c <_svfiprintf_r+0xfe8>
8000e350:	e3a03000 	mov	r3, #0
8000e354:	e28dc030 	add	ip, sp, #48	; 0x30
8000e358:	e58d302c 	str	r3, [sp, #44]	; 0x2c
8000e35c:	e58dc098 	str	ip, [sp, #152]	; 0x98
8000e360:	e58d30a0 	str	r3, [sp, #160]	; 0xa0
8000e364:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000e368:	e58d3010 	str	r3, [sp, #16]
8000e36c:	e1a05002 	mov	r5, r2
8000e370:	e1a0400c 	mov	r4, ip
8000e374:	e5d53000 	ldrb	r3, [r5]
8000e378:	e3530000 	cmp	r3, #0
8000e37c:	13530025 	cmpne	r3, #37	; 0x25
8000e380:	0a00016a 	beq	8000e930 <_svfiprintf_r+0x60c>
8000e384:	e2853001 	add	r3, r5, #1
8000e388:	e1a07003 	mov	r7, r3
8000e38c:	e5d33000 	ldrb	r3, [r3]
8000e390:	e3530025 	cmp	r3, #37	; 0x25
8000e394:	13530000 	cmpne	r3, #0
8000e398:	e2873001 	add	r3, r7, #1
8000e39c:	1afffff9 	bne	8000e388 <_svfiprintf_r+0x64>
8000e3a0:	e0578005 	subs	r8, r7, r5
8000e3a4:	0a00000c 	beq	8000e3dc <_svfiprintf_r+0xb8>
8000e3a8:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000e3ac:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000e3b0:	e2833001 	add	r3, r3, #1
8000e3b4:	e0822008 	add	r2, r2, r8
8000e3b8:	e3530007 	cmp	r3, #7
8000e3bc:	e8840120 	stm	r4, {r5, r8}
8000e3c0:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000e3c4:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000e3c8:	d2844008 	addle	r4, r4, #8
8000e3cc:	ca0002ef 	bgt	8000ef90 <_svfiprintf_r+0xc6c>
8000e3d0:	e59d0010 	ldr	r0, [sp, #16]
8000e3d4:	e0800008 	add	r0, r0, r8
8000e3d8:	e58d0010 	str	r0, [sp, #16]
8000e3dc:	e5d73000 	ldrb	r3, [r7]
8000e3e0:	e3530000 	cmp	r3, #0
8000e3e4:	0a00028a 	beq	8000ee14 <_svfiprintf_r+0xaf0>
8000e3e8:	e3a01000 	mov	r1, #0
8000e3ec:	e3a02000 	mov	r2, #0
8000e3f0:	e5cd10a7 	strb	r1, [sp, #167]	; 0xa7
8000e3f4:	e58d200c 	str	r2, [sp, #12]
8000e3f8:	e5d73001 	ldrb	r3, [r7, #1]
8000e3fc:	e2875001 	add	r5, r7, #1
8000e400:	e3e0a000 	mvn	sl, #0
8000e404:	e1a0b002 	mov	fp, r2
8000e408:	e3a00020 	mov	r0, #32
8000e40c:	e3a0102b 	mov	r1, #43	; 0x2b
8000e410:	e2855001 	add	r5, r5, #1
8000e414:	e2432020 	sub	r2, r3, #32
8000e418:	e3520058 	cmp	r2, #88	; 0x58
8000e41c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
8000e420:	ea000258 	b	8000ed88 <_svfiprintf_r+0xa64>
8000e424:	8000ed98 	.word	0x8000ed98
8000e428:	8000ed88 	.word	0x8000ed88
8000e42c:	8000ed88 	.word	0x8000ed88
8000e430:	8000ecbc 	.word	0x8000ecbc
8000e434:	8000ed88 	.word	0x8000ed88
8000e438:	8000ed88 	.word	0x8000ed88
8000e43c:	8000ed88 	.word	0x8000ed88
8000e440:	8000ed88 	.word	0x8000ed88
8000e444:	8000ed88 	.word	0x8000ed88
8000e448:	8000ed88 	.word	0x8000ed88
8000e44c:	8000e9f4 	.word	0x8000e9f4
8000e450:	8000ed04 	.word	0x8000ed04
8000e454:	8000ed88 	.word	0x8000ed88
8000e458:	8000ea20 	.word	0x8000ea20
8000e45c:	8000ed10 	.word	0x8000ed10
8000e460:	8000ed88 	.word	0x8000ed88
8000e464:	8000ecf8 	.word	0x8000ecf8
8000e468:	8000ecc8 	.word	0x8000ecc8
8000e46c:	8000ecc8 	.word	0x8000ecc8
8000e470:	8000ecc8 	.word	0x8000ecc8
8000e474:	8000ecc8 	.word	0x8000ecc8
8000e478:	8000ecc8 	.word	0x8000ecc8
8000e47c:	8000ecc8 	.word	0x8000ecc8
8000e480:	8000ecc8 	.word	0x8000ecc8
8000e484:	8000ecc8 	.word	0x8000ecc8
8000e488:	8000ecc8 	.word	0x8000ecc8
8000e48c:	8000ed88 	.word	0x8000ed88
8000e490:	8000ed88 	.word	0x8000ed88
8000e494:	8000ed88 	.word	0x8000ed88
8000e498:	8000ed88 	.word	0x8000ed88
8000e49c:	8000ed88 	.word	0x8000ed88
8000e4a0:	8000ed88 	.word	0x8000ed88
8000e4a4:	8000ed88 	.word	0x8000ed88
8000e4a8:	8000ed88 	.word	0x8000ed88
8000e4ac:	8000ed88 	.word	0x8000ed88
8000e4b0:	8000ed88 	.word	0x8000ed88
8000e4b4:	8000e970 	.word	0x8000e970
8000e4b8:	8000ed88 	.word	0x8000ed88
8000e4bc:	8000ed88 	.word	0x8000ed88
8000e4c0:	8000ed88 	.word	0x8000ed88
8000e4c4:	8000ed88 	.word	0x8000ed88
8000e4c8:	8000ed88 	.word	0x8000ed88
8000e4cc:	8000ed88 	.word	0x8000ed88
8000e4d0:	8000ed88 	.word	0x8000ed88
8000e4d4:	8000ed88 	.word	0x8000ed88
8000e4d8:	8000ed88 	.word	0x8000ed88
8000e4dc:	8000ed88 	.word	0x8000ed88
8000e4e0:	8000e938 	.word	0x8000e938
8000e4e4:	8000ed88 	.word	0x8000ed88
8000e4e8:	8000ed88 	.word	0x8000ed88
8000e4ec:	8000ed88 	.word	0x8000ed88
8000e4f0:	8000ed88 	.word	0x8000ed88
8000e4f4:	8000ed88 	.word	0x8000ed88
8000e4f8:	8000e588 	.word	0x8000e588
8000e4fc:	8000ed88 	.word	0x8000ed88
8000e500:	8000ed88 	.word	0x8000ed88
8000e504:	8000eb4c 	.word	0x8000eb4c
8000e508:	8000ed88 	.word	0x8000ed88
8000e50c:	8000ed88 	.word	0x8000ed88
8000e510:	8000ed88 	.word	0x8000ed88
8000e514:	8000ed88 	.word	0x8000ed88
8000e518:	8000ed88 	.word	0x8000ed88
8000e51c:	8000ed88 	.word	0x8000ed88
8000e520:	8000ed88 	.word	0x8000ed88
8000e524:	8000ed88 	.word	0x8000ed88
8000e528:	8000ed88 	.word	0x8000ed88
8000e52c:	8000ed88 	.word	0x8000ed88
8000e530:	8000eba0 	.word	0x8000eba0
8000e534:	8000e974 	.word	0x8000e974
8000e538:	8000ed88 	.word	0x8000ed88
8000e53c:	8000ed88 	.word	0x8000ed88
8000e540:	8000ed88 	.word	0x8000ed88
8000e544:	8000eb0c 	.word	0x8000eb0c
8000e548:	8000e974 	.word	0x8000e974
8000e54c:	8000ed88 	.word	0x8000ed88
8000e550:	8000ed88 	.word	0x8000ed88
8000e554:	8000eaf4 	.word	0x8000eaf4
8000e558:	8000ed88 	.word	0x8000ed88
8000e55c:	8000eb18 	.word	0x8000eb18
8000e560:	8000e93c 	.word	0x8000e93c
8000e564:	8000eab0 	.word	0x8000eab0
8000e568:	8000eaa4 	.word	0x8000eaa4
8000e56c:	8000ed88 	.word	0x8000ed88
8000e570:	8000ea2c 	.word	0x8000ea2c
8000e574:	8000ed88 	.word	0x8000ed88
8000e578:	8000e58c 	.word	0x8000e58c
8000e57c:	8000ed88 	.word	0x8000ed88
8000e580:	8000ed88 	.word	0x8000ed88
8000e584:	8000ed58 	.word	0x8000ed58
8000e588:	e38bb010 	orr	fp, fp, #16
8000e58c:	e31b0020 	tst	fp, #32
8000e590:	0a0002d0 	beq	8000f0d8 <_svfiprintf_r+0xdb4>
8000e594:	e59dc014 	ldr	ip, [sp, #20]
8000e598:	e28c3007 	add	r3, ip, #7
8000e59c:	e3c33007 	bic	r3, r3, #7
8000e5a0:	e8930300 	ldm	r3, {r8, r9}
8000e5a4:	e2833008 	add	r3, r3, #8
8000e5a8:	e1980009 	orrs	r0, r8, r9
8000e5ac:	e58d3014 	str	r3, [sp, #20]
8000e5b0:	03a02000 	moveq	r2, #0
8000e5b4:	13a02001 	movne	r2, #1
8000e5b8:	e3a03001 	mov	r3, #1
8000e5bc:	e3a01000 	mov	r1, #0
8000e5c0:	e5cd10a7 	strb	r1, [sp, #167]	; 0xa7
8000e5c4:	e35a0000 	cmp	sl, #0
8000e5c8:	a3cbb080 	bicge	fp, fp, #128	; 0x80
8000e5cc:	e35a0000 	cmp	sl, #0
8000e5d0:	13822001 	orrne	r2, r2, #1
8000e5d4:	e3520000 	cmp	r2, #0
8000e5d8:	0a0000fa 	beq	8000e9c8 <_svfiprintf_r+0x6a4>
8000e5dc:	e3530001 	cmp	r3, #1
8000e5e0:	0a00028a 	beq	8000f010 <_svfiprintf_r+0xcec>
8000e5e4:	e3530002 	cmp	r3, #2
8000e5e8:	0a0001f0 	beq	8000edb0 <_svfiprintf_r+0xa8c>
8000e5ec:	e28d2070 	add	r2, sp, #112	; 0x70
8000e5f0:	e2823027 	add	r3, r2, #39	; 0x27
8000e5f4:	e58d2008 	str	r2, [sp, #8]
8000e5f8:	e1a01003 	mov	r1, r3
8000e5fc:	e1a001a9 	lsr	r0, r9, #3
8000e600:	e1a0c1a8 	lsr	ip, r8, #3
8000e604:	e18cce89 	orr	ip, ip, r9, lsl #29
8000e608:	e1a03000 	mov	r3, r0
8000e60c:	e1a09003 	mov	r9, r3
8000e610:	e2080007 	and	r0, r8, #7
8000e614:	e1a0800c 	mov	r8, ip
8000e618:	e2802030 	add	r2, r0, #48	; 0x30
8000e61c:	e198c009 	orrs	ip, r8, r9
8000e620:	e1a03001 	mov	r3, r1
8000e624:	e5c12000 	strb	r2, [r1]
8000e628:	e2411001 	sub	r1, r1, #1
8000e62c:	1afffff2 	bne	8000e5fc <_svfiprintf_r+0x2d8>
8000e630:	e31b0001 	tst	fp, #1
8000e634:	e58d3020 	str	r3, [sp, #32]
8000e638:	0a0001ef 	beq	8000edfc <_svfiprintf_r+0xad8>
8000e63c:	e3520030 	cmp	r2, #48	; 0x30
8000e640:	0a000346 	beq	8000f360 <_svfiprintf_r+0x103c>
8000e644:	e59d0008 	ldr	r0, [sp, #8]
8000e648:	e58d1020 	str	r1, [sp, #32]
8000e64c:	e59d1020 	ldr	r1, [sp, #32]
8000e650:	e2803028 	add	r3, r0, #40	; 0x28
8000e654:	e3a02030 	mov	r2, #48	; 0x30
8000e658:	e0613003 	rsb	r3, r1, r3
8000e65c:	e5c12000 	strb	r2, [r1]
8000e660:	e58d3008 	str	r3, [sp, #8]
8000e664:	e58da01c 	str	sl, [sp, #28]
8000e668:	e5dd30a7 	ldrb	r3, [sp, #167]	; 0xa7
8000e66c:	e59d9008 	ldr	r9, [sp, #8]
8000e670:	e59d001c 	ldr	r0, [sp, #28]
8000e674:	e1590000 	cmp	r9, r0
8000e678:	b1a09000 	movlt	r9, r0
8000e67c:	e3530000 	cmp	r3, #0
8000e680:	12899001 	addne	r9, r9, #1
8000e684:	e21b1002 	ands	r1, fp, #2
8000e688:	12899002 	addne	r9, r9, #2
8000e68c:	e21b2084 	ands	r2, fp, #132	; 0x84
8000e690:	e58d1024 	str	r1, [sp, #36]	; 0x24
8000e694:	e58d2028 	str	r2, [sp, #40]	; 0x28
8000e698:	0a000154 	beq	8000ebf0 <_svfiprintf_r+0x8cc>
8000e69c:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000e6a0:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000e6a4:	e2841008 	add	r1, r4, #8
8000e6a8:	e5dd00a7 	ldrb	r0, [sp, #167]	; 0xa7
8000e6ac:	e3500000 	cmp	r0, #0
8000e6b0:	0a00000b 	beq	8000e6e4 <_svfiprintf_r+0x3c0>
8000e6b4:	e2833001 	add	r3, r3, #1
8000e6b8:	e28d00a7 	add	r0, sp, #167	; 0xa7
8000e6bc:	e5840000 	str	r0, [r4]
8000e6c0:	e3530007 	cmp	r3, #7
8000e6c4:	e2822001 	add	r2, r2, #1
8000e6c8:	e3a00001 	mov	r0, #1
8000e6cc:	e5840004 	str	r0, [r4, #4]
8000e6d0:	d1a04001 	movle	r4, r1
8000e6d4:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000e6d8:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000e6dc:	d2811008 	addle	r1, r1, #8
8000e6e0:	ca000232 	bgt	8000efb0 <_svfiprintf_r+0xc8c>
8000e6e4:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
8000e6e8:	e3500000 	cmp	r0, #0
8000e6ec:	0a00000b 	beq	8000e720 <_svfiprintf_r+0x3fc>
8000e6f0:	e2833001 	add	r3, r3, #1
8000e6f4:	e28d00a4 	add	r0, sp, #164	; 0xa4
8000e6f8:	e5840000 	str	r0, [r4]
8000e6fc:	e3530007 	cmp	r3, #7
8000e700:	e2822002 	add	r2, r2, #2
8000e704:	e3a00002 	mov	r0, #2
8000e708:	e5840004 	str	r0, [r4, #4]
8000e70c:	d1a04001 	movle	r4, r1
8000e710:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000e714:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000e718:	d2811008 	addle	r1, r1, #8
8000e71c:	ca00022f 	bgt	8000efe0 <_svfiprintf_r+0xcbc>
8000e720:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
8000e724:	e3500080 	cmp	r0, #128	; 0x80
8000e728:	0a0001c8 	beq	8000ee50 <_svfiprintf_r+0xb2c>
8000e72c:	e59d001c 	ldr	r0, [sp, #28]
8000e730:	e59dc008 	ldr	ip, [sp, #8]
8000e734:	e06c7000 	rsb	r7, ip, r0
8000e738:	e3570000 	cmp	r7, #0
8000e73c:	da000035 	ble	8000e818 <_svfiprintf_r+0x4f4>
8000e740:	e3570010 	cmp	r7, #16
8000e744:	da0002e0 	ble	8000f2cc <_svfiprintf_r+0xfa8>
8000e748:	e1a01004 	mov	r1, r4
8000e74c:	e59f8c58 	ldr	r8, [pc, #3160]	; 8000f3ac <_svfiprintf_r+0x1088>
8000e750:	e3a0a010 	mov	sl, #16
8000e754:	e59d4018 	ldr	r4, [sp, #24]
8000e758:	ea000002 	b	8000e768 <_svfiprintf_r+0x444>
8000e75c:	e2477010 	sub	r7, r7, #16
8000e760:	e3570010 	cmp	r7, #16
8000e764:	da000015 	ble	8000e7c0 <_svfiprintf_r+0x49c>
8000e768:	e2833001 	add	r3, r3, #1
8000e76c:	e3530007 	cmp	r3, #7
8000e770:	e8810500 	stm	r1, {r8, sl}
8000e774:	e2822010 	add	r2, r2, #16
8000e778:	d2811008 	addle	r1, r1, #8
8000e77c:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000e780:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000e784:	d2810008 	addle	r0, r1, #8
8000e788:	dafffff3 	ble	8000e75c <_svfiprintf_r+0x438>
8000e78c:	e1a00004 	mov	r0, r4
8000e790:	e1a01006 	mov	r1, r6
8000e794:	e28d2098 	add	r2, sp, #152	; 0x98
8000e798:	ebfffe7a 	bl	8000e188 <__ssprint_r>
8000e79c:	e3500000 	cmp	r0, #0
8000e7a0:	1a0001a1 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000e7a4:	e2477010 	sub	r7, r7, #16
8000e7a8:	e28d1030 	add	r1, sp, #48	; 0x30
8000e7ac:	e3570010 	cmp	r7, #16
8000e7b0:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000e7b4:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000e7b8:	e2810008 	add	r0, r1, #8
8000e7bc:	caffffe9 	bgt	8000e768 <_svfiprintf_r+0x444>
8000e7c0:	e1a04001 	mov	r4, r1
8000e7c4:	e2833001 	add	r3, r3, #1
8000e7c8:	e3530007 	cmp	r3, #7
8000e7cc:	e0822007 	add	r2, r2, r7
8000e7d0:	e5848000 	str	r8, [r4]
8000e7d4:	e5847004 	str	r7, [r4, #4]
8000e7d8:	d2801008 	addle	r1, r0, #8
8000e7dc:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000e7e0:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000e7e4:	d1a04000 	movle	r4, r0
8000e7e8:	da00000a 	ble	8000e818 <_svfiprintf_r+0x4f4>
8000e7ec:	e59d0018 	ldr	r0, [sp, #24]
8000e7f0:	e1a01006 	mov	r1, r6
8000e7f4:	e28d2098 	add	r2, sp, #152	; 0x98
8000e7f8:	ebfffe62 	bl	8000e188 <__ssprint_r>
8000e7fc:	e3500000 	cmp	r0, #0
8000e800:	1a000189 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000e804:	e28dc030 	add	ip, sp, #48	; 0x30
8000e808:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000e80c:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000e810:	e28c1008 	add	r1, ip, #8
8000e814:	e1a0400c 	mov	r4, ip
8000e818:	e59d0008 	ldr	r0, [sp, #8]
8000e81c:	e2833001 	add	r3, r3, #1
8000e820:	e59dc020 	ldr	ip, [sp, #32]
8000e824:	e0822000 	add	r2, r2, r0
8000e828:	e3530007 	cmp	r3, #7
8000e82c:	e584c000 	str	ip, [r4]
8000e830:	e5840004 	str	r0, [r4, #4]
8000e834:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000e838:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000e83c:	ca0001bf 	bgt	8000ef40 <_svfiprintf_r+0xc1c>
8000e840:	e31b0004 	tst	fp, #4
8000e844:	0a00002a 	beq	8000e8f4 <_svfiprintf_r+0x5d0>
8000e848:	e59d000c 	ldr	r0, [sp, #12]
8000e84c:	e0694000 	rsb	r4, r9, r0
8000e850:	e3540000 	cmp	r4, #0
8000e854:	da000026 	ble	8000e8f4 <_svfiprintf_r+0x5d0>
8000e858:	e3540010 	cmp	r4, #16
8000e85c:	da0002cc 	ble	8000f394 <_svfiprintf_r+0x1070>
8000e860:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000e864:	e59f8b44 	ldr	r8, [pc, #2884]	; 8000f3b0 <_svfiprintf_r+0x108c>
8000e868:	e3a07010 	mov	r7, #16
8000e86c:	e59da018 	ldr	sl, [sp, #24]
8000e870:	ea000002 	b	8000e880 <_svfiprintf_r+0x55c>
8000e874:	e2444010 	sub	r4, r4, #16
8000e878:	e3540010 	cmp	r4, #16
8000e87c:	da000014 	ble	8000e8d4 <_svfiprintf_r+0x5b0>
8000e880:	e2833001 	add	r3, r3, #1
8000e884:	e2822010 	add	r2, r2, #16
8000e888:	e3530007 	cmp	r3, #7
8000e88c:	e5818000 	str	r8, [r1]
8000e890:	e5817004 	str	r7, [r1, #4]
8000e894:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000e898:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000e89c:	d2811008 	addle	r1, r1, #8
8000e8a0:	dafffff3 	ble	8000e874 <_svfiprintf_r+0x550>
8000e8a4:	e1a0000a 	mov	r0, sl
8000e8a8:	e1a01006 	mov	r1, r6
8000e8ac:	e28d2098 	add	r2, sp, #152	; 0x98
8000e8b0:	ebfffe34 	bl	8000e188 <__ssprint_r>
8000e8b4:	e3500000 	cmp	r0, #0
8000e8b8:	1a00015b 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000e8bc:	e2444010 	sub	r4, r4, #16
8000e8c0:	e3540010 	cmp	r4, #16
8000e8c4:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000e8c8:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000e8cc:	e28d1030 	add	r1, sp, #48	; 0x30
8000e8d0:	caffffea 	bgt	8000e880 <_svfiprintf_r+0x55c>
8000e8d4:	e2833001 	add	r3, r3, #1
8000e8d8:	e0842002 	add	r2, r4, r2
8000e8dc:	e3530007 	cmp	r3, #7
8000e8e0:	e5818000 	str	r8, [r1]
8000e8e4:	e5814004 	str	r4, [r1, #4]
8000e8e8:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000e8ec:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000e8f0:	ca00022f 	bgt	8000f1b4 <_svfiprintf_r+0xe90>
8000e8f4:	e59d1010 	ldr	r1, [sp, #16]
8000e8f8:	e59d300c 	ldr	r3, [sp, #12]
8000e8fc:	e1590003 	cmp	r9, r3
8000e900:	a0811009 	addge	r1, r1, r9
8000e904:	b0811003 	addlt	r1, r1, r3
8000e908:	e3520000 	cmp	r2, #0
8000e90c:	e58d1010 	str	r1, [sp, #16]
8000e910:	1a000193 	bne	8000ef64 <_svfiprintf_r+0xc40>
8000e914:	e3a0c000 	mov	ip, #0
8000e918:	e58dc09c 	str	ip, [sp, #156]	; 0x9c
8000e91c:	e5d53000 	ldrb	r3, [r5]
8000e920:	e3530000 	cmp	r3, #0
8000e924:	13530025 	cmpne	r3, #37	; 0x25
8000e928:	e28d4030 	add	r4, sp, #48	; 0x30
8000e92c:	1afffe94 	bne	8000e384 <_svfiprintf_r+0x60>
8000e930:	e1a07005 	mov	r7, r5
8000e934:	eafffea8 	b	8000e3dc <_svfiprintf_r+0xb8>
8000e938:	e38bb010 	orr	fp, fp, #16
8000e93c:	e21b3020 	ands	r3, fp, #32
8000e940:	0a0001d9 	beq	8000f0ac <_svfiprintf_r+0xd88>
8000e944:	e59dc014 	ldr	ip, [sp, #20]
8000e948:	e28c3007 	add	r3, ip, #7
8000e94c:	e3c33007 	bic	r3, r3, #7
8000e950:	e8930300 	ldm	r3, {r8, r9}
8000e954:	e2833008 	add	r3, r3, #8
8000e958:	e1980009 	orrs	r0, r8, r9
8000e95c:	e58d3014 	str	r3, [sp, #20]
8000e960:	03a02000 	moveq	r2, #0
8000e964:	13a02001 	movne	r2, #1
8000e968:	e3a03000 	mov	r3, #0
8000e96c:	eaffff12 	b	8000e5bc <_svfiprintf_r+0x298>
8000e970:	e38bb010 	orr	fp, fp, #16
8000e974:	e31b0020 	tst	fp, #32
8000e978:	0a0001e5 	beq	8000f114 <_svfiprintf_r+0xdf0>
8000e97c:	e59dc014 	ldr	ip, [sp, #20]
8000e980:	e28c3007 	add	r3, ip, #7
8000e984:	e3c33007 	bic	r3, r3, #7
8000e988:	e2830008 	add	r0, r3, #8
8000e98c:	e58d0014 	str	r0, [sp, #20]
8000e990:	e8930300 	ldm	r3, {r8, r9}
8000e994:	e3580000 	cmp	r8, #0
8000e998:	e2d9c000 	sbcs	ip, r9, #0
8000e99c:	ba0001e6 	blt	8000f13c <_svfiprintf_r+0xe18>
8000e9a0:	e1980009 	orrs	r0, r8, r9
8000e9a4:	03a02000 	moveq	r2, #0
8000e9a8:	13a02001 	movne	r2, #1
8000e9ac:	e35a0000 	cmp	sl, #0
8000e9b0:	a3cbb080 	bicge	fp, fp, #128	; 0x80
8000e9b4:	e35a0000 	cmp	sl, #0
8000e9b8:	13822001 	orrne	r2, r2, #1
8000e9bc:	e3520000 	cmp	r2, #0
8000e9c0:	e3a03001 	mov	r3, #1
8000e9c4:	1affff04 	bne	8000e5dc <_svfiprintf_r+0x2b8>
8000e9c8:	e3530000 	cmp	r3, #0
8000e9cc:	1a00016b 	bne	8000ef80 <_svfiprintf_r+0xc5c>
8000e9d0:	e31b0001 	tst	fp, #1
8000e9d4:	0a0001b0 	beq	8000f09c <_svfiprintf_r+0xd78>
8000e9d8:	e3a03030 	mov	r3, #48	; 0x30
8000e9dc:	e5cd3097 	strb	r3, [sp, #151]	; 0x97
8000e9e0:	e3a02001 	mov	r2, #1
8000e9e4:	e28d3097 	add	r3, sp, #151	; 0x97
8000e9e8:	e58d2008 	str	r2, [sp, #8]
8000e9ec:	e58d3020 	str	r3, [sp, #32]
8000e9f0:	eaffff1b 	b	8000e664 <_svfiprintf_r+0x340>
8000e9f4:	e59d3014 	ldr	r3, [sp, #20]
8000e9f8:	e5933000 	ldr	r3, [r3]
8000e9fc:	e59dc014 	ldr	ip, [sp, #20]
8000ea00:	e3530000 	cmp	r3, #0
8000ea04:	e58d300c 	str	r3, [sp, #12]
8000ea08:	e28c2004 	add	r2, ip, #4
8000ea0c:	aa0001e5 	bge	8000f1a8 <_svfiprintf_r+0xe84>
8000ea10:	e59d300c 	ldr	r3, [sp, #12]
8000ea14:	e2633000 	rsb	r3, r3, #0
8000ea18:	e58d300c 	str	r3, [sp, #12]
8000ea1c:	e58d2014 	str	r2, [sp, #20]
8000ea20:	e38bb004 	orr	fp, fp, #4
8000ea24:	e5d53000 	ldrb	r3, [r5]
8000ea28:	eafffe78 	b	8000e410 <_svfiprintf_r+0xec>
8000ea2c:	e3a0c000 	mov	ip, #0
8000ea30:	e59d3014 	ldr	r3, [sp, #20]
8000ea34:	e5cdc0a7 	strb	ip, [sp, #167]	; 0xa7
8000ea38:	e59d0014 	ldr	r0, [sp, #20]
8000ea3c:	e5933000 	ldr	r3, [r3]
8000ea40:	e2800004 	add	r0, r0, #4
8000ea44:	e3530000 	cmp	r3, #0
8000ea48:	e58d3020 	str	r3, [sp, #32]
8000ea4c:	e58d0014 	str	r0, [sp, #20]
8000ea50:	0a000248 	beq	8000f378 <_svfiprintf_r+0x1054>
8000ea54:	e35a0000 	cmp	sl, #0
8000ea58:	ba00020e 	blt	8000f298 <_svfiprintf_r+0xf74>
8000ea5c:	e59d0020 	ldr	r0, [sp, #32]
8000ea60:	e3a01000 	mov	r1, #0
8000ea64:	e1a0200a 	mov	r2, sl
8000ea68:	ebfff96d 	bl	8000d024 <memchr>
8000ea6c:	e3500000 	cmp	r0, #0
8000ea70:	058da008 	streq	sl, [sp, #8]
8000ea74:	058d001c 	streq	r0, [sp, #28]
8000ea78:	0afffefa 	beq	8000e668 <_svfiprintf_r+0x344>
8000ea7c:	e59d2020 	ldr	r2, [sp, #32]
8000ea80:	e0620000 	rsb	r0, r2, r0
8000ea84:	e150000a 	cmp	r0, sl
8000ea88:	c3a0c000 	movgt	ip, #0
8000ea8c:	e58d0008 	str	r0, [sp, #8]
8000ea90:	c58dc01c 	strgt	ip, [sp, #28]
8000ea94:	c58da008 	strgt	sl, [sp, #8]
8000ea98:	d3a03000 	movle	r3, #0
8000ea9c:	d58d301c 	strle	r3, [sp, #28]
8000eaa0:	eafffef0 	b	8000e668 <_svfiprintf_r+0x344>
8000eaa4:	e38bb020 	orr	fp, fp, #32
8000eaa8:	e5d53000 	ldrb	r3, [r5]
8000eaac:	eafffe57 	b	8000e410 <_svfiprintf_r+0xec>
8000eab0:	e59d3014 	ldr	r3, [sp, #20]
8000eab4:	e5932000 	ldr	r2, [r3]
8000eab8:	e2831004 	add	r1, r3, #4
8000eabc:	e3a03030 	mov	r3, #48	; 0x30
8000eac0:	e5cd30a4 	strb	r3, [sp, #164]	; 0xa4
8000eac4:	e3a03078 	mov	r3, #120	; 0x78
8000eac8:	e5cd30a5 	strb	r3, [sp, #165]	; 0xa5
8000eacc:	e59f38e0 	ldr	r3, [pc, #2272]	; 8000f3b4 <_svfiprintf_r+0x1090>
8000ead0:	e1a08002 	mov	r8, r2
8000ead4:	e3a09000 	mov	r9, #0
8000ead8:	e2522000 	subs	r2, r2, #0
8000eadc:	e58d302c 	str	r3, [sp, #44]	; 0x2c
8000eae0:	e58d1014 	str	r1, [sp, #20]
8000eae4:	e38bb002 	orr	fp, fp, #2
8000eae8:	13a02001 	movne	r2, #1
8000eaec:	e3a03002 	mov	r3, #2
8000eaf0:	eafffeb1 	b	8000e5bc <_svfiprintf_r+0x298>
8000eaf4:	e5d53000 	ldrb	r3, [r5]
8000eaf8:	e353006c 	cmp	r3, #108	; 0x6c
8000eafc:	038bb020 	orreq	fp, fp, #32
8000eb00:	05f53001 	ldrbeq	r3, [r5, #1]!
8000eb04:	138bb010 	orrne	fp, fp, #16
8000eb08:	eafffe40 	b	8000e410 <_svfiprintf_r+0xec>
8000eb0c:	e38bb040 	orr	fp, fp, #64	; 0x40
8000eb10:	e5d53000 	ldrb	r3, [r5]
8000eb14:	eafffe3d 	b	8000e410 <_svfiprintf_r+0xec>
8000eb18:	e31b0020 	tst	fp, #32
8000eb1c:	1a0001c8 	bne	8000f244 <_svfiprintf_r+0xf20>
8000eb20:	e31b0010 	tst	fp, #16
8000eb24:	1a0001e1 	bne	8000f2b0 <_svfiprintf_r+0xf8c>
8000eb28:	e31b0040 	tst	fp, #64	; 0x40
8000eb2c:	0a0001df 	beq	8000f2b0 <_svfiprintf_r+0xf8c>
8000eb30:	e28d0010 	add	r0, sp, #16
8000eb34:	e8901001 	ldm	r0, {r0, ip}
8000eb38:	e59c3000 	ldr	r3, [ip]
8000eb3c:	e28cc004 	add	ip, ip, #4
8000eb40:	e58dc014 	str	ip, [sp, #20]
8000eb44:	e1c300b0 	strh	r0, [r3]
8000eb48:	eafffe09 	b	8000e374 <_svfiprintf_r+0x50>
8000eb4c:	e59f2864 	ldr	r2, [pc, #2148]	; 8000f3b8 <_svfiprintf_r+0x1094>
8000eb50:	e31b0020 	tst	fp, #32
8000eb54:	e58d202c 	str	r2, [sp, #44]	; 0x2c
8000eb58:	0a000082 	beq	8000ed68 <_svfiprintf_r+0xa44>
8000eb5c:	e59dc014 	ldr	ip, [sp, #20]
8000eb60:	e28c2007 	add	r2, ip, #7
8000eb64:	e3c22007 	bic	r2, r2, #7
8000eb68:	e2820008 	add	r0, r2, #8
8000eb6c:	e58d0014 	str	r0, [sp, #20]
8000eb70:	e8920300 	ldm	r2, {r8, r9}
8000eb74:	e1980009 	orrs	r0, r8, r9
8000eb78:	03a02000 	moveq	r2, #0
8000eb7c:	13a02001 	movne	r2, #1
8000eb80:	e11b0002 	tst	fp, r2
8000eb84:	13a02030 	movne	r2, #48	; 0x30
8000eb88:	15cd20a4 	strbne	r2, [sp, #164]	; 0xa4
8000eb8c:	15cd30a5 	strbne	r3, [sp, #165]	; 0xa5
8000eb90:	138bb002 	orrne	fp, fp, #2
8000eb94:	13a02001 	movne	r2, #1
8000eb98:	e3a03002 	mov	r3, #2
8000eb9c:	eafffe86 	b	8000e5bc <_svfiprintf_r+0x298>
8000eba0:	e59d0014 	ldr	r0, [sp, #20]
8000eba4:	e59d3014 	ldr	r3, [sp, #20]
8000eba8:	e2800004 	add	r0, r0, #4
8000ebac:	e5933000 	ldr	r3, [r3]
8000ebb0:	e58d0014 	str	r0, [sp, #20]
8000ebb4:	e3a09001 	mov	r9, #1
8000ebb8:	e3a01000 	mov	r1, #0
8000ebbc:	e28d2070 	add	r2, sp, #112	; 0x70
8000ebc0:	e5cd3070 	strb	r3, [sp, #112]	; 0x70
8000ebc4:	e5cd10a7 	strb	r1, [sp, #167]	; 0xa7
8000ebc8:	e58d9008 	str	r9, [sp, #8]
8000ebcc:	e58d2020 	str	r2, [sp, #32]
8000ebd0:	e3a01000 	mov	r1, #0
8000ebd4:	e58d101c 	str	r1, [sp, #28]
8000ebd8:	e21b1002 	ands	r1, fp, #2
8000ebdc:	12899002 	addne	r9, r9, #2
8000ebe0:	e21b2084 	ands	r2, fp, #132	; 0x84
8000ebe4:	e58d1024 	str	r1, [sp, #36]	; 0x24
8000ebe8:	e58d2028 	str	r2, [sp, #40]	; 0x28
8000ebec:	1afffeaa 	bne	8000e69c <_svfiprintf_r+0x378>
8000ebf0:	e59d300c 	ldr	r3, [sp, #12]
8000ebf4:	e0697003 	rsb	r7, r9, r3
8000ebf8:	e3570000 	cmp	r7, #0
8000ebfc:	dafffea6 	ble	8000e69c <_svfiprintf_r+0x378>
8000ec00:	e3570010 	cmp	r7, #16
8000ec04:	da0001d0 	ble	8000f34c <_svfiprintf_r+0x1028>
8000ec08:	e1a01004 	mov	r1, r4
8000ec0c:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000ec10:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000ec14:	e59f8794 	ldr	r8, [pc, #1940]	; 8000f3b0 <_svfiprintf_r+0x108c>
8000ec18:	e3a0a010 	mov	sl, #16
8000ec1c:	e59d4018 	ldr	r4, [sp, #24]
8000ec20:	ea000002 	b	8000ec30 <_svfiprintf_r+0x90c>
8000ec24:	e2477010 	sub	r7, r7, #16
8000ec28:	e3570010 	cmp	r7, #16
8000ec2c:	da000016 	ble	8000ec8c <_svfiprintf_r+0x968>
8000ec30:	e2833001 	add	r3, r3, #1
8000ec34:	e3530007 	cmp	r3, #7
8000ec38:	e8810500 	stm	r1, {r8, sl}
8000ec3c:	e2822010 	add	r2, r2, #16
8000ec40:	d2811008 	addle	r1, r1, #8
8000ec44:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000ec48:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000ec4c:	d2810008 	addle	r0, r1, #8
8000ec50:	dafffff3 	ble	8000ec24 <_svfiprintf_r+0x900>
8000ec54:	e1a00004 	mov	r0, r4
8000ec58:	e1a01006 	mov	r1, r6
8000ec5c:	e28d2098 	add	r2, sp, #152	; 0x98
8000ec60:	ebfffd48 	bl	8000e188 <__ssprint_r>
8000ec64:	e3500000 	cmp	r0, #0
8000ec68:	1a00006f 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000ec6c:	e2477010 	sub	r7, r7, #16
8000ec70:	e28dc030 	add	ip, sp, #48	; 0x30
8000ec74:	e3570010 	cmp	r7, #16
8000ec78:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000ec7c:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000ec80:	e28c0008 	add	r0, ip, #8
8000ec84:	e1a0100c 	mov	r1, ip
8000ec88:	caffffe8 	bgt	8000ec30 <_svfiprintf_r+0x90c>
8000ec8c:	e1a04001 	mov	r4, r1
8000ec90:	e2833001 	add	r3, r3, #1
8000ec94:	e0822007 	add	r2, r2, r7
8000ec98:	e3530007 	cmp	r3, #7
8000ec9c:	e5848000 	str	r8, [r4]
8000eca0:	e5847004 	str	r7, [r4, #4]
8000eca4:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000eca8:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000ecac:	ca00012b 	bgt	8000f160 <_svfiprintf_r+0xe3c>
8000ecb0:	e2801008 	add	r1, r0, #8
8000ecb4:	e1a04000 	mov	r4, r0
8000ecb8:	eafffe7a 	b	8000e6a8 <_svfiprintf_r+0x384>
8000ecbc:	e38bb001 	orr	fp, fp, #1
8000ecc0:	e5d53000 	ldrb	r3, [r5]
8000ecc4:	eafffdd1 	b	8000e410 <_svfiprintf_r+0xec>
8000ecc8:	e1a0c005 	mov	ip, r5
8000eccc:	e3a02000 	mov	r2, #0
8000ecd0:	e2435030 	sub	r5, r3, #48	; 0x30
8000ecd4:	e4dc3001 	ldrb	r3, [ip], #1
8000ecd8:	e2437030 	sub	r7, r3, #48	; 0x30
8000ecdc:	e0822102 	add	r2, r2, r2, lsl #2
8000ece0:	e3570009 	cmp	r7, #9
8000ece4:	e0852082 	add	r2, r5, r2, lsl #1
8000ece8:	e1a0500c 	mov	r5, ip
8000ecec:	9afffff7 	bls	8000ecd0 <_svfiprintf_r+0x9ac>
8000ecf0:	e58d200c 	str	r2, [sp, #12]
8000ecf4:	eafffdc6 	b	8000e414 <_svfiprintf_r+0xf0>
8000ecf8:	e38bb080 	orr	fp, fp, #128	; 0x80
8000ecfc:	e5d53000 	ldrb	r3, [r5]
8000ed00:	eafffdc2 	b	8000e410 <_svfiprintf_r+0xec>
8000ed04:	e5cd10a7 	strb	r1, [sp, #167]	; 0xa7
8000ed08:	e5d53000 	ldrb	r3, [r5]
8000ed0c:	eafffdbf 	b	8000e410 <_svfiprintf_r+0xec>
8000ed10:	e4d53001 	ldrb	r3, [r5], #1
8000ed14:	e353002a 	cmp	r3, #42	; 0x2a
8000ed18:	0a00011a 	beq	8000f188 <_svfiprintf_r+0xe64>
8000ed1c:	e2432030 	sub	r2, r3, #48	; 0x30
8000ed20:	e3520009 	cmp	r2, #9
8000ed24:	83a0a000 	movhi	sl, #0
8000ed28:	8a000008 	bhi	8000ed50 <_svfiprintf_r+0xa2c>
8000ed2c:	e1a0c005 	mov	ip, r5
8000ed30:	e3a0a000 	mov	sl, #0
8000ed34:	e4dc3001 	ldrb	r3, [ip], #1
8000ed38:	e08aa10a 	add	sl, sl, sl, lsl #2
8000ed3c:	e082a08a 	add	sl, r2, sl, lsl #1
8000ed40:	e2432030 	sub	r2, r3, #48	; 0x30
8000ed44:	e3520009 	cmp	r2, #9
8000ed48:	e1a0500c 	mov	r5, ip
8000ed4c:	9afffff8 	bls	8000ed34 <_svfiprintf_r+0xa10>
8000ed50:	e18aafca 	orr	sl, sl, sl, asr #31
8000ed54:	eafffdae 	b	8000e414 <_svfiprintf_r+0xf0>
8000ed58:	e59f1654 	ldr	r1, [pc, #1620]	; 8000f3b4 <_svfiprintf_r+0x1090>
8000ed5c:	e31b0020 	tst	fp, #32
8000ed60:	e58d102c 	str	r1, [sp, #44]	; 0x2c
8000ed64:	1affff7c 	bne	8000eb5c <_svfiprintf_r+0x838>
8000ed68:	e31b0010 	tst	fp, #16
8000ed6c:	0a00013e 	beq	8000f26c <_svfiprintf_r+0xf48>
8000ed70:	e59d1014 	ldr	r1, [sp, #20]
8000ed74:	e5918000 	ldr	r8, [r1]
8000ed78:	e2811004 	add	r1, r1, #4
8000ed7c:	e58d1014 	str	r1, [sp, #20]
8000ed80:	e3a09000 	mov	r9, #0
8000ed84:	eaffff7a 	b	8000eb74 <_svfiprintf_r+0x850>
8000ed88:	e3530000 	cmp	r3, #0
8000ed8c:	0a000020 	beq	8000ee14 <_svfiprintf_r+0xaf0>
8000ed90:	e3a09001 	mov	r9, #1
8000ed94:	eaffff87 	b	8000ebb8 <_svfiprintf_r+0x894>
8000ed98:	e5dd30a7 	ldrb	r3, [sp, #167]	; 0xa7
8000ed9c:	e3530000 	cmp	r3, #0
8000eda0:	15d53000 	ldrbne	r3, [r5]
8000eda4:	05cd00a7 	strbeq	r0, [sp, #167]	; 0xa7
8000eda8:	05d53000 	ldrbeq	r3, [r5]
8000edac:	eafffd97 	b	8000e410 <_svfiprintf_r+0xec>
8000edb0:	e28d3070 	add	r3, sp, #112	; 0x70
8000edb4:	e58d3008 	str	r3, [sp, #8]
8000edb8:	e59d702c 	ldr	r7, [sp, #44]	; 0x2c
8000edbc:	e2833027 	add	r3, r3, #39	; 0x27
8000edc0:	e1a01003 	mov	r1, r3
8000edc4:	e1a00229 	lsr	r0, r9, #4
8000edc8:	e1a0c228 	lsr	ip, r8, #4
8000edcc:	e18cce09 	orr	ip, ip, r9, lsl #28
8000edd0:	e1a03000 	mov	r3, r0
8000edd4:	e208800f 	and	r8, r8, #15
8000edd8:	e7d70008 	ldrb	r0, [r7, r8]
8000eddc:	e1a09003 	mov	r9, r3
8000ede0:	e1a0800c 	mov	r8, ip
8000ede4:	e198c009 	orrs	ip, r8, r9
8000ede8:	e1a03001 	mov	r3, r1
8000edec:	e5c10000 	strb	r0, [r1]
8000edf0:	e2411001 	sub	r1, r1, #1
8000edf4:	1afffff2 	bne	8000edc4 <_svfiprintf_r+0xaa0>
8000edf8:	e58d3020 	str	r3, [sp, #32]
8000edfc:	e59d0008 	ldr	r0, [sp, #8]
8000ee00:	e59d1020 	ldr	r1, [sp, #32]
8000ee04:	e2803028 	add	r3, r0, #40	; 0x28
8000ee08:	e0613003 	rsb	r3, r1, r3
8000ee0c:	e58d3008 	str	r3, [sp, #8]
8000ee10:	eafffe13 	b	8000e664 <_svfiprintf_r+0x340>
8000ee14:	e59d30a0 	ldr	r3, [sp, #160]	; 0xa0
8000ee18:	e3530000 	cmp	r3, #0
8000ee1c:	159d0018 	ldrne	r0, [sp, #24]
8000ee20:	11a01006 	movne	r1, r6
8000ee24:	128d2098 	addne	r2, sp, #152	; 0x98
8000ee28:	1bfffcd6 	blne	8000e188 <__ssprint_r>
8000ee2c:	e1d630bc 	ldrh	r3, [r6, #12]
8000ee30:	e59d0010 	ldr	r0, [sp, #16]
8000ee34:	e3130040 	tst	r3, #64	; 0x40
8000ee38:	13e00000 	mvnne	r0, #0
8000ee3c:	e58d0010 	str	r0, [sp, #16]
8000ee40:	e59d0010 	ldr	r0, [sp, #16]
8000ee44:	e28dd0ac 	add	sp, sp, #172	; 0xac
8000ee48:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000ee4c:	e12fff1e 	bx	lr
8000ee50:	e59dc00c 	ldr	ip, [sp, #12]
8000ee54:	e069700c 	rsb	r7, r9, ip
8000ee58:	e3570000 	cmp	r7, #0
8000ee5c:	d2841008 	addle	r1, r4, #8
8000ee60:	dafffe31 	ble	8000e72c <_svfiprintf_r+0x408>
8000ee64:	e3570010 	cmp	r7, #16
8000ee68:	da00014c 	ble	8000f3a0 <_svfiprintf_r+0x107c>
8000ee6c:	e1a01004 	mov	r1, r4
8000ee70:	e59f8534 	ldr	r8, [pc, #1332]	; 8000f3ac <_svfiprintf_r+0x1088>
8000ee74:	e3a0a010 	mov	sl, #16
8000ee78:	e59d4018 	ldr	r4, [sp, #24]
8000ee7c:	ea000002 	b	8000ee8c <_svfiprintf_r+0xb68>
8000ee80:	e2477010 	sub	r7, r7, #16
8000ee84:	e3570010 	cmp	r7, #16
8000ee88:	da000015 	ble	8000eee4 <_svfiprintf_r+0xbc0>
8000ee8c:	e2833001 	add	r3, r3, #1
8000ee90:	e3530007 	cmp	r3, #7
8000ee94:	e8810500 	stm	r1, {r8, sl}
8000ee98:	e2822010 	add	r2, r2, #16
8000ee9c:	d2811008 	addle	r1, r1, #8
8000eea0:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000eea4:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000eea8:	d2810008 	addle	r0, r1, #8
8000eeac:	dafffff3 	ble	8000ee80 <_svfiprintf_r+0xb5c>
8000eeb0:	e1a00004 	mov	r0, r4
8000eeb4:	e1a01006 	mov	r1, r6
8000eeb8:	e28d2098 	add	r2, sp, #152	; 0x98
8000eebc:	ebfffcb1 	bl	8000e188 <__ssprint_r>
8000eec0:	e3500000 	cmp	r0, #0
8000eec4:	1affffd8 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000eec8:	e2477010 	sub	r7, r7, #16
8000eecc:	e28d1030 	add	r1, sp, #48	; 0x30
8000eed0:	e3570010 	cmp	r7, #16
8000eed4:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000eed8:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000eedc:	e2810008 	add	r0, r1, #8
8000eee0:	caffffe9 	bgt	8000ee8c <_svfiprintf_r+0xb68>
8000eee4:	e1a04001 	mov	r4, r1
8000eee8:	e2833001 	add	r3, r3, #1
8000eeec:	e3530007 	cmp	r3, #7
8000eef0:	e0822007 	add	r2, r2, r7
8000eef4:	e5848000 	str	r8, [r4]
8000eef8:	e5847004 	str	r7, [r4, #4]
8000eefc:	d2801008 	addle	r1, r0, #8
8000ef00:	e58d20a0 	str	r2, [sp, #160]	; 0xa0
8000ef04:	e58d309c 	str	r3, [sp, #156]	; 0x9c
8000ef08:	d1a04000 	movle	r4, r0
8000ef0c:	dafffe06 	ble	8000e72c <_svfiprintf_r+0x408>
8000ef10:	e59d0018 	ldr	r0, [sp, #24]
8000ef14:	e1a01006 	mov	r1, r6
8000ef18:	e28d2098 	add	r2, sp, #152	; 0x98
8000ef1c:	ebfffc99 	bl	8000e188 <__ssprint_r>
8000ef20:	e3500000 	cmp	r0, #0
8000ef24:	1affffc0 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000ef28:	e28dc030 	add	ip, sp, #48	; 0x30
8000ef2c:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000ef30:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000ef34:	e28c1008 	add	r1, ip, #8
8000ef38:	e1a0400c 	mov	r4, ip
8000ef3c:	eafffdfa 	b	8000e72c <_svfiprintf_r+0x408>
8000ef40:	e59d0018 	ldr	r0, [sp, #24]
8000ef44:	e1a01006 	mov	r1, r6
8000ef48:	e28d2098 	add	r2, sp, #152	; 0x98
8000ef4c:	ebfffc8d 	bl	8000e188 <__ssprint_r>
8000ef50:	e3500000 	cmp	r0, #0
8000ef54:	1affffb4 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000ef58:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000ef5c:	e28d1030 	add	r1, sp, #48	; 0x30
8000ef60:	eafffe36 	b	8000e840 <_svfiprintf_r+0x51c>
8000ef64:	e59d0018 	ldr	r0, [sp, #24]
8000ef68:	e1a01006 	mov	r1, r6
8000ef6c:	e28d2098 	add	r2, sp, #152	; 0x98
8000ef70:	ebfffc84 	bl	8000e188 <__ssprint_r>
8000ef74:	e3500000 	cmp	r0, #0
8000ef78:	0afffe65 	beq	8000e914 <_svfiprintf_r+0x5f0>
8000ef7c:	eaffffaa 	b	8000ee2c <_svfiprintf_r+0xb08>
8000ef80:	e28dc098 	add	ip, sp, #152	; 0x98
8000ef84:	e58d2008 	str	r2, [sp, #8]
8000ef88:	e58dc020 	str	ip, [sp, #32]
8000ef8c:	eafffdb4 	b	8000e664 <_svfiprintf_r+0x340>
8000ef90:	e59d0018 	ldr	r0, [sp, #24]
8000ef94:	e1a01006 	mov	r1, r6
8000ef98:	e28d2098 	add	r2, sp, #152	; 0x98
8000ef9c:	ebfffc79 	bl	8000e188 <__ssprint_r>
8000efa0:	e3500000 	cmp	r0, #0
8000efa4:	1affffa0 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000efa8:	e28d4030 	add	r4, sp, #48	; 0x30
8000efac:	eafffd07 	b	8000e3d0 <_svfiprintf_r+0xac>
8000efb0:	e59d0018 	ldr	r0, [sp, #24]
8000efb4:	e1a01006 	mov	r1, r6
8000efb8:	e28d2098 	add	r2, sp, #152	; 0x98
8000efbc:	ebfffc71 	bl	8000e188 <__ssprint_r>
8000efc0:	e3500000 	cmp	r0, #0
8000efc4:	1affff98 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000efc8:	e28dc030 	add	ip, sp, #48	; 0x30
8000efcc:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000efd0:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000efd4:	e28c1008 	add	r1, ip, #8
8000efd8:	e1a0400c 	mov	r4, ip
8000efdc:	eafffdc0 	b	8000e6e4 <_svfiprintf_r+0x3c0>
8000efe0:	e59d0018 	ldr	r0, [sp, #24]
8000efe4:	e1a01006 	mov	r1, r6
8000efe8:	e28d2098 	add	r2, sp, #152	; 0x98
8000efec:	ebfffc65 	bl	8000e188 <__ssprint_r>
8000eff0:	e3500000 	cmp	r0, #0
8000eff4:	1affff8c 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000eff8:	e28dc030 	add	ip, sp, #48	; 0x30
8000effc:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000f000:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000f004:	e28c1008 	add	r1, ip, #8
8000f008:	e1a0400c 	mov	r4, ip
8000f00c:	eafffdc3 	b	8000e720 <_svfiprintf_r+0x3fc>
8000f010:	e3590000 	cmp	r9, #0
8000f014:	03580009 	cmpeq	r8, #9
8000f018:	9a00006d 	bls	8000f1d4 <_svfiprintf_r+0xeb0>
8000f01c:	e28dc070 	add	ip, sp, #112	; 0x70
8000f020:	e58dc008 	str	ip, [sp, #8]
8000f024:	e58d501c 	str	r5, [sp, #28]
8000f028:	e28c7027 	add	r7, ip, #39	; 0x27
8000f02c:	e1a05004 	mov	r5, r4
8000f030:	e1a00008 	mov	r0, r8
8000f034:	e1a01009 	mov	r1, r9
8000f038:	e3a0200a 	mov	r2, #10
8000f03c:	e3a03000 	mov	r3, #0
8000f040:	eb000698 	bl	80010aa8 <__aeabi_uldivmod>
8000f044:	e2822030 	add	r2, r2, #48	; 0x30
8000f048:	e5c72000 	strb	r2, [r7]
8000f04c:	e1a00008 	mov	r0, r8
8000f050:	e1a01009 	mov	r1, r9
8000f054:	e3a0200a 	mov	r2, #10
8000f058:	e3a03000 	mov	r3, #0
8000f05c:	eb000691 	bl	80010aa8 <__aeabi_uldivmod>
8000f060:	e1a08000 	mov	r8, r0
8000f064:	e1a09001 	mov	r9, r1
8000f068:	e1980009 	orrs	r0, r8, r9
8000f06c:	e1a04007 	mov	r4, r7
8000f070:	e2477001 	sub	r7, r7, #1
8000f074:	1affffed 	bne	8000f030 <_svfiprintf_r+0xd0c>
8000f078:	e58d4020 	str	r4, [sp, #32]
8000f07c:	e59d1008 	ldr	r1, [sp, #8]
8000f080:	e59d2020 	ldr	r2, [sp, #32]
8000f084:	e2813028 	add	r3, r1, #40	; 0x28
8000f088:	e0623003 	rsb	r3, r2, r3
8000f08c:	e1a04005 	mov	r4, r5
8000f090:	e58d3008 	str	r3, [sp, #8]
8000f094:	e59d501c 	ldr	r5, [sp, #28]
8000f098:	eafffd71 	b	8000e664 <_svfiprintf_r+0x340>
8000f09c:	e28d0098 	add	r0, sp, #152	; 0x98
8000f0a0:	e58d3008 	str	r3, [sp, #8]
8000f0a4:	e58d0020 	str	r0, [sp, #32]
8000f0a8:	eafffd6d 	b	8000e664 <_svfiprintf_r+0x340>
8000f0ac:	e21b1010 	ands	r1, fp, #16
8000f0b0:	0a000052 	beq	8000f200 <_svfiprintf_r+0xedc>
8000f0b4:	e59d1014 	ldr	r1, [sp, #20]
8000f0b8:	e5912000 	ldr	r2, [r1]
8000f0bc:	e1a08002 	mov	r8, r2
8000f0c0:	e3a09000 	mov	r9, #0
8000f0c4:	e2811004 	add	r1, r1, #4
8000f0c8:	e2522000 	subs	r2, r2, #0
8000f0cc:	13a02001 	movne	r2, #1
8000f0d0:	e58d1014 	str	r1, [sp, #20]
8000f0d4:	eafffd38 	b	8000e5bc <_svfiprintf_r+0x298>
8000f0d8:	e31b0010 	tst	fp, #16
8000f0dc:	1a000043 	bne	8000f1f0 <_svfiprintf_r+0xecc>
8000f0e0:	e31b0040 	tst	fp, #64	; 0x40
8000f0e4:	0a000084 	beq	8000f2fc <_svfiprintf_r+0xfd8>
8000f0e8:	e59d3014 	ldr	r3, [sp, #20]
8000f0ec:	e1d320b0 	ldrh	r2, [r3]
8000f0f0:	e3a03001 	mov	r3, #1
8000f0f4:	e59dc014 	ldr	ip, [sp, #20]
8000f0f8:	e1a08002 	mov	r8, r2
8000f0fc:	e3a09000 	mov	r9, #0
8000f100:	e28cc004 	add	ip, ip, #4
8000f104:	e2522000 	subs	r2, r2, #0
8000f108:	13a02001 	movne	r2, #1
8000f10c:	e58dc014 	str	ip, [sp, #20]
8000f110:	eafffd29 	b	8000e5bc <_svfiprintf_r+0x298>
8000f114:	e31b0010 	tst	fp, #16
8000f118:	0a00003e 	beq	8000f218 <_svfiprintf_r+0xef4>
8000f11c:	e59d1014 	ldr	r1, [sp, #20]
8000f120:	e5918000 	ldr	r8, [r1]
8000f124:	e1a09fc8 	asr	r9, r8, #31
8000f128:	e2811004 	add	r1, r1, #4
8000f12c:	e3580000 	cmp	r8, #0
8000f130:	e2d9c000 	sbcs	ip, r9, #0
8000f134:	e58d1014 	str	r1, [sp, #20]
8000f138:	aafffe18 	bge	8000e9a0 <_svfiprintf_r+0x67c>
8000f13c:	e2788000 	rsbs	r8, r8, #0
8000f140:	e2e99000 	rsc	r9, r9, #0
8000f144:	e3a0302d 	mov	r3, #45	; 0x2d
8000f148:	e1981009 	orrs	r1, r8, r9
8000f14c:	e5cd30a7 	strb	r3, [sp, #167]	; 0xa7
8000f150:	03a02000 	moveq	r2, #0
8000f154:	13a02001 	movne	r2, #1
8000f158:	e3a03001 	mov	r3, #1
8000f15c:	eafffd18 	b	8000e5c4 <_svfiprintf_r+0x2a0>
8000f160:	e59d0018 	ldr	r0, [sp, #24]
8000f164:	e1a01006 	mov	r1, r6
8000f168:	e28d2098 	add	r2, sp, #152	; 0x98
8000f16c:	ebfffc05 	bl	8000e188 <__ssprint_r>
8000f170:	e3500000 	cmp	r0, #0
8000f174:	1affff2c 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000f178:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000f17c:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000f180:	e28d0030 	add	r0, sp, #48	; 0x30
8000f184:	eafffec9 	b	8000ecb0 <_svfiprintf_r+0x98c>
8000f188:	e59dc014 	ldr	ip, [sp, #20]
8000f18c:	e59ca000 	ldr	sl, [ip]
8000f190:	e28c2004 	add	r2, ip, #4
8000f194:	e35a0000 	cmp	sl, #0
8000f198:	b5d53000 	ldrblt	r3, [r5]
8000f19c:	b3e0a000 	mvnlt	sl, #0
8000f1a0:	b58d2014 	strlt	r2, [sp, #20]
8000f1a4:	bafffc99 	blt	8000e410 <_svfiprintf_r+0xec>
8000f1a8:	e5d53000 	ldrb	r3, [r5]
8000f1ac:	e58d2014 	str	r2, [sp, #20]
8000f1b0:	eafffc96 	b	8000e410 <_svfiprintf_r+0xec>
8000f1b4:	e59d0018 	ldr	r0, [sp, #24]
8000f1b8:	e1a01006 	mov	r1, r6
8000f1bc:	e28d2098 	add	r2, sp, #152	; 0x98
8000f1c0:	ebfffbf0 	bl	8000e188 <__ssprint_r>
8000f1c4:	e3500000 	cmp	r0, #0
8000f1c8:	1affff17 	bne	8000ee2c <_svfiprintf_r+0xb08>
8000f1cc:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000f1d0:	eafffdc7 	b	8000e8f4 <_svfiprintf_r+0x5d0>
8000f1d4:	e2888030 	add	r8, r8, #48	; 0x30
8000f1d8:	e3a02001 	mov	r2, #1
8000f1dc:	e28d3097 	add	r3, sp, #151	; 0x97
8000f1e0:	e5cd8097 	strb	r8, [sp, #151]	; 0x97
8000f1e4:	e58d2008 	str	r2, [sp, #8]
8000f1e8:	e58d3020 	str	r3, [sp, #32]
8000f1ec:	eafffd1c 	b	8000e664 <_svfiprintf_r+0x340>
8000f1f0:	e59d1014 	ldr	r1, [sp, #20]
8000f1f4:	e3a03001 	mov	r3, #1
8000f1f8:	e5912000 	ldr	r2, [r1]
8000f1fc:	eaffffae 	b	8000f0bc <_svfiprintf_r+0xd98>
8000f200:	e21b3040 	ands	r3, fp, #64	; 0x40
8000f204:	0a000033 	beq	8000f2d8 <_svfiprintf_r+0xfb4>
8000f208:	e59d3014 	ldr	r3, [sp, #20]
8000f20c:	e1d320b0 	ldrh	r2, [r3]
8000f210:	e1a03001 	mov	r3, r1
8000f214:	eaffffb6 	b	8000f0f4 <_svfiprintf_r+0xdd0>
8000f218:	e31b0040 	tst	fp, #64	; 0x40
8000f21c:	159d2014 	ldrne	r2, [sp, #20]
8000f220:	059d3014 	ldreq	r3, [sp, #20]
8000f224:	11d280f0 	ldrshne	r8, [r2]
8000f228:	05938000 	ldreq	r8, [r3]
8000f22c:	12822004 	addne	r2, r2, #4
8000f230:	02833004 	addeq	r3, r3, #4
8000f234:	158d2014 	strne	r2, [sp, #20]
8000f238:	058d3014 	streq	r3, [sp, #20]
8000f23c:	e1a09fc8 	asr	r9, r8, #31
8000f240:	eafffdd3 	b	8000e994 <_svfiprintf_r+0x670>
8000f244:	e59d2014 	ldr	r2, [sp, #20]
8000f248:	e59dc010 	ldr	ip, [sp, #16]
8000f24c:	e59d0014 	ldr	r0, [sp, #20]
8000f250:	e5923000 	ldr	r3, [r2]
8000f254:	e2800004 	add	r0, r0, #4
8000f258:	e1a0100c 	mov	r1, ip
8000f25c:	e1a02fc1 	asr	r2, r1, #31
8000f260:	e8830006 	stm	r3, {r1, r2}
8000f264:	e58d0014 	str	r0, [sp, #20]
8000f268:	eafffc41 	b	8000e374 <_svfiprintf_r+0x50>
8000f26c:	e31b0040 	tst	fp, #64	; 0x40
8000f270:	159d2014 	ldrne	r2, [sp, #20]
8000f274:	059dc014 	ldreq	ip, [sp, #20]
8000f278:	11d280b0 	ldrhne	r8, [r2]
8000f27c:	059c8000 	ldreq	r8, [ip]
8000f280:	12822004 	addne	r2, r2, #4
8000f284:	028cc004 	addeq	ip, ip, #4
8000f288:	158d2014 	strne	r2, [sp, #20]
8000f28c:	058dc014 	streq	ip, [sp, #20]
8000f290:	e3a09000 	mov	r9, #0
8000f294:	eafffe36 	b	8000eb74 <_svfiprintf_r+0x850>
8000f298:	e59d0020 	ldr	r0, [sp, #32]
8000f29c:	ebfffba1 	bl	8000e128 <strlen>
8000f2a0:	e3a03000 	mov	r3, #0
8000f2a4:	e58d0008 	str	r0, [sp, #8]
8000f2a8:	e58d301c 	str	r3, [sp, #28]
8000f2ac:	eafffced 	b	8000e668 <_svfiprintf_r+0x344>
8000f2b0:	e59d1014 	ldr	r1, [sp, #20]
8000f2b4:	e59d2010 	ldr	r2, [sp, #16]
8000f2b8:	e5913000 	ldr	r3, [r1]
8000f2bc:	e2811004 	add	r1, r1, #4
8000f2c0:	e58d1014 	str	r1, [sp, #20]
8000f2c4:	e5832000 	str	r2, [r3]
8000f2c8:	eafffc29 	b	8000e374 <_svfiprintf_r+0x50>
8000f2cc:	e59f80d8 	ldr	r8, [pc, #216]	; 8000f3ac <_svfiprintf_r+0x1088>
8000f2d0:	e1a00001 	mov	r0, r1
8000f2d4:	eafffd3a 	b	8000e7c4 <_svfiprintf_r+0x4a0>
8000f2d8:	e59d0014 	ldr	r0, [sp, #20]
8000f2dc:	e5902000 	ldr	r2, [r0]
8000f2e0:	e1a08002 	mov	r8, r2
8000f2e4:	e3a09000 	mov	r9, #0
8000f2e8:	e2800004 	add	r0, r0, #4
8000f2ec:	e2522000 	subs	r2, r2, #0
8000f2f0:	13a02001 	movne	r2, #1
8000f2f4:	e58d0014 	str	r0, [sp, #20]
8000f2f8:	eafffcaf 	b	8000e5bc <_svfiprintf_r+0x298>
8000f2fc:	e59d0014 	ldr	r0, [sp, #20]
8000f300:	e3a03001 	mov	r3, #1
8000f304:	e5902000 	ldr	r2, [r0]
8000f308:	eafffff4 	b	8000f2e0 <_svfiprintf_r+0xfbc>
8000f30c:	e3a01040 	mov	r1, #64	; 0x40
8000f310:	e58d2004 	str	r2, [sp, #4]
8000f314:	ebfff57f 	bl	8000c918 <_malloc_r>
8000f318:	e3500000 	cmp	r0, #0
8000f31c:	13a03040 	movne	r3, #64	; 0x40
8000f320:	e59d2004 	ldr	r2, [sp, #4]
8000f324:	e5860000 	str	r0, [r6]
8000f328:	e5860010 	str	r0, [r6, #16]
8000f32c:	15863014 	strne	r3, [r6, #20]
8000f330:	1afffc06 	bne	8000e350 <_svfiprintf_r+0x2c>
8000f334:	e59d0018 	ldr	r0, [sp, #24]
8000f338:	e3a0300c 	mov	r3, #12
8000f33c:	e3e01000 	mvn	r1, #0
8000f340:	e5803000 	str	r3, [r0]
8000f344:	e58d1010 	str	r1, [sp, #16]
8000f348:	eafffebc 	b	8000ee40 <_svfiprintf_r+0xb1c>
8000f34c:	e2840008 	add	r0, r4, #8
8000f350:	e59d20a0 	ldr	r2, [sp, #160]	; 0xa0
8000f354:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000f358:	e59f8050 	ldr	r8, [pc, #80]	; 8000f3b0 <_svfiprintf_r+0x108c>
8000f35c:	eafffe4b 	b	8000ec90 <_svfiprintf_r+0x96c>
8000f360:	e59d2008 	ldr	r2, [sp, #8]
8000f364:	e59dc020 	ldr	ip, [sp, #32]
8000f368:	e2823028 	add	r3, r2, #40	; 0x28
8000f36c:	e06c3003 	rsb	r3, ip, r3
8000f370:	e58d3008 	str	r3, [sp, #8]
8000f374:	eafffcba 	b	8000e664 <_svfiprintf_r+0x340>
8000f378:	e59f103c 	ldr	r1, [pc, #60]	; 8000f3bc <_svfiprintf_r+0x1098>
8000f37c:	e35a0006 	cmp	sl, #6
8000f380:	23a0a006 	movcs	sl, #6
8000f384:	e58da008 	str	sl, [sp, #8]
8000f388:	e1ca9fca 	bic	r9, sl, sl, asr #31
8000f38c:	e58d1020 	str	r1, [sp, #32]
8000f390:	eafffe0e 	b	8000ebd0 <_svfiprintf_r+0x8ac>
8000f394:	e59d309c 	ldr	r3, [sp, #156]	; 0x9c
8000f398:	e59f8010 	ldr	r8, [pc, #16]	; 8000f3b0 <_svfiprintf_r+0x108c>
8000f39c:	eafffd4c 	b	8000e8d4 <_svfiprintf_r+0x5b0>
8000f3a0:	e59f8004 	ldr	r8, [pc, #4]	; 8000f3ac <_svfiprintf_r+0x1088>
8000f3a4:	e1a00001 	mov	r0, r1
8000f3a8:	eafffece 	b	8000eee8 <_svfiprintf_r+0xbc4>
8000f3ac:	800126d0 	.word	0x800126d0
8000f3b0:	800126c0 	.word	0x800126c0
8000f3b4:	80012708 	.word	0x80012708
8000f3b8:	800126f4 	.word	0x800126f4
8000f3bc:	8001271c 	.word	0x8001271c

8000f3c0 <_calloc_r>:
8000f3c0:	e92d4010 	push	{r4, lr}
8000f3c4:	e0010192 	mul	r1, r2, r1
8000f3c8:	ebfff552 	bl	8000c918 <_malloc_r>
8000f3cc:	e2504000 	subs	r4, r0, #0
8000f3d0:	0a00001b 	beq	8000f444 <_calloc_r+0x84>
8000f3d4:	e5142004 	ldr	r2, [r4, #-4]
8000f3d8:	e3c22003 	bic	r2, r2, #3
8000f3dc:	e2422004 	sub	r2, r2, #4
8000f3e0:	e3520024 	cmp	r2, #36	; 0x24
8000f3e4:	8a000019 	bhi	8000f450 <_calloc_r+0x90>
8000f3e8:	e3520013 	cmp	r2, #19
8000f3ec:	e1a03004 	mov	r3, r4
8000f3f0:	9a00000e 	bls	8000f430 <_calloc_r+0x70>
8000f3f4:	e3a01000 	mov	r1, #0
8000f3f8:	e1a00004 	mov	r0, r4
8000f3fc:	e4801004 	str	r1, [r0], #4
8000f400:	e352001b 	cmp	r2, #27
8000f404:	e5841004 	str	r1, [r4, #4]
8000f408:	e2803004 	add	r3, r0, #4
8000f40c:	9a000007 	bls	8000f430 <_calloc_r+0x70>
8000f410:	e3520024 	cmp	r2, #36	; 0x24
8000f414:	e5801004 	str	r1, [r0, #4]
8000f418:	e283c004 	add	ip, r3, #4
8000f41c:	e5831004 	str	r1, [r3, #4]
8000f420:	e2833008 	add	r3, r3, #8
8000f424:	058c1004 	streq	r1, [ip, #4]
8000f428:	05831004 	streq	r1, [r3, #4]
8000f42c:	02833008 	addeq	r3, r3, #8
8000f430:	e3a01000 	mov	r1, #0
8000f434:	e1a02003 	mov	r2, r3
8000f438:	e4821004 	str	r1, [r2], #4
8000f43c:	e5831004 	str	r1, [r3, #4]
8000f440:	e5821004 	str	r1, [r2, #4]
8000f444:	e1a00004 	mov	r0, r4
8000f448:	e8bd4010 	pop	{r4, lr}
8000f44c:	e12fff1e 	bx	lr
8000f450:	e3a01000 	mov	r1, #0
8000f454:	ebffe641 	bl	80008d60 <memset>
8000f458:	eafffff9 	b	8000f444 <_calloc_r+0x84>

8000f45c <_malloc_trim_r>:
8000f45c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
8000f460:	e59f50e4 	ldr	r5, [pc, #228]	; 8000f54c <_malloc_trim_r+0xf0>
8000f464:	e1a07001 	mov	r7, r1
8000f468:	e1a04000 	mov	r4, r0
8000f46c:	ebfff72d 	bl	8000d128 <__malloc_lock>
8000f470:	e5953008 	ldr	r3, [r5, #8]
8000f474:	e5936004 	ldr	r6, [r3, #4]
8000f478:	e3c66003 	bic	r6, r6, #3
8000f47c:	e2863efe 	add	r3, r6, #4064	; 0xfe0
8000f480:	e283300f 	add	r3, r3, #15
8000f484:	e0677003 	rsb	r7, r7, r3
8000f488:	e1a07627 	lsr	r7, r7, #12
8000f48c:	e2477001 	sub	r7, r7, #1
8000f490:	e1a07607 	lsl	r7, r7, #12
8000f494:	e3570a01 	cmp	r7, #4096	; 0x1000
8000f498:	ba000006 	blt	8000f4b8 <_malloc_trim_r+0x5c>
8000f49c:	e1a00004 	mov	r0, r4
8000f4a0:	e3a01000 	mov	r1, #0
8000f4a4:	ebfffa83 	bl	8000deb8 <_sbrk_r>
8000f4a8:	e5953008 	ldr	r3, [r5, #8]
8000f4ac:	e0833006 	add	r3, r3, r6
8000f4b0:	e1500003 	cmp	r0, r3
8000f4b4:	0a000004 	beq	8000f4cc <_malloc_trim_r+0x70>
8000f4b8:	e1a00004 	mov	r0, r4
8000f4bc:	ebfff71a 	bl	8000d12c <__malloc_unlock>
8000f4c0:	e3a00000 	mov	r0, #0
8000f4c4:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
8000f4c8:	e12fff1e 	bx	lr
8000f4cc:	e1a00004 	mov	r0, r4
8000f4d0:	e2671000 	rsb	r1, r7, #0
8000f4d4:	ebfffa77 	bl	8000deb8 <_sbrk_r>
8000f4d8:	e3700001 	cmn	r0, #1
8000f4dc:	0a00000b 	beq	8000f510 <_malloc_trim_r+0xb4>
8000f4e0:	e59f3068 	ldr	r3, [pc, #104]	; 8000f550 <_malloc_trim_r+0xf4>
8000f4e4:	e5931000 	ldr	r1, [r3]
8000f4e8:	e5952008 	ldr	r2, [r5, #8]
8000f4ec:	e0676006 	rsb	r6, r7, r6
8000f4f0:	e3866001 	orr	r6, r6, #1
8000f4f4:	e0677001 	rsb	r7, r7, r1
8000f4f8:	e1a00004 	mov	r0, r4
8000f4fc:	e5826004 	str	r6, [r2, #4]
8000f500:	e5837000 	str	r7, [r3]
8000f504:	ebfff708 	bl	8000d12c <__malloc_unlock>
8000f508:	e3a00001 	mov	r0, #1
8000f50c:	eaffffec 	b	8000f4c4 <_malloc_trim_r+0x68>
8000f510:	e1a00004 	mov	r0, r4
8000f514:	e3a01000 	mov	r1, #0
8000f518:	ebfffa66 	bl	8000deb8 <_sbrk_r>
8000f51c:	e5953008 	ldr	r3, [r5, #8]
8000f520:	e0632000 	rsb	r2, r3, r0
8000f524:	e352000f 	cmp	r2, #15
8000f528:	daffffe2 	ble	8000f4b8 <_malloc_trim_r+0x5c>
8000f52c:	e59f1020 	ldr	r1, [pc, #32]	; 8000f554 <_malloc_trim_r+0xf8>
8000f530:	e5911000 	ldr	r1, [r1]
8000f534:	e0610000 	rsb	r0, r1, r0
8000f538:	e59f1010 	ldr	r1, [pc, #16]	; 8000f550 <_malloc_trim_r+0xf4>
8000f53c:	e3822001 	orr	r2, r2, #1
8000f540:	e5810000 	str	r0, [r1]
8000f544:	e5832004 	str	r2, [r3, #4]
8000f548:	eaffffda 	b	8000f4b8 <_malloc_trim_r+0x5c>
8000f54c:	80011954 	.word	0x80011954
8000f550:	80012788 	.word	0x80012788
8000f554:	80011d5c 	.word	0x80011d5c

8000f558 <_free_r>:
8000f558:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
8000f55c:	e2515000 	subs	r5, r1, #0
8000f560:	e1a04000 	mov	r4, r0
8000f564:	0a00005c 	beq	8000f6dc <_free_r+0x184>
8000f568:	ebfff6ee 	bl	8000d128 <__malloc_lock>
8000f56c:	e2452008 	sub	r2, r5, #8
8000f570:	e5920004 	ldr	r0, [r2, #4]
8000f574:	e59fc22c 	ldr	ip, [pc, #556]	; 8000f7a8 <_free_r+0x250>
8000f578:	e3c03001 	bic	r3, r0, #1
8000f57c:	e0821003 	add	r1, r2, r3
8000f580:	e59c6008 	ldr	r6, [ip, #8]
8000f584:	e591e004 	ldr	lr, [r1, #4]
8000f588:	e1560001 	cmp	r6, r1
8000f58c:	e3cee003 	bic	lr, lr, #3
8000f590:	0a000060 	beq	8000f718 <_free_r+0x1c0>
8000f594:	e2100001 	ands	r0, r0, #1
8000f598:	e581e004 	str	lr, [r1, #4]
8000f59c:	13a00000 	movne	r0, #0
8000f5a0:	1a000009 	bne	8000f5cc <_free_r+0x74>
8000f5a4:	e5156008 	ldr	r6, [r5, #-8]
8000f5a8:	e0662002 	rsb	r2, r6, r2
8000f5ac:	e5925008 	ldr	r5, [r2, #8]
8000f5b0:	e28c7008 	add	r7, ip, #8
8000f5b4:	e1550007 	cmp	r5, r7
8000f5b8:	e0833006 	add	r3, r3, r6
8000f5bc:	1592600c 	ldrne	r6, [r2, #12]
8000f5c0:	1585600c 	strne	r6, [r5, #12]
8000f5c4:	15865008 	strne	r5, [r6, #8]
8000f5c8:	03a00001 	moveq	r0, #1
8000f5cc:	e081500e 	add	r5, r1, lr
8000f5d0:	e5955004 	ldr	r5, [r5, #4]
8000f5d4:	e3150001 	tst	r5, #1
8000f5d8:	1a00000a 	bne	8000f608 <_free_r+0xb0>
8000f5dc:	e3500000 	cmp	r0, #0
8000f5e0:	e083300e 	add	r3, r3, lr
8000f5e4:	1591e008 	ldrne	lr, [r1, #8]
8000f5e8:	1a000003 	bne	8000f5fc <_free_r+0xa4>
8000f5ec:	e591e008 	ldr	lr, [r1, #8]
8000f5f0:	e59f51b4 	ldr	r5, [pc, #436]	; 8000f7ac <_free_r+0x254>
8000f5f4:	e15e0005 	cmp	lr, r5
8000f5f8:	0a00005c 	beq	8000f770 <_free_r+0x218>
8000f5fc:	e591100c 	ldr	r1, [r1, #12]
8000f600:	e58e100c 	str	r1, [lr, #12]
8000f604:	e581e008 	str	lr, [r1, #8]
8000f608:	e3831001 	orr	r1, r3, #1
8000f60c:	e3500000 	cmp	r0, #0
8000f610:	e5821004 	str	r1, [r2, #4]
8000f614:	e7823003 	str	r3, [r2, r3]
8000f618:	1a00002d 	bne	8000f6d4 <_free_r+0x17c>
8000f61c:	e3530c02 	cmp	r3, #512	; 0x200
8000f620:	3a00002f 	bcc	8000f6e4 <_free_r+0x18c>
8000f624:	e1a014a3 	lsr	r1, r3, #9
8000f628:	e3510004 	cmp	r1, #4
8000f62c:	91a00323 	lsrls	r0, r3, #6
8000f630:	92800038 	addls	r0, r0, #56	; 0x38
8000f634:	91a0e180 	lslls	lr, r0, #3
8000f638:	9a000014 	bls	8000f690 <_free_r+0x138>
8000f63c:	e3510014 	cmp	r1, #20
8000f640:	9281005b 	addls	r0, r1, #91	; 0x5b
8000f644:	91a0e180 	lslls	lr, r0, #3
8000f648:	9a000010 	bls	8000f690 <_free_r+0x138>
8000f64c:	e3510054 	cmp	r1, #84	; 0x54
8000f650:	91a00623 	lsrls	r0, r3, #12
8000f654:	9280006e 	addls	r0, r0, #110	; 0x6e
8000f658:	91a0e180 	lslls	lr, r0, #3
8000f65c:	9a00000b 	bls	8000f690 <_free_r+0x138>
8000f660:	e3510f55 	cmp	r1, #340	; 0x154
8000f664:	91a007a3 	lsrls	r0, r3, #15
8000f668:	92800077 	addls	r0, r0, #119	; 0x77
8000f66c:	91a0e180 	lslls	lr, r0, #3
8000f670:	9a000006 	bls	8000f690 <_free_r+0x138>
8000f674:	e59f0134 	ldr	r0, [pc, #308]	; 8000f7b0 <_free_r+0x258>
8000f678:	e1510000 	cmp	r1, r0
8000f67c:	91a00923 	lsrls	r0, r3, #18
8000f680:	9280007c 	addls	r0, r0, #124	; 0x7c
8000f684:	91a0e180 	lslls	lr, r0, #3
8000f688:	83a0ee3f 	movhi	lr, #1008	; 0x3f0
8000f68c:	83a0007e 	movhi	r0, #126	; 0x7e
8000f690:	e08ce00e 	add	lr, ip, lr
8000f694:	e59e1008 	ldr	r1, [lr, #8]
8000f698:	e151000e 	cmp	r1, lr
8000f69c:	1a000003 	bne	8000f6b0 <_free_r+0x158>
8000f6a0:	ea000039 	b	8000f78c <_free_r+0x234>
8000f6a4:	e5911008 	ldr	r1, [r1, #8]
8000f6a8:	e15e0001 	cmp	lr, r1
8000f6ac:	0a000003 	beq	8000f6c0 <_free_r+0x168>
8000f6b0:	e5910004 	ldr	r0, [r1, #4]
8000f6b4:	e3c00003 	bic	r0, r0, #3
8000f6b8:	e1530000 	cmp	r3, r0
8000f6bc:	3afffff8 	bcc	8000f6a4 <_free_r+0x14c>
8000f6c0:	e591300c 	ldr	r3, [r1, #12]
8000f6c4:	e582300c 	str	r3, [r2, #12]
8000f6c8:	e5821008 	str	r1, [r2, #8]
8000f6cc:	e581200c 	str	r2, [r1, #12]
8000f6d0:	e5832008 	str	r2, [r3, #8]
8000f6d4:	e1a00004 	mov	r0, r4
8000f6d8:	ebfff693 	bl	8000d12c <__malloc_unlock>
8000f6dc:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
8000f6e0:	e12fff1e 	bx	lr
8000f6e4:	e59c1004 	ldr	r1, [ip, #4]
8000f6e8:	e1a031a3 	lsr	r3, r3, #3
8000f6ec:	e1a00143 	asr	r0, r3, #2
8000f6f0:	e3a0e001 	mov	lr, #1
8000f6f4:	e181001e 	orr	r0, r1, lr, lsl r0
8000f6f8:	e08c3183 	add	r3, ip, r3, lsl #3
8000f6fc:	e5931008 	ldr	r1, [r3, #8]
8000f700:	e582300c 	str	r3, [r2, #12]
8000f704:	e5821008 	str	r1, [r2, #8]
8000f708:	e58c0004 	str	r0, [ip, #4]
8000f70c:	e5832008 	str	r2, [r3, #8]
8000f710:	e581200c 	str	r2, [r1, #12]
8000f714:	eaffffee 	b	8000f6d4 <_free_r+0x17c>
8000f718:	e3100001 	tst	r0, #1
8000f71c:	e08e3003 	add	r3, lr, r3
8000f720:	1a000006 	bne	8000f740 <_free_r+0x1e8>
8000f724:	e5151008 	ldr	r1, [r5, #-8]
8000f728:	e0612002 	rsb	r2, r1, r2
8000f72c:	e592000c 	ldr	r0, [r2, #12]
8000f730:	e592e008 	ldr	lr, [r2, #8]
8000f734:	e58e000c 	str	r0, [lr, #12]
8000f738:	e580e008 	str	lr, [r0, #8]
8000f73c:	e0833001 	add	r3, r3, r1
8000f740:	e59f106c 	ldr	r1, [pc, #108]	; 8000f7b4 <_free_r+0x25c>
8000f744:	e5910000 	ldr	r0, [r1]
8000f748:	e3831001 	orr	r1, r3, #1
8000f74c:	e1530000 	cmp	r3, r0
8000f750:	e5821004 	str	r1, [r2, #4]
8000f754:	e58c2008 	str	r2, [ip, #8]
8000f758:	3affffdd 	bcc	8000f6d4 <_free_r+0x17c>
8000f75c:	e59f3054 	ldr	r3, [pc, #84]	; 8000f7b8 <_free_r+0x260>
8000f760:	e1a00004 	mov	r0, r4
8000f764:	e5931000 	ldr	r1, [r3]
8000f768:	ebffff3b 	bl	8000f45c <_malloc_trim_r>
8000f76c:	eaffffd8 	b	8000f6d4 <_free_r+0x17c>
8000f770:	e3831001 	orr	r1, r3, #1
8000f774:	e58e200c 	str	r2, [lr, #12]
8000f778:	e58e2008 	str	r2, [lr, #8]
8000f77c:	e582e00c 	str	lr, [r2, #12]
8000f780:	e9824002 	stmib	r2, {r1, lr}
8000f784:	e7823003 	str	r3, [r2, r3]
8000f788:	eaffffd1 	b	8000f6d4 <_free_r+0x17c>
8000f78c:	e59c3004 	ldr	r3, [ip, #4]
8000f790:	e1a00140 	asr	r0, r0, #2
8000f794:	e3a0e001 	mov	lr, #1
8000f798:	e183001e 	orr	r0, r3, lr, lsl r0
8000f79c:	e1a03001 	mov	r3, r1
8000f7a0:	e58c0004 	str	r0, [ip, #4]
8000f7a4:	eaffffc6 	b	8000f6c4 <_free_r+0x16c>
8000f7a8:	80011954 	.word	0x80011954
8000f7ac:	8001195c 	.word	0x8001195c
8000f7b0:	00000554 	.word	0x00000554
8000f7b4:	80011d60 	.word	0x80011d60
8000f7b8:	80012784 	.word	0x80012784

8000f7bc <memmove>:
8000f7bc:	e1500001 	cmp	r0, r1
8000f7c0:	e92d00f0 	push	{r4, r5, r6, r7}
8000f7c4:	e1a03000 	mov	r3, r0
8000f7c8:	e1a0c001 	mov	ip, r1
8000f7cc:	9a00000d 	bls	8000f808 <memmove+0x4c>
8000f7d0:	e0814002 	add	r4, r1, r2
8000f7d4:	e1500004 	cmp	r0, r4
8000f7d8:	2a00000a 	bcs	8000f808 <memmove+0x4c>
8000f7dc:	e3520000 	cmp	r2, #0
8000f7e0:	0a000006 	beq	8000f800 <memmove+0x44>
8000f7e4:	e0803002 	add	r3, r0, r2
8000f7e8:	e1a01004 	mov	r1, r4
8000f7ec:	e0622003 	rsb	r2, r2, r3
8000f7f0:	e571c001 	ldrb	ip, [r1, #-1]!
8000f7f4:	e563c001 	strb	ip, [r3, #-1]!
8000f7f8:	e1530002 	cmp	r3, r2
8000f7fc:	1afffffb 	bne	8000f7f0 <memmove+0x34>
8000f800:	e8bd00f0 	pop	{r4, r5, r6, r7}
8000f804:	e12fff1e 	bx	lr
8000f808:	e352000f 	cmp	r2, #15
8000f80c:	9a00002b 	bls	8000f8c0 <memmove+0x104>
8000f810:	e1814000 	orr	r4, r1, r0
8000f814:	e3140003 	tst	r4, #3
8000f818:	1a00002a 	bne	8000f8c8 <memmove+0x10c>
8000f81c:	e2425010 	sub	r5, r2, #16
8000f820:	e1a06225 	lsr	r6, r5, #4
8000f824:	e2814010 	add	r4, r1, #16
8000f828:	e0844206 	add	r4, r4, r6, lsl #4
8000f82c:	e1a03001 	mov	r3, r1
8000f830:	e1a02000 	mov	r2, r0
8000f834:	e593c000 	ldr	ip, [r3]
8000f838:	e582c000 	str	ip, [r2]
8000f83c:	e593c004 	ldr	ip, [r3, #4]
8000f840:	e582c004 	str	ip, [r2, #4]
8000f844:	e593c008 	ldr	ip, [r3, #8]
8000f848:	e582c008 	str	ip, [r2, #8]
8000f84c:	e593c00c 	ldr	ip, [r3, #12]
8000f850:	e2833010 	add	r3, r3, #16
8000f854:	e1540003 	cmp	r4, r3
8000f858:	e582c00c 	str	ip, [r2, #12]
8000f85c:	e2822010 	add	r2, r2, #16
8000f860:	1afffff3 	bne	8000f834 <memmove+0x78>
8000f864:	e286c001 	add	ip, r6, #1
8000f868:	e205200f 	and	r2, r5, #15
8000f86c:	e1a0c20c 	lsl	ip, ip, #4
8000f870:	e3520003 	cmp	r2, #3
8000f874:	e080300c 	add	r3, r0, ip
8000f878:	e081100c 	add	r1, r1, ip
8000f87c:	9a00000e 	bls	8000f8bc <memmove+0x100>
8000f880:	e2422004 	sub	r2, r2, #4
8000f884:	e1a07122 	lsr	r7, r2, #2
8000f888:	e0816107 	add	r6, r1, r7, lsl #2
8000f88c:	e1a0c001 	mov	ip, r1
8000f890:	e2866004 	add	r6, r6, #4
8000f894:	e1a04003 	mov	r4, r3
8000f898:	e49c5004 	ldr	r5, [ip], #4
8000f89c:	e15c0006 	cmp	ip, r6
8000f8a0:	e4845004 	str	r5, [r4], #4
8000f8a4:	1afffffb 	bne	8000f898 <memmove+0xdc>
8000f8a8:	e287c001 	add	ip, r7, #1
8000f8ac:	e1a0c10c 	lsl	ip, ip, #2
8000f8b0:	e083300c 	add	r3, r3, ip
8000f8b4:	e081100c 	add	r1, r1, ip
8000f8b8:	e2022003 	and	r2, r2, #3
8000f8bc:	e1a0c001 	mov	ip, r1
8000f8c0:	e3520000 	cmp	r2, #0
8000f8c4:	0affffcd 	beq	8000f800 <memmove+0x44>
8000f8c8:	e1a0100c 	mov	r1, ip
8000f8cc:	e08c2002 	add	r2, ip, r2
8000f8d0:	e4d1c001 	ldrb	ip, [r1], #1
8000f8d4:	e1510002 	cmp	r1, r2
8000f8d8:	e4c3c001 	strb	ip, [r3], #1
8000f8dc:	1afffffb 	bne	8000f8d0 <memmove+0x114>
8000f8e0:	eaffffc6 	b	8000f800 <memmove+0x44>

8000f8e4 <_realloc_r>:
8000f8e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000f8e8:	e2516000 	subs	r6, r1, #0
8000f8ec:	e24dd00c 	sub	sp, sp, #12
8000f8f0:	e1a08000 	mov	r8, r0
8000f8f4:	e1a07002 	mov	r7, r2
8000f8f8:	0a0000f8 	beq	8000fce0 <_realloc_r+0x3fc>
8000f8fc:	ebfff609 	bl	8000d128 <__malloc_lock>
8000f900:	e287400b 	add	r4, r7, #11
8000f904:	e3540016 	cmp	r4, #22
8000f908:	83c44007 	bichi	r4, r4, #7
8000f90c:	93a02010 	movls	r2, #16
8000f910:	81a00fa4 	lsrhi	r0, r4, #31
8000f914:	93a00000 	movls	r0, #0
8000f918:	91a04002 	movls	r4, r2
8000f91c:	81a02004 	movhi	r2, r4
8000f920:	e1540007 	cmp	r4, r7
8000f924:	33800001 	orrcc	r0, r0, #1
8000f928:	e3500000 	cmp	r0, #0
8000f92c:	e2469008 	sub	r9, r6, #8
8000f930:	13a0300c 	movne	r3, #12
8000f934:	e599c004 	ldr	ip, [r9, #4]
8000f938:	13a07000 	movne	r7, #0
8000f93c:	15883000 	strne	r3, [r8]
8000f940:	1a00005c 	bne	8000fab8 <_realloc_r+0x1d4>
8000f944:	e3ccb003 	bic	fp, ip, #3
8000f948:	e15b0002 	cmp	fp, r2
8000f94c:	a2897008 	addge	r7, r9, #8
8000f950:	a1a0500b 	movge	r5, fp
8000f954:	aa00004b 	bge	8000fa88 <_realloc_r+0x1a4>
8000f958:	e59f3540 	ldr	r3, [pc, #1344]	; 8000fea0 <_realloc_r+0x5bc>
8000f95c:	e593e008 	ldr	lr, [r3, #8]
8000f960:	e089100b 	add	r1, r9, fp
8000f964:	e15e0001 	cmp	lr, r1
8000f968:	0a0000e0 	beq	8000fcf0 <_realloc_r+0x40c>
8000f96c:	e5915004 	ldr	r5, [r1, #4]
8000f970:	e3c5a001 	bic	sl, r5, #1
8000f974:	e081a00a 	add	sl, r1, sl
8000f978:	e59aa004 	ldr	sl, [sl, #4]
8000f97c:	e31a0001 	tst	sl, #1
8000f980:	11a01000 	movne	r1, r0
8000f984:	0a00005d 	beq	8000fb00 <_realloc_r+0x21c>
8000f988:	e31c0001 	tst	ip, #1
8000f98c:	1a000065 	bne	8000fb28 <_realloc_r+0x244>
8000f990:	e516a008 	ldr	sl, [r6, #-8]
8000f994:	e06aa009 	rsb	sl, sl, r9
8000f998:	e59ac004 	ldr	ip, [sl, #4]
8000f99c:	e3510000 	cmp	r1, #0
8000f9a0:	e3ccc003 	bic	ip, ip, #3
8000f9a4:	0a000099 	beq	8000fc10 <_realloc_r+0x32c>
8000f9a8:	e151000e 	cmp	r1, lr
8000f9ac:	0a0000ed 	beq	8000fd68 <_realloc_r+0x484>
8000f9b0:	e08cc00b 	add	ip, ip, fp
8000f9b4:	e080500c 	add	r5, r0, ip
8000f9b8:	e1520005 	cmp	r2, r5
8000f9bc:	e58dc004 	str	ip, [sp, #4]
8000f9c0:	ca000094 	bgt	8000fc18 <_realloc_r+0x334>
8000f9c4:	e2812008 	add	r2, r1, #8
8000f9c8:	e892000c 	ldm	r2, {r2, r3}
8000f9cc:	e5832008 	str	r2, [r3, #8]
8000f9d0:	e582300c 	str	r3, [r2, #12]
8000f9d4:	e1a0700a 	mov	r7, sl
8000f9d8:	e59a300c 	ldr	r3, [sl, #12]
8000f9dc:	e5b71008 	ldr	r1, [r7, #8]!
8000f9e0:	e24b2004 	sub	r2, fp, #4
8000f9e4:	e3520024 	cmp	r2, #36	; 0x24
8000f9e8:	e581300c 	str	r3, [r1, #12]
8000f9ec:	e5831008 	str	r1, [r3, #8]
8000f9f0:	8a00011e 	bhi	8000fe70 <_realloc_r+0x58c>
8000f9f4:	e3520013 	cmp	r2, #19
8000f9f8:	e1a01007 	mov	r1, r7
8000f9fc:	9a000017 	bls	8000fa60 <_realloc_r+0x17c>
8000fa00:	e1a03006 	mov	r3, r6
8000fa04:	e4931004 	ldr	r1, [r3], #4
8000fa08:	e58a1008 	str	r1, [sl, #8]
8000fa0c:	e5961004 	ldr	r1, [r6, #4]
8000fa10:	e352001b 	cmp	r2, #27
8000fa14:	e58a100c 	str	r1, [sl, #12]
8000fa18:	e2836004 	add	r6, r3, #4
8000fa1c:	e28a1010 	add	r1, sl, #16
8000fa20:	9a00000e 	bls	8000fa60 <_realloc_r+0x17c>
8000fa24:	e5933004 	ldr	r3, [r3, #4]
8000fa28:	e58a3010 	str	r3, [sl, #16]
8000fa2c:	e5961004 	ldr	r1, [r6, #4]
8000fa30:	e3520024 	cmp	r2, #36	; 0x24
8000fa34:	e2863004 	add	r3, r6, #4
8000fa38:	e58a1014 	str	r1, [sl, #20]
8000fa3c:	e2866008 	add	r6, r6, #8
8000fa40:	e28a1018 	add	r1, sl, #24
8000fa44:	1a000005 	bne	8000fa60 <_realloc_r+0x17c>
8000fa48:	e5933004 	ldr	r3, [r3, #4]
8000fa4c:	e58a3018 	str	r3, [sl, #24]
8000fa50:	e5963004 	ldr	r3, [r6, #4]
8000fa54:	e58a301c 	str	r3, [sl, #28]
8000fa58:	e28a1020 	add	r1, sl, #32
8000fa5c:	e2866008 	add	r6, r6, #8
8000fa60:	e1a02006 	mov	r2, r6
8000fa64:	e4920004 	ldr	r0, [r2], #4
8000fa68:	e1a03001 	mov	r3, r1
8000fa6c:	e4830004 	str	r0, [r3], #4
8000fa70:	e5960004 	ldr	r0, [r6, #4]
8000fa74:	e5810004 	str	r0, [r1, #4]
8000fa78:	e5922004 	ldr	r2, [r2, #4]
8000fa7c:	e5832004 	str	r2, [r3, #4]
8000fa80:	e59ac004 	ldr	ip, [sl, #4]
8000fa84:	e1a0900a 	mov	r9, sl
8000fa88:	e0643005 	rsb	r3, r4, r5
8000fa8c:	e353000f 	cmp	r3, #15
8000fa90:	8a00000c 	bhi	8000fac8 <_realloc_r+0x1e4>
8000fa94:	e20cc001 	and	ip, ip, #1
8000fa98:	e18cc005 	orr	ip, ip, r5
8000fa9c:	e589c004 	str	ip, [r9, #4]
8000faa0:	e0899005 	add	r9, r9, r5
8000faa4:	e5993004 	ldr	r3, [r9, #4]
8000faa8:	e3833001 	orr	r3, r3, #1
8000faac:	e5893004 	str	r3, [r9, #4]
8000fab0:	e1a00008 	mov	r0, r8
8000fab4:	ebfff59c 	bl	8000d12c <__malloc_unlock>
8000fab8:	e1a00007 	mov	r0, r7
8000fabc:	e28dd00c 	add	sp, sp, #12
8000fac0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8000fac4:	e12fff1e 	bx	lr
8000fac8:	e20cc001 	and	ip, ip, #1
8000facc:	e0891004 	add	r1, r9, r4
8000fad0:	e3832001 	orr	r2, r3, #1
8000fad4:	e18c4004 	orr	r4, ip, r4
8000fad8:	e5894004 	str	r4, [r9, #4]
8000fadc:	e5812004 	str	r2, [r1, #4]
8000fae0:	e0813003 	add	r3, r1, r3
8000fae4:	e5932004 	ldr	r2, [r3, #4]
8000fae8:	e3822001 	orr	r2, r2, #1
8000faec:	e5832004 	str	r2, [r3, #4]
8000faf0:	e1a00008 	mov	r0, r8
8000faf4:	e2811008 	add	r1, r1, #8
8000faf8:	ebfffe96 	bl	8000f558 <_free_r>
8000fafc:	eaffffeb 	b	8000fab0 <_realloc_r+0x1cc>
8000fb00:	e3c50003 	bic	r0, r5, #3
8000fb04:	e080500b 	add	r5, r0, fp
8000fb08:	e1520005 	cmp	r2, r5
8000fb0c:	caffff9d 	bgt	8000f988 <_realloc_r+0xa4>
8000fb10:	e2812008 	add	r2, r1, #8
8000fb14:	e892000c 	ldm	r2, {r2, r3}
8000fb18:	e2897008 	add	r7, r9, #8
8000fb1c:	e582300c 	str	r3, [r2, #12]
8000fb20:	e5832008 	str	r2, [r3, #8]
8000fb24:	eaffffd7 	b	8000fa88 <_realloc_r+0x1a4>
8000fb28:	e1a01007 	mov	r1, r7
8000fb2c:	e1a00008 	mov	r0, r8
8000fb30:	ebfff378 	bl	8000c918 <_malloc_r>
8000fb34:	e2507000 	subs	r7, r0, #0
8000fb38:	0affffdc 	beq	8000fab0 <_realloc_r+0x1cc>
8000fb3c:	e599c004 	ldr	ip, [r9, #4]
8000fb40:	e3cc2001 	bic	r2, ip, #1
8000fb44:	e2473008 	sub	r3, r7, #8
8000fb48:	e0892002 	add	r2, r9, r2
8000fb4c:	e1530002 	cmp	r3, r2
8000fb50:	0a0000c1 	beq	8000fe5c <_realloc_r+0x578>
8000fb54:	e24b2004 	sub	r2, fp, #4
8000fb58:	e3520024 	cmp	r2, #36	; 0x24
8000fb5c:	8a00007e 	bhi	8000fd5c <_realloc_r+0x478>
8000fb60:	e3520013 	cmp	r2, #19
8000fb64:	e1a01006 	mov	r1, r6
8000fb68:	e1a03007 	mov	r3, r7
8000fb6c:	9a000019 	bls	8000fbd8 <_realloc_r+0x2f4>
8000fb70:	e1a0c006 	mov	ip, r6
8000fb74:	e49c3004 	ldr	r3, [ip], #4
8000fb78:	e1a00007 	mov	r0, r7
8000fb7c:	e4803004 	str	r3, [r0], #4
8000fb80:	e5963004 	ldr	r3, [r6, #4]
8000fb84:	e352001b 	cmp	r2, #27
8000fb88:	e5873004 	str	r3, [r7, #4]
8000fb8c:	e28c1004 	add	r1, ip, #4
8000fb90:	e2803004 	add	r3, r0, #4
8000fb94:	9a00000f 	bls	8000fbd8 <_realloc_r+0x2f4>
8000fb98:	e59cc004 	ldr	ip, [ip, #4]
8000fb9c:	e580c004 	str	ip, [r0, #4]
8000fba0:	e591e004 	ldr	lr, [r1, #4]
8000fba4:	e3520024 	cmp	r2, #36	; 0x24
8000fba8:	e2830004 	add	r0, r3, #4
8000fbac:	e281c004 	add	ip, r1, #4
8000fbb0:	e583e004 	str	lr, [r3, #4]
8000fbb4:	e2811008 	add	r1, r1, #8
8000fbb8:	e2833008 	add	r3, r3, #8
8000fbbc:	1a000005 	bne	8000fbd8 <_realloc_r+0x2f4>
8000fbc0:	e59c2004 	ldr	r2, [ip, #4]
8000fbc4:	e5802004 	str	r2, [r0, #4]
8000fbc8:	e5912004 	ldr	r2, [r1, #4]
8000fbcc:	e2811008 	add	r1, r1, #8
8000fbd0:	e5832004 	str	r2, [r3, #4]
8000fbd4:	e2833008 	add	r3, r3, #8
8000fbd8:	e1a00001 	mov	r0, r1
8000fbdc:	e490c004 	ldr	ip, [r0], #4
8000fbe0:	e1a02003 	mov	r2, r3
8000fbe4:	e482c004 	str	ip, [r2], #4
8000fbe8:	e5911004 	ldr	r1, [r1, #4]
8000fbec:	e5831004 	str	r1, [r3, #4]
8000fbf0:	e5903004 	ldr	r3, [r0, #4]
8000fbf4:	e5823004 	str	r3, [r2, #4]
8000fbf8:	e1a00008 	mov	r0, r8
8000fbfc:	e1a01006 	mov	r1, r6
8000fc00:	ebfffe54 	bl	8000f558 <_free_r>
8000fc04:	e1a00008 	mov	r0, r8
8000fc08:	ebfff547 	bl	8000d12c <__malloc_unlock>
8000fc0c:	eaffffa9 	b	8000fab8 <_realloc_r+0x1d4>
8000fc10:	e08cc00b 	add	ip, ip, fp
8000fc14:	e58dc004 	str	ip, [sp, #4]
8000fc18:	e59d1004 	ldr	r1, [sp, #4]
8000fc1c:	e1520001 	cmp	r2, r1
8000fc20:	caffffc0 	bgt	8000fb28 <_realloc_r+0x244>
8000fc24:	e1a0700a 	mov	r7, sl
8000fc28:	e59a300c 	ldr	r3, [sl, #12]
8000fc2c:	e5b71008 	ldr	r1, [r7, #8]!
8000fc30:	e24b2004 	sub	r2, fp, #4
8000fc34:	e3520024 	cmp	r2, #36	; 0x24
8000fc38:	e581300c 	str	r3, [r1, #12]
8000fc3c:	e5831008 	str	r1, [r3, #8]
8000fc40:	8a00003e 	bhi	8000fd40 <_realloc_r+0x45c>
8000fc44:	e3520013 	cmp	r2, #19
8000fc48:	e1a01007 	mov	r1, r7
8000fc4c:	9a000017 	bls	8000fcb0 <_realloc_r+0x3cc>
8000fc50:	e1a03006 	mov	r3, r6
8000fc54:	e4931004 	ldr	r1, [r3], #4
8000fc58:	e58a1008 	str	r1, [sl, #8]
8000fc5c:	e5961004 	ldr	r1, [r6, #4]
8000fc60:	e352001b 	cmp	r2, #27
8000fc64:	e58a100c 	str	r1, [sl, #12]
8000fc68:	e2836004 	add	r6, r3, #4
8000fc6c:	e28a1010 	add	r1, sl, #16
8000fc70:	9a00000e 	bls	8000fcb0 <_realloc_r+0x3cc>
8000fc74:	e5933004 	ldr	r3, [r3, #4]
8000fc78:	e58a3010 	str	r3, [sl, #16]
8000fc7c:	e5961004 	ldr	r1, [r6, #4]
8000fc80:	e3520024 	cmp	r2, #36	; 0x24
8000fc84:	e2863004 	add	r3, r6, #4
8000fc88:	e58a1014 	str	r1, [sl, #20]
8000fc8c:	e2866008 	add	r6, r6, #8
8000fc90:	e28a1018 	add	r1, sl, #24
8000fc94:	1a000005 	bne	8000fcb0 <_realloc_r+0x3cc>
8000fc98:	e5933004 	ldr	r3, [r3, #4]
8000fc9c:	e58a3018 	str	r3, [sl, #24]
8000fca0:	e5963004 	ldr	r3, [r6, #4]
8000fca4:	e58a301c 	str	r3, [sl, #28]
8000fca8:	e28a1020 	add	r1, sl, #32
8000fcac:	e2866008 	add	r6, r6, #8
8000fcb0:	e1a02006 	mov	r2, r6
8000fcb4:	e4920004 	ldr	r0, [r2], #4
8000fcb8:	e1a03001 	mov	r3, r1
8000fcbc:	e4830004 	str	r0, [r3], #4
8000fcc0:	e5960004 	ldr	r0, [r6, #4]
8000fcc4:	e5810004 	str	r0, [r1, #4]
8000fcc8:	e5922004 	ldr	r2, [r2, #4]
8000fccc:	e5832004 	str	r2, [r3, #4]
8000fcd0:	e59d5004 	ldr	r5, [sp, #4]
8000fcd4:	e59ac004 	ldr	ip, [sl, #4]
8000fcd8:	e1a0900a 	mov	r9, sl
8000fcdc:	eaffff69 	b	8000fa88 <_realloc_r+0x1a4>
8000fce0:	e1a01002 	mov	r1, r2
8000fce4:	ebfff30b 	bl	8000c918 <_malloc_r>
8000fce8:	e1a07000 	mov	r7, r0
8000fcec:	eaffff71 	b	8000fab8 <_realloc_r+0x1d4>
8000fcf0:	e59e0004 	ldr	r0, [lr, #4]
8000fcf4:	e3c00003 	bic	r0, r0, #3
8000fcf8:	e080100b 	add	r1, r0, fp
8000fcfc:	e2845010 	add	r5, r4, #16
8000fd00:	e1510005 	cmp	r1, r5
8000fd04:	b1a0100e 	movlt	r1, lr
8000fd08:	baffff1e 	blt	8000f988 <_realloc_r+0xa4>
8000fd0c:	e0641001 	rsb	r1, r4, r1
8000fd10:	e0892004 	add	r2, r9, r4
8000fd14:	e3811001 	orr	r1, r1, #1
8000fd18:	e5821004 	str	r1, [r2, #4]
8000fd1c:	e5991004 	ldr	r1, [r9, #4]
8000fd20:	e2011001 	and	r1, r1, #1
8000fd24:	e1844001 	orr	r4, r4, r1
8000fd28:	e5894004 	str	r4, [r9, #4]
8000fd2c:	e1a00008 	mov	r0, r8
8000fd30:	e5832008 	str	r2, [r3, #8]
8000fd34:	e1a07006 	mov	r7, r6
8000fd38:	ebfff4fb 	bl	8000d12c <__malloc_unlock>
8000fd3c:	eaffff5d 	b	8000fab8 <_realloc_r+0x1d4>
8000fd40:	e1a00007 	mov	r0, r7
8000fd44:	e1a01006 	mov	r1, r6
8000fd48:	ebfffe9b 	bl	8000f7bc <memmove>
8000fd4c:	e1a0900a 	mov	r9, sl
8000fd50:	e59ac004 	ldr	ip, [sl, #4]
8000fd54:	e59d5004 	ldr	r5, [sp, #4]
8000fd58:	eaffff4a 	b	8000fa88 <_realloc_r+0x1a4>
8000fd5c:	e1a01006 	mov	r1, r6
8000fd60:	ebfffe95 	bl	8000f7bc <memmove>
8000fd64:	eaffffa3 	b	8000fbf8 <_realloc_r+0x314>
8000fd68:	e08cc00b 	add	ip, ip, fp
8000fd6c:	e080500c 	add	r5, r0, ip
8000fd70:	e2841010 	add	r1, r4, #16
8000fd74:	e1550001 	cmp	r5, r1
8000fd78:	e58dc004 	str	ip, [sp, #4]
8000fd7c:	baffffa5 	blt	8000fc18 <_realloc_r+0x334>
8000fd80:	e1a0700a 	mov	r7, sl
8000fd84:	e59a100c 	ldr	r1, [sl, #12]
8000fd88:	e5b70008 	ldr	r0, [r7, #8]!
8000fd8c:	e24b2004 	sub	r2, fp, #4
8000fd90:	e3520024 	cmp	r2, #36	; 0x24
8000fd94:	e580100c 	str	r1, [r0, #12]
8000fd98:	e5810008 	str	r0, [r1, #8]
8000fd9c:	8a000039 	bhi	8000fe88 <_realloc_r+0x5a4>
8000fda0:	e3520013 	cmp	r2, #19
8000fda4:	e1a00007 	mov	r0, r7
8000fda8:	9a000017 	bls	8000fe0c <_realloc_r+0x528>
8000fdac:	e1a01006 	mov	r1, r6
8000fdb0:	e4910004 	ldr	r0, [r1], #4
8000fdb4:	e58a0008 	str	r0, [sl, #8]
8000fdb8:	e5960004 	ldr	r0, [r6, #4]
8000fdbc:	e352001b 	cmp	r2, #27
8000fdc0:	e58a000c 	str	r0, [sl, #12]
8000fdc4:	e2816004 	add	r6, r1, #4
8000fdc8:	e28a0010 	add	r0, sl, #16
8000fdcc:	9a00000e 	bls	8000fe0c <_realloc_r+0x528>
8000fdd0:	e5911004 	ldr	r1, [r1, #4]
8000fdd4:	e58a1010 	str	r1, [sl, #16]
8000fdd8:	e5960004 	ldr	r0, [r6, #4]
8000fddc:	e3520024 	cmp	r2, #36	; 0x24
8000fde0:	e2861004 	add	r1, r6, #4
8000fde4:	e58a0014 	str	r0, [sl, #20]
8000fde8:	e2866008 	add	r6, r6, #8
8000fdec:	e28a0018 	add	r0, sl, #24
8000fdf0:	1a000005 	bne	8000fe0c <_realloc_r+0x528>
8000fdf4:	e5912004 	ldr	r2, [r1, #4]
8000fdf8:	e58a2018 	str	r2, [sl, #24]
8000fdfc:	e5962004 	ldr	r2, [r6, #4]
8000fe00:	e58a201c 	str	r2, [sl, #28]
8000fe04:	e28a0020 	add	r0, sl, #32
8000fe08:	e2866008 	add	r6, r6, #8
8000fe0c:	e1a01006 	mov	r1, r6
8000fe10:	e491c004 	ldr	ip, [r1], #4
8000fe14:	e1a02000 	mov	r2, r0
8000fe18:	e482c004 	str	ip, [r2], #4
8000fe1c:	e596c004 	ldr	ip, [r6, #4]
8000fe20:	e580c004 	str	ip, [r0, #4]
8000fe24:	e5911004 	ldr	r1, [r1, #4]
8000fe28:	e5821004 	str	r1, [r2, #4]
8000fe2c:	e0641005 	rsb	r1, r4, r5
8000fe30:	e08a2004 	add	r2, sl, r4
8000fe34:	e3811001 	orr	r1, r1, #1
8000fe38:	e5821004 	str	r1, [r2, #4]
8000fe3c:	e59a1004 	ldr	r1, [sl, #4]
8000fe40:	e2011001 	and	r1, r1, #1
8000fe44:	e1844001 	orr	r4, r4, r1
8000fe48:	e58a4004 	str	r4, [sl, #4]
8000fe4c:	e1a00008 	mov	r0, r8
8000fe50:	e5832008 	str	r2, [r3, #8]
8000fe54:	ebfff4b4 	bl	8000d12c <__malloc_unlock>
8000fe58:	eaffff16 	b	8000fab8 <_realloc_r+0x1d4>
8000fe5c:	e5175004 	ldr	r5, [r7, #-4]
8000fe60:	e3c55003 	bic	r5, r5, #3
8000fe64:	e085500b 	add	r5, r5, fp
8000fe68:	e2897008 	add	r7, r9, #8
8000fe6c:	eaffff05 	b	8000fa88 <_realloc_r+0x1a4>
8000fe70:	e1a00007 	mov	r0, r7
8000fe74:	e1a01006 	mov	r1, r6
8000fe78:	ebfffe4f 	bl	8000f7bc <memmove>
8000fe7c:	e1a0900a 	mov	r9, sl
8000fe80:	e59ac004 	ldr	ip, [sl, #4]
8000fe84:	eafffeff 	b	8000fa88 <_realloc_r+0x1a4>
8000fe88:	e1a00007 	mov	r0, r7
8000fe8c:	e1a01006 	mov	r1, r6
8000fe90:	e58d3000 	str	r3, [sp]
8000fe94:	ebfffe48 	bl	8000f7bc <memmove>
8000fe98:	e59d3000 	ldr	r3, [sp]
8000fe9c:	eaffffe2 	b	8000fe2c <_realloc_r+0x548>
8000fea0:	80011954 	.word	0x80011954

8000fea4 <cleanup_glue>:
8000fea4:	e92d4038 	push	{r3, r4, r5, lr}
8000fea8:	e1a04001 	mov	r4, r1
8000feac:	e5911000 	ldr	r1, [r1]
8000feb0:	e3510000 	cmp	r1, #0
8000feb4:	e1a05000 	mov	r5, r0
8000feb8:	1bfffff9 	blne	8000fea4 <cleanup_glue>
8000febc:	e1a00005 	mov	r0, r5
8000fec0:	e1a01004 	mov	r1, r4
8000fec4:	ebfffda3 	bl	8000f558 <_free_r>
8000fec8:	e8bd4038 	pop	{r3, r4, r5, lr}
8000fecc:	e12fff1e 	bx	lr

8000fed0 <_reclaim_reent>:
8000fed0:	e59f30fc 	ldr	r3, [pc, #252]	; 8000ffd4 <_reclaim_reent+0x104>
8000fed4:	e5933000 	ldr	r3, [r3]
8000fed8:	e1500003 	cmp	r0, r3
8000fedc:	e92d4070 	push	{r4, r5, r6, lr}
8000fee0:	e1a05000 	mov	r5, r0
8000fee4:	0a00002e 	beq	8000ffa4 <_reclaim_reent+0xd4>
8000fee8:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
8000feec:	e3530000 	cmp	r3, #0
8000fef0:	0a000013 	beq	8000ff44 <_reclaim_reent+0x74>
8000fef4:	e3a02000 	mov	r2, #0
8000fef8:	e1a06002 	mov	r6, r2
8000fefc:	e7931102 	ldr	r1, [r3, r2, lsl #2]
8000ff00:	e3510000 	cmp	r1, #0
8000ff04:	1a000001 	bne	8000ff10 <_reclaim_reent+0x40>
8000ff08:	ea000006 	b	8000ff28 <_reclaim_reent+0x58>
8000ff0c:	e1a01004 	mov	r1, r4
8000ff10:	e5914000 	ldr	r4, [r1]
8000ff14:	e1a00005 	mov	r0, r5
8000ff18:	ebfffd8e 	bl	8000f558 <_free_r>
8000ff1c:	e3540000 	cmp	r4, #0
8000ff20:	1afffff9 	bne	8000ff0c <_reclaim_reent+0x3c>
8000ff24:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
8000ff28:	e2866001 	add	r6, r6, #1
8000ff2c:	e3560020 	cmp	r6, #32
8000ff30:	e1a02006 	mov	r2, r6
8000ff34:	1afffff0 	bne	8000fefc <_reclaim_reent+0x2c>
8000ff38:	e1a00005 	mov	r0, r5
8000ff3c:	e1a01003 	mov	r1, r3
8000ff40:	ebfffd84 	bl	8000f558 <_free_r>
8000ff44:	e5951040 	ldr	r1, [r5, #64]	; 0x40
8000ff48:	e3510000 	cmp	r1, #0
8000ff4c:	11a00005 	movne	r0, r5
8000ff50:	1bfffd80 	blne	8000f558 <_free_r>
8000ff54:	e5951148 	ldr	r1, [r5, #328]	; 0x148
8000ff58:	e3510000 	cmp	r1, #0
8000ff5c:	0a000009 	beq	8000ff88 <_reclaim_reent+0xb8>
8000ff60:	e2856f53 	add	r6, r5, #332	; 0x14c
8000ff64:	e1510006 	cmp	r1, r6
8000ff68:	1a000001 	bne	8000ff74 <_reclaim_reent+0xa4>
8000ff6c:	ea000005 	b	8000ff88 <_reclaim_reent+0xb8>
8000ff70:	e1a01004 	mov	r1, r4
8000ff74:	e5914000 	ldr	r4, [r1]
8000ff78:	e1a00005 	mov	r0, r5
8000ff7c:	ebfffd75 	bl	8000f558 <_free_r>
8000ff80:	e1560004 	cmp	r6, r4
8000ff84:	1afffff9 	bne	8000ff70 <_reclaim_reent+0xa0>
8000ff88:	e5951054 	ldr	r1, [r5, #84]	; 0x54
8000ff8c:	e3510000 	cmp	r1, #0
8000ff90:	11a00005 	movne	r0, r5
8000ff94:	1bfffd6f 	blne	8000f558 <_free_r>
8000ff98:	e5953038 	ldr	r3, [r5, #56]	; 0x38
8000ff9c:	e3530000 	cmp	r3, #0
8000ffa0:	1a000001 	bne	8000ffac <_reclaim_reent+0xdc>
8000ffa4:	e8bd4070 	pop	{r4, r5, r6, lr}
8000ffa8:	e12fff1e 	bx	lr
8000ffac:	e1a00005 	mov	r0, r5
8000ffb0:	e595c03c 	ldr	ip, [r5, #60]	; 0x3c
8000ffb4:	e1a0e00f 	mov	lr, pc
8000ffb8:	e12fff1c 	bx	ip
8000ffbc:	e59512e0 	ldr	r1, [r5, #736]	; 0x2e0
8000ffc0:	e3510000 	cmp	r1, #0
8000ffc4:	0afffff6 	beq	8000ffa4 <_reclaim_reent+0xd4>
8000ffc8:	e1a00005 	mov	r0, r5
8000ffcc:	e8bd4070 	pop	{r4, r5, r6, lr}
8000ffd0:	eaffffb3 	b	8000fea4 <cleanup_glue>
8000ffd4:	800114a8 	.word	0x800114a8

8000ffd8 <_wrapup_reent>:
8000ffd8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
8000ffdc:	e2508000 	subs	r8, r0, #0
8000ffe0:	059f3064 	ldreq	r3, [pc, #100]	; 8001004c <_wrapup_reent+0x74>
8000ffe4:	05938000 	ldreq	r8, [r3]
8000ffe8:	e5987148 	ldr	r7, [r8, #328]	; 0x148
8000ffec:	e3570000 	cmp	r7, #0
8000fff0:	0a00000e 	beq	80010030 <_wrapup_reent+0x58>
8000fff4:	e5976004 	ldr	r6, [r7, #4]
8000fff8:	e3560000 	cmp	r6, #0
8000fffc:	da000008 	ble	80010024 <_wrapup_reent+0x4c>
80010000:	e2865002 	add	r5, r6, #2
80010004:	e0875105 	add	r5, r7, r5, lsl #2
80010008:	e3a04000 	mov	r4, #0
8001000c:	e5353004 	ldr	r3, [r5, #-4]!
80010010:	e2844001 	add	r4, r4, #1
80010014:	e1a0e00f 	mov	lr, pc
80010018:	e12fff13 	bx	r3
8001001c:	e1540006 	cmp	r4, r6
80010020:	1afffff9 	bne	8001000c <_wrapup_reent+0x34>
80010024:	e5977000 	ldr	r7, [r7]
80010028:	e3570000 	cmp	r7, #0
8001002c:	1afffff0 	bne	8000fff4 <_wrapup_reent+0x1c>
80010030:	e598303c 	ldr	r3, [r8, #60]	; 0x3c
80010034:	e3530000 	cmp	r3, #0
80010038:	11a00008 	movne	r0, r8
8001003c:	11a0e00f 	movne	lr, pc
80010040:	112fff13 	bxne	r3
80010044:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
80010048:	e12fff1e 	bx	lr
8001004c:	800114a8 	.word	0x800114a8

80010050 <__aeabi_drsub>:
80010050:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
80010054:	ea000000 	b	8001005c <__adddf3>

80010058 <__aeabi_dsub>:
80010058:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

8001005c <__adddf3>:
8001005c:	e92d4030 	push	{r4, r5, lr}
80010060:	e1a04081 	lsl	r4, r1, #1
80010064:	e1a05083 	lsl	r5, r3, #1
80010068:	e1340005 	teq	r4, r5
8001006c:	01300002 	teqeq	r0, r2
80010070:	1194c000 	orrsne	ip, r4, r0
80010074:	1195c002 	orrsne	ip, r5, r2
80010078:	11f0cac4 	mvnsne	ip, r4, asr #21
8001007c:	11f0cac5 	mvnsne	ip, r5, asr #21
80010080:	0a00008c 	beq	800102b8 <__adddf3+0x25c>
80010084:	e1a04aa4 	lsr	r4, r4, #21
80010088:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
8001008c:	b2655000 	rsblt	r5, r5, #0
80010090:	da000006 	ble	800100b0 <__adddf3+0x54>
80010094:	e0844005 	add	r4, r4, r5
80010098:	e0202002 	eor	r2, r0, r2
8001009c:	e0213003 	eor	r3, r1, r3
800100a0:	e0220000 	eor	r0, r2, r0
800100a4:	e0231001 	eor	r1, r3, r1
800100a8:	e0202002 	eor	r2, r0, r2
800100ac:	e0213003 	eor	r3, r1, r3
800100b0:	e3550036 	cmp	r5, #54	; 0x36
800100b4:	88bd4030 	pophi	{r4, r5, lr}
800100b8:	812fff1e 	bxhi	lr
800100bc:	e3110102 	tst	r1, #-2147483648	; 0x80000000
800100c0:	e1a01601 	lsl	r1, r1, #12
800100c4:	e3a0c601 	mov	ip, #1048576	; 0x100000
800100c8:	e18c1621 	orr	r1, ip, r1, lsr #12
800100cc:	0a000001 	beq	800100d8 <__adddf3+0x7c>
800100d0:	e2700000 	rsbs	r0, r0, #0
800100d4:	e2e11000 	rsc	r1, r1, #0
800100d8:	e3130102 	tst	r3, #-2147483648	; 0x80000000
800100dc:	e1a03603 	lsl	r3, r3, #12
800100e0:	e18c3623 	orr	r3, ip, r3, lsr #12
800100e4:	0a000001 	beq	800100f0 <__adddf3+0x94>
800100e8:	e2722000 	rsbs	r2, r2, #0
800100ec:	e2e33000 	rsc	r3, r3, #0
800100f0:	e1340005 	teq	r4, r5
800100f4:	0a000069 	beq	800102a0 <__adddf3+0x244>
800100f8:	e2444001 	sub	r4, r4, #1
800100fc:	e275e020 	rsbs	lr, r5, #32
80010100:	ba000005 	blt	8001011c <__adddf3+0xc0>
80010104:	e1a0ce12 	lsl	ip, r2, lr
80010108:	e0900532 	adds	r0, r0, r2, lsr r5
8001010c:	e2a11000 	adc	r1, r1, #0
80010110:	e0900e13 	adds	r0, r0, r3, lsl lr
80010114:	e0b11553 	adcs	r1, r1, r3, asr r5
80010118:	ea000006 	b	80010138 <__adddf3+0xdc>
8001011c:	e2455020 	sub	r5, r5, #32
80010120:	e28ee020 	add	lr, lr, #32
80010124:	e3520001 	cmp	r2, #1
80010128:	e1a0ce13 	lsl	ip, r3, lr
8001012c:	238cc002 	orrcs	ip, ip, #2
80010130:	e0900553 	adds	r0, r0, r3, asr r5
80010134:	e0b11fc3 	adcs	r1, r1, r3, asr #31
80010138:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
8001013c:	5a000002 	bpl	8001014c <__adddf3+0xf0>
80010140:	e27cc000 	rsbs	ip, ip, #0
80010144:	e2f00000 	rscs	r0, r0, #0
80010148:	e2e11000 	rsc	r1, r1, #0
8001014c:	e3510601 	cmp	r1, #1048576	; 0x100000
80010150:	3a00000f 	bcc	80010194 <__adddf3+0x138>
80010154:	e3510602 	cmp	r1, #2097152	; 0x200000
80010158:	3a000006 	bcc	80010178 <__adddf3+0x11c>
8001015c:	e1b010a1 	lsrs	r1, r1, #1
80010160:	e1b00060 	rrxs	r0, r0
80010164:	e1a0c06c 	rrx	ip, ip
80010168:	e2844001 	add	r4, r4, #1
8001016c:	e1a02a84 	lsl	r2, r4, #21
80010170:	e3720501 	cmn	r2, #4194304	; 0x400000
80010174:	2a00006b 	bcs	80010328 <__adddf3+0x2cc>
80010178:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
8001017c:	01b0c0a0 	lsrseq	ip, r0, #1
80010180:	e2b00000 	adcs	r0, r0, #0
80010184:	e0a11a04 	adc	r1, r1, r4, lsl #20
80010188:	e1811005 	orr	r1, r1, r5
8001018c:	e8bd4030 	pop	{r4, r5, lr}
80010190:	e12fff1e 	bx	lr
80010194:	e1b0c08c 	lsls	ip, ip, #1
80010198:	e0b00000 	adcs	r0, r0, r0
8001019c:	e0a11001 	adc	r1, r1, r1
800101a0:	e3110601 	tst	r1, #1048576	; 0x100000
800101a4:	e2444001 	sub	r4, r4, #1
800101a8:	1afffff2 	bne	80010178 <__adddf3+0x11c>
800101ac:	e3310000 	teq	r1, #0
800101b0:	13a03014 	movne	r3, #20
800101b4:	03a03034 	moveq	r3, #52	; 0x34
800101b8:	01a01000 	moveq	r1, r0
800101bc:	03a00000 	moveq	r0, #0
800101c0:	e1a02001 	mov	r2, r1
800101c4:	e3520801 	cmp	r2, #65536	; 0x10000
800101c8:	21a02822 	lsrcs	r2, r2, #16
800101cc:	22433010 	subcs	r3, r3, #16
800101d0:	e3520c01 	cmp	r2, #256	; 0x100
800101d4:	21a02422 	lsrcs	r2, r2, #8
800101d8:	22433008 	subcs	r3, r3, #8
800101dc:	e3520010 	cmp	r2, #16
800101e0:	21a02222 	lsrcs	r2, r2, #4
800101e4:	22433004 	subcs	r3, r3, #4
800101e8:	e3520004 	cmp	r2, #4
800101ec:	22433002 	subcs	r3, r3, #2
800101f0:	304330a2 	subcc	r3, r3, r2, lsr #1
800101f4:	e04331a2 	sub	r3, r3, r2, lsr #3
800101f8:	e2532020 	subs	r2, r3, #32
800101fc:	aa000007 	bge	80010220 <__adddf3+0x1c4>
80010200:	e292200c 	adds	r2, r2, #12
80010204:	da000004 	ble	8001021c <__adddf3+0x1c0>
80010208:	e282c014 	add	ip, r2, #20
8001020c:	e262200c 	rsb	r2, r2, #12
80010210:	e1a00c11 	lsl	r0, r1, ip
80010214:	e1a01231 	lsr	r1, r1, r2
80010218:	ea000004 	b	80010230 <__adddf3+0x1d4>
8001021c:	e2822014 	add	r2, r2, #20
80010220:	d262c020 	rsble	ip, r2, #32
80010224:	e1a01211 	lsl	r1, r1, r2
80010228:	d1811c30 	orrle	r1, r1, r0, lsr ip
8001022c:	d1a00210 	lslle	r0, r0, r2
80010230:	e0544003 	subs	r4, r4, r3
80010234:	a0811a04 	addge	r1, r1, r4, lsl #20
80010238:	a1811005 	orrge	r1, r1, r5
8001023c:	a8bd4030 	popge	{r4, r5, lr}
80010240:	a12fff1e 	bxge	lr
80010244:	e1e04004 	mvn	r4, r4
80010248:	e254401f 	subs	r4, r4, #31
8001024c:	aa00000f 	bge	80010290 <__adddf3+0x234>
80010250:	e294400c 	adds	r4, r4, #12
80010254:	ca000006 	bgt	80010274 <__adddf3+0x218>
80010258:	e2844014 	add	r4, r4, #20
8001025c:	e2642020 	rsb	r2, r4, #32
80010260:	e1a00430 	lsr	r0, r0, r4
80010264:	e1800211 	orr	r0, r0, r1, lsl r2
80010268:	e1851431 	orr	r1, r5, r1, lsr r4
8001026c:	e8bd4030 	pop	{r4, r5, lr}
80010270:	e12fff1e 	bx	lr
80010274:	e264400c 	rsb	r4, r4, #12
80010278:	e2642020 	rsb	r2, r4, #32
8001027c:	e1a00230 	lsr	r0, r0, r2
80010280:	e1800411 	orr	r0, r0, r1, lsl r4
80010284:	e1a01005 	mov	r1, r5
80010288:	e8bd4030 	pop	{r4, r5, lr}
8001028c:	e12fff1e 	bx	lr
80010290:	e1a00431 	lsr	r0, r1, r4
80010294:	e1a01005 	mov	r1, r5
80010298:	e8bd4030 	pop	{r4, r5, lr}
8001029c:	e12fff1e 	bx	lr
800102a0:	e3340000 	teq	r4, #0
800102a4:	e2233601 	eor	r3, r3, #1048576	; 0x100000
800102a8:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
800102ac:	02844001 	addeq	r4, r4, #1
800102b0:	12455001 	subne	r5, r5, #1
800102b4:	eaffff8f 	b	800100f8 <__adddf3+0x9c>
800102b8:	e1f0cac4 	mvns	ip, r4, asr #21
800102bc:	11f0cac5 	mvnsne	ip, r5, asr #21
800102c0:	0a00001d 	beq	8001033c <__adddf3+0x2e0>
800102c4:	e1340005 	teq	r4, r5
800102c8:	01300002 	teqeq	r0, r2
800102cc:	0a000004 	beq	800102e4 <__adddf3+0x288>
800102d0:	e194c000 	orrs	ip, r4, r0
800102d4:	01a01003 	moveq	r1, r3
800102d8:	01a00002 	moveq	r0, r2
800102dc:	e8bd4030 	pop	{r4, r5, lr}
800102e0:	e12fff1e 	bx	lr
800102e4:	e1310003 	teq	r1, r3
800102e8:	13a01000 	movne	r1, #0
800102ec:	13a00000 	movne	r0, #0
800102f0:	18bd4030 	popne	{r4, r5, lr}
800102f4:	112fff1e 	bxne	lr
800102f8:	e1b0caa4 	lsrs	ip, r4, #21
800102fc:	1a000004 	bne	80010314 <__adddf3+0x2b8>
80010300:	e1b00080 	lsls	r0, r0, #1
80010304:	e0b11001 	adcs	r1, r1, r1
80010308:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
8001030c:	e8bd4030 	pop	{r4, r5, lr}
80010310:	e12fff1e 	bx	lr
80010314:	e2944501 	adds	r4, r4, #4194304	; 0x400000
80010318:	32811601 	addcc	r1, r1, #1048576	; 0x100000
8001031c:	38bd4030 	popcc	{r4, r5, lr}
80010320:	312fff1e 	bxcc	lr
80010324:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
80010328:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
8001032c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
80010330:	e3a00000 	mov	r0, #0
80010334:	e8bd4030 	pop	{r4, r5, lr}
80010338:	e12fff1e 	bx	lr
8001033c:	e1f0cac4 	mvns	ip, r4, asr #21
80010340:	11a01003 	movne	r1, r3
80010344:	11a00002 	movne	r0, r2
80010348:	01f0cac5 	mvnseq	ip, r5, asr #21
8001034c:	11a03001 	movne	r3, r1
80010350:	11a02000 	movne	r2, r0
80010354:	e1904601 	orrs	r4, r0, r1, lsl #12
80010358:	01925603 	orrseq	r5, r2, r3, lsl #12
8001035c:	01310003 	teqeq	r1, r3
80010360:	13811702 	orrne	r1, r1, #524288	; 0x80000
80010364:	e8bd4030 	pop	{r4, r5, lr}
80010368:	e12fff1e 	bx	lr

8001036c <__aeabi_ui2d>:
8001036c:	e3300000 	teq	r0, #0
80010370:	03a01000 	moveq	r1, #0
80010374:	012fff1e 	bxeq	lr
80010378:	e92d4030 	push	{r4, r5, lr}
8001037c:	e3a04b01 	mov	r4, #1024	; 0x400
80010380:	e2844032 	add	r4, r4, #50	; 0x32
80010384:	e3a05000 	mov	r5, #0
80010388:	e3a01000 	mov	r1, #0
8001038c:	eaffff86 	b	800101ac <__adddf3+0x150>

80010390 <__aeabi_i2d>:
80010390:	e3300000 	teq	r0, #0
80010394:	03a01000 	moveq	r1, #0
80010398:	012fff1e 	bxeq	lr
8001039c:	e92d4030 	push	{r4, r5, lr}
800103a0:	e3a04b01 	mov	r4, #1024	; 0x400
800103a4:	e2844032 	add	r4, r4, #50	; 0x32
800103a8:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
800103ac:	42600000 	rsbmi	r0, r0, #0
800103b0:	e3a01000 	mov	r1, #0
800103b4:	eaffff7c 	b	800101ac <__adddf3+0x150>

800103b8 <__aeabi_f2d>:
800103b8:	e1b02080 	lsls	r2, r0, #1
800103bc:	e1a011c2 	asr	r1, r2, #3
800103c0:	e1a01061 	rrx	r1, r1
800103c4:	e1a00e02 	lsl	r0, r2, #28
800103c8:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
800103cc:	133304ff 	teqne	r3, #-16777216	; 0xff000000
800103d0:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
800103d4:	112fff1e 	bxne	lr
800103d8:	e3320000 	teq	r2, #0
800103dc:	133304ff 	teqne	r3, #-16777216	; 0xff000000
800103e0:	012fff1e 	bxeq	lr
800103e4:	e92d4030 	push	{r4, r5, lr}
800103e8:	e3a04d0e 	mov	r4, #896	; 0x380
800103ec:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
800103f0:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
800103f4:	eaffff6c 	b	800101ac <__adddf3+0x150>

800103f8 <__aeabi_ul2d>:
800103f8:	e1902001 	orrs	r2, r0, r1
800103fc:	012fff1e 	bxeq	lr
80010400:	e92d4030 	push	{r4, r5, lr}
80010404:	e3a05000 	mov	r5, #0
80010408:	ea000006 	b	80010428 <__aeabi_l2d+0x1c>

8001040c <__aeabi_l2d>:
8001040c:	e1902001 	orrs	r2, r0, r1
80010410:	012fff1e 	bxeq	lr
80010414:	e92d4030 	push	{r4, r5, lr}
80010418:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
8001041c:	5a000001 	bpl	80010428 <__aeabi_l2d+0x1c>
80010420:	e2700000 	rsbs	r0, r0, #0
80010424:	e2e11000 	rsc	r1, r1, #0
80010428:	e3a04b01 	mov	r4, #1024	; 0x400
8001042c:	e2844032 	add	r4, r4, #50	; 0x32
80010430:	e1b0cb21 	lsrs	ip, r1, #22
80010434:	0affff44 	beq	8001014c <__adddf3+0xf0>
80010438:	e3a02003 	mov	r2, #3
8001043c:	e1b0c1ac 	lsrs	ip, ip, #3
80010440:	12822003 	addne	r2, r2, #3
80010444:	e1b0c1ac 	lsrs	ip, ip, #3
80010448:	12822003 	addne	r2, r2, #3
8001044c:	e08221ac 	add	r2, r2, ip, lsr #3
80010450:	e2623020 	rsb	r3, r2, #32
80010454:	e1a0c310 	lsl	ip, r0, r3
80010458:	e1a00230 	lsr	r0, r0, r2
8001045c:	e1800311 	orr	r0, r0, r1, lsl r3
80010460:	e1a01231 	lsr	r1, r1, r2
80010464:	e0844002 	add	r4, r4, r2
80010468:	eaffff37 	b	8001014c <__adddf3+0xf0>

8001046c <__aeabi_dmul>:
8001046c:	e92d4070 	push	{r4, r5, r6, lr}
80010470:	e3a0c0ff 	mov	ip, #255	; 0xff
80010474:	e38ccc07 	orr	ip, ip, #1792	; 0x700
80010478:	e01c4a21 	ands	r4, ip, r1, lsr #20
8001047c:	101c5a23 	andsne	r5, ip, r3, lsr #20
80010480:	1134000c 	teqne	r4, ip
80010484:	1135000c 	teqne	r5, ip
80010488:	0b000075 	bleq	80010664 <__aeabi_dmul+0x1f8>
8001048c:	e0844005 	add	r4, r4, r5
80010490:	e0216003 	eor	r6, r1, r3
80010494:	e1c11a8c 	bic	r1, r1, ip, lsl #21
80010498:	e1c33a8c 	bic	r3, r3, ip, lsl #21
8001049c:	e1905601 	orrs	r5, r0, r1, lsl #12
800104a0:	11925603 	orrsne	r5, r2, r3, lsl #12
800104a4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
800104a8:	e3833601 	orr	r3, r3, #1048576	; 0x100000
800104ac:	0a00001d 	beq	80010528 <__aeabi_dmul+0xbc>
800104b0:	e08ec290 	umull	ip, lr, r0, r2
800104b4:	e3a05000 	mov	r5, #0
800104b8:	e0a5e291 	umlal	lr, r5, r1, r2
800104bc:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
800104c0:	e0a5e390 	umlal	lr, r5, r0, r3
800104c4:	e3a06000 	mov	r6, #0
800104c8:	e0a65391 	umlal	r5, r6, r1, r3
800104cc:	e33c0000 	teq	ip, #0
800104d0:	138ee001 	orrne	lr, lr, #1
800104d4:	e24440ff 	sub	r4, r4, #255	; 0xff
800104d8:	e3560c02 	cmp	r6, #512	; 0x200
800104dc:	e2c44c03 	sbc	r4, r4, #768	; 0x300
800104e0:	2a000002 	bcs	800104f0 <__aeabi_dmul+0x84>
800104e4:	e1b0e08e 	lsls	lr, lr, #1
800104e8:	e0b55005 	adcs	r5, r5, r5
800104ec:	e0a66006 	adc	r6, r6, r6
800104f0:	e1821586 	orr	r1, r2, r6, lsl #11
800104f4:	e1811aa5 	orr	r1, r1, r5, lsr #21
800104f8:	e1a00585 	lsl	r0, r5, #11
800104fc:	e1800aae 	orr	r0, r0, lr, lsr #21
80010500:	e1a0e58e 	lsl	lr, lr, #11
80010504:	e254c0fd 	subs	ip, r4, #253	; 0xfd
80010508:	835c0c07 	cmphi	ip, #1792	; 0x700
8001050c:	8a000011 	bhi	80010558 <__aeabi_dmul+0xec>
80010510:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
80010514:	01b0e0a0 	lsrseq	lr, r0, #1
80010518:	e2b00000 	adcs	r0, r0, #0
8001051c:	e0a11a04 	adc	r1, r1, r4, lsl #20
80010520:	e8bd4070 	pop	{r4, r5, r6, lr}
80010524:	e12fff1e 	bx	lr
80010528:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
8001052c:	e1861001 	orr	r1, r6, r1
80010530:	e1800002 	orr	r0, r0, r2
80010534:	e0211003 	eor	r1, r1, r3
80010538:	e05440ac 	subs	r4, r4, ip, lsr #1
8001053c:	c074500c 	rsbsgt	r5, r4, ip
80010540:	c1811a04 	orrgt	r1, r1, r4, lsl #20
80010544:	c8bd4070 	popgt	{r4, r5, r6, lr}
80010548:	c12fff1e 	bxgt	lr
8001054c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
80010550:	e3a0e000 	mov	lr, #0
80010554:	e2544001 	subs	r4, r4, #1
80010558:	ca00005d 	bgt	800106d4 <__aeabi_dmul+0x268>
8001055c:	e3740036 	cmn	r4, #54	; 0x36
80010560:	d3a00000 	movle	r0, #0
80010564:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
80010568:	d8bd4070 	pople	{r4, r5, r6, lr}
8001056c:	d12fff1e 	bxle	lr
80010570:	e2644000 	rsb	r4, r4, #0
80010574:	e2544020 	subs	r4, r4, #32
80010578:	aa00001a 	bge	800105e8 <__aeabi_dmul+0x17c>
8001057c:	e294400c 	adds	r4, r4, #12
80010580:	ca00000c 	bgt	800105b8 <__aeabi_dmul+0x14c>
80010584:	e2844014 	add	r4, r4, #20
80010588:	e2645020 	rsb	r5, r4, #32
8001058c:	e1a03510 	lsl	r3, r0, r5
80010590:	e1a00430 	lsr	r0, r0, r4
80010594:	e1800511 	orr	r0, r0, r1, lsl r5
80010598:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
8001059c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
800105a0:	e0900fa3 	adds	r0, r0, r3, lsr #31
800105a4:	e0a21431 	adc	r1, r2, r1, lsr r4
800105a8:	e19ee083 	orrs	lr, lr, r3, lsl #1
800105ac:	01c00fa3 	biceq	r0, r0, r3, lsr #31
800105b0:	e8bd4070 	pop	{r4, r5, r6, lr}
800105b4:	e12fff1e 	bx	lr
800105b8:	e264400c 	rsb	r4, r4, #12
800105bc:	e2645020 	rsb	r5, r4, #32
800105c0:	e1a03410 	lsl	r3, r0, r4
800105c4:	e1a00530 	lsr	r0, r0, r5
800105c8:	e1800411 	orr	r0, r0, r1, lsl r4
800105cc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
800105d0:	e0900fa3 	adds	r0, r0, r3, lsr #31
800105d4:	e2a11000 	adc	r1, r1, #0
800105d8:	e19ee083 	orrs	lr, lr, r3, lsl #1
800105dc:	01c00fa3 	biceq	r0, r0, r3, lsr #31
800105e0:	e8bd4070 	pop	{r4, r5, r6, lr}
800105e4:	e12fff1e 	bx	lr
800105e8:	e2645020 	rsb	r5, r4, #32
800105ec:	e18ee510 	orr	lr, lr, r0, lsl r5
800105f0:	e1a03430 	lsr	r3, r0, r4
800105f4:	e1833511 	orr	r3, r3, r1, lsl r5
800105f8:	e1a00431 	lsr	r0, r1, r4
800105fc:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
80010600:	e1c00431 	bic	r0, r0, r1, lsr r4
80010604:	e0800fa3 	add	r0, r0, r3, lsr #31
80010608:	e19ee083 	orrs	lr, lr, r3, lsl #1
8001060c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
80010610:	e8bd4070 	pop	{r4, r5, r6, lr}
80010614:	e12fff1e 	bx	lr
80010618:	e3340000 	teq	r4, #0
8001061c:	1a000008 	bne	80010644 <__aeabi_dmul+0x1d8>
80010620:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
80010624:	e1b00080 	lsls	r0, r0, #1
80010628:	e0a11001 	adc	r1, r1, r1
8001062c:	e3110601 	tst	r1, #1048576	; 0x100000
80010630:	02444001 	subeq	r4, r4, #1
80010634:	0afffffa 	beq	80010624 <__aeabi_dmul+0x1b8>
80010638:	e1811006 	orr	r1, r1, r6
8001063c:	e3350000 	teq	r5, #0
80010640:	112fff1e 	bxne	lr
80010644:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
80010648:	e1b02082 	lsls	r2, r2, #1
8001064c:	e0a33003 	adc	r3, r3, r3
80010650:	e3130601 	tst	r3, #1048576	; 0x100000
80010654:	02455001 	subeq	r5, r5, #1
80010658:	0afffffa 	beq	80010648 <__aeabi_dmul+0x1dc>
8001065c:	e1833006 	orr	r3, r3, r6
80010660:	e12fff1e 	bx	lr
80010664:	e134000c 	teq	r4, ip
80010668:	e00c5a23 	and	r5, ip, r3, lsr #20
8001066c:	1135000c 	teqne	r5, ip
80010670:	0a000007 	beq	80010694 <__aeabi_dmul+0x228>
80010674:	e1906081 	orrs	r6, r0, r1, lsl #1
80010678:	11926083 	orrsne	r6, r2, r3, lsl #1
8001067c:	1affffe5 	bne	80010618 <__aeabi_dmul+0x1ac>
80010680:	e0211003 	eor	r1, r1, r3
80010684:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
80010688:	e3a00000 	mov	r0, #0
8001068c:	e8bd4070 	pop	{r4, r5, r6, lr}
80010690:	e12fff1e 	bx	lr
80010694:	e1906081 	orrs	r6, r0, r1, lsl #1
80010698:	01a00002 	moveq	r0, r2
8001069c:	01a01003 	moveq	r1, r3
800106a0:	11926083 	orrsne	r6, r2, r3, lsl #1
800106a4:	0a000010 	beq	800106ec <__aeabi_dmul+0x280>
800106a8:	e134000c 	teq	r4, ip
800106ac:	1a000001 	bne	800106b8 <__aeabi_dmul+0x24c>
800106b0:	e1906601 	orrs	r6, r0, r1, lsl #12
800106b4:	1a00000c 	bne	800106ec <__aeabi_dmul+0x280>
800106b8:	e135000c 	teq	r5, ip
800106bc:	1a000003 	bne	800106d0 <__aeabi_dmul+0x264>
800106c0:	e1926603 	orrs	r6, r2, r3, lsl #12
800106c4:	11a00002 	movne	r0, r2
800106c8:	11a01003 	movne	r1, r3
800106cc:	1a000006 	bne	800106ec <__aeabi_dmul+0x280>
800106d0:	e0211003 	eor	r1, r1, r3
800106d4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
800106d8:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
800106dc:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
800106e0:	e3a00000 	mov	r0, #0
800106e4:	e8bd4070 	pop	{r4, r5, r6, lr}
800106e8:	e12fff1e 	bx	lr
800106ec:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
800106f0:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
800106f4:	e8bd4070 	pop	{r4, r5, r6, lr}
800106f8:	e12fff1e 	bx	lr

800106fc <__aeabi_ddiv>:
800106fc:	e92d4070 	push	{r4, r5, r6, lr}
80010700:	e3a0c0ff 	mov	ip, #255	; 0xff
80010704:	e38ccc07 	orr	ip, ip, #1792	; 0x700
80010708:	e01c4a21 	ands	r4, ip, r1, lsr #20
8001070c:	101c5a23 	andsne	r5, ip, r3, lsr #20
80010710:	1134000c 	teqne	r4, ip
80010714:	1135000c 	teqne	r5, ip
80010718:	0b00005e 	bleq	80010898 <__aeabi_ddiv+0x19c>
8001071c:	e0444005 	sub	r4, r4, r5
80010720:	e021e003 	eor	lr, r1, r3
80010724:	e1925603 	orrs	r5, r2, r3, lsl #12
80010728:	e1a01601 	lsl	r1, r1, #12
8001072c:	0a00004c 	beq	80010864 <__aeabi_ddiv+0x168>
80010730:	e1a03603 	lsl	r3, r3, #12
80010734:	e3a05201 	mov	r5, #268435456	; 0x10000000
80010738:	e1853223 	orr	r3, r5, r3, lsr #4
8001073c:	e1833c22 	orr	r3, r3, r2, lsr #24
80010740:	e1a02402 	lsl	r2, r2, #8
80010744:	e1855221 	orr	r5, r5, r1, lsr #4
80010748:	e1855c20 	orr	r5, r5, r0, lsr #24
8001074c:	e1a06400 	lsl	r6, r0, #8
80010750:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
80010754:	e1550003 	cmp	r5, r3
80010758:	01560002 	cmpeq	r6, r2
8001075c:	e2a440fd 	adc	r4, r4, #253	; 0xfd
80010760:	e2844c03 	add	r4, r4, #768	; 0x300
80010764:	2a000001 	bcs	80010770 <__aeabi_ddiv+0x74>
80010768:	e1b030a3 	lsrs	r3, r3, #1
8001076c:	e1a02062 	rrx	r2, r2
80010770:	e0566002 	subs	r6, r6, r2
80010774:	e0c55003 	sbc	r5, r5, r3
80010778:	e1b030a3 	lsrs	r3, r3, #1
8001077c:	e1a02062 	rrx	r2, r2
80010780:	e3a00601 	mov	r0, #1048576	; 0x100000
80010784:	e3a0c702 	mov	ip, #524288	; 0x80000
80010788:	e056e002 	subs	lr, r6, r2
8001078c:	e0d5e003 	sbcs	lr, r5, r3
80010790:	20466002 	subcs	r6, r6, r2
80010794:	21a0500e 	movcs	r5, lr
80010798:	2180000c 	orrcs	r0, r0, ip
8001079c:	e1b030a3 	lsrs	r3, r3, #1
800107a0:	e1a02062 	rrx	r2, r2
800107a4:	e056e002 	subs	lr, r6, r2
800107a8:	e0d5e003 	sbcs	lr, r5, r3
800107ac:	20466002 	subcs	r6, r6, r2
800107b0:	21a0500e 	movcs	r5, lr
800107b4:	218000ac 	orrcs	r0, r0, ip, lsr #1
800107b8:	e1b030a3 	lsrs	r3, r3, #1
800107bc:	e1a02062 	rrx	r2, r2
800107c0:	e056e002 	subs	lr, r6, r2
800107c4:	e0d5e003 	sbcs	lr, r5, r3
800107c8:	20466002 	subcs	r6, r6, r2
800107cc:	21a0500e 	movcs	r5, lr
800107d0:	2180012c 	orrcs	r0, r0, ip, lsr #2
800107d4:	e1b030a3 	lsrs	r3, r3, #1
800107d8:	e1a02062 	rrx	r2, r2
800107dc:	e056e002 	subs	lr, r6, r2
800107e0:	e0d5e003 	sbcs	lr, r5, r3
800107e4:	20466002 	subcs	r6, r6, r2
800107e8:	21a0500e 	movcs	r5, lr
800107ec:	218001ac 	orrcs	r0, r0, ip, lsr #3
800107f0:	e195e006 	orrs	lr, r5, r6
800107f4:	0a00000d 	beq	80010830 <__aeabi_ddiv+0x134>
800107f8:	e1a05205 	lsl	r5, r5, #4
800107fc:	e1855e26 	orr	r5, r5, r6, lsr #28
80010800:	e1a06206 	lsl	r6, r6, #4
80010804:	e1a03183 	lsl	r3, r3, #3
80010808:	e1833ea2 	orr	r3, r3, r2, lsr #29
8001080c:	e1a02182 	lsl	r2, r2, #3
80010810:	e1b0c22c 	lsrs	ip, ip, #4
80010814:	1affffdb 	bne	80010788 <__aeabi_ddiv+0x8c>
80010818:	e3110601 	tst	r1, #1048576	; 0x100000
8001081c:	1a000006 	bne	8001083c <__aeabi_ddiv+0x140>
80010820:	e1811000 	orr	r1, r1, r0
80010824:	e3a00000 	mov	r0, #0
80010828:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
8001082c:	eaffffd5 	b	80010788 <__aeabi_ddiv+0x8c>
80010830:	e3110601 	tst	r1, #1048576	; 0x100000
80010834:	01811000 	orreq	r1, r1, r0
80010838:	03a00000 	moveq	r0, #0
8001083c:	e254c0fd 	subs	ip, r4, #253	; 0xfd
80010840:	835c0c07 	cmphi	ip, #1792	; 0x700
80010844:	8affff43 	bhi	80010558 <__aeabi_dmul+0xec>
80010848:	e055c003 	subs	ip, r5, r3
8001084c:	0056c002 	subseq	ip, r6, r2
80010850:	01b0c0a0 	lsrseq	ip, r0, #1
80010854:	e2b00000 	adcs	r0, r0, #0
80010858:	e0a11a04 	adc	r1, r1, r4, lsl #20
8001085c:	e8bd4070 	pop	{r4, r5, r6, lr}
80010860:	e12fff1e 	bx	lr
80010864:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
80010868:	e18e1621 	orr	r1, lr, r1, lsr #12
8001086c:	e09440ac 	adds	r4, r4, ip, lsr #1
80010870:	c074500c 	rsbsgt	r5, r4, ip
80010874:	c1811a04 	orrgt	r1, r1, r4, lsl #20
80010878:	c8bd4070 	popgt	{r4, r5, r6, lr}
8001087c:	c12fff1e 	bxgt	lr
80010880:	e3811601 	orr	r1, r1, #1048576	; 0x100000
80010884:	e3a0e000 	mov	lr, #0
80010888:	e2544001 	subs	r4, r4, #1
8001088c:	eaffff31 	b	80010558 <__aeabi_dmul+0xec>
80010890:	e185e006 	orr	lr, r5, r6
80010894:	eaffff2f 	b	80010558 <__aeabi_dmul+0xec>
80010898:	e00c5a23 	and	r5, ip, r3, lsr #20
8001089c:	e134000c 	teq	r4, ip
800108a0:	0135000c 	teqeq	r5, ip
800108a4:	0affff90 	beq	800106ec <__aeabi_dmul+0x280>
800108a8:	e134000c 	teq	r4, ip
800108ac:	1a000006 	bne	800108cc <__aeabi_ddiv+0x1d0>
800108b0:	e1904601 	orrs	r4, r0, r1, lsl #12
800108b4:	1affff8c 	bne	800106ec <__aeabi_dmul+0x280>
800108b8:	e135000c 	teq	r5, ip
800108bc:	1affff83 	bne	800106d0 <__aeabi_dmul+0x264>
800108c0:	e1a00002 	mov	r0, r2
800108c4:	e1a01003 	mov	r1, r3
800108c8:	eaffff87 	b	800106ec <__aeabi_dmul+0x280>
800108cc:	e135000c 	teq	r5, ip
800108d0:	1a000004 	bne	800108e8 <__aeabi_ddiv+0x1ec>
800108d4:	e1925603 	orrs	r5, r2, r3, lsl #12
800108d8:	0affff68 	beq	80010680 <__aeabi_dmul+0x214>
800108dc:	e1a00002 	mov	r0, r2
800108e0:	e1a01003 	mov	r1, r3
800108e4:	eaffff80 	b	800106ec <__aeabi_dmul+0x280>
800108e8:	e1906081 	orrs	r6, r0, r1, lsl #1
800108ec:	11926083 	orrsne	r6, r2, r3, lsl #1
800108f0:	1affff48 	bne	80010618 <__aeabi_dmul+0x1ac>
800108f4:	e1904081 	orrs	r4, r0, r1, lsl #1
800108f8:	1affff74 	bne	800106d0 <__aeabi_dmul+0x264>
800108fc:	e1925083 	orrs	r5, r2, r3, lsl #1
80010900:	1affff5e 	bne	80010680 <__aeabi_dmul+0x214>
80010904:	eaffff78 	b	800106ec <__aeabi_dmul+0x280>

80010908 <__gedf2>:
80010908:	e3e0c000 	mvn	ip, #0
8001090c:	ea000002 	b	8001091c <__cmpdf2+0x4>

80010910 <__ledf2>:
80010910:	e3a0c001 	mov	ip, #1
80010914:	ea000000 	b	8001091c <__cmpdf2+0x4>

80010918 <__cmpdf2>:
80010918:	e3a0c001 	mov	ip, #1
8001091c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
80010920:	e1a0c081 	lsl	ip, r1, #1
80010924:	e1f0cacc 	mvns	ip, ip, asr #21
80010928:	e1a0c083 	lsl	ip, r3, #1
8001092c:	11f0cacc 	mvnsne	ip, ip, asr #21
80010930:	0a00000e 	beq	80010970 <__cmpdf2+0x58>
80010934:	e28dd004 	add	sp, sp, #4
80010938:	e190c081 	orrs	ip, r0, r1, lsl #1
8001093c:	0192c083 	orrseq	ip, r2, r3, lsl #1
80010940:	11310003 	teqne	r1, r3
80010944:	01300002 	teqeq	r0, r2
80010948:	03a00000 	moveq	r0, #0
8001094c:	012fff1e 	bxeq	lr
80010950:	e3700000 	cmn	r0, #0
80010954:	e1310003 	teq	r1, r3
80010958:	51510003 	cmppl	r1, r3
8001095c:	01500002 	cmpeq	r0, r2
80010960:	21a00fc3 	asrcs	r0, r3, #31
80010964:	31e00fc3 	mvncc	r0, r3, asr #31
80010968:	e3800001 	orr	r0, r0, #1
8001096c:	e12fff1e 	bx	lr
80010970:	e1a0c081 	lsl	ip, r1, #1
80010974:	e1f0cacc 	mvns	ip, ip, asr #21
80010978:	1a000001 	bne	80010984 <__cmpdf2+0x6c>
8001097c:	e190c601 	orrs	ip, r0, r1, lsl #12
80010980:	1a000004 	bne	80010998 <__cmpdf2+0x80>
80010984:	e1a0c083 	lsl	ip, r3, #1
80010988:	e1f0cacc 	mvns	ip, ip, asr #21
8001098c:	1affffe8 	bne	80010934 <__cmpdf2+0x1c>
80010990:	e192c603 	orrs	ip, r2, r3, lsl #12
80010994:	0affffe6 	beq	80010934 <__cmpdf2+0x1c>
80010998:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
8001099c:	e12fff1e 	bx	lr

800109a0 <__aeabi_cdrcmple>:
800109a0:	e1a0c000 	mov	ip, r0
800109a4:	e1a00002 	mov	r0, r2
800109a8:	e1a0200c 	mov	r2, ip
800109ac:	e1a0c001 	mov	ip, r1
800109b0:	e1a01003 	mov	r1, r3
800109b4:	e1a0300c 	mov	r3, ip
800109b8:	eaffffff 	b	800109bc <__aeabi_cdcmpeq>

800109bc <__aeabi_cdcmpeq>:
800109bc:	e92d4001 	push	{r0, lr}
800109c0:	ebffffd4 	bl	80010918 <__cmpdf2>
800109c4:	e3500000 	cmp	r0, #0
800109c8:	43700000 	cmnmi	r0, #0
800109cc:	e8bd4001 	pop	{r0, lr}
800109d0:	e12fff1e 	bx	lr

800109d4 <__aeabi_dcmpeq>:
800109d4:	e52de008 	str	lr, [sp, #-8]!
800109d8:	ebfffff7 	bl	800109bc <__aeabi_cdcmpeq>
800109dc:	03a00001 	moveq	r0, #1
800109e0:	13a00000 	movne	r0, #0
800109e4:	e49de008 	ldr	lr, [sp], #8
800109e8:	e12fff1e 	bx	lr

800109ec <__aeabi_dcmplt>:
800109ec:	e52de008 	str	lr, [sp, #-8]!
800109f0:	ebfffff1 	bl	800109bc <__aeabi_cdcmpeq>
800109f4:	33a00001 	movcc	r0, #1
800109f8:	23a00000 	movcs	r0, #0
800109fc:	e49de008 	ldr	lr, [sp], #8
80010a00:	e12fff1e 	bx	lr

80010a04 <__aeabi_dcmple>:
80010a04:	e52de008 	str	lr, [sp, #-8]!
80010a08:	ebffffeb 	bl	800109bc <__aeabi_cdcmpeq>
80010a0c:	93a00001 	movls	r0, #1
80010a10:	83a00000 	movhi	r0, #0
80010a14:	e49de008 	ldr	lr, [sp], #8
80010a18:	e12fff1e 	bx	lr

80010a1c <__aeabi_dcmpge>:
80010a1c:	e52de008 	str	lr, [sp, #-8]!
80010a20:	ebffffde 	bl	800109a0 <__aeabi_cdrcmple>
80010a24:	93a00001 	movls	r0, #1
80010a28:	83a00000 	movhi	r0, #0
80010a2c:	e49de008 	ldr	lr, [sp], #8
80010a30:	e12fff1e 	bx	lr

80010a34 <__aeabi_dcmpgt>:
80010a34:	e52de008 	str	lr, [sp, #-8]!
80010a38:	ebffffd8 	bl	800109a0 <__aeabi_cdrcmple>
80010a3c:	33a00001 	movcc	r0, #1
80010a40:	23a00000 	movcs	r0, #0
80010a44:	e49de008 	ldr	lr, [sp], #8
80010a48:	e12fff1e 	bx	lr

80010a4c <__aeabi_d2iz>:
80010a4c:	e1a02081 	lsl	r2, r1, #1
80010a50:	e2922602 	adds	r2, r2, #2097152	; 0x200000
80010a54:	2a00000c 	bcs	80010a8c <__aeabi_d2iz+0x40>
80010a58:	5a000009 	bpl	80010a84 <__aeabi_d2iz+0x38>
80010a5c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
80010a60:	e0532ac2 	subs	r2, r3, r2, asr #21
80010a64:	9a00000a 	bls	80010a94 <__aeabi_d2iz+0x48>
80010a68:	e1a03581 	lsl	r3, r1, #11
80010a6c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
80010a70:	e1833aa0 	orr	r3, r3, r0, lsr #21
80010a74:	e3110102 	tst	r1, #-2147483648	; 0x80000000
80010a78:	e1a00233 	lsr	r0, r3, r2
80010a7c:	12600000 	rsbne	r0, r0, #0
80010a80:	e12fff1e 	bx	lr
80010a84:	e3a00000 	mov	r0, #0
80010a88:	e12fff1e 	bx	lr
80010a8c:	e1900601 	orrs	r0, r0, r1, lsl #12
80010a90:	1a000002 	bne	80010aa0 <__aeabi_d2iz+0x54>
80010a94:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
80010a98:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
80010a9c:	e12fff1e 	bx	lr
80010aa0:	e3a00000 	mov	r0, #0
80010aa4:	e12fff1e 	bx	lr

80010aa8 <__aeabi_uldivmod>:
80010aa8:	e3530000 	cmp	r3, #0
80010aac:	03520000 	cmpeq	r2, #0
80010ab0:	1a000004 	bne	80010ac8 <__aeabi_uldivmod+0x20>
80010ab4:	e3510000 	cmp	r1, #0
80010ab8:	03500000 	cmpeq	r0, #0
80010abc:	13e01000 	mvnne	r1, #0
80010ac0:	13e00000 	mvnne	r0, #0
80010ac4:	eaffe006 	b	80008ae4 <__aeabi_idiv0>
80010ac8:	e24dd008 	sub	sp, sp, #8
80010acc:	e92d6000 	push	{sp, lr}
80010ad0:	eb000013 	bl	80010b24 <__gnu_uldivmod_helper>
80010ad4:	e59de004 	ldr	lr, [sp, #4]
80010ad8:	e28dd008 	add	sp, sp, #8
80010adc:	e8bd000c 	pop	{r2, r3}
80010ae0:	e12fff1e 	bx	lr

80010ae4 <__gnu_ldivmod_helper>:
80010ae4:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
80010ae8:	e1a04002 	mov	r4, r2
80010aec:	e1a07003 	mov	r7, r3
80010af0:	e1a05000 	mov	r5, r0
80010af4:	e1a06001 	mov	r6, r1
80010af8:	eb000019 	bl	80010b64 <__divdi3>
80010afc:	e0070790 	mul	r7, r0, r7
80010b00:	e0832490 	umull	r2, r3, r0, r4
80010b04:	e0247491 	mla	r4, r1, r4, r7
80010b08:	e0843003 	add	r3, r4, r3
80010b0c:	e0555002 	subs	r5, r5, r2
80010b10:	e0c66003 	sbc	r6, r6, r3
80010b14:	e59d3018 	ldr	r3, [sp, #24]
80010b18:	e8830060 	stm	r3, {r5, r6}
80010b1c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
80010b20:	e12fff1e 	bx	lr

80010b24 <__gnu_uldivmod_helper>:
80010b24:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
80010b28:	e1a04002 	mov	r4, r2
80010b2c:	e1a07003 	mov	r7, r3
80010b30:	e1a05000 	mov	r5, r0
80010b34:	e1a06001 	mov	r6, r1
80010b38:	eb000133 	bl	8001100c <__udivdi3>
80010b3c:	e0070790 	mul	r7, r0, r7
80010b40:	e0832490 	umull	r2, r3, r0, r4
80010b44:	e0247491 	mla	r4, r1, r4, r7
80010b48:	e0843003 	add	r3, r4, r3
80010b4c:	e0555002 	subs	r5, r5, r2
80010b50:	e0c66003 	sbc	r6, r6, r3
80010b54:	e59d3018 	ldr	r3, [sp, #24]
80010b58:	e8830060 	stm	r3, {r5, r6}
80010b5c:	e8bd40f8 	pop	{r3, r4, r5, r6, r7, lr}
80010b60:	e12fff1e 	bx	lr

80010b64 <__divdi3>:
80010b64:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
80010b68:	e3510000 	cmp	r1, #0
80010b6c:	e24dd014 	sub	sp, sp, #20
80010b70:	e1a0c003 	mov	ip, r3
80010b74:	a3a07000 	movge	r7, #0
80010b78:	ba000094 	blt	80010dd0 <__divdi3+0x26c>
80010b7c:	e35c0000 	cmp	ip, #0
80010b80:	ba00008e 	blt	80010dc0 <__divdi3+0x25c>
80010b84:	e253a000 	subs	sl, r3, #0
80010b88:	e1a0b000 	mov	fp, r0
80010b8c:	e1a08001 	mov	r8, r1
80010b90:	e1a09002 	mov	r9, r2
80010b94:	e1a04002 	mov	r4, r2
80010b98:	e1a05000 	mov	r5, r0
80010b9c:	e1a06001 	mov	r6, r1
80010ba0:	1a00003e 	bne	80010ca0 <__divdi3+0x13c>
80010ba4:	e1520001 	cmp	r2, r1
80010ba8:	9a00004c 	bls	80010ce0 <__divdi3+0x17c>
80010bac:	e1a00002 	mov	r0, r2
80010bb0:	eb000222 	bl	80011440 <__clzsi2>
80010bb4:	e3500000 	cmp	r0, #0
80010bb8:	12603020 	rsbne	r3, r0, #32
80010bbc:	11a0333b 	lsrne	r3, fp, r3
80010bc0:	11a04019 	lslne	r4, r9, r0
80010bc4:	11836018 	orrne	r6, r3, r8, lsl r0
80010bc8:	e1a09824 	lsr	r9, r4, #16
80010bcc:	11a0501b 	lslne	r5, fp, r0
80010bd0:	e1a01009 	mov	r1, r9
80010bd4:	e1a00006 	mov	r0, r6
80010bd8:	ebffdf2a 	bl	80008888 <__aeabi_uidiv>
80010bdc:	e1a01009 	mov	r1, r9
80010be0:	e1a0a000 	mov	sl, r0
80010be4:	e1a00006 	mov	r0, r6
80010be8:	ebffdf63 	bl	8000897c <__aeabi_uidivmod>
80010bec:	e1a08804 	lsl	r8, r4, #16
80010bf0:	e1a08828 	lsr	r8, r8, #16
80010bf4:	e0030a98 	mul	r3, r8, sl
80010bf8:	e1a0b825 	lsr	fp, r5, #16
80010bfc:	e18bb801 	orr	fp, fp, r1, lsl #16
80010c00:	e153000b 	cmp	r3, fp
80010c04:	9a000005 	bls	80010c20 <__divdi3+0xbc>
80010c08:	e09bb004 	adds	fp, fp, r4
80010c0c:	e24aa001 	sub	sl, sl, #1
80010c10:	2a000002 	bcs	80010c20 <__divdi3+0xbc>
80010c14:	e153000b 	cmp	r3, fp
80010c18:	824aa001 	subhi	sl, sl, #1
80010c1c:	808bb004 	addhi	fp, fp, r4
80010c20:	e063b00b 	rsb	fp, r3, fp
80010c24:	e1a01009 	mov	r1, r9
80010c28:	e1a0000b 	mov	r0, fp
80010c2c:	ebffdf15 	bl	80008888 <__aeabi_uidiv>
80010c30:	e1a01009 	mov	r1, r9
80010c34:	e1a06000 	mov	r6, r0
80010c38:	e1a0000b 	mov	r0, fp
80010c3c:	ebffdf4e 	bl	8000897c <__aeabi_uidivmod>
80010c40:	e0080896 	mul	r8, r6, r8
80010c44:	e1a00805 	lsl	r0, r5, #16
80010c48:	e1a05820 	lsr	r5, r0, #16
80010c4c:	e1855801 	orr	r5, r5, r1, lsl #16
80010c50:	e1580005 	cmp	r8, r5
80010c54:	9a000004 	bls	80010c6c <__divdi3+0x108>
80010c58:	e0955004 	adds	r5, r5, r4
80010c5c:	e2466001 	sub	r6, r6, #1
80010c60:	2a000001 	bcs	80010c6c <__divdi3+0x108>
80010c64:	e1580005 	cmp	r8, r5
80010c68:	82466001 	subhi	r6, r6, #1
80010c6c:	e186680a 	orr	r6, r6, sl, lsl #16
80010c70:	e3a09000 	mov	r9, #0
80010c74:	e3570000 	cmp	r7, #0
80010c78:	e1a03006 	mov	r3, r6
80010c7c:	e1a04009 	mov	r4, r9
80010c80:	0a000001 	beq	80010c8c <__divdi3+0x128>
80010c84:	e2733000 	rsbs	r3, r3, #0
80010c88:	e2e44000 	rsc	r4, r4, #0
80010c8c:	e1a00003 	mov	r0, r3
80010c90:	e1a01004 	mov	r1, r4
80010c94:	e28dd014 	add	sp, sp, #20
80010c98:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
80010c9c:	e12fff1e 	bx	lr
80010ca0:	e15a0001 	cmp	sl, r1
80010ca4:	83a09000 	movhi	r9, #0
80010ca8:	81a06009 	movhi	r6, r9
80010cac:	8afffff0 	bhi	80010c74 <__divdi3+0x110>
80010cb0:	e1a00003 	mov	r0, r3
80010cb4:	eb0001e1 	bl	80011440 <__clzsi2>
80010cb8:	e2504000 	subs	r4, r0, #0
80010cbc:	1a00007a 	bne	80010eac <__divdi3+0x348>
80010cc0:	e15a0008 	cmp	sl, r8
80010cc4:	2159000b 	cmpcs	r9, fp
80010cc8:	83a09000 	movhi	r9, #0
80010ccc:	93a09001 	movls	r9, #1
80010cd0:	93a06001 	movls	r6, #1
80010cd4:	91a09004 	movls	r9, r4
80010cd8:	81a06009 	movhi	r6, r9
80010cdc:	eaffffe4 	b	80010c74 <__divdi3+0x110>
80010ce0:	e3520000 	cmp	r2, #0
80010ce4:	1a000003 	bne	80010cf8 <__divdi3+0x194>
80010ce8:	e3a00001 	mov	r0, #1
80010cec:	e1a01002 	mov	r1, r2
80010cf0:	ebffdee4 	bl	80008888 <__aeabi_uidiv>
80010cf4:	e1a04000 	mov	r4, r0
80010cf8:	e1a00004 	mov	r0, r4
80010cfc:	eb0001cf 	bl	80011440 <__clzsi2>
80010d00:	e2503000 	subs	r3, r0, #0
80010d04:	1a000035 	bne	80010de0 <__divdi3+0x27c>
80010d08:	e3a01001 	mov	r1, #1
80010d0c:	e1a09804 	lsl	r9, r4, #16
80010d10:	e58d1008 	str	r1, [sp, #8]
80010d14:	e0646006 	rsb	r6, r4, r6
80010d18:	e1a08824 	lsr	r8, r4, #16
80010d1c:	e1a09829 	lsr	r9, r9, #16
80010d20:	e1a01008 	mov	r1, r8
80010d24:	e1a00006 	mov	r0, r6
80010d28:	ebffded6 	bl	80008888 <__aeabi_uidiv>
80010d2c:	e1a01008 	mov	r1, r8
80010d30:	e1a0a000 	mov	sl, r0
80010d34:	e1a00006 	mov	r0, r6
80010d38:	ebffdf0f 	bl	8000897c <__aeabi_uidivmod>
80010d3c:	e0030a99 	mul	r3, r9, sl
80010d40:	e1a0c825 	lsr	ip, r5, #16
80010d44:	e18cb801 	orr	fp, ip, r1, lsl #16
80010d48:	e153000b 	cmp	r3, fp
80010d4c:	9a000005 	bls	80010d68 <__divdi3+0x204>
80010d50:	e09bb004 	adds	fp, fp, r4
80010d54:	e24aa001 	sub	sl, sl, #1
80010d58:	2a000002 	bcs	80010d68 <__divdi3+0x204>
80010d5c:	e153000b 	cmp	r3, fp
80010d60:	824aa001 	subhi	sl, sl, #1
80010d64:	808bb004 	addhi	fp, fp, r4
80010d68:	e063b00b 	rsb	fp, r3, fp
80010d6c:	e1a01008 	mov	r1, r8
80010d70:	e1a0000b 	mov	r0, fp
80010d74:	ebffdec3 	bl	80008888 <__aeabi_uidiv>
80010d78:	e1a01008 	mov	r1, r8
80010d7c:	e1a06000 	mov	r6, r0
80010d80:	e1a0000b 	mov	r0, fp
80010d84:	ebffdefc 	bl	8000897c <__aeabi_uidivmod>
80010d88:	e0090996 	mul	r9, r6, r9
80010d8c:	e1a00805 	lsl	r0, r5, #16
80010d90:	e1a05820 	lsr	r5, r0, #16
80010d94:	e1855801 	orr	r5, r5, r1, lsl #16
80010d98:	e1590005 	cmp	r9, r5
80010d9c:	9a000004 	bls	80010db4 <__divdi3+0x250>
80010da0:	e0955004 	adds	r5, r5, r4
80010da4:	e2466001 	sub	r6, r6, #1
80010da8:	2a000001 	bcs	80010db4 <__divdi3+0x250>
80010dac:	e1590005 	cmp	r9, r5
80010db0:	82466001 	subhi	r6, r6, #1
80010db4:	e186680a 	orr	r6, r6, sl, lsl #16
80010db8:	e59d9008 	ldr	r9, [sp, #8]
80010dbc:	eaffffac 	b	80010c74 <__divdi3+0x110>
80010dc0:	e1e07007 	mvn	r7, r7
80010dc4:	e2722000 	rsbs	r2, r2, #0
80010dc8:	e2e33000 	rsc	r3, r3, #0
80010dcc:	eaffff6c 	b	80010b84 <__divdi3+0x20>
80010dd0:	e2700000 	rsbs	r0, r0, #0
80010dd4:	e2e11000 	rsc	r1, r1, #0
80010dd8:	e3e07000 	mvn	r7, #0
80010ddc:	eaffff66 	b	80010b7c <__divdi3+0x18>
80010de0:	e2638020 	rsb	r8, r3, #32
80010de4:	e1a0b835 	lsr	fp, r5, r8
80010de8:	e1a04314 	lsl	r4, r4, r3
80010dec:	e1a0a836 	lsr	sl, r6, r8
80010df0:	e18be316 	orr	lr, fp, r6, lsl r3
80010df4:	e1a08824 	lsr	r8, r4, #16
80010df8:	e1a0c804 	lsl	ip, r4, #16
80010dfc:	e1a01008 	mov	r1, r8
80010e00:	e1a0000a 	mov	r0, sl
80010e04:	e1a0982c 	lsr	r9, ip, #16
80010e08:	e1a05315 	lsl	r5, r5, r3
80010e0c:	e58de008 	str	lr, [sp, #8]
80010e10:	ebffde9c 	bl	80008888 <__aeabi_uidiv>
80010e14:	e1a01008 	mov	r1, r8
80010e18:	e1a0b000 	mov	fp, r0
80010e1c:	e1a0000a 	mov	r0, sl
80010e20:	ebffded5 	bl	8000897c <__aeabi_uidivmod>
80010e24:	e0030b99 	mul	r3, r9, fp
80010e28:	e59d2008 	ldr	r2, [sp, #8]
80010e2c:	e1a06822 	lsr	r6, r2, #16
80010e30:	e1866801 	orr	r6, r6, r1, lsl #16
80010e34:	e1530006 	cmp	r3, r6
80010e38:	9a000002 	bls	80010e48 <__divdi3+0x2e4>
80010e3c:	e0966004 	adds	r6, r6, r4
80010e40:	e24bb001 	sub	fp, fp, #1
80010e44:	3a00006c 	bcc	80010ffc <__divdi3+0x498>
80010e48:	e0636006 	rsb	r6, r3, r6
80010e4c:	e1a01008 	mov	r1, r8
80010e50:	e1a00006 	mov	r0, r6
80010e54:	ebffde8b 	bl	80008888 <__aeabi_uidiv>
80010e58:	e1a01008 	mov	r1, r8
80010e5c:	e1a0a000 	mov	sl, r0
80010e60:	e1a00006 	mov	r0, r6
80010e64:	ebffdec4 	bl	8000897c <__aeabi_uidivmod>
80010e68:	e0030a99 	mul	r3, r9, sl
80010e6c:	e59d2008 	ldr	r2, [sp, #8]
80010e70:	e1a06802 	lsl	r6, r2, #16
80010e74:	e1a00826 	lsr	r0, r6, #16
80010e78:	e1806801 	orr	r6, r0, r1, lsl #16
80010e7c:	e1530006 	cmp	r3, r6
80010e80:	9a000005 	bls	80010e9c <__divdi3+0x338>
80010e84:	e0966004 	adds	r6, r6, r4
80010e88:	e24aa001 	sub	sl, sl, #1
80010e8c:	2a000002 	bcs	80010e9c <__divdi3+0x338>
80010e90:	e1530006 	cmp	r3, r6
80010e94:	824aa001 	subhi	sl, sl, #1
80010e98:	80866004 	addhi	r6, r6, r4
80010e9c:	e0636006 	rsb	r6, r3, r6
80010ea0:	e18a380b 	orr	r3, sl, fp, lsl #16
80010ea4:	e58d3008 	str	r3, [sp, #8]
80010ea8:	eaffff9c 	b	80010d20 <__divdi3+0x1bc>
80010eac:	e2641020 	rsb	r1, r4, #32
80010eb0:	e1a00139 	lsr	r0, r9, r1
80010eb4:	e1a0213b 	lsr	r2, fp, r1
80010eb8:	e180a41a 	orr	sl, r0, sl, lsl r4
80010ebc:	e1a06138 	lsr	r6, r8, r1
80010ec0:	e1828418 	orr	r8, r2, r8, lsl r4
80010ec4:	e1a0380a 	lsl	r3, sl, #16
80010ec8:	e1a0b82a 	lsr	fp, sl, #16
80010ecc:	e1a0e823 	lsr	lr, r3, #16
80010ed0:	e1a0100b 	mov	r1, fp
80010ed4:	e1a00006 	mov	r0, r6
80010ed8:	e58d8008 	str	r8, [sp, #8]
80010edc:	e58de00c 	str	lr, [sp, #12]
80010ee0:	ebffde68 	bl	80008888 <__aeabi_uidiv>
80010ee4:	e1a0100b 	mov	r1, fp
80010ee8:	e1a08000 	mov	r8, r0
80010eec:	e1a00006 	mov	r0, r6
80010ef0:	ebffdea1 	bl	8000897c <__aeabi_uidivmod>
80010ef4:	e59dc00c 	ldr	ip, [sp, #12]
80010ef8:	e002089c 	mul	r2, ip, r8
80010efc:	e59d3008 	ldr	r3, [sp, #8]
80010f00:	e1a06823 	lsr	r6, r3, #16
80010f04:	e1861801 	orr	r1, r6, r1, lsl #16
80010f08:	e1520001 	cmp	r2, r1
80010f0c:	e1a03419 	lsl	r3, r9, r4
80010f10:	9a000002 	bls	80010f20 <__divdi3+0x3bc>
80010f14:	e091100a 	adds	r1, r1, sl
80010f18:	e2488001 	sub	r8, r8, #1
80010f1c:	3a000032 	bcc	80010fec <__divdi3+0x488>
80010f20:	e0629001 	rsb	r9, r2, r1
80010f24:	e1a00009 	mov	r0, r9
80010f28:	e1a0100b 	mov	r1, fp
80010f2c:	e58d3004 	str	r3, [sp, #4]
80010f30:	ebffde54 	bl	80008888 <__aeabi_uidiv>
80010f34:	e1a0100b 	mov	r1, fp
80010f38:	e1a06000 	mov	r6, r0
80010f3c:	e1a00009 	mov	r0, r9
80010f40:	ebffde8d 	bl	8000897c <__aeabi_uidivmod>
80010f44:	e59d000c 	ldr	r0, [sp, #12]
80010f48:	e0020690 	mul	r2, r0, r6
80010f4c:	e59d3008 	ldr	r3, [sp, #8]
80010f50:	e1a0c803 	lsl	ip, r3, #16
80010f54:	e1a0982c 	lsr	r9, ip, #16
80010f58:	e1890801 	orr	r0, r9, r1, lsl #16
80010f5c:	e1520000 	cmp	r2, r0
80010f60:	e59d3004 	ldr	r3, [sp, #4]
80010f64:	9a000002 	bls	80010f74 <__divdi3+0x410>
80010f68:	e090000a 	adds	r0, r0, sl
80010f6c:	e2466001 	sub	r6, r6, #1
80010f70:	3a000019 	bcc	80010fdc <__divdi3+0x478>
80010f74:	e062e000 	rsb	lr, r2, r0
80010f78:	e1866808 	orr	r6, r6, r8, lsl #16
80010f7c:	e1a02826 	lsr	r2, r6, #16
80010f80:	e1a01823 	lsr	r1, r3, #16
80010f84:	e1c6c802 	bic	ip, r6, r2, lsl #16
80010f88:	e1c39801 	bic	r9, r3, r1, lsl #16
80010f8c:	e003099c 	mul	r3, ip, r9
80010f90:	e0090992 	mul	r9, r2, r9
80010f94:	e00c0c91 	mul	ip, r1, ip
80010f98:	e0010192 	mul	r1, r2, r1
80010f9c:	e099c00c 	adds	ip, r9, ip
80010fa0:	22811801 	addcs	r1, r1, #65536	; 0x10000
80010fa4:	e093380c 	adds	r3, r3, ip, lsl #16
80010fa8:	e0a1182c 	adc	r1, r1, ip, lsr #16
80010fac:	e15e0001 	cmp	lr, r1
80010fb0:	3a000006 	bcc	80010fd0 <__divdi3+0x46c>
80010fb4:	13a02000 	movne	r2, #0
80010fb8:	03a02001 	moveq	r2, #1
80010fbc:	e1530415 	cmp	r3, r5, lsl r4
80010fc0:	93a09000 	movls	r9, #0
80010fc4:	82029001 	andhi	r9, r2, #1
80010fc8:	e3590000 	cmp	r9, #0
80010fcc:	0affff28 	beq	80010c74 <__divdi3+0x110>
80010fd0:	e2466001 	sub	r6, r6, #1
80010fd4:	e3a09000 	mov	r9, #0
80010fd8:	eaffff25 	b	80010c74 <__divdi3+0x110>
80010fdc:	e1520000 	cmp	r2, r0
80010fe0:	82466001 	subhi	r6, r6, #1
80010fe4:	8080000a 	addhi	r0, r0, sl
80010fe8:	eaffffe1 	b	80010f74 <__divdi3+0x410>
80010fec:	e1520001 	cmp	r2, r1
80010ff0:	82488001 	subhi	r8, r8, #1
80010ff4:	8081100a 	addhi	r1, r1, sl
80010ff8:	eaffffc8 	b	80010f20 <__divdi3+0x3bc>
80010ffc:	e1530006 	cmp	r3, r6
80011000:	824bb001 	subhi	fp, fp, #1
80011004:	80866004 	addhi	r6, r6, r4
80011008:	eaffff8e 	b	80010e48 <__divdi3+0x2e4>

8001100c <__udivdi3>:
8001100c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
80011010:	e2538000 	subs	r8, r3, #0
80011014:	e24dd00c 	sub	sp, sp, #12
80011018:	e1a05000 	mov	r5, r0
8001101c:	e1a04001 	mov	r4, r1
80011020:	e1a06002 	mov	r6, r2
80011024:	e1a0a002 	mov	sl, r2
80011028:	e1a0b000 	mov	fp, r0
8001102c:	e1a07001 	mov	r7, r1
80011030:	1a000037 	bne	80011114 <__udivdi3+0x108>
80011034:	e1520001 	cmp	r2, r1
80011038:	9a000045 	bls	80011154 <__udivdi3+0x148>
8001103c:	e1a00002 	mov	r0, r2
80011040:	eb0000fe 	bl	80011440 <__clzsi2>
80011044:	e3500000 	cmp	r0, #0
80011048:	12603020 	rsbne	r3, r0, #32
8001104c:	11a03335 	lsrne	r3, r5, r3
80011050:	11a0a016 	lslne	sl, r6, r0
80011054:	11837014 	orrne	r7, r3, r4, lsl r0
80011058:	e1a0482a 	lsr	r4, sl, #16
8001105c:	11a0b015 	lslne	fp, r5, r0
80011060:	e1a01004 	mov	r1, r4
80011064:	e1a00007 	mov	r0, r7
80011068:	ebffde06 	bl	80008888 <__aeabi_uidiv>
8001106c:	e1a01004 	mov	r1, r4
80011070:	e1a08000 	mov	r8, r0
80011074:	e1a00007 	mov	r0, r7
80011078:	ebffde3f 	bl	8000897c <__aeabi_uidivmod>
8001107c:	e1a0680a 	lsl	r6, sl, #16
80011080:	e1a06826 	lsr	r6, r6, #16
80011084:	e0030896 	mul	r3, r6, r8
80011088:	e1a0782b 	lsr	r7, fp, #16
8001108c:	e1877801 	orr	r7, r7, r1, lsl #16
80011090:	e1530007 	cmp	r3, r7
80011094:	9a000005 	bls	800110b0 <__udivdi3+0xa4>
80011098:	e097700a 	adds	r7, r7, sl
8001109c:	e2488001 	sub	r8, r8, #1
800110a0:	2a000002 	bcs	800110b0 <__udivdi3+0xa4>
800110a4:	e1530007 	cmp	r3, r7
800110a8:	82488001 	subhi	r8, r8, #1
800110ac:	8087700a 	addhi	r7, r7, sl
800110b0:	e0637007 	rsb	r7, r3, r7
800110b4:	e1a01004 	mov	r1, r4
800110b8:	e1a00007 	mov	r0, r7
800110bc:	ebffddf1 	bl	80008888 <__aeabi_uidiv>
800110c0:	e1a01004 	mov	r1, r4
800110c4:	e1a05000 	mov	r5, r0
800110c8:	e1a00007 	mov	r0, r7
800110cc:	ebffde2a 	bl	8000897c <__aeabi_uidivmod>
800110d0:	e0060695 	mul	r6, r5, r6
800110d4:	e1a0080b 	lsl	r0, fp, #16
800110d8:	e1a0b820 	lsr	fp, r0, #16
800110dc:	e18bb801 	orr	fp, fp, r1, lsl #16
800110e0:	e156000b 	cmp	r6, fp
800110e4:	9a000004 	bls	800110fc <__udivdi3+0xf0>
800110e8:	e09bb00a 	adds	fp, fp, sl
800110ec:	e2455001 	sub	r5, r5, #1
800110f0:	2a000001 	bcs	800110fc <__udivdi3+0xf0>
800110f4:	e156000b 	cmp	r6, fp
800110f8:	82455001 	subhi	r5, r5, #1
800110fc:	e1858808 	orr	r8, r5, r8, lsl #16
80011100:	e3a01000 	mov	r1, #0
80011104:	e1a00008 	mov	r0, r8
80011108:	e28dd00c 	add	sp, sp, #12
8001110c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
80011110:	e12fff1e 	bx	lr
80011114:	e1580001 	cmp	r8, r1
80011118:	83a01000 	movhi	r1, #0
8001111c:	81a08001 	movhi	r8, r1
80011120:	8afffff7 	bhi	80011104 <__udivdi3+0xf8>
80011124:	e1a00008 	mov	r0, r8
80011128:	eb0000c4 	bl	80011440 <__clzsi2>
8001112c:	e2507000 	subs	r7, r0, #0
80011130:	1a00003e 	bne	80011230 <__udivdi3+0x224>
80011134:	e1580004 	cmp	r8, r4
80011138:	21560005 	cmpcs	r6, r5
8001113c:	83a01000 	movhi	r1, #0
80011140:	93a01001 	movls	r1, #1
80011144:	93a08001 	movls	r8, #1
80011148:	91a01007 	movls	r1, r7
8001114c:	81a08001 	movhi	r8, r1
80011150:	eaffffeb 	b	80011104 <__udivdi3+0xf8>
80011154:	e3520000 	cmp	r2, #0
80011158:	1a000003 	bne	8001116c <__udivdi3+0x160>
8001115c:	e3a00001 	mov	r0, #1
80011160:	e1a01002 	mov	r1, r2
80011164:	ebffddc7 	bl	80008888 <__aeabi_uidiv>
80011168:	e1a0a000 	mov	sl, r0
8001116c:	e1a0000a 	mov	r0, sl
80011170:	eb0000b2 	bl	80011440 <__clzsi2>
80011174:	e2503000 	subs	r3, r0, #0
80011178:	1a000075 	bne	80011354 <__udivdi3+0x348>
8001117c:	e1a0180a 	lsl	r1, sl, #16
80011180:	e06a4004 	rsb	r4, sl, r4
80011184:	e1a0982a 	lsr	r9, sl, #16
80011188:	e1a06821 	lsr	r6, r1, #16
8001118c:	e3a07001 	mov	r7, #1
80011190:	e1a01009 	mov	r1, r9
80011194:	e1a00004 	mov	r0, r4
80011198:	ebffddba 	bl	80008888 <__aeabi_uidiv>
8001119c:	e1a01009 	mov	r1, r9
800111a0:	e1a05000 	mov	r5, r0
800111a4:	e1a00004 	mov	r0, r4
800111a8:	ebffddf3 	bl	8000897c <__aeabi_uidivmod>
800111ac:	e0030596 	mul	r3, r6, r5
800111b0:	e1a0282b 	lsr	r2, fp, #16
800111b4:	e1824801 	orr	r4, r2, r1, lsl #16
800111b8:	e1530004 	cmp	r3, r4
800111bc:	9a000005 	bls	800111d8 <__udivdi3+0x1cc>
800111c0:	e094400a 	adds	r4, r4, sl
800111c4:	e2455001 	sub	r5, r5, #1
800111c8:	2a000002 	bcs	800111d8 <__udivdi3+0x1cc>
800111cc:	e1530004 	cmp	r3, r4
800111d0:	82455001 	subhi	r5, r5, #1
800111d4:	8084400a 	addhi	r4, r4, sl
800111d8:	e0634004 	rsb	r4, r3, r4
800111dc:	e1a01009 	mov	r1, r9
800111e0:	e1a00004 	mov	r0, r4
800111e4:	ebffdda7 	bl	80008888 <__aeabi_uidiv>
800111e8:	e1a01009 	mov	r1, r9
800111ec:	e1a08000 	mov	r8, r0
800111f0:	e1a00004 	mov	r0, r4
800111f4:	ebffdde0 	bl	8000897c <__aeabi_uidivmod>
800111f8:	e0060698 	mul	r6, r8, r6
800111fc:	e1a0b80b 	lsl	fp, fp, #16
80011200:	e1a0382b 	lsr	r3, fp, #16
80011204:	e183b801 	orr	fp, r3, r1, lsl #16
80011208:	e156000b 	cmp	r6, fp
8001120c:	9a000004 	bls	80011224 <__udivdi3+0x218>
80011210:	e09bb00a 	adds	fp, fp, sl
80011214:	e2488001 	sub	r8, r8, #1
80011218:	2a000001 	bcs	80011224 <__udivdi3+0x218>
8001121c:	e156000b 	cmp	r6, fp
80011220:	82488001 	subhi	r8, r8, #1
80011224:	e1888805 	orr	r8, r8, r5, lsl #16
80011228:	e1a01007 	mov	r1, r7
8001122c:	eaffffb4 	b	80011104 <__udivdi3+0xf8>
80011230:	e267a020 	rsb	sl, r7, #32
80011234:	e1a01a36 	lsr	r1, r6, sl
80011238:	e1a02a35 	lsr	r2, r5, sl
8001123c:	e1818718 	orr	r8, r1, r8, lsl r7
80011240:	e1a0ba34 	lsr	fp, r4, sl
80011244:	e1829714 	orr	r9, r2, r4, lsl r7
80011248:	e1a0a828 	lsr	sl, r8, #16
8001124c:	e1a0e808 	lsl	lr, r8, #16
80011250:	e1a0100a 	mov	r1, sl
80011254:	e1a0000b 	mov	r0, fp
80011258:	e1a0482e 	lsr	r4, lr, #16
8001125c:	e58d9004 	str	r9, [sp, #4]
80011260:	ebffdd88 	bl	80008888 <__aeabi_uidiv>
80011264:	e1a0100a 	mov	r1, sl
80011268:	e1a09000 	mov	r9, r0
8001126c:	e1a0000b 	mov	r0, fp
80011270:	ebffddc1 	bl	8000897c <__aeabi_uidivmod>
80011274:	e0020994 	mul	r2, r4, r9
80011278:	e59d0004 	ldr	r0, [sp, #4]
8001127c:	e1a0c820 	lsr	ip, r0, #16
80011280:	e18cb801 	orr	fp, ip, r1, lsl #16
80011284:	e152000b 	cmp	r2, fp
80011288:	e1a03716 	lsl	r3, r6, r7
8001128c:	9a000002 	bls	8001129c <__udivdi3+0x290>
80011290:	e09bb008 	adds	fp, fp, r8
80011294:	e2499001 	sub	r9, r9, #1
80011298:	3a000060 	bcc	80011420 <__udivdi3+0x414>
8001129c:	e062b00b 	rsb	fp, r2, fp
800112a0:	e1a0100a 	mov	r1, sl
800112a4:	e1a0000b 	mov	r0, fp
800112a8:	e58d3000 	str	r3, [sp]
800112ac:	ebffdd75 	bl	80008888 <__aeabi_uidiv>
800112b0:	e1a0100a 	mov	r1, sl
800112b4:	e1a06000 	mov	r6, r0
800112b8:	e1a0000b 	mov	r0, fp
800112bc:	ebffddae 	bl	8000897c <__aeabi_uidivmod>
800112c0:	e0040496 	mul	r4, r6, r4
800112c4:	e59d0004 	ldr	r0, [sp, #4]
800112c8:	e1a0c800 	lsl	ip, r0, #16
800112cc:	e1a0382c 	lsr	r3, ip, #16
800112d0:	e1832801 	orr	r2, r3, r1, lsl #16
800112d4:	e1540002 	cmp	r4, r2
800112d8:	e59d3000 	ldr	r3, [sp]
800112dc:	9a000002 	bls	800112ec <__udivdi3+0x2e0>
800112e0:	e0922008 	adds	r2, r2, r8
800112e4:	e2466001 	sub	r6, r6, #1
800112e8:	3a000048 	bcc	80011410 <__udivdi3+0x404>
800112ec:	e0644002 	rsb	r4, r4, r2
800112f0:	e1868809 	orr	r8, r6, r9, lsl #16
800112f4:	e1a02828 	lsr	r2, r8, #16
800112f8:	e1a0e823 	lsr	lr, r3, #16
800112fc:	e1c80802 	bic	r0, r8, r2, lsl #16
80011300:	e1c3680e 	bic	r6, r3, lr, lsl #16
80011304:	e0030690 	mul	r3, r0, r6
80011308:	e0060692 	mul	r6, r2, r6
8001130c:	e000009e 	mul	r0, lr, r0
80011310:	e00e0e92 	mul	lr, r2, lr
80011314:	e0960000 	adds	r0, r6, r0
80011318:	228ee801 	addcs	lr, lr, #65536	; 0x10000
8001131c:	e0933800 	adds	r3, r3, r0, lsl #16
80011320:	e0aee820 	adc	lr, lr, r0, lsr #16
80011324:	e154000e 	cmp	r4, lr
80011328:	3a000006 	bcc	80011348 <__udivdi3+0x33c>
8001132c:	13a02000 	movne	r2, #0
80011330:	03a02001 	moveq	r2, #1
80011334:	e1530715 	cmp	r3, r5, lsl r7
80011338:	93a01000 	movls	r1, #0
8001133c:	82021001 	andhi	r1, r2, #1
80011340:	e3510000 	cmp	r1, #0
80011344:	0affff6e 	beq	80011104 <__udivdi3+0xf8>
80011348:	e2488001 	sub	r8, r8, #1
8001134c:	e3a01000 	mov	r1, #0
80011350:	eaffff6b 	b	80011104 <__udivdi3+0xf8>
80011354:	e2639020 	rsb	r9, r3, #32
80011358:	e1a0a31a 	lsl	sl, sl, r3
8001135c:	e1a07934 	lsr	r7, r4, r9
80011360:	e1a08935 	lsr	r8, r5, r9
80011364:	e1a0982a 	lsr	r9, sl, #16
80011368:	e1a0280a 	lsl	r2, sl, #16
8001136c:	e1a01009 	mov	r1, r9
80011370:	e1a00007 	mov	r0, r7
80011374:	e1888314 	orr	r8, r8, r4, lsl r3
80011378:	e1a0b315 	lsl	fp, r5, r3
8001137c:	e1a06822 	lsr	r6, r2, #16
80011380:	ebffdd40 	bl	80008888 <__aeabi_uidiv>
80011384:	e1a01009 	mov	r1, r9
80011388:	e1a05000 	mov	r5, r0
8001138c:	e1a00007 	mov	r0, r7
80011390:	ebffdd79 	bl	8000897c <__aeabi_uidivmod>
80011394:	e0030596 	mul	r3, r6, r5
80011398:	e1a04828 	lsr	r4, r8, #16
8001139c:	e1844801 	orr	r4, r4, r1, lsl #16
800113a0:	e1530004 	cmp	r3, r4
800113a4:	9a000002 	bls	800113b4 <__udivdi3+0x3a8>
800113a8:	e094400a 	adds	r4, r4, sl
800113ac:	e2455001 	sub	r5, r5, #1
800113b0:	3a00001e 	bcc	80011430 <__udivdi3+0x424>
800113b4:	e0634004 	rsb	r4, r3, r4
800113b8:	e1a01009 	mov	r1, r9
800113bc:	e1a00004 	mov	r0, r4
800113c0:	ebffdd30 	bl	80008888 <__aeabi_uidiv>
800113c4:	e1a01009 	mov	r1, r9
800113c8:	e1a07000 	mov	r7, r0
800113cc:	e1a00004 	mov	r0, r4
800113d0:	ebffdd69 	bl	8000897c <__aeabi_uidivmod>
800113d4:	e0030796 	mul	r3, r6, r7
800113d8:	e1a00808 	lsl	r0, r8, #16
800113dc:	e1a0c820 	lsr	ip, r0, #16
800113e0:	e18c4801 	orr	r4, ip, r1, lsl #16
800113e4:	e1530004 	cmp	r3, r4
800113e8:	9a000005 	bls	80011404 <__udivdi3+0x3f8>
800113ec:	e094400a 	adds	r4, r4, sl
800113f0:	e2477001 	sub	r7, r7, #1
800113f4:	2a000002 	bcs	80011404 <__udivdi3+0x3f8>
800113f8:	e1530004 	cmp	r3, r4
800113fc:	82477001 	subhi	r7, r7, #1
80011400:	8084400a 	addhi	r4, r4, sl
80011404:	e0634004 	rsb	r4, r3, r4
80011408:	e1877805 	orr	r7, r7, r5, lsl #16
8001140c:	eaffff5f 	b	80011190 <__udivdi3+0x184>
80011410:	e1540002 	cmp	r4, r2
80011414:	82466001 	subhi	r6, r6, #1
80011418:	80822008 	addhi	r2, r2, r8
8001141c:	eaffffb2 	b	800112ec <__udivdi3+0x2e0>
80011420:	e152000b 	cmp	r2, fp
80011424:	82499001 	subhi	r9, r9, #1
80011428:	808bb008 	addhi	fp, fp, r8
8001142c:	eaffff9a 	b	8001129c <__udivdi3+0x290>
80011430:	e1530004 	cmp	r3, r4
80011434:	82455001 	subhi	r5, r5, #1
80011438:	8084400a 	addhi	r4, r4, sl
8001143c:	eaffffdc 	b	800113b4 <__udivdi3+0x3a8>

80011440 <__clzsi2>:
80011440:	e3a0101c 	mov	r1, #28
80011444:	e3500801 	cmp	r0, #65536	; 0x10000
80011448:	21a00820 	lsrcs	r0, r0, #16
8001144c:	22411010 	subcs	r1, r1, #16
80011450:	e3500c01 	cmp	r0, #256	; 0x100
80011454:	21a00420 	lsrcs	r0, r0, #8
80011458:	22411008 	subcs	r1, r1, #8
8001145c:	e3500010 	cmp	r0, #16
80011460:	21a00220 	lsrcs	r0, r0, #4
80011464:	22411004 	subcs	r1, r1, #4
80011468:	e28f2008 	add	r2, pc, #8
8001146c:	e7d20000 	ldrb	r0, [r2, r0]
80011470:	e0800001 	add	r0, r0, r1
80011474:	e12fff1e 	bx	lr
80011478:	02020304 	.word	0x02020304
8001147c:	01010101 	.word	0x01010101
	...

Disassembly of section .init:

80011d70 <_init>:
80011d70:	e1a0c00d 	mov	ip, sp
80011d74:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
80011d78:	e24cb004 	sub	fp, ip, #4
80011d7c:	e24bd028 	sub	sp, fp, #40	; 0x28
80011d80:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
80011d84:	e12fff1e 	bx	lr

Disassembly of section .fini:

80011d88 <_fini>:
80011d88:	e1a0c00d 	mov	ip, sp
80011d8c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
80011d90:	e24cb004 	sub	fp, ip, #4
80011d94:	e24bd028 	sub	sp, fp, #40	; 0x28
80011d98:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, lr}
80011d9c:	e12fff1e 	bx	lr
